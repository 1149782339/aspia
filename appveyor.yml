version: "{build}"

branches:
  only:
    - master

skip_tags: true

max_jobs: 1

image: Visual Studio 2017

environment:
  ASPIA_DIR: &ASPIA_DIR c:\aspia
  CACHE_DIR: &CACHE_DIR c:\aspia_cache
  LIB_URL: https://aspia.ru/files/aspia/third_party_small.7z
  VER_URL: https://aspia.ru/files/aspia/third_party.txt

clone_folder: *ASPIA_DIR
clone_depth: 1

cache:
  - *CACHE_DIR

install:
  # Check the version of third-party libraries.
  - curl -o "c:\version.txt" "%VER_URL%"
  - set /p NEW_VERSION=<"c:\version.txt"
  - if exist "%CACHE_DIR%\version.txt" (set /p OLD_VERSION=<"%CACHE_DIR%\version.txt")
  - if not exist "%CACHE_DIR%\version.txt" (set UPDATE_CACHE=1)
  - if not "%OLD_VERSION%" == "%NEW_VERSION%" (set UPDATE_CACHE=1)

  # If need to update libraries.
  - if "%UPDATE_CACHE%" == "1" (echo "Cache is obsolete. Updating..." &&
    rmdir /S /Q "%CACHE_DIR%" & mkdir "%CACHE_DIR%" &&
    curl -o "%CACHE_DIR%\third_party.7z" "%LIB_URL%" &&
    copy "c:\version.txt" "%CACHE_DIR%\version.txt")

  # Unpack the cached libraries.
  - 7z x "%CACHE_DIR%\third_party.7z" -o"c:"
  - set ASPIA_THIRD_PARTY_DIR=c:\third_party

platform:
  - Win32

configuration:
  - Release
  - Debug

matrix:
  fast_finish: true

before_build:
  - cd /d %ASPIA_DIR%
  - mkdir build
  - cd build
  - cmake --version
  - cmake ..\source -G "Visual Studio 15 2017"

build:
  project: "%ASPIA_DIR%/build/aspia.sln"
  verbosity: minimal
  parallel: true

test: off
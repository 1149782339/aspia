// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {

void protobuf_ShutdownFile_auth_2eproto() {
  AuthRequest_default_instance_.Shutdown();
  AuthResult_default_instance_.Shutdown();
}

void protobuf_InitDefaults_auth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AuthRequest_default_instance_.DefaultConstruct();
  AuthResult_default_instance_.DefaultConstruct();
  AuthRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthResult_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_auth_2eproto_once_);
void protobuf_InitDefaults_auth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_auth_2eproto_once_,
                 &protobuf_InitDefaults_auth_2eproto_impl);
}
void protobuf_AddDesc_auth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_auth_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auth_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_auth_2eproto_once_);
void protobuf_AddDesc_auth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_auth_2eproto_once_,
                 &protobuf_AddDesc_auth_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auth_2eproto {
  StaticDescriptorInitializer_auth_2eproto() {
    protobuf_AddDesc_auth_2eproto();
  }
} static_descriptor_initializer_auth_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
bool AuthMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool SessionFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRequest::kMethodFieldNumber;
const int AuthRequest::kUsernameFieldNumber;
const int AuthRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRequest::AuthRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_auth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.AuthRequest)
}

void AuthRequest::InitAsDefaultInstance() {
}

AuthRequest::AuthRequest(const AuthRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.AuthRequest)
}

void AuthRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0u;
  _cached_size_ = 0;
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.AuthRequest)
  SharedDtor();
}

void AuthRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthRequest& AuthRequest::default_instance() {
  protobuf_InitDefaults_auth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthRequest> AuthRequest_default_instance_;

AuthRequest* AuthRequest::New(::google::protobuf::Arena* arena) const {
  AuthRequest* n = new AuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.AuthRequest)
  method_ = 0u;
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.AuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 method = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.AuthRequest.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.AuthRequest.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.AuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.AuthRequest)
  return false;
#undef DO_
}

void AuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.AuthRequest)
  // optional uint32 method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->method(), output);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.AuthRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.AuthRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.AuthRequest)
}

size_t AuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.AuthRequest)
  size_t total_size = 0;

  // optional uint32 method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->method());
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthRequest*>(&from));
}

void AuthRequest::MergeFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.AuthRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthRequest::UnsafeMergeFrom(const AuthRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.AuthRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthRequest::IsInitialized() const {

  return true;
}

void AuthRequest::Swap(AuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRequest::InternalSwap(AuthRequest* other) {
  std::swap(method_, other->method_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthRequest::GetTypeName() const {
  return "aspia.proto.AuthRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRequest

// optional uint32 method = 1;
void AuthRequest::clear_method() {
  method_ = 0u;
}
::google::protobuf::uint32 AuthRequest::method() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.method)
  return method_;
}
void AuthRequest::set_method(::google::protobuf::uint32 value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.method)
}

// optional string username = 2;
void AuthRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequest::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.username)
}
void AuthRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.username)
}
void AuthRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.username)
}
::std::string* AuthRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.username)
}

// optional string password = 3;
void AuthRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequest::password() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.password)
}
void AuthRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.password)
}
void AuthRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.password)
}
::std::string* AuthRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequest::release_password() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.password)
}

inline const AuthRequest* AuthRequest::internal_default_instance() {
  return &AuthRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResult::kSuccessFieldNumber;
const int AuthResult::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResult::AuthResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_auth_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.AuthResult)
}

void AuthResult::InitAsDefaultInstance() {
}

AuthResult::AuthResult(const AuthResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.AuthResult)
}

void AuthResult::SharedCtor() {
  ::memset(&success_, 0, reinterpret_cast<char*>(&features_) -
    reinterpret_cast<char*>(&success_) + sizeof(features_));
  _cached_size_ = 0;
}

AuthResult::~AuthResult() {
  // @@protoc_insertion_point(destructor:aspia.proto.AuthResult)
  SharedDtor();
}

void AuthResult::SharedDtor() {
}

void AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthResult& AuthResult::default_instance() {
  protobuf_InitDefaults_auth_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthResult> AuthResult_default_instance_;

AuthResult* AuthResult::New(::google::protobuf::Arena* arena) const {
  AuthResult* n = new AuthResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.AuthResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AuthResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AuthResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(success_, features_);

#undef ZR_HELPER_
#undef ZR_

}

bool AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.AuthResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_features;
        break;
      }

      // optional uint32 features = 2;
      case 2: {
        if (tag == 16) {
         parse_features:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &features_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.AuthResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.AuthResult)
  return false;
#undef DO_
}

void AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.AuthResult)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional uint32 features = 2;
  if (this->features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->features(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.AuthResult)
}

size_t AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.AuthResult)
  size_t total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 features = 2;
  if (this->features() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->features());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResult*>(&from));
}

void AuthResult::MergeFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.AuthResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthResult::UnsafeMergeFrom(const AuthResult& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.features() != 0) {
    set_features(from.features());
  }
}

void AuthResult::CopyFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.AuthResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthResult::IsInitialized() const {

  return true;
}

void AuthResult::Swap(AuthResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResult::InternalSwap(AuthResult* other) {
  std::swap(success_, other->success_);
  std::swap(features_, other->features_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthResult::GetTypeName() const {
  return "aspia.proto.AuthResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthResult

// optional bool success = 1;
void AuthResult::clear_success() {
  success_ = false;
}
bool AuthResult::success() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.success)
  return success_;
}
void AuthResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.success)
}

// optional uint32 features = 2;
void AuthResult::clear_features() {
  features_ = 0u;
}
::google::protobuf::uint32 AuthResult::features() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.features)
  return features_;
}
void AuthResult::set_features(::google::protobuf::uint32 value) {
  
  features_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.features)
}

inline const AuthResult* AuthResult::internal_default_instance() {
  return &AuthResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

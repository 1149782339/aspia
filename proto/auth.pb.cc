// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class AuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRequest> {
} _AuthRequest_default_instance_;
class AuthResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthResult> {
} _AuthResult_default_instance_;

namespace protobuf_auth_2eproto {


void TableStruct::Shutdown() {
  _AuthRequest_default_instance_.Shutdown();
  _AuthResult_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AuthRequest_default_instance_.DefaultConstruct();
  _AuthResult_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_auth_2eproto

bool AuthResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthResult_Status AuthResult::SUCCESS;
const AuthResult_Status AuthResult::ACCESS_DENIED;
const AuthResult_Status AuthResult::SESSION_DENIED;
const AuthResult_Status AuthResult::Status_MIN;
const AuthResult_Status AuthResult::Status_MAX;
const int AuthResult::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AuthMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRequest::kMethodFieldNumber;
const int AuthRequest::kUsernameFieldNumber;
const int AuthRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRequest::AuthRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_auth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.AuthRequest)
}
AuthRequest::AuthRequest(const AuthRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.AuthRequest)
}

void AuthRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
  _cached_size_ = 0;
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.AuthRequest)
  SharedDtor();
}

void AuthRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthRequest& AuthRequest::default_instance() {
  protobuf_auth_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRequest* AuthRequest::New(::google::protobuf::Arena* arena) const {
  AuthRequest* n = new AuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.AuthRequest)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
}

bool AuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.AuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.AuthMethod method = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::aspia::proto::AuthMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.AuthRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.AuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.AuthRequest)
  return false;
#undef DO_
}

void AuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.AuthRequest)
  // .aspia.proto.AuthMethod method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.AuthRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // bytes password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.AuthRequest)
}

size_t AuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.AuthRequest)
  size_t total_size = 0;

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  // .aspia.proto.AuthMethod method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthRequest*>(&from));
}

void AuthRequest::MergeFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.AuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.AuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  return true;
}

void AuthRequest::Swap(AuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRequest::InternalSwap(AuthRequest* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(method_, other->method_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthRequest::GetTypeName() const {
  return "aspia.proto.AuthRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRequest

// .aspia.proto.AuthMethod method = 1;
void AuthRequest::clear_method() {
  method_ = 0;
}
::aspia::proto::AuthMethod AuthRequest::method() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.method)
  return static_cast< ::aspia::proto::AuthMethod >(method_);
}
void AuthRequest::set_method(::aspia::proto::AuthMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.method)
}

// string username = 3;
void AuthRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequest::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.username)
  return username_.GetNoArena();
}
void AuthRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.username)
}
#if LANG_CXX11
void AuthRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.AuthRequest.username)
}
#endif
void AuthRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.username)
}
void AuthRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.username)
}
::std::string* AuthRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.username)
}

// bytes password = 4;
void AuthRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequest::password() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.password)
  return password_.GetNoArena();
}
void AuthRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.password)
}
#if LANG_CXX11
void AuthRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.AuthRequest.password)
}
#endif
void AuthRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.password)
}
void AuthRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.password)
}
::std::string* AuthRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequest::release_password() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResult::kStatusFieldNumber;
const int AuthResult::kSessionTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResult::AuthResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_auth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.AuthResult)
}
AuthResult::AuthResult(const AuthResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&status_) + sizeof(session_types_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.AuthResult)
}

void AuthResult::SharedCtor() {
  ::memset(&status_, 0, reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&status_) + sizeof(session_types_));
  _cached_size_ = 0;
}

AuthResult::~AuthResult() {
  // @@protoc_insertion_point(destructor:aspia.proto.AuthResult)
  SharedDtor();
}

void AuthResult::SharedDtor() {
}

void AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthResult& AuthResult::default_instance() {
  protobuf_auth_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthResult* AuthResult::New(::google::protobuf::Arena* arena) const {
  AuthResult* n = new AuthResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.AuthResult)
  ::memset(&status_, 0, reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&status_) + sizeof(session_types_));
}

bool AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.AuthResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.AuthResult.Status status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::AuthResult_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_types = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.AuthResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.AuthResult)
  return false;
#undef DO_
}

void AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.AuthResult)
  // .aspia.proto.AuthResult.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // uint32 session_types = 2;
  if (this->session_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_types(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.AuthResult)
}

size_t AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.AuthResult)
  size_t total_size = 0;

  // .aspia.proto.AuthResult.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 session_types = 2;
  if (this->session_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_types());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResult*>(&from));
}

void AuthResult::MergeFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.session_types() != 0) {
    set_session_types(from.session_types());
  }
}

void AuthResult::CopyFrom(const AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResult::IsInitialized() const {
  return true;
}

void AuthResult::Swap(AuthResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResult::InternalSwap(AuthResult* other) {
  std::swap(status_, other->status_);
  std::swap(session_types_, other->session_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthResult::GetTypeName() const {
  return "aspia.proto.AuthResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthResult

// .aspia.proto.AuthResult.Status status = 1;
void AuthResult::clear_status() {
  status_ = 0;
}
::aspia::proto::AuthResult_Status AuthResult::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.status)
  return static_cast< ::aspia::proto::AuthResult_Status >(status_);
}
void AuthResult::set_status(::aspia::proto::AuthResult_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.status)
}

// uint32 session_types = 2;
void AuthResult::clear_session_types() {
  session_types_ = 0u;
}
::google::protobuf::uint32 AuthResult::session_types() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.session_types)
  return session_types_;
}
void AuthResult::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.session_types)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

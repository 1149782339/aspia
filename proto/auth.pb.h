// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_auth_2eproto__INCLUDED
#define PROTOBUF_auth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class AuthRequest;
class AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResult;
class AuthResultDefaultTypeInternal;
extern AuthResultDefaultTypeInternal _AuthResult_default_instance_;
}  // namespace proto
}  // namespace aspia

namespace aspia {
namespace proto {

namespace protobuf_auth_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_auth_2eproto

enum AuthResult_Status {
  AuthResult_Status_SUCCESS = 0,
  AuthResult_Status_ACCESS_DENIED = 1,
  AuthResult_Status_SESSION_DENIED = 2,
  AuthResult_Status_AuthResult_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthResult_Status_AuthResult_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthResult_Status_IsValid(int value);
const AuthResult_Status AuthResult_Status_Status_MIN = AuthResult_Status_SUCCESS;
const AuthResult_Status AuthResult_Status_Status_MAX = AuthResult_Status_SESSION_DENIED;
const int AuthResult_Status_Status_ARRAYSIZE = AuthResult_Status_Status_MAX + 1;

enum AuthMethod {
  AUTH_METHOD_UNKNOWN = 0,
  AUTH_METHOD_BASIC = 1,
  AuthMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthMethod_IsValid(int value);
const AuthMethod AuthMethod_MIN = AUTH_METHOD_UNKNOWN;
const AuthMethod AuthMethod_MAX = AUTH_METHOD_BASIC;
const int AuthMethod_ARRAYSIZE = AuthMethod_MAX + 1;

enum SessionType {
  SESSION_NONE = 0,
  SESSION_DESKTOP_MANAGE = 1,
  SESSION_DESKTOP_VIEW = 2,
  SESSION_POWER_MANAGE = 4,
  SESSION_FILE_TRANSFER = 8,
  SessionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SessionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SessionType_IsValid(int value);
const SessionType SessionType_MIN = SESSION_NONE;
const SessionType SessionType_MAX = SESSION_FILE_TRANSFER;
const int SessionType_ARRAYSIZE = SessionType_MAX + 1;

// ===================================================================

class AuthRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.AuthRequest) */ {
 public:
  AuthRequest();
  virtual ~AuthRequest();

  AuthRequest(const AuthRequest& from);

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AuthRequest& default_instance();

  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }

  void Swap(AuthRequest* other);

  // implements Message ----------------------------------------------

  inline AuthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .aspia.proto.AuthMethod method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::aspia::proto::AuthMethod method() const;
  void set_method(::aspia::proto::AuthMethod value);

  // @@protoc_insertion_point(class_scope:aspia.proto.AuthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  int method_;
  mutable int _cached_size_;
  friend struct  protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.AuthResult) */ {
 public:
  AuthResult();
  virtual ~AuthResult();

  AuthResult(const AuthResult& from);

  inline AuthResult& operator=(const AuthResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const AuthResult& default_instance();

  static inline const AuthResult* internal_default_instance() {
    return reinterpret_cast<const AuthResult*>(
               &_AuthResult_default_instance_);
  }

  void Swap(AuthResult* other);

  // implements Message ----------------------------------------------

  inline AuthResult* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AuthResult& from);
  void MergeFrom(const AuthResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AuthResult_Status Status;
  static const Status SUCCESS =
    AuthResult_Status_SUCCESS;
  static const Status ACCESS_DENIED =
    AuthResult_Status_ACCESS_DENIED;
  static const Status SESSION_DENIED =
    AuthResult_Status_SESSION_DENIED;
  static inline bool Status_IsValid(int value) {
    return AuthResult_Status_IsValid(value);
  }
  static const Status Status_MIN =
    AuthResult_Status_Status_MIN;
  static const Status Status_MAX =
    AuthResult_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    AuthResult_Status_Status_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .aspia.proto.AuthResult.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::aspia::proto::AuthResult_Status status() const;
  void set_status(::aspia::proto::AuthResult_Status value);

  // uint32 session_types = 2;
  void clear_session_types();
  static const int kSessionTypesFieldNumber = 2;
  ::google::protobuf::uint32 session_types() const;
  void set_session_types(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.AuthResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int status_;
  ::google::protobuf::uint32 session_types_;
  mutable int _cached_size_;
  friend struct  protobuf_auth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRequest

// .aspia.proto.AuthMethod method = 1;
inline void AuthRequest::clear_method() {
  method_ = 0;
}
inline ::aspia::proto::AuthMethod AuthRequest::method() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.method)
  return static_cast< ::aspia::proto::AuthMethod >(method_);
}
inline void AuthRequest::set_method(::aspia::proto::AuthMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.method)
}

// string username = 3;
inline void AuthRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.username)
  return username_.GetNoArena();
}
inline void AuthRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.username)
}
#if LANG_CXX11
inline void AuthRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.AuthRequest.username)
}
#endif
inline void AuthRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.username)
}
inline void AuthRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.username)
}
inline ::std::string* AuthRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.username)
}

// bytes password = 4;
inline void AuthRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthRequest::password() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthRequest.password)
  return password_.GetNoArena();
}
inline void AuthRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.AuthRequest.password)
}
#if LANG_CXX11
inline void AuthRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.AuthRequest.password)
}
#endif
inline void AuthRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.AuthRequest.password)
}
inline void AuthRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.AuthRequest.password)
}
inline ::std::string* AuthRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.AuthRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_password() {
  // @@protoc_insertion_point(field_release:aspia.proto.AuthRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.AuthRequest.password)
}

// -------------------------------------------------------------------

// AuthResult

// .aspia.proto.AuthResult.Status status = 1;
inline void AuthResult::clear_status() {
  status_ = 0;
}
inline ::aspia::proto::AuthResult_Status AuthResult::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.status)
  return static_cast< ::aspia::proto::AuthResult_Status >(status_);
}
inline void AuthResult::set_status(::aspia::proto::AuthResult_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.status)
}

// uint32 session_types = 2;
inline void AuthResult::clear_session_types() {
  session_types_ = 0u;
}
inline ::google::protobuf::uint32 AuthResult::session_types() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthResult.session_types)
  return session_types_;
}
inline void AuthResult::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthResult.session_types)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace aspia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::AuthResult_Status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::AuthMethod> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::SessionType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auth_2eproto__INCLUDED

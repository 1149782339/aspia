// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_session.proto

#ifndef PROTOBUF_desktop_5fsession_2eproto__INCLUDED
#define PROTOBUF_desktop_5fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "proto.pb.h"
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class ClipboardEvent;
class ClipboardEventDefaultTypeInternal;
extern ClipboardEventDefaultTypeInternal _ClipboardEvent_default_instance_;
class CursorShape;
class CursorShapeDefaultTypeInternal;
extern CursorShapeDefaultTypeInternal _CursorShape_default_instance_;
class DesktopConfig;
class DesktopConfigDefaultTypeInternal;
extern DesktopConfigDefaultTypeInternal _DesktopConfig_default_instance_;
class DesktopConfigRequest;
class DesktopConfigRequestDefaultTypeInternal;
extern DesktopConfigRequestDefaultTypeInternal _DesktopConfigRequest_default_instance_;
class KeyEvent;
class KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class PointerEvent;
class PointerEventDefaultTypeInternal;
extern PointerEventDefaultTypeInternal _PointerEvent_default_instance_;
class PowerEvent;
class PowerEventDefaultTypeInternal;
extern PowerEventDefaultTypeInternal _PowerEvent_default_instance_;
class VideoPacket;
class VideoPacketDefaultTypeInternal;
extern VideoPacketDefaultTypeInternal _VideoPacket_default_instance_;
class VideoPixelFormat;
class VideoPixelFormatDefaultTypeInternal;
extern VideoPixelFormatDefaultTypeInternal _VideoPixelFormat_default_instance_;
class VideoRect;
class VideoRectDefaultTypeInternal;
extern VideoRectDefaultTypeInternal _VideoRect_default_instance_;
class VideoSize;
class VideoSizeDefaultTypeInternal;
extern VideoSizeDefaultTypeInternal _VideoSize_default_instance_;
namespace desktop {
class ClientToHost;
class ClientToHostDefaultTypeInternal;
extern ClientToHostDefaultTypeInternal _ClientToHost_default_instance_;
class HostToClient;
class HostToClientDefaultTypeInternal;
extern HostToClientDefaultTypeInternal _HostToClient_default_instance_;
}  // namespace desktop
}  // namespace proto
}  // namespace aspia

namespace aspia {
namespace proto {
namespace desktop {

namespace protobuf_desktop_5fsession_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_desktop_5fsession_2eproto

// ===================================================================

class HostToClient : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.desktop.HostToClient) */ {
 public:
  HostToClient();
  virtual ~HostToClient();

  HostToClient(const HostToClient& from);

  inline HostToClient& operator=(const HostToClient& from) {
    CopyFrom(from);
    return *this;
  }

  static const HostToClient& default_instance();

  static inline const HostToClient* internal_default_instance() {
    return reinterpret_cast<const HostToClient*>(
               &_HostToClient_default_instance_);
  }

  void Swap(HostToClient* other);

  // implements Message ----------------------------------------------

  inline HostToClient* New() const PROTOBUF_FINAL { return New(NULL); }

  HostToClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HostToClient& from);
  void MergeFrom(const HostToClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.VideoPacket video_packet = 1;
  bool has_video_packet() const;
  void clear_video_packet();
  static const int kVideoPacketFieldNumber = 1;
  const ::aspia::proto::VideoPacket& video_packet() const;
  ::aspia::proto::VideoPacket* mutable_video_packet();
  ::aspia::proto::VideoPacket* release_video_packet();
  void set_allocated_video_packet(::aspia::proto::VideoPacket* video_packet);

  // .aspia.proto.CursorShape cursor_shape = 2;
  bool has_cursor_shape() const;
  void clear_cursor_shape();
  static const int kCursorShapeFieldNumber = 2;
  const ::aspia::proto::CursorShape& cursor_shape() const;
  ::aspia::proto::CursorShape* mutable_cursor_shape();
  ::aspia::proto::CursorShape* release_cursor_shape();
  void set_allocated_cursor_shape(::aspia::proto::CursorShape* cursor_shape);

  // .aspia.proto.ClipboardEvent clipboard_event = 3;
  bool has_clipboard_event() const;
  void clear_clipboard_event();
  static const int kClipboardEventFieldNumber = 3;
  const ::aspia::proto::ClipboardEvent& clipboard_event() const;
  ::aspia::proto::ClipboardEvent* mutable_clipboard_event();
  ::aspia::proto::ClipboardEvent* release_clipboard_event();
  void set_allocated_clipboard_event(::aspia::proto::ClipboardEvent* clipboard_event);

  // .aspia.proto.DesktopConfigRequest config_request = 4;
  bool has_config_request() const;
  void clear_config_request();
  static const int kConfigRequestFieldNumber = 4;
  const ::aspia::proto::DesktopConfigRequest& config_request() const;
  ::aspia::proto::DesktopConfigRequest* mutable_config_request();
  ::aspia::proto::DesktopConfigRequest* release_config_request();
  void set_allocated_config_request(::aspia::proto::DesktopConfigRequest* config_request);

  // @@protoc_insertion_point(class_scope:aspia.proto.desktop.HostToClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::VideoPacket* video_packet_;
  ::aspia::proto::CursorShape* cursor_shape_;
  ::aspia::proto::ClipboardEvent* clipboard_event_;
  ::aspia::proto::DesktopConfigRequest* config_request_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientToHost : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.desktop.ClientToHost) */ {
 public:
  ClientToHost();
  virtual ~ClientToHost();

  ClientToHost(const ClientToHost& from);

  inline ClientToHost& operator=(const ClientToHost& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientToHost& default_instance();

  static inline const ClientToHost* internal_default_instance() {
    return reinterpret_cast<const ClientToHost*>(
               &_ClientToHost_default_instance_);
  }

  void Swap(ClientToHost* other);

  // implements Message ----------------------------------------------

  inline ClientToHost* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientToHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientToHost& from);
  void MergeFrom(const ClientToHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.PointerEvent pointer_event = 1;
  bool has_pointer_event() const;
  void clear_pointer_event();
  static const int kPointerEventFieldNumber = 1;
  const ::aspia::proto::PointerEvent& pointer_event() const;
  ::aspia::proto::PointerEvent* mutable_pointer_event();
  ::aspia::proto::PointerEvent* release_pointer_event();
  void set_allocated_pointer_event(::aspia::proto::PointerEvent* pointer_event);

  // .aspia.proto.KeyEvent key_event = 2;
  bool has_key_event() const;
  void clear_key_event();
  static const int kKeyEventFieldNumber = 2;
  const ::aspia::proto::KeyEvent& key_event() const;
  ::aspia::proto::KeyEvent* mutable_key_event();
  ::aspia::proto::KeyEvent* release_key_event();
  void set_allocated_key_event(::aspia::proto::KeyEvent* key_event);

  // .aspia.proto.ClipboardEvent clipboard_event = 3;
  bool has_clipboard_event() const;
  void clear_clipboard_event();
  static const int kClipboardEventFieldNumber = 3;
  const ::aspia::proto::ClipboardEvent& clipboard_event() const;
  ::aspia::proto::ClipboardEvent* mutable_clipboard_event();
  ::aspia::proto::ClipboardEvent* release_clipboard_event();
  void set_allocated_clipboard_event(::aspia::proto::ClipboardEvent* clipboard_event);

  // .aspia.proto.PowerEvent power_event = 4;
  bool has_power_event() const;
  void clear_power_event();
  static const int kPowerEventFieldNumber = 4;
  const ::aspia::proto::PowerEvent& power_event() const;
  ::aspia::proto::PowerEvent* mutable_power_event();
  ::aspia::proto::PowerEvent* release_power_event();
  void set_allocated_power_event(::aspia::proto::PowerEvent* power_event);

  // .aspia.proto.DesktopConfig config = 5;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 5;
  const ::aspia::proto::DesktopConfig& config() const;
  ::aspia::proto::DesktopConfig* mutable_config();
  ::aspia::proto::DesktopConfig* release_config();
  void set_allocated_config(::aspia::proto::DesktopConfig* config);

  // @@protoc_insertion_point(class_scope:aspia.proto.desktop.ClientToHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::PointerEvent* pointer_event_;
  ::aspia::proto::KeyEvent* key_event_;
  ::aspia::proto::ClipboardEvent* clipboard_event_;
  ::aspia::proto::PowerEvent* power_event_;
  ::aspia::proto::DesktopConfig* config_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HostToClient

// .aspia.proto.VideoPacket video_packet = 1;
inline bool HostToClient::has_video_packet() const {
  return this != internal_default_instance() && video_packet_ != NULL;
}
inline void HostToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
}
inline const ::aspia::proto::VideoPacket& HostToClient::video_packet() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.HostToClient.video_packet)
  return video_packet_ != NULL ? *video_packet_
                         : *::aspia::proto::VideoPacket::internal_default_instance();
}
inline ::aspia::proto::VideoPacket* HostToClient::mutable_video_packet() {
  
  if (video_packet_ == NULL) {
    video_packet_ = new ::aspia::proto::VideoPacket;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.HostToClient.video_packet)
  return video_packet_;
}
inline ::aspia::proto::VideoPacket* HostToClient::release_video_packet() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.HostToClient.video_packet)
  
  ::aspia::proto::VideoPacket* temp = video_packet_;
  video_packet_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_video_packet(::aspia::proto::VideoPacket* video_packet) {
  delete video_packet_;
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.HostToClient.video_packet)
}

// .aspia.proto.CursorShape cursor_shape = 2;
inline bool HostToClient::has_cursor_shape() const {
  return this != internal_default_instance() && cursor_shape_ != NULL;
}
inline void HostToClient::clear_cursor_shape() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) delete cursor_shape_;
  cursor_shape_ = NULL;
}
inline const ::aspia::proto::CursorShape& HostToClient::cursor_shape() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.HostToClient.cursor_shape)
  return cursor_shape_ != NULL ? *cursor_shape_
                         : *::aspia::proto::CursorShape::internal_default_instance();
}
inline ::aspia::proto::CursorShape* HostToClient::mutable_cursor_shape() {
  
  if (cursor_shape_ == NULL) {
    cursor_shape_ = new ::aspia::proto::CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.HostToClient.cursor_shape)
  return cursor_shape_;
}
inline ::aspia::proto::CursorShape* HostToClient::release_cursor_shape() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.HostToClient.cursor_shape)
  
  ::aspia::proto::CursorShape* temp = cursor_shape_;
  cursor_shape_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_cursor_shape(::aspia::proto::CursorShape* cursor_shape) {
  delete cursor_shape_;
  cursor_shape_ = cursor_shape;
  if (cursor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.HostToClient.cursor_shape)
}

// .aspia.proto.ClipboardEvent clipboard_event = 3;
inline bool HostToClient::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
inline void HostToClient::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
inline const ::aspia::proto::ClipboardEvent& HostToClient::clipboard_event() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.HostToClient.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::aspia::proto::ClipboardEvent::internal_default_instance();
}
inline ::aspia::proto::ClipboardEvent* HostToClient::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::aspia::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.HostToClient.clipboard_event)
  return clipboard_event_;
}
inline ::aspia::proto::ClipboardEvent* HostToClient::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.HostToClient.clipboard_event)
  
  ::aspia::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_clipboard_event(::aspia::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.HostToClient.clipboard_event)
}

// .aspia.proto.DesktopConfigRequest config_request = 4;
inline bool HostToClient::has_config_request() const {
  return this != internal_default_instance() && config_request_ != NULL;
}
inline void HostToClient::clear_config_request() {
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) delete config_request_;
  config_request_ = NULL;
}
inline const ::aspia::proto::DesktopConfigRequest& HostToClient::config_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.HostToClient.config_request)
  return config_request_ != NULL ? *config_request_
                         : *::aspia::proto::DesktopConfigRequest::internal_default_instance();
}
inline ::aspia::proto::DesktopConfigRequest* HostToClient::mutable_config_request() {
  
  if (config_request_ == NULL) {
    config_request_ = new ::aspia::proto::DesktopConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.HostToClient.config_request)
  return config_request_;
}
inline ::aspia::proto::DesktopConfigRequest* HostToClient::release_config_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.HostToClient.config_request)
  
  ::aspia::proto::DesktopConfigRequest* temp = config_request_;
  config_request_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_config_request(::aspia::proto::DesktopConfigRequest* config_request) {
  delete config_request_;
  config_request_ = config_request;
  if (config_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.HostToClient.config_request)
}

// -------------------------------------------------------------------

// ClientToHost

// .aspia.proto.PointerEvent pointer_event = 1;
inline bool ClientToHost::has_pointer_event() const {
  return this != internal_default_instance() && pointer_event_ != NULL;
}
inline void ClientToHost::clear_pointer_event() {
  if (GetArenaNoVirtual() == NULL && pointer_event_ != NULL) delete pointer_event_;
  pointer_event_ = NULL;
}
inline const ::aspia::proto::PointerEvent& ClientToHost::pointer_event() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.ClientToHost.pointer_event)
  return pointer_event_ != NULL ? *pointer_event_
                         : *::aspia::proto::PointerEvent::internal_default_instance();
}
inline ::aspia::proto::PointerEvent* ClientToHost::mutable_pointer_event() {
  
  if (pointer_event_ == NULL) {
    pointer_event_ = new ::aspia::proto::PointerEvent;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.ClientToHost.pointer_event)
  return pointer_event_;
}
inline ::aspia::proto::PointerEvent* ClientToHost::release_pointer_event() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.ClientToHost.pointer_event)
  
  ::aspia::proto::PointerEvent* temp = pointer_event_;
  pointer_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_pointer_event(::aspia::proto::PointerEvent* pointer_event) {
  delete pointer_event_;
  pointer_event_ = pointer_event;
  if (pointer_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.ClientToHost.pointer_event)
}

// .aspia.proto.KeyEvent key_event = 2;
inline bool ClientToHost::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
inline void ClientToHost::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
inline const ::aspia::proto::KeyEvent& ClientToHost::key_event() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.ClientToHost.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::aspia::proto::KeyEvent::internal_default_instance();
}
inline ::aspia::proto::KeyEvent* ClientToHost::mutable_key_event() {
  
  if (key_event_ == NULL) {
    key_event_ = new ::aspia::proto::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.ClientToHost.key_event)
  return key_event_;
}
inline ::aspia::proto::KeyEvent* ClientToHost::release_key_event() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.ClientToHost.key_event)
  
  ::aspia::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_key_event(::aspia::proto::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.ClientToHost.key_event)
}

// .aspia.proto.ClipboardEvent clipboard_event = 3;
inline bool ClientToHost::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
inline void ClientToHost::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
inline const ::aspia::proto::ClipboardEvent& ClientToHost::clipboard_event() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.ClientToHost.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::aspia::proto::ClipboardEvent::internal_default_instance();
}
inline ::aspia::proto::ClipboardEvent* ClientToHost::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::aspia::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.ClientToHost.clipboard_event)
  return clipboard_event_;
}
inline ::aspia::proto::ClipboardEvent* ClientToHost::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.ClientToHost.clipboard_event)
  
  ::aspia::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_clipboard_event(::aspia::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.ClientToHost.clipboard_event)
}

// .aspia.proto.PowerEvent power_event = 4;
inline bool ClientToHost::has_power_event() const {
  return this != internal_default_instance() && power_event_ != NULL;
}
inline void ClientToHost::clear_power_event() {
  if (GetArenaNoVirtual() == NULL && power_event_ != NULL) delete power_event_;
  power_event_ = NULL;
}
inline const ::aspia::proto::PowerEvent& ClientToHost::power_event() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.ClientToHost.power_event)
  return power_event_ != NULL ? *power_event_
                         : *::aspia::proto::PowerEvent::internal_default_instance();
}
inline ::aspia::proto::PowerEvent* ClientToHost::mutable_power_event() {
  
  if (power_event_ == NULL) {
    power_event_ = new ::aspia::proto::PowerEvent;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.ClientToHost.power_event)
  return power_event_;
}
inline ::aspia::proto::PowerEvent* ClientToHost::release_power_event() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.ClientToHost.power_event)
  
  ::aspia::proto::PowerEvent* temp = power_event_;
  power_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_power_event(::aspia::proto::PowerEvent* power_event) {
  delete power_event_;
  power_event_ = power_event;
  if (power_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.ClientToHost.power_event)
}

// .aspia.proto.DesktopConfig config = 5;
inline bool ClientToHost::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void ClientToHost::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::aspia::proto::DesktopConfig& ClientToHost::config() const {
  // @@protoc_insertion_point(field_get:aspia.proto.desktop.ClientToHost.config)
  return config_ != NULL ? *config_
                         : *::aspia::proto::DesktopConfig::internal_default_instance();
}
inline ::aspia::proto::DesktopConfig* ClientToHost::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::aspia::proto::DesktopConfig;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.desktop.ClientToHost.config)
  return config_;
}
inline ::aspia::proto::DesktopConfig* ClientToHost::release_config() {
  // @@protoc_insertion_point(field_release:aspia.proto.desktop.ClientToHost.config)
  
  ::aspia::proto::DesktopConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_config(::aspia::proto::DesktopConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.desktop.ClientToHost.config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace desktop
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_desktop_5fsession_2eproto__INCLUDED

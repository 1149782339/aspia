// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "desktop_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class KeyEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent> {
} _KeyEvent_default_instance_;
class PointerEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointerEvent> {
} _PointerEvent_default_instance_;
class ClipboardEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClipboardEvent> {
} _ClipboardEvent_default_instance_;
class CursorShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CursorShape> {
} _CursorShape_default_instance_;
class VideoRectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoRect> {
} _VideoRect_default_instance_;
class VideoPixelFormatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPixelFormat> {
} _VideoPixelFormat_default_instance_;
class VideoSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoSize> {
} _VideoSize_default_instance_;
class VideoPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPacket> {
} _VideoPacket_default_instance_;
class AudioPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioPacket> {
} _AudioPacket_default_instance_;
class DesktopSessionConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopSessionConfigRequest> {
} _DesktopSessionConfigRequest_default_instance_;
class DesktopSessionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopSessionConfig> {
} _DesktopSessionConfig_default_instance_;

namespace protobuf_desktop_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _KeyEvent_default_instance_.Shutdown();
  _PointerEvent_default_instance_.Shutdown();
  _ClipboardEvent_default_instance_.Shutdown();
  _CursorShape_default_instance_.Shutdown();
  _VideoRect_default_instance_.Shutdown();
  _VideoPixelFormat_default_instance_.Shutdown();
  _VideoSize_default_instance_.Shutdown();
  _VideoPacket_default_instance_.Shutdown();
  _AudioPacket_default_instance_.Shutdown();
  _DesktopSessionConfigRequest_default_instance_.Shutdown();
  _DesktopSessionConfig_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _KeyEvent_default_instance_.DefaultConstruct();
  _PointerEvent_default_instance_.DefaultConstruct();
  _ClipboardEvent_default_instance_.DefaultConstruct();
  _CursorShape_default_instance_.DefaultConstruct();
  _VideoRect_default_instance_.DefaultConstruct();
  _VideoPixelFormat_default_instance_.DefaultConstruct();
  _VideoSize_default_instance_.DefaultConstruct();
  _VideoPacket_default_instance_.DefaultConstruct();
  _AudioPacket_default_instance_.DefaultConstruct();
  _DesktopSessionConfigRequest_default_instance_.DefaultConstruct();
  _DesktopSessionConfig_default_instance_.DefaultConstruct();
  _VideoPacket_default_instance_.get_mutable()->screen_size_ = const_cast< ::aspia::proto::VideoSize*>(
      ::aspia::proto::VideoSize::internal_default_instance());
  _VideoPacket_default_instance_.get_mutable()->pixel_format_ = const_cast< ::aspia::proto::VideoPixelFormat*>(
      ::aspia::proto::VideoPixelFormat::internal_default_instance());
  _DesktopSessionConfig_default_instance_.get_mutable()->pixel_format_ = const_cast< ::aspia::proto::VideoPixelFormat*>(
      ::aspia::proto::VideoPixelFormat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_desktop_5fsession_5fmessage_2eproto

bool KeyEvent_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_Flags KeyEvent::UNKNOWN;
const KeyEvent_Flags KeyEvent::CAPSLOCK;
const KeyEvent_Flags KeyEvent::NUMLOCK;
const KeyEvent_Flags KeyEvent::EXTENDED;
const KeyEvent_Flags KeyEvent::PRESSED;
const KeyEvent_Flags KeyEvent::Flags_MIN;
const KeyEvent_Flags KeyEvent::Flags_MAX;
const int KeyEvent::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PointerEvent_ButtonMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PointerEvent_ButtonMask PointerEvent::EMPTY;
const PointerEvent_ButtonMask PointerEvent::LEFT_BUTTON;
const PointerEvent_ButtonMask PointerEvent::MIDDLE_BUTTON;
const PointerEvent_ButtonMask PointerEvent::RIGHT_BUTTON;
const PointerEvent_ButtonMask PointerEvent::WHEEL_UP;
const PointerEvent_ButtonMask PointerEvent::WHEEL_DOWN;
const PointerEvent_ButtonMask PointerEvent::ButtonMask_MIN;
const PointerEvent_ButtonMask PointerEvent::ButtonMask_MAX;
const int PointerEvent::ButtonMask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CursorShape_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CursorShape_Flags CursorShape::UNKNOWN;
const CursorShape_Flags CursorShape::RESET_CACHE;
const CursorShape_Flags CursorShape::CACHE;
const CursorShape_Flags CursorShape::Flags_MIN;
const CursorShape_Flags CursorShape::Flags_MAX;
const int CursorShape::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DesktopSessionConfig_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DesktopSessionConfig_Flags DesktopSessionConfig::ENABLE_NONE;
const DesktopSessionConfig_Flags DesktopSessionConfig::ENABLE_CURSOR_SHAPE;
const DesktopSessionConfig_Flags DesktopSessionConfig::ENABLE_CLIPBOARD;
const DesktopSessionConfig_Flags DesktopSessionConfig::ENABLE_AUDIO;
const DesktopSessionConfig_Flags DesktopSessionConfig::Flags_MIN;
const DesktopSessionConfig_Flags DesktopSessionConfig::Flags_MAX;
const int DesktopSessionConfig::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VideoEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DesktopSessionFeatures_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kKeycodeFieldNumber;
const int KeyEvent::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keycode_, &from.keycode_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&keycode_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::memset(&keycode_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&keycode_) + sizeof(flags_));
  _cached_size_ = 0;
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyEvent& KeyEvent::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyEvent* KeyEvent::New(::google::protobuf::Arena* arena) const {
  KeyEvent* n = new KeyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.KeyEvent)
  ::memset(&keycode_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&keycode_) + sizeof(flags_));
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 keycode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keycode = 1;
  if (this->keycode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keycode(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.KeyEvent)
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.KeyEvent)
  size_t total_size = 0;

  // uint32 keycode = 1;
  if (this->keycode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keycode());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keycode() != 0) {
    set_keycode(from.keycode());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  std::swap(keycode_, other->keycode_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeyEvent::GetTypeName() const {
  return "aspia.proto.KeyEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent

// uint32 keycode = 1;
void KeyEvent::clear_keycode() {
  keycode_ = 0u;
}
::google::protobuf::uint32 KeyEvent::keycode() const {
  // @@protoc_insertion_point(field_get:aspia.proto.KeyEvent.keycode)
  return keycode_;
}
void KeyEvent::set_keycode(::google::protobuf::uint32 value) {
  
  keycode_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.KeyEvent.keycode)
}

// uint32 flags = 2;
void KeyEvent::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 KeyEvent::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.KeyEvent.flags)
  return flags_;
}
void KeyEvent::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.KeyEvent.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointerEvent::kMaskFieldNumber;
const int PointerEvent::kXFieldNumber;
const int PointerEvent::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointerEvent::PointerEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.PointerEvent)
}
PointerEvent::PointerEvent(const PointerEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mask_, &from.mask_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.PointerEvent)
}

void PointerEvent::SharedCtor() {
  ::memset(&mask_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
  _cached_size_ = 0;
}

PointerEvent::~PointerEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.PointerEvent)
  SharedDtor();
}

void PointerEvent::SharedDtor() {
}

void PointerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PointerEvent& PointerEvent::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointerEvent* PointerEvent::New(::google::protobuf::Arena* arena) const {
  PointerEvent* n = new PointerEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.PointerEvent)
  ::memset(&mask_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
}

bool PointerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.PointerEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.PointerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.PointerEvent)
  return false;
#undef DO_
}

void PointerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.PointerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mask = 1;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mask(), output);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.PointerEvent)
}

size_t PointerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.PointerEvent)
  size_t total_size = 0;

  // uint32 mask = 1;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointerEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointerEvent*>(&from));
}

void PointerEvent::MergeFrom(const PointerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.PointerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mask() != 0) {
    set_mask(from.mask());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PointerEvent::CopyFrom(const PointerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.PointerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointerEvent::IsInitialized() const {
  return true;
}

void PointerEvent::Swap(PointerEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointerEvent::InternalSwap(PointerEvent* other) {
  std::swap(mask_, other->mask_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PointerEvent::GetTypeName() const {
  return "aspia.proto.PointerEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointerEvent

// uint32 mask = 1;
void PointerEvent::clear_mask() {
  mask_ = 0u;
}
::google::protobuf::uint32 PointerEvent::mask() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.mask)
  return mask_;
}
void PointerEvent::set_mask(::google::protobuf::uint32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.mask)
}

// int32 x = 2;
void PointerEvent::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 PointerEvent::x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.x)
  return x_;
}
void PointerEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.x)
}

// int32 y = 3;
void PointerEvent::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 PointerEvent::y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.y)
  return y_;
}
void PointerEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipboardEvent::kMimeTypeFieldNumber;
const int ClipboardEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipboardEvent::ClipboardEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.ClipboardEvent)
}
ClipboardEvent::ClipboardEvent(const ClipboardEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mime_type().size() > 0) {
    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.ClipboardEvent)
}

void ClipboardEvent::SharedCtor() {
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClipboardEvent::~ClipboardEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.ClipboardEvent)
  SharedDtor();
}

void ClipboardEvent::SharedDtor() {
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClipboardEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipboardEvent& ClipboardEvent::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClipboardEvent* ClipboardEvent::New(::google::protobuf::Arena* arena) const {
  ClipboardEvent* n = new ClipboardEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClipboardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.ClipboardEvent)
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClipboardEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.ClipboardEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mime_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.ClipboardEvent.mime_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.ClipboardEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.ClipboardEvent)
  return false;
#undef DO_
}

void ClipboardEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.ClipboardEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.ClipboardEvent.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.ClipboardEvent)
}

size_t ClipboardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.ClipboardEvent)
  size_t total_size = 0;

  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipboardEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardEvent*>(&from));
}

void ClipboardEvent::MergeFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.ClipboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mime_type().size() > 0) {

    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ClipboardEvent::CopyFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.ClipboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardEvent::IsInitialized() const {
  return true;
}

void ClipboardEvent::Swap(ClipboardEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClipboardEvent::InternalSwap(ClipboardEvent* other) {
  mime_type_.Swap(&other->mime_type_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClipboardEvent::GetTypeName() const {
  return "aspia.proto.ClipboardEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClipboardEvent

// string mime_type = 1;
void ClipboardEvent::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClipboardEvent::mime_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClipboardEvent.mime_type)
  return mime_type_.GetNoArena();
}
void ClipboardEvent::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClipboardEvent.mime_type)
}
#if LANG_CXX11
void ClipboardEvent::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClipboardEvent.mime_type)
}
#endif
void ClipboardEvent::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClipboardEvent.mime_type)
}
void ClipboardEvent::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClipboardEvent.mime_type)
}
::std::string* ClipboardEvent::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClipboardEvent.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClipboardEvent::release_mime_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClipboardEvent.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClipboardEvent::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClipboardEvent.mime_type)
}

// bytes data = 2;
void ClipboardEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClipboardEvent::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClipboardEvent.data)
  return data_.GetNoArena();
}
void ClipboardEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClipboardEvent.data)
}
#if LANG_CXX11
void ClipboardEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClipboardEvent.data)
}
#endif
void ClipboardEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClipboardEvent.data)
}
void ClipboardEvent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClipboardEvent.data)
}
::std::string* ClipboardEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClipboardEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClipboardEvent::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClipboardEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClipboardEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClipboardEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorShape::kFlagsFieldNumber;
const int CursorShape::kWidthFieldNumber;
const int CursorShape::kHeightFieldNumber;
const int CursorShape::kHotspotXFieldNumber;
const int CursorShape::kHotspotYFieldNumber;
const int CursorShape::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorShape::CursorShape()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.CursorShape)
}
CursorShape::CursorShape(const CursorShape& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.CursorShape)
}

void CursorShape::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
  _cached_size_ = 0;
}

CursorShape::~CursorShape() {
  // @@protoc_insertion_point(destructor:aspia.proto.CursorShape)
  SharedDtor();
}

void CursorShape::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CursorShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorShape& CursorShape::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CursorShape* CursorShape::New(::google::protobuf::Arena* arena) const {
  CursorShape* n = new CursorShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CursorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.CursorShape)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
}

bool CursorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.CursorShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.CursorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.CursorShape)
  return false;
#undef DO_
}

void CursorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.CursorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hotspot_x(), output);
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hotspot_y(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.CursorShape)
}

size_t CursorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.CursorShape)
  size_t total_size = 0;

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_x());
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorShape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorShape*>(&from));
}

void CursorShape::MergeFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.CursorShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hotspot_x() != 0) {
    set_hotspot_x(from.hotspot_x());
  }
  if (from.hotspot_y() != 0) {
    set_hotspot_y(from.hotspot_y());
  }
}

void CursorShape::CopyFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.CursorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorShape::IsInitialized() const {
  return true;
}

void CursorShape::Swap(CursorShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CursorShape::InternalSwap(CursorShape* other) {
  data_.Swap(&other->data_);
  std::swap(flags_, other->flags_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(hotspot_x_, other->hotspot_x_);
  std::swap(hotspot_y_, other->hotspot_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CursorShape::GetTypeName() const {
  return "aspia.proto.CursorShape";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CursorShape

// uint32 flags = 1;
void CursorShape::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 CursorShape::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.flags)
  return flags_;
}
void CursorShape::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.flags)
}

// int32 width = 2;
void CursorShape::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.width)
  return width_;
}
void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.width)
}

// int32 height = 3;
void CursorShape::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.height)
  return height_;
}
void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.height)
}

// int32 hotspot_x = 4;
void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.hotspot_x)
}

// int32 hotspot_y = 5;
void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.hotspot_y)
}

// bytes data = 6;
void CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CursorShape::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.data)
  return data_.GetNoArena();
}
void CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.data)
}
#if LANG_CXX11
void CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CursorShape.data)
}
#endif
void CursorShape::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CursorShape.data)
}
void CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CursorShape.data)
}
::std::string* CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CursorShape.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRect::kXFieldNumber;
const int VideoRect::kYFieldNumber;
const int VideoRect::kWidthFieldNumber;
const int VideoRect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRect::VideoRect()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.VideoRect)
}
VideoRect::VideoRect(const VideoRect& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.VideoRect)
}

void VideoRect::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  _cached_size_ = 0;
}

VideoRect::~VideoRect() {
  // @@protoc_insertion_point(destructor:aspia.proto.VideoRect)
  SharedDtor();
}

void VideoRect::SharedDtor() {
}

void VideoRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoRect& VideoRect::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoRect* VideoRect::New(::google::protobuf::Arena* arena) const {
  VideoRect* n = new VideoRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoRect::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.VideoRect)
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
}

bool VideoRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.VideoRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.VideoRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.VideoRect)
  return false;
#undef DO_
}

void VideoRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.VideoRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.VideoRect)
}

size_t VideoRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.VideoRect)
  size_t total_size = 0;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoRect*>(&from));
}

void VideoRect::MergeFrom(const VideoRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.VideoRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoRect::CopyFrom(const VideoRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.VideoRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRect::IsInitialized() const {
  return true;
}

void VideoRect::Swap(VideoRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRect::InternalSwap(VideoRect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoRect::GetTypeName() const {
  return "aspia.proto.VideoRect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRect

// int32 x = 1;
void VideoRect::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 VideoRect::x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.x)
  return x_;
}
void VideoRect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.x)
}

// int32 y = 2;
void VideoRect::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 VideoRect::y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.y)
  return y_;
}
void VideoRect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.y)
}

// int32 width = 3;
void VideoRect::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 VideoRect::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.width)
  return width_;
}
void VideoRect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.width)
}

// int32 height = 4;
void VideoRect::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 VideoRect::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.height)
  return height_;
}
void VideoRect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPixelFormat::kBitsPerPixelFieldNumber;
const int VideoPixelFormat::kRedMaxFieldNumber;
const int VideoPixelFormat::kGreenMaxFieldNumber;
const int VideoPixelFormat::kBlueMaxFieldNumber;
const int VideoPixelFormat::kRedShiftFieldNumber;
const int VideoPixelFormat::kGreenShiftFieldNumber;
const int VideoPixelFormat::kBlueShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPixelFormat::VideoPixelFormat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.VideoPixelFormat)
}
VideoPixelFormat::VideoPixelFormat(const VideoPixelFormat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bits_per_pixel_, &from.bits_per_pixel_,
    reinterpret_cast<char*>(&blue_shift_) -
    reinterpret_cast<char*>(&bits_per_pixel_) + sizeof(blue_shift_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.VideoPixelFormat)
}

void VideoPixelFormat::SharedCtor() {
  ::memset(&bits_per_pixel_, 0, reinterpret_cast<char*>(&blue_shift_) -
    reinterpret_cast<char*>(&bits_per_pixel_) + sizeof(blue_shift_));
  _cached_size_ = 0;
}

VideoPixelFormat::~VideoPixelFormat() {
  // @@protoc_insertion_point(destructor:aspia.proto.VideoPixelFormat)
  SharedDtor();
}

void VideoPixelFormat::SharedDtor() {
}

void VideoPixelFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPixelFormat& VideoPixelFormat::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPixelFormat* VideoPixelFormat::New(::google::protobuf::Arena* arena) const {
  VideoPixelFormat* n = new VideoPixelFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPixelFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.VideoPixelFormat)
  ::memset(&bits_per_pixel_, 0, reinterpret_cast<char*>(&blue_shift_) -
    reinterpret_cast<char*>(&bits_per_pixel_) + sizeof(blue_shift_));
}

bool VideoPixelFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.VideoPixelFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bits_per_pixel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_per_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 red_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 red_shift = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green_shift = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue_shift = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.VideoPixelFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.VideoPixelFormat)
  return false;
#undef DO_
}

void VideoPixelFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.VideoPixelFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bits_per_pixel(), output);
  }

  // uint32 red_max = 2;
  if (this->red_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->red_max(), output);
  }

  // uint32 green_max = 3;
  if (this->green_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->green_max(), output);
  }

  // uint32 blue_max = 4;
  if (this->blue_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue_max(), output);
  }

  // uint32 red_shift = 5;
  if (this->red_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_shift(), output);
  }

  // uint32 green_shift = 6;
  if (this->green_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->green_shift(), output);
  }

  // uint32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->blue_shift(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.VideoPixelFormat)
}

size_t VideoPixelFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.VideoPixelFormat)
  size_t total_size = 0;

  // uint32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits_per_pixel());
  }

  // uint32 red_max = 2;
  if (this->red_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_max());
  }

  // uint32 green_max = 3;
  if (this->green_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green_max());
  }

  // uint32 blue_max = 4;
  if (this->blue_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue_max());
  }

  // uint32 red_shift = 5;
  if (this->red_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_shift());
  }

  // uint32 green_shift = 6;
  if (this->green_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green_shift());
  }

  // uint32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue_shift());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPixelFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPixelFormat*>(&from));
}

void VideoPixelFormat::MergeFrom(const VideoPixelFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.VideoPixelFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bits_per_pixel() != 0) {
    set_bits_per_pixel(from.bits_per_pixel());
  }
  if (from.red_max() != 0) {
    set_red_max(from.red_max());
  }
  if (from.green_max() != 0) {
    set_green_max(from.green_max());
  }
  if (from.blue_max() != 0) {
    set_blue_max(from.blue_max());
  }
  if (from.red_shift() != 0) {
    set_red_shift(from.red_shift());
  }
  if (from.green_shift() != 0) {
    set_green_shift(from.green_shift());
  }
  if (from.blue_shift() != 0) {
    set_blue_shift(from.blue_shift());
  }
}

void VideoPixelFormat::CopyFrom(const VideoPixelFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.VideoPixelFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPixelFormat::IsInitialized() const {
  return true;
}

void VideoPixelFormat::Swap(VideoPixelFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPixelFormat::InternalSwap(VideoPixelFormat* other) {
  std::swap(bits_per_pixel_, other->bits_per_pixel_);
  std::swap(red_max_, other->red_max_);
  std::swap(green_max_, other->green_max_);
  std::swap(blue_max_, other->blue_max_);
  std::swap(red_shift_, other->red_shift_);
  std::swap(green_shift_, other->green_shift_);
  std::swap(blue_shift_, other->blue_shift_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPixelFormat::GetTypeName() const {
  return "aspia.proto.VideoPixelFormat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPixelFormat

// uint32 bits_per_pixel = 1;
void VideoPixelFormat::clear_bits_per_pixel() {
  bits_per_pixel_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.bits_per_pixel)
  return bits_per_pixel_;
}
void VideoPixelFormat::set_bits_per_pixel(::google::protobuf::uint32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.bits_per_pixel)
}

// uint32 red_max = 2;
void VideoPixelFormat::clear_red_max() {
  red_max_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::red_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_max)
  return red_max_;
}
void VideoPixelFormat::set_red_max(::google::protobuf::uint32 value) {
  
  red_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_max)
}

// uint32 green_max = 3;
void VideoPixelFormat::clear_green_max() {
  green_max_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::green_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_max)
  return green_max_;
}
void VideoPixelFormat::set_green_max(::google::protobuf::uint32 value) {
  
  green_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_max)
}

// uint32 blue_max = 4;
void VideoPixelFormat::clear_blue_max() {
  blue_max_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::blue_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_max)
  return blue_max_;
}
void VideoPixelFormat::set_blue_max(::google::protobuf::uint32 value) {
  
  blue_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_max)
}

// uint32 red_shift = 5;
void VideoPixelFormat::clear_red_shift() {
  red_shift_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::red_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_shift)
  return red_shift_;
}
void VideoPixelFormat::set_red_shift(::google::protobuf::uint32 value) {
  
  red_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_shift)
}

// uint32 green_shift = 6;
void VideoPixelFormat::clear_green_shift() {
  green_shift_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::green_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_shift)
  return green_shift_;
}
void VideoPixelFormat::set_green_shift(::google::protobuf::uint32 value) {
  
  green_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_shift)
}

// uint32 blue_shift = 7;
void VideoPixelFormat::clear_blue_shift() {
  blue_shift_ = 0u;
}
::google::protobuf::uint32 VideoPixelFormat::blue_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_shift)
  return blue_shift_;
}
void VideoPixelFormat::set_blue_shift(::google::protobuf::uint32 value) {
  
  blue_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSize::kWidthFieldNumber;
const int VideoSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSize::VideoSize()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.VideoSize)
}
VideoSize::VideoSize(const VideoSize& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.VideoSize)
}

void VideoSize::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

VideoSize::~VideoSize() {
  // @@protoc_insertion_point(destructor:aspia.proto.VideoSize)
  SharedDtor();
}

void VideoSize::SharedDtor() {
}

void VideoSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoSize& VideoSize::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoSize* VideoSize::New(::google::protobuf::Arena* arena) const {
  VideoSize* n = new VideoSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoSize::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.VideoSize)
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

bool VideoSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.VideoSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.VideoSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.VideoSize)
  return false;
#undef DO_
}

void VideoSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.VideoSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.VideoSize)
}

size_t VideoSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.VideoSize)
  size_t total_size = 0;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSize::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoSize*>(&from));
}

void VideoSize::MergeFrom(const VideoSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.VideoSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoSize::CopyFrom(const VideoSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.VideoSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSize::IsInitialized() const {
  return true;
}

void VideoSize::Swap(VideoSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSize::InternalSwap(VideoSize* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoSize::GetTypeName() const {
  return "aspia.proto.VideoSize";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoSize

// int32 width = 1;
void VideoSize::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 VideoSize::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.width)
  return width_;
}
void VideoSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.width)
}

// int32 height = 2;
void VideoSize::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 VideoSize::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.height)
  return height_;
}
void VideoSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacket::kEncodingFieldNumber;
const int VideoPacket::kScreenSizeFieldNumber;
const int VideoPacket::kPixelFormatFieldNumber;
const int VideoPacket::kDirtyRectFieldNumber;
const int VideoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacket::VideoPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.VideoPacket)
}
VideoPacket::VideoPacket(const VideoPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dirty_rect_(from.dirty_rect_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_screen_size()) {
    screen_size_ = new ::aspia::proto::VideoSize(*from.screen_size_);
  } else {
    screen_size_ = NULL;
  }
  if (from.has_pixel_format()) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat(*from.pixel_format_);
  } else {
    pixel_format_ = NULL;
  }
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.VideoPacket)
}

void VideoPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&screen_size_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&screen_size_) + sizeof(encoding_));
  _cached_size_ = 0;
}

VideoPacket::~VideoPacket() {
  // @@protoc_insertion_point(destructor:aspia.proto.VideoPacket)
  SharedDtor();
}

void VideoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete screen_size_;
  }
  if (this != internal_default_instance()) {
    delete pixel_format_;
  }
}

void VideoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPacket& VideoPacket::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPacket* VideoPacket::New(::google::protobuf::Arena* arena) const {
  VideoPacket* n = new VideoPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.VideoPacket)
  dirty_rect_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) {
    delete screen_size_;
  }
  screen_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) {
    delete pixel_format_;
  }
  pixel_format_ = NULL;
  encoding_ = 0;
}

bool VideoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.VideoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.VideoEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::aspia::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.VideoSize screen_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.VideoPixelFormat pixel_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.VideoRect dirty_rect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirty_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.VideoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.VideoPacket)
  return false;
#undef DO_
}

void VideoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.VideoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // .aspia.proto.VideoSize screen_size = 2;
  if (this->has_screen_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->screen_size_, output);
  }

  // .aspia.proto.VideoPixelFormat pixel_format = 3;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pixel_format_, output);
  }

  // repeated .aspia.proto.VideoRect dirty_rect = 4;
  for (unsigned int i = 0, n = this->dirty_rect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dirty_rect(i), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.VideoPacket)
}

size_t VideoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.VideoPacket)
  size_t total_size = 0;

  // repeated .aspia.proto.VideoRect dirty_rect = 4;
  {
    unsigned int count = this->dirty_rect_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_rect(i));
    }
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .aspia.proto.VideoSize screen_size = 2;
  if (this->has_screen_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->screen_size_);
  }

  // .aspia.proto.VideoPixelFormat pixel_format = 3;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pixel_format_);
  }

  // .aspia.proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacket*>(&from));
}

void VideoPacket::MergeFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.VideoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dirty_rect_.MergeFrom(from.dirty_rect_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_screen_size()) {
    mutable_screen_size()->::aspia::proto::VideoSize::MergeFrom(from.screen_size());
  }
  if (from.has_pixel_format()) {
    mutable_pixel_format()->::aspia::proto::VideoPixelFormat::MergeFrom(from.pixel_format());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void VideoPacket::CopyFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.VideoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPacket::IsInitialized() const {
  return true;
}

void VideoPacket::Swap(VideoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPacket::InternalSwap(VideoPacket* other) {
  dirty_rect_.InternalSwap(&other->dirty_rect_);
  data_.Swap(&other->data_);
  std::swap(screen_size_, other->screen_size_);
  std::swap(pixel_format_, other->pixel_format_);
  std::swap(encoding_, other->encoding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPacket::GetTypeName() const {
  return "aspia.proto.VideoPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPacket

// .aspia.proto.VideoEncoding encoding = 1;
void VideoPacket::clear_encoding() {
  encoding_ = 0;
}
::aspia::proto::VideoEncoding VideoPacket::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(encoding_);
}
void VideoPacket::set_encoding(::aspia::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.encoding)
}

// .aspia.proto.VideoSize screen_size = 2;
bool VideoPacket::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
void VideoPacket::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
const ::aspia::proto::VideoSize& VideoPacket::screen_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::aspia::proto::VideoSize::internal_default_instance();
}
::aspia::proto::VideoSize* VideoPacket::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::aspia::proto::VideoSize;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.screen_size)
  return screen_size_;
}
::aspia::proto::VideoSize* VideoPacket::release_screen_size() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.screen_size)
  
  ::aspia::proto::VideoSize* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
void VideoPacket::set_allocated_screen_size(::aspia::proto::VideoSize* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.screen_size)
}

// .aspia.proto.VideoPixelFormat pixel_format = 3;
bool VideoPacket::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
void VideoPacket::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
const ::aspia::proto::VideoPixelFormat& VideoPacket::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
::aspia::proto::VideoPixelFormat* VideoPacket::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.pixel_format)
  return pixel_format_;
}
::aspia::proto::VideoPixelFormat* VideoPacket::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
void VideoPacket::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.pixel_format)
}

// repeated .aspia.proto.VideoRect dirty_rect = 4;
int VideoPacket::dirty_rect_size() const {
  return dirty_rect_.size();
}
void VideoPacket::clear_dirty_rect() {
  dirty_rect_.Clear();
}
const ::aspia::proto::VideoRect& VideoPacket::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Get(index);
}
::aspia::proto::VideoRect* VideoPacket::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Mutable(index);
}
::aspia::proto::VideoRect* VideoPacket::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >*
VideoPacket::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.VideoPacket.dirty_rect)
  return &dirty_rect_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >&
VideoPacket::dirty_rect() const {
  // @@protoc_insertion_point(field_list:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_;
}

// bytes data = 5;
void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.data)
  return data_.GetNoArena();
}
void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.data)
}
#if LANG_CXX11
void VideoPacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoPacket.data)
}
#endif
void VideoPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoPacket.data)
}
void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoPacket.data)
}
::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPacket::kEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPacket::AudioPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.AudioPacket)
}
AudioPacket::AudioPacket(const AudioPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.AudioPacket)
}

void AudioPacket::SharedCtor() {
  encoding_ = 0;
  _cached_size_ = 0;
}

AudioPacket::~AudioPacket() {
  // @@protoc_insertion_point(destructor:aspia.proto.AudioPacket)
  SharedDtor();
}

void AudioPacket::SharedDtor() {
}

void AudioPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioPacket& AudioPacket::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioPacket* AudioPacket::New(::google::protobuf::Arena* arena) const {
  AudioPacket* n = new AudioPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.AudioPacket)
  encoding_ = 0;
}

bool AudioPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.AudioPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.AudioEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::aspia::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.AudioPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.AudioPacket)
  return false;
#undef DO_
}

void AudioPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.AudioPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.AudioPacket)
}

size_t AudioPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.AudioPacket)
  size_t total_size = 0;

  // .aspia.proto.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPacket*>(&from));
}

void AudioPacket::MergeFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.AudioPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void AudioPacket::CopyFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.AudioPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPacket::IsInitialized() const {
  return true;
}

void AudioPacket::Swap(AudioPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPacket::InternalSwap(AudioPacket* other) {
  std::swap(encoding_, other->encoding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioPacket::GetTypeName() const {
  return "aspia.proto.AudioPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPacket

// .aspia.proto.AudioEncoding encoding = 1;
void AudioPacket::clear_encoding() {
  encoding_ = 0;
}
::aspia::proto::AudioEncoding AudioPacket::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AudioPacket.encoding)
  return static_cast< ::aspia::proto::AudioEncoding >(encoding_);
}
void AudioPacket::set_encoding(::aspia::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AudioPacket.encoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopSessionConfigRequest::kVideoEncodingsFieldNumber;
const int DesktopSessionConfigRequest::kAudioEncodingsFieldNumber;
const int DesktopSessionConfigRequest::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopSessionConfigRequest::DesktopSessionConfigRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DesktopSessionConfigRequest)
}
DesktopSessionConfigRequest::DesktopSessionConfigRequest(const DesktopSessionConfigRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&video_encodings_, &from.video_encodings_,
    reinterpret_cast<char*>(&features_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(features_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DesktopSessionConfigRequest)
}

void DesktopSessionConfigRequest::SharedCtor() {
  ::memset(&video_encodings_, 0, reinterpret_cast<char*>(&features_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(features_));
  _cached_size_ = 0;
}

DesktopSessionConfigRequest::~DesktopSessionConfigRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DesktopSessionConfigRequest)
  SharedDtor();
}

void DesktopSessionConfigRequest::SharedDtor() {
}

void DesktopSessionConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopSessionConfigRequest& DesktopSessionConfigRequest::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopSessionConfigRequest* DesktopSessionConfigRequest::New(::google::protobuf::Arena* arena) const {
  DesktopSessionConfigRequest* n = new DesktopSessionConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopSessionConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DesktopSessionConfigRequest)
  ::memset(&video_encodings_, 0, reinterpret_cast<char*>(&features_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(features_));
}

bool DesktopSessionConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DesktopSessionConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 video_encodings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_encodings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 audio_encodings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_encodings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 features = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DesktopSessionConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DesktopSessionConfigRequest)
  return false;
#undef DO_
}

void DesktopSessionConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DesktopSessionConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 video_encodings = 1;
  if (this->video_encodings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->video_encodings(), output);
  }

  // uint32 audio_encodings = 2;
  if (this->audio_encodings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->audio_encodings(), output);
  }

  // uint32 features = 3;
  if (this->features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->features(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DesktopSessionConfigRequest)
}

size_t DesktopSessionConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DesktopSessionConfigRequest)
  size_t total_size = 0;

  // uint32 video_encodings = 1;
  if (this->video_encodings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_encodings());
  }

  // uint32 audio_encodings = 2;
  if (this->audio_encodings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->audio_encodings());
  }

  // uint32 features = 3;
  if (this->features() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->features());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopSessionConfigRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopSessionConfigRequest*>(&from));
}

void DesktopSessionConfigRequest::MergeFrom(const DesktopSessionConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DesktopSessionConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.video_encodings() != 0) {
    set_video_encodings(from.video_encodings());
  }
  if (from.audio_encodings() != 0) {
    set_audio_encodings(from.audio_encodings());
  }
  if (from.features() != 0) {
    set_features(from.features());
  }
}

void DesktopSessionConfigRequest::CopyFrom(const DesktopSessionConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DesktopSessionConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopSessionConfigRequest::IsInitialized() const {
  return true;
}

void DesktopSessionConfigRequest::Swap(DesktopSessionConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopSessionConfigRequest::InternalSwap(DesktopSessionConfigRequest* other) {
  std::swap(video_encodings_, other->video_encodings_);
  std::swap(audio_encodings_, other->audio_encodings_);
  std::swap(features_, other->features_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopSessionConfigRequest::GetTypeName() const {
  return "aspia.proto.DesktopSessionConfigRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopSessionConfigRequest

// uint32 video_encodings = 1;
void DesktopSessionConfigRequest::clear_video_encodings() {
  video_encodings_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfigRequest::video_encodings() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfigRequest.video_encodings)
  return video_encodings_;
}
void DesktopSessionConfigRequest::set_video_encodings(::google::protobuf::uint32 value) {
  
  video_encodings_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfigRequest.video_encodings)
}

// uint32 audio_encodings = 2;
void DesktopSessionConfigRequest::clear_audio_encodings() {
  audio_encodings_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfigRequest::audio_encodings() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfigRequest.audio_encodings)
  return audio_encodings_;
}
void DesktopSessionConfigRequest::set_audio_encodings(::google::protobuf::uint32 value) {
  
  audio_encodings_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfigRequest.audio_encodings)
}

// uint32 features = 3;
void DesktopSessionConfigRequest::clear_features() {
  features_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfigRequest::features() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfigRequest.features)
  return features_;
}
void DesktopSessionConfigRequest::set_features(::google::protobuf::uint32 value) {
  
  features_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfigRequest.features)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopSessionConfig::kFlagsFieldNumber;
const int DesktopSessionConfig::kVideoEncodingFieldNumber;
const int DesktopSessionConfig::kAudioEncodingFieldNumber;
const int DesktopSessionConfig::kPixelFormatFieldNumber;
const int DesktopSessionConfig::kUpdateIntervalFieldNumber;
const int DesktopSessionConfig::kCompressRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopSessionConfig::DesktopSessionConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DesktopSessionConfig)
}
DesktopSessionConfig::DesktopSessionConfig(const DesktopSessionConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pixel_format()) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat(*from.pixel_format_);
  } else {
    pixel_format_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&compress_ratio_) -
    reinterpret_cast<char*>(&flags_) + sizeof(compress_ratio_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DesktopSessionConfig)
}

void DesktopSessionConfig::SharedCtor() {
  ::memset(&pixel_format_, 0, reinterpret_cast<char*>(&compress_ratio_) -
    reinterpret_cast<char*>(&pixel_format_) + sizeof(compress_ratio_));
  _cached_size_ = 0;
}

DesktopSessionConfig::~DesktopSessionConfig() {
  // @@protoc_insertion_point(destructor:aspia.proto.DesktopSessionConfig)
  SharedDtor();
}

void DesktopSessionConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pixel_format_;
  }
}

void DesktopSessionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopSessionConfig& DesktopSessionConfig::default_instance() {
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopSessionConfig* DesktopSessionConfig::New(::google::protobuf::Arena* arena) const {
  DesktopSessionConfig* n = new DesktopSessionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopSessionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DesktopSessionConfig)
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) {
    delete pixel_format_;
  }
  pixel_format_ = NULL;
  ::memset(&flags_, 0, reinterpret_cast<char*>(&compress_ratio_) -
    reinterpret_cast<char*>(&flags_) + sizeof(compress_ratio_));
}

bool DesktopSessionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DesktopSessionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.VideoEncoding video_encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_video_encoding(static_cast< ::aspia::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.AudioEncoding audio_encoding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_audio_encoding(static_cast< ::aspia::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.VideoPixelFormat pixel_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 compress_ratio = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DesktopSessionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DesktopSessionConfig)
  return false;
#undef DO_
}

void DesktopSessionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DesktopSessionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // .aspia.proto.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->video_encoding(), output);
  }

  // .aspia.proto.AudioEncoding audio_encoding = 3;
  if (this->audio_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->audio_encoding(), output);
  }

  // .aspia.proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->pixel_format_, output);
  }

  // uint32 update_interval = 5;
  if (this->update_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->update_interval(), output);
  }

  // uint32 compress_ratio = 6;
  if (this->compress_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->compress_ratio(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DesktopSessionConfig)
}

size_t DesktopSessionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DesktopSessionConfig)
  size_t total_size = 0;

  // .aspia.proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pixel_format_);
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // .aspia.proto.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_encoding());
  }

  // .aspia.proto.AudioEncoding audio_encoding = 3;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_encoding());
  }

  // uint32 update_interval = 5;
  if (this->update_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_interval());
  }

  // uint32 compress_ratio = 6;
  if (this->compress_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compress_ratio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopSessionConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopSessionConfig*>(&from));
}

void DesktopSessionConfig::MergeFrom(const DesktopSessionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DesktopSessionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pixel_format()) {
    mutable_pixel_format()->::aspia::proto::VideoPixelFormat::MergeFrom(from.pixel_format());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.video_encoding() != 0) {
    set_video_encoding(from.video_encoding());
  }
  if (from.audio_encoding() != 0) {
    set_audio_encoding(from.audio_encoding());
  }
  if (from.update_interval() != 0) {
    set_update_interval(from.update_interval());
  }
  if (from.compress_ratio() != 0) {
    set_compress_ratio(from.compress_ratio());
  }
}

void DesktopSessionConfig::CopyFrom(const DesktopSessionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DesktopSessionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopSessionConfig::IsInitialized() const {
  return true;
}

void DesktopSessionConfig::Swap(DesktopSessionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopSessionConfig::InternalSwap(DesktopSessionConfig* other) {
  std::swap(pixel_format_, other->pixel_format_);
  std::swap(flags_, other->flags_);
  std::swap(video_encoding_, other->video_encoding_);
  std::swap(audio_encoding_, other->audio_encoding_);
  std::swap(update_interval_, other->update_interval_);
  std::swap(compress_ratio_, other->compress_ratio_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopSessionConfig::GetTypeName() const {
  return "aspia.proto.DesktopSessionConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopSessionConfig

// uint32 flags = 1;
void DesktopSessionConfig::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfig::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.flags)
  return flags_;
}
void DesktopSessionConfig::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfig.flags)
}

// .aspia.proto.VideoEncoding video_encoding = 2;
void DesktopSessionConfig::clear_video_encoding() {
  video_encoding_ = 0;
}
::aspia::proto::VideoEncoding DesktopSessionConfig::video_encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.video_encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(video_encoding_);
}
void DesktopSessionConfig::set_video_encoding(::aspia::proto::VideoEncoding value) {
  
  video_encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfig.video_encoding)
}

// .aspia.proto.AudioEncoding audio_encoding = 3;
void DesktopSessionConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
::aspia::proto::AudioEncoding DesktopSessionConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.audio_encoding)
  return static_cast< ::aspia::proto::AudioEncoding >(audio_encoding_);
}
void DesktopSessionConfig::set_audio_encoding(::aspia::proto::AudioEncoding value) {
  
  audio_encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfig.audio_encoding)
}

// .aspia.proto.VideoPixelFormat pixel_format = 4;
bool DesktopSessionConfig::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
void DesktopSessionConfig::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
const ::aspia::proto::VideoPixelFormat& DesktopSessionConfig::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
::aspia::proto::VideoPixelFormat* DesktopSessionConfig::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.DesktopSessionConfig.pixel_format)
  return pixel_format_;
}
::aspia::proto::VideoPixelFormat* DesktopSessionConfig::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.DesktopSessionConfig.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
void DesktopSessionConfig::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DesktopSessionConfig.pixel_format)
}

// uint32 update_interval = 5;
void DesktopSessionConfig::clear_update_interval() {
  update_interval_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfig::update_interval() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.update_interval)
  return update_interval_;
}
void DesktopSessionConfig::set_update_interval(::google::protobuf::uint32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfig.update_interval)
}

// uint32 compress_ratio = 6;
void DesktopSessionConfig::clear_compress_ratio() {
  compress_ratio_ = 0u;
}
::google::protobuf::uint32 DesktopSessionConfig::compress_ratio() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopSessionConfig.compress_ratio)
  return compress_ratio_;
}
void DesktopSessionConfig::set_compress_ratio(::google::protobuf::uint32 value) {
  
  compress_ratio_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopSessionConfig.compress_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

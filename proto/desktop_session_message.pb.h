// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_session_message.proto

#ifndef PROTOBUF_desktop_5fsession_5fmessage_2eproto__INCLUDED
#define PROTOBUF_desktop_5fsession_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class AudioPacket;
class AudioPacketDefaultTypeInternal;
extern AudioPacketDefaultTypeInternal _AudioPacket_default_instance_;
class ClipboardEvent;
class ClipboardEventDefaultTypeInternal;
extern ClipboardEventDefaultTypeInternal _ClipboardEvent_default_instance_;
class CursorShape;
class CursorShapeDefaultTypeInternal;
extern CursorShapeDefaultTypeInternal _CursorShape_default_instance_;
class DesktopConfig;
class DesktopConfigDefaultTypeInternal;
extern DesktopConfigDefaultTypeInternal _DesktopConfig_default_instance_;
class DesktopConfigRequest;
class DesktopConfigRequestDefaultTypeInternal;
extern DesktopConfigRequestDefaultTypeInternal _DesktopConfigRequest_default_instance_;
class KeyEvent;
class KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class PointerEvent;
class PointerEventDefaultTypeInternal;
extern PointerEventDefaultTypeInternal _PointerEvent_default_instance_;
class VideoPacket;
class VideoPacketDefaultTypeInternal;
extern VideoPacketDefaultTypeInternal _VideoPacket_default_instance_;
class VideoPixelFormat;
class VideoPixelFormatDefaultTypeInternal;
extern VideoPixelFormatDefaultTypeInternal _VideoPixelFormat_default_instance_;
class VideoRect;
class VideoRectDefaultTypeInternal;
extern VideoRectDefaultTypeInternal _VideoRect_default_instance_;
class VideoSize;
class VideoSizeDefaultTypeInternal;
extern VideoSizeDefaultTypeInternal _VideoSize_default_instance_;
}  // namespace proto
}  // namespace aspia

namespace aspia {
namespace proto {

namespace protobuf_desktop_5fsession_5fmessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_desktop_5fsession_5fmessage_2eproto

enum KeyEvent_Flags {
  KeyEvent_Flags_UNKNOWN = 0,
  KeyEvent_Flags_CAPSLOCK = 1,
  KeyEvent_Flags_NUMLOCK = 2,
  KeyEvent_Flags_EXTENDED = 4,
  KeyEvent_Flags_PRESSED = 8,
  KeyEvent_Flags_KeyEvent_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KeyEvent_Flags_KeyEvent_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KeyEvent_Flags_IsValid(int value);
const KeyEvent_Flags KeyEvent_Flags_Flags_MIN = KeyEvent_Flags_UNKNOWN;
const KeyEvent_Flags KeyEvent_Flags_Flags_MAX = KeyEvent_Flags_PRESSED;
const int KeyEvent_Flags_Flags_ARRAYSIZE = KeyEvent_Flags_Flags_MAX + 1;

enum PointerEvent_ButtonMask {
  PointerEvent_ButtonMask_EMPTY = 0,
  PointerEvent_ButtonMask_LEFT_BUTTON = 1,
  PointerEvent_ButtonMask_MIDDLE_BUTTON = 2,
  PointerEvent_ButtonMask_RIGHT_BUTTON = 4,
  PointerEvent_ButtonMask_WHEEL_UP = 8,
  PointerEvent_ButtonMask_WHEEL_DOWN = 16,
  PointerEvent_ButtonMask_PointerEvent_ButtonMask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointerEvent_ButtonMask_PointerEvent_ButtonMask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointerEvent_ButtonMask_IsValid(int value);
const PointerEvent_ButtonMask PointerEvent_ButtonMask_ButtonMask_MIN = PointerEvent_ButtonMask_EMPTY;
const PointerEvent_ButtonMask PointerEvent_ButtonMask_ButtonMask_MAX = PointerEvent_ButtonMask_WHEEL_DOWN;
const int PointerEvent_ButtonMask_ButtonMask_ARRAYSIZE = PointerEvent_ButtonMask_ButtonMask_MAX + 1;

enum CursorShape_Flags {
  CursorShape_Flags_UNKNOWN = 0,
  CursorShape_Flags_RESET_CACHE = 64,
  CursorShape_Flags_CACHE = 128,
  CursorShape_Flags_CursorShape_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CursorShape_Flags_CursorShape_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CursorShape_Flags_IsValid(int value);
const CursorShape_Flags CursorShape_Flags_Flags_MIN = CursorShape_Flags_UNKNOWN;
const CursorShape_Flags CursorShape_Flags_Flags_MAX = CursorShape_Flags_CACHE;
const int CursorShape_Flags_Flags_ARRAYSIZE = CursorShape_Flags_Flags_MAX + 1;

enum DesktopConfig_Flags {
  DesktopConfig_Flags_ENABLE_NONE = 0,
  DesktopConfig_Flags_ENABLE_CURSOR_SHAPE = 1,
  DesktopConfig_Flags_ENABLE_CLIPBOARD = 2,
  DesktopConfig_Flags_ENABLE_AUDIO = 3,
  DesktopConfig_Flags_DesktopConfig_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DesktopConfig_Flags_DesktopConfig_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DesktopConfig_Flags_IsValid(int value);
const DesktopConfig_Flags DesktopConfig_Flags_Flags_MIN = DesktopConfig_Flags_ENABLE_NONE;
const DesktopConfig_Flags DesktopConfig_Flags_Flags_MAX = DesktopConfig_Flags_ENABLE_AUDIO;
const int DesktopConfig_Flags_Flags_ARRAYSIZE = DesktopConfig_Flags_Flags_MAX + 1;

enum VideoEncoding {
  VIDEO_ENCODING_UNKNOWN = 0,
  VIDEO_ENCODING_ZLIB = 1,
  VIDEO_ENCODING_VP8 = 2,
  VIDEO_ENCODING_VP9 = 4,
  VideoEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoEncoding_IsValid(int value);
const VideoEncoding VideoEncoding_MIN = VIDEO_ENCODING_UNKNOWN;
const VideoEncoding VideoEncoding_MAX = VIDEO_ENCODING_VP9;
const int VideoEncoding_ARRAYSIZE = VideoEncoding_MAX + 1;

enum AudioEncoding {
  AUDIO_ENCODING_INVALID = 0,
  AUDIO_ENCODING_OPUS = 1,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioEncoding_IsValid(int value);
const AudioEncoding AudioEncoding_MIN = AUDIO_ENCODING_INVALID;
const AudioEncoding AudioEncoding_MAX = AUDIO_ENCODING_OPUS;
const int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

enum DesktopFeatures {
  FEATURE_NONE = 0,
  FEATURE_CURSOR_SHAPE = 1,
  FEATURE_CLIPBOARD = 2,
  DesktopFeatures_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DesktopFeatures_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DesktopFeatures_IsValid(int value);
const DesktopFeatures DesktopFeatures_MIN = FEATURE_NONE;
const DesktopFeatures DesktopFeatures_MAX = FEATURE_CLIPBOARD;
const int DesktopFeatures_ARRAYSIZE = DesktopFeatures_MAX + 1;

// ===================================================================

class KeyEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.KeyEvent) */ {
 public:
  KeyEvent();
  virtual ~KeyEvent();

  KeyEvent(const KeyEvent& from);

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const KeyEvent& default_instance();

  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(KeyEvent* other);

  // implements Message ----------------------------------------------

  inline KeyEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const KeyEvent& from);
  void MergeFrom(const KeyEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef KeyEvent_Flags Flags;
  static const Flags UNKNOWN =
    KeyEvent_Flags_UNKNOWN;
  static const Flags CAPSLOCK =
    KeyEvent_Flags_CAPSLOCK;
  static const Flags NUMLOCK =
    KeyEvent_Flags_NUMLOCK;
  static const Flags EXTENDED =
    KeyEvent_Flags_EXTENDED;
  static const Flags PRESSED =
    KeyEvent_Flags_PRESSED;
  static inline bool Flags_IsValid(int value) {
    return KeyEvent_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    KeyEvent_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    KeyEvent_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    KeyEvent_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 keycode = 1;
  void clear_keycode();
  static const int kKeycodeFieldNumber = 1;
  ::google::protobuf::uint32 keycode() const;
  void set_keycode(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.KeyEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 keycode_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointerEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.PointerEvent) */ {
 public:
  PointerEvent();
  virtual ~PointerEvent();

  PointerEvent(const PointerEvent& from);

  inline PointerEvent& operator=(const PointerEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const PointerEvent& default_instance();

  static inline const PointerEvent* internal_default_instance() {
    return reinterpret_cast<const PointerEvent*>(
               &_PointerEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PointerEvent* other);

  // implements Message ----------------------------------------------

  inline PointerEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  PointerEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PointerEvent& from);
  void MergeFrom(const PointerEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointerEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PointerEvent_ButtonMask ButtonMask;
  static const ButtonMask EMPTY =
    PointerEvent_ButtonMask_EMPTY;
  static const ButtonMask LEFT_BUTTON =
    PointerEvent_ButtonMask_LEFT_BUTTON;
  static const ButtonMask MIDDLE_BUTTON =
    PointerEvent_ButtonMask_MIDDLE_BUTTON;
  static const ButtonMask RIGHT_BUTTON =
    PointerEvent_ButtonMask_RIGHT_BUTTON;
  static const ButtonMask WHEEL_UP =
    PointerEvent_ButtonMask_WHEEL_UP;
  static const ButtonMask WHEEL_DOWN =
    PointerEvent_ButtonMask_WHEEL_DOWN;
  static inline bool ButtonMask_IsValid(int value) {
    return PointerEvent_ButtonMask_IsValid(value);
  }
  static const ButtonMask ButtonMask_MIN =
    PointerEvent_ButtonMask_ButtonMask_MIN;
  static const ButtonMask ButtonMask_MAX =
    PointerEvent_ButtonMask_ButtonMask_MAX;
  static const int ButtonMask_ARRAYSIZE =
    PointerEvent_ButtonMask_ButtonMask_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 mask = 1;
  void clear_mask();
  static const int kMaskFieldNumber = 1;
  ::google::protobuf::uint32 mask() const;
  void set_mask(::google::protobuf::uint32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.PointerEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 mask_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClipboardEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.ClipboardEvent) */ {
 public:
  ClipboardEvent();
  virtual ~ClipboardEvent();

  ClipboardEvent(const ClipboardEvent& from);

  inline ClipboardEvent& operator=(const ClipboardEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClipboardEvent& default_instance();

  static inline const ClipboardEvent* internal_default_instance() {
    return reinterpret_cast<const ClipboardEvent*>(
               &_ClipboardEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ClipboardEvent* other);

  // implements Message ----------------------------------------------

  inline ClipboardEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ClipboardEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClipboardEvent& from);
  void MergeFrom(const ClipboardEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClipboardEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mime_type = 1;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 1;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  #if LANG_CXX11
  void set_mime_type(::std::string&& value);
  #endif
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:aspia.proto.ClipboardEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CursorShape : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.CursorShape) */ {
 public:
  CursorShape();
  virtual ~CursorShape();

  CursorShape(const CursorShape& from);

  inline CursorShape& operator=(const CursorShape& from) {
    CopyFrom(from);
    return *this;
  }

  static const CursorShape& default_instance();

  static inline const CursorShape* internal_default_instance() {
    return reinterpret_cast<const CursorShape*>(
               &_CursorShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CursorShape* other);

  // implements Message ----------------------------------------------

  inline CursorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  CursorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CursorShape& from);
  void MergeFrom(const CursorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CursorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CursorShape_Flags Flags;
  static const Flags UNKNOWN =
    CursorShape_Flags_UNKNOWN;
  static const Flags RESET_CACHE =
    CursorShape_Flags_RESET_CACHE;
  static const Flags CACHE =
    CursorShape_Flags_CACHE;
  static inline bool Flags_IsValid(int value) {
    return CursorShape_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CursorShape_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CursorShape_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CursorShape_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 hotspot_x = 4;
  void clear_hotspot_x();
  static const int kHotspotXFieldNumber = 4;
  ::google::protobuf::int32 hotspot_x() const;
  void set_hotspot_x(::google::protobuf::int32 value);

  // int32 hotspot_y = 5;
  void clear_hotspot_y();
  static const int kHotspotYFieldNumber = 5;
  ::google::protobuf::int32 hotspot_y() const;
  void set_hotspot_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.CursorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 hotspot_x_;
  ::google::protobuf::int32 hotspot_y_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoRect : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoRect) */ {
 public:
  VideoRect();
  virtual ~VideoRect();

  VideoRect(const VideoRect& from);

  inline VideoRect& operator=(const VideoRect& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoRect& default_instance();

  static inline const VideoRect* internal_default_instance() {
    return reinterpret_cast<const VideoRect*>(
               &_VideoRect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VideoRect* other);

  // implements Message ----------------------------------------------

  inline VideoRect* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoRect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoRect& from);
  void MergeFrom(const VideoRect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoRect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPixelFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoPixelFormat) */ {
 public:
  VideoPixelFormat();
  virtual ~VideoPixelFormat();

  VideoPixelFormat(const VideoPixelFormat& from);

  inline VideoPixelFormat& operator=(const VideoPixelFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPixelFormat& default_instance();

  static inline const VideoPixelFormat* internal_default_instance() {
    return reinterpret_cast<const VideoPixelFormat*>(
               &_VideoPixelFormat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VideoPixelFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPixelFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoPixelFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoPixelFormat& from);
  void MergeFrom(const VideoPixelFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPixelFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 bits_per_pixel = 1;
  void clear_bits_per_pixel();
  static const int kBitsPerPixelFieldNumber = 1;
  ::google::protobuf::uint32 bits_per_pixel() const;
  void set_bits_per_pixel(::google::protobuf::uint32 value);

  // uint32 red_max = 2;
  void clear_red_max();
  static const int kRedMaxFieldNumber = 2;
  ::google::protobuf::uint32 red_max() const;
  void set_red_max(::google::protobuf::uint32 value);

  // uint32 green_max = 3;
  void clear_green_max();
  static const int kGreenMaxFieldNumber = 3;
  ::google::protobuf::uint32 green_max() const;
  void set_green_max(::google::protobuf::uint32 value);

  // uint32 blue_max = 4;
  void clear_blue_max();
  static const int kBlueMaxFieldNumber = 4;
  ::google::protobuf::uint32 blue_max() const;
  void set_blue_max(::google::protobuf::uint32 value);

  // uint32 red_shift = 5;
  void clear_red_shift();
  static const int kRedShiftFieldNumber = 5;
  ::google::protobuf::uint32 red_shift() const;
  void set_red_shift(::google::protobuf::uint32 value);

  // uint32 green_shift = 6;
  void clear_green_shift();
  static const int kGreenShiftFieldNumber = 6;
  ::google::protobuf::uint32 green_shift() const;
  void set_green_shift(::google::protobuf::uint32 value);

  // uint32 blue_shift = 7;
  void clear_blue_shift();
  static const int kBlueShiftFieldNumber = 7;
  ::google::protobuf::uint32 blue_shift() const;
  void set_blue_shift(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoPixelFormat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 bits_per_pixel_;
  ::google::protobuf::uint32 red_max_;
  ::google::protobuf::uint32 green_max_;
  ::google::protobuf::uint32 blue_max_;
  ::google::protobuf::uint32 red_shift_;
  ::google::protobuf::uint32 green_shift_;
  ::google::protobuf::uint32 blue_shift_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoSize : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoSize) */ {
 public:
  VideoSize();
  virtual ~VideoSize();

  VideoSize(const VideoSize& from);

  inline VideoSize& operator=(const VideoSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoSize& default_instance();

  static inline const VideoSize* internal_default_instance() {
    return reinterpret_cast<const VideoSize*>(
               &_VideoSize_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VideoSize* other);

  // implements Message ----------------------------------------------

  inline VideoSize* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoSize* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoSize& from);
  void MergeFrom(const VideoSize& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoPacket) */ {
 public:
  VideoPacket();
  virtual ~VideoPacket();

  VideoPacket(const VideoPacket& from);

  inline VideoPacket& operator=(const VideoPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacket& default_instance();

  static inline const VideoPacket* internal_default_instance() {
    return reinterpret_cast<const VideoPacket*>(
               &_VideoPacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VideoPacket* other);

  // implements Message ----------------------------------------------

  inline VideoPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoPacket& from);
  void MergeFrom(const VideoPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.VideoRect dirty_rect = 4;
  int dirty_rect_size() const;
  void clear_dirty_rect();
  static const int kDirtyRectFieldNumber = 4;
  const ::aspia::proto::VideoRect& dirty_rect(int index) const;
  ::aspia::proto::VideoRect* mutable_dirty_rect(int index);
  ::aspia::proto::VideoRect* add_dirty_rect();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >*
      mutable_dirty_rect();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >&
      dirty_rect() const;

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .aspia.proto.VideoSize screen_size = 2;
  bool has_screen_size() const;
  void clear_screen_size();
  static const int kScreenSizeFieldNumber = 2;
  const ::aspia::proto::VideoSize& screen_size() const;
  ::aspia::proto::VideoSize* mutable_screen_size();
  ::aspia::proto::VideoSize* release_screen_size();
  void set_allocated_screen_size(::aspia::proto::VideoSize* screen_size);

  // .aspia.proto.VideoPixelFormat pixel_format = 3;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 3;
  const ::aspia::proto::VideoPixelFormat& pixel_format() const;
  ::aspia::proto::VideoPixelFormat* mutable_pixel_format();
  ::aspia::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format);

  // .aspia.proto.VideoEncoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::aspia::proto::VideoEncoding encoding() const;
  void set_encoding(::aspia::proto::VideoEncoding value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect > dirty_rect_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::aspia::proto::VideoSize* screen_size_;
  ::aspia::proto::VideoPixelFormat* pixel_format_;
  int encoding_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.AudioPacket) */ {
 public:
  AudioPacket();
  virtual ~AudioPacket();

  AudioPacket(const AudioPacket& from);

  inline AudioPacket& operator=(const AudioPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const AudioPacket& default_instance();

  static inline const AudioPacket* internal_default_instance() {
    return reinterpret_cast<const AudioPacket*>(
               &_AudioPacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AudioPacket* other);

  // implements Message ----------------------------------------------

  inline AudioPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AudioPacket& from);
  void MergeFrom(const AudioPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.AudioEncoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::aspia::proto::AudioEncoding encoding() const;
  void set_encoding(::aspia::proto::AudioEncoding value);

  // @@protoc_insertion_point(class_scope:aspia.proto.AudioPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int encoding_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DesktopConfigRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DesktopConfigRequest) */ {
 public:
  DesktopConfigRequest();
  virtual ~DesktopConfigRequest();

  DesktopConfigRequest(const DesktopConfigRequest& from);

  inline DesktopConfigRequest& operator=(const DesktopConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DesktopConfigRequest& default_instance();

  static inline const DesktopConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DesktopConfigRequest*>(
               &_DesktopConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DesktopConfigRequest* other);

  // implements Message ----------------------------------------------

  inline DesktopConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DesktopConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DesktopConfigRequest& from);
  void MergeFrom(const DesktopConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DesktopConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 video_encodings = 1;
  void clear_video_encodings();
  static const int kVideoEncodingsFieldNumber = 1;
  ::google::protobuf::uint32 video_encodings() const;
  void set_video_encodings(::google::protobuf::uint32 value);

  // uint32 audio_encodings = 2;
  void clear_audio_encodings();
  static const int kAudioEncodingsFieldNumber = 2;
  ::google::protobuf::uint32 audio_encodings() const;
  void set_audio_encodings(::google::protobuf::uint32 value);

  // uint32 features = 3;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  ::google::protobuf::uint32 features() const;
  void set_features(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DesktopConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 video_encodings_;
  ::google::protobuf::uint32 audio_encodings_;
  ::google::protobuf::uint32 features_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DesktopConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DesktopConfig) */ {
 public:
  DesktopConfig();
  virtual ~DesktopConfig();

  DesktopConfig(const DesktopConfig& from);

  inline DesktopConfig& operator=(const DesktopConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const DesktopConfig& default_instance();

  static inline const DesktopConfig* internal_default_instance() {
    return reinterpret_cast<const DesktopConfig*>(
               &_DesktopConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DesktopConfig* other);

  // implements Message ----------------------------------------------

  inline DesktopConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DesktopConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DesktopConfig& from);
  void MergeFrom(const DesktopConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DesktopConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DesktopConfig_Flags Flags;
  static const Flags ENABLE_NONE =
    DesktopConfig_Flags_ENABLE_NONE;
  static const Flags ENABLE_CURSOR_SHAPE =
    DesktopConfig_Flags_ENABLE_CURSOR_SHAPE;
  static const Flags ENABLE_CLIPBOARD =
    DesktopConfig_Flags_ENABLE_CLIPBOARD;
  static const Flags ENABLE_AUDIO =
    DesktopConfig_Flags_ENABLE_AUDIO;
  static inline bool Flags_IsValid(int value) {
    return DesktopConfig_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    DesktopConfig_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    DesktopConfig_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    DesktopConfig_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .aspia.proto.VideoPixelFormat pixel_format = 4;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 4;
  const ::aspia::proto::VideoPixelFormat& pixel_format() const;
  ::aspia::proto::VideoPixelFormat* mutable_pixel_format();
  ::aspia::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format);

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // .aspia.proto.VideoEncoding video_encoding = 2;
  void clear_video_encoding();
  static const int kVideoEncodingFieldNumber = 2;
  ::aspia::proto::VideoEncoding video_encoding() const;
  void set_video_encoding(::aspia::proto::VideoEncoding value);

  // .aspia.proto.AudioEncoding audio_encoding = 3;
  void clear_audio_encoding();
  static const int kAudioEncodingFieldNumber = 3;
  ::aspia::proto::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::aspia::proto::AudioEncoding value);

  // uint32 update_interval = 5;
  void clear_update_interval();
  static const int kUpdateIntervalFieldNumber = 5;
  ::google::protobuf::uint32 update_interval() const;
  void set_update_interval(::google::protobuf::uint32 value);

  // uint32 compress_ratio = 6;
  void clear_compress_ratio();
  static const int kCompressRatioFieldNumber = 6;
  ::google::protobuf::uint32 compress_ratio() const;
  void set_compress_ratio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DesktopConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::VideoPixelFormat* pixel_format_;
  ::google::protobuf::uint32 flags_;
  int video_encoding_;
  int audio_encoding_;
  ::google::protobuf::uint32 update_interval_;
  ::google::protobuf::uint32 compress_ratio_;
  mutable int _cached_size_;
  friend struct protobuf_desktop_5fsession_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent

// uint32 keycode = 1;
inline void KeyEvent::clear_keycode() {
  keycode_ = 0u;
}
inline ::google::protobuf::uint32 KeyEvent::keycode() const {
  // @@protoc_insertion_point(field_get:aspia.proto.KeyEvent.keycode)
  return keycode_;
}
inline void KeyEvent::set_keycode(::google::protobuf::uint32 value) {
  
  keycode_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.KeyEvent.keycode)
}

// uint32 flags = 2;
inline void KeyEvent::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 KeyEvent::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.KeyEvent.flags)
  return flags_;
}
inline void KeyEvent::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.KeyEvent.flags)
}

// -------------------------------------------------------------------

// PointerEvent

// uint32 mask = 1;
inline void PointerEvent::clear_mask() {
  mask_ = 0u;
}
inline ::google::protobuf::uint32 PointerEvent::mask() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.mask)
  return mask_;
}
inline void PointerEvent::set_mask(::google::protobuf::uint32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.mask)
}

// int32 x = 2;
inline void PointerEvent::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 PointerEvent::x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.x)
  return x_;
}
inline void PointerEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.x)
}

// int32 y = 3;
inline void PointerEvent::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 PointerEvent::y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.PointerEvent.y)
  return y_;
}
inline void PointerEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.PointerEvent.y)
}

// -------------------------------------------------------------------

// ClipboardEvent

// string mime_type = 1;
inline void ClipboardEvent::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardEvent::mime_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClipboardEvent.mime_type)
  return mime_type_.GetNoArena();
}
inline void ClipboardEvent::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClipboardEvent.mime_type)
}
#if LANG_CXX11
inline void ClipboardEvent::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClipboardEvent.mime_type)
}
#endif
inline void ClipboardEvent::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClipboardEvent.mime_type)
}
inline void ClipboardEvent::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClipboardEvent.mime_type)
}
inline ::std::string* ClipboardEvent::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClipboardEvent.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardEvent::release_mime_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClipboardEvent.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardEvent::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClipboardEvent.mime_type)
}

// bytes data = 2;
inline void ClipboardEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardEvent::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClipboardEvent.data)
  return data_.GetNoArena();
}
inline void ClipboardEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClipboardEvent.data)
}
#if LANG_CXX11
inline void ClipboardEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClipboardEvent.data)
}
#endif
inline void ClipboardEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClipboardEvent.data)
}
inline void ClipboardEvent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClipboardEvent.data)
}
inline ::std::string* ClipboardEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClipboardEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardEvent::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClipboardEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClipboardEvent.data)
}

// -------------------------------------------------------------------

// CursorShape

// uint32 flags = 1;
inline void CursorShape::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 CursorShape::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.flags)
  return flags_;
}
inline void CursorShape::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.flags)
}

// int32 width = 2;
inline void CursorShape::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.width)
  return width_;
}
inline void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.width)
}

// int32 height = 3;
inline void CursorShape::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.height)
  return height_;
}
inline void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.height)
}

// int32 hotspot_x = 4;
inline void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
inline void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.hotspot_x)
}

// int32 hotspot_y = 5;
inline void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
inline void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.hotspot_y)
}

// bytes data = 6;
inline void CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CursorShape::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CursorShape.data)
  return data_.GetNoArena();
}
inline void CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CursorShape.data)
}
#if LANG_CXX11
inline void CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CursorShape.data)
}
#endif
inline void CursorShape::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CursorShape.data)
}
inline void CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CursorShape.data)
}
inline ::std::string* CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CursorShape.data)
}

// -------------------------------------------------------------------

// VideoRect

// int32 x = 1;
inline void VideoRect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 VideoRect::x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.x)
  return x_;
}
inline void VideoRect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.x)
}

// int32 y = 2;
inline void VideoRect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 VideoRect::y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.y)
  return y_;
}
inline void VideoRect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.y)
}

// int32 width = 3;
inline void VideoRect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoRect::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.width)
  return width_;
}
inline void VideoRect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.width)
}

// int32 height = 4;
inline void VideoRect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoRect::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.height)
  return height_;
}
inline void VideoRect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.height)
}

// -------------------------------------------------------------------

// VideoPixelFormat

// uint32 bits_per_pixel = 1;
inline void VideoPixelFormat::clear_bits_per_pixel() {
  bits_per_pixel_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.bits_per_pixel)
  return bits_per_pixel_;
}
inline void VideoPixelFormat::set_bits_per_pixel(::google::protobuf::uint32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.bits_per_pixel)
}

// uint32 red_max = 2;
inline void VideoPixelFormat::clear_red_max() {
  red_max_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::red_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_max)
  return red_max_;
}
inline void VideoPixelFormat::set_red_max(::google::protobuf::uint32 value) {
  
  red_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_max)
}

// uint32 green_max = 3;
inline void VideoPixelFormat::clear_green_max() {
  green_max_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::green_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_max)
  return green_max_;
}
inline void VideoPixelFormat::set_green_max(::google::protobuf::uint32 value) {
  
  green_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_max)
}

// uint32 blue_max = 4;
inline void VideoPixelFormat::clear_blue_max() {
  blue_max_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::blue_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_max)
  return blue_max_;
}
inline void VideoPixelFormat::set_blue_max(::google::protobuf::uint32 value) {
  
  blue_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_max)
}

// uint32 red_shift = 5;
inline void VideoPixelFormat::clear_red_shift() {
  red_shift_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::red_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_shift)
  return red_shift_;
}
inline void VideoPixelFormat::set_red_shift(::google::protobuf::uint32 value) {
  
  red_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_shift)
}

// uint32 green_shift = 6;
inline void VideoPixelFormat::clear_green_shift() {
  green_shift_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::green_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_shift)
  return green_shift_;
}
inline void VideoPixelFormat::set_green_shift(::google::protobuf::uint32 value) {
  
  green_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_shift)
}

// uint32 blue_shift = 7;
inline void VideoPixelFormat::clear_blue_shift() {
  blue_shift_ = 0u;
}
inline ::google::protobuf::uint32 VideoPixelFormat::blue_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_shift)
  return blue_shift_;
}
inline void VideoPixelFormat::set_blue_shift(::google::protobuf::uint32 value) {
  
  blue_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_shift)
}

// -------------------------------------------------------------------

// VideoSize

// int32 width = 1;
inline void VideoSize::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoSize::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.width)
  return width_;
}
inline void VideoSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.width)
}

// int32 height = 2;
inline void VideoSize::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoSize::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.height)
  return height_;
}
inline void VideoSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.height)
}

// -------------------------------------------------------------------

// VideoPacket

// .aspia.proto.VideoEncoding encoding = 1;
inline void VideoPacket::clear_encoding() {
  encoding_ = 0;
}
inline ::aspia::proto::VideoEncoding VideoPacket::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(encoding_);
}
inline void VideoPacket::set_encoding(::aspia::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.encoding)
}

// .aspia.proto.VideoSize screen_size = 2;
inline bool VideoPacket::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
inline void VideoPacket::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
inline const ::aspia::proto::VideoSize& VideoPacket::screen_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::aspia::proto::VideoSize::internal_default_instance();
}
inline ::aspia::proto::VideoSize* VideoPacket::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::aspia::proto::VideoSize;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.screen_size)
  return screen_size_;
}
inline ::aspia::proto::VideoSize* VideoPacket::release_screen_size() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.screen_size)
  
  ::aspia::proto::VideoSize* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
inline void VideoPacket::set_allocated_screen_size(::aspia::proto::VideoSize* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.screen_size)
}

// .aspia.proto.VideoPixelFormat pixel_format = 3;
inline bool VideoPacket::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void VideoPacket::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::aspia::proto::VideoPixelFormat& VideoPacket::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
inline ::aspia::proto::VideoPixelFormat* VideoPacket::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.pixel_format)
  return pixel_format_;
}
inline ::aspia::proto::VideoPixelFormat* VideoPacket::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void VideoPacket::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.pixel_format)
}

// repeated .aspia.proto.VideoRect dirty_rect = 4;
inline int VideoPacket::dirty_rect_size() const {
  return dirty_rect_.size();
}
inline void VideoPacket::clear_dirty_rect() {
  dirty_rect_.Clear();
}
inline const ::aspia::proto::VideoRect& VideoPacket::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Get(index);
}
inline ::aspia::proto::VideoRect* VideoPacket::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Mutable(index);
}
inline ::aspia::proto::VideoRect* VideoPacket::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >*
VideoPacket::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.VideoPacket.dirty_rect)
  return &dirty_rect_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >&
VideoPacket::dirty_rect() const {
  // @@protoc_insertion_point(field_list:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_;
}

// bytes data = 5;
inline void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.data)
  return data_.GetNoArena();
}
inline void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.data)
}
#if LANG_CXX11
inline void VideoPacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoPacket.data)
}
#endif
inline void VideoPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoPacket.data)
}
inline ::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.data)
}

// -------------------------------------------------------------------

// AudioPacket

// .aspia.proto.AudioEncoding encoding = 1;
inline void AudioPacket::clear_encoding() {
  encoding_ = 0;
}
inline ::aspia::proto::AudioEncoding AudioPacket::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AudioPacket.encoding)
  return static_cast< ::aspia::proto::AudioEncoding >(encoding_);
}
inline void AudioPacket::set_encoding(::aspia::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AudioPacket.encoding)
}

// -------------------------------------------------------------------

// DesktopConfigRequest

// uint32 video_encodings = 1;
inline void DesktopConfigRequest::clear_video_encodings() {
  video_encodings_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfigRequest::video_encodings() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfigRequest.video_encodings)
  return video_encodings_;
}
inline void DesktopConfigRequest::set_video_encodings(::google::protobuf::uint32 value) {
  
  video_encodings_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfigRequest.video_encodings)
}

// uint32 audio_encodings = 2;
inline void DesktopConfigRequest::clear_audio_encodings() {
  audio_encodings_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfigRequest::audio_encodings() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfigRequest.audio_encodings)
  return audio_encodings_;
}
inline void DesktopConfigRequest::set_audio_encodings(::google::protobuf::uint32 value) {
  
  audio_encodings_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfigRequest.audio_encodings)
}

// uint32 features = 3;
inline void DesktopConfigRequest::clear_features() {
  features_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfigRequest::features() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfigRequest.features)
  return features_;
}
inline void DesktopConfigRequest::set_features(::google::protobuf::uint32 value) {
  
  features_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfigRequest.features)
}

// -------------------------------------------------------------------

// DesktopConfig

// uint32 flags = 1;
inline void DesktopConfig::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.flags)
  return flags_;
}
inline void DesktopConfig::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfig.flags)
}

// .aspia.proto.VideoEncoding video_encoding = 2;
inline void DesktopConfig::clear_video_encoding() {
  video_encoding_ = 0;
}
inline ::aspia::proto::VideoEncoding DesktopConfig::video_encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.video_encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(video_encoding_);
}
inline void DesktopConfig::set_video_encoding(::aspia::proto::VideoEncoding value) {
  
  video_encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfig.video_encoding)
}

// .aspia.proto.AudioEncoding audio_encoding = 3;
inline void DesktopConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::aspia::proto::AudioEncoding DesktopConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.audio_encoding)
  return static_cast< ::aspia::proto::AudioEncoding >(audio_encoding_);
}
inline void DesktopConfig::set_audio_encoding(::aspia::proto::AudioEncoding value) {
  
  audio_encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfig.audio_encoding)
}

// .aspia.proto.VideoPixelFormat pixel_format = 4;
inline bool DesktopConfig::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void DesktopConfig::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::aspia::proto::VideoPixelFormat& DesktopConfig::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
inline ::aspia::proto::VideoPixelFormat* DesktopConfig::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.DesktopConfig.pixel_format)
  return pixel_format_;
}
inline ::aspia::proto::VideoPixelFormat* DesktopConfig::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.DesktopConfig.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void DesktopConfig::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DesktopConfig.pixel_format)
}

// uint32 update_interval = 5;
inline void DesktopConfig::clear_update_interval() {
  update_interval_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::update_interval() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.update_interval)
  return update_interval_;
}
inline void DesktopConfig::set_update_interval(::google::protobuf::uint32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfig.update_interval)
}

// uint32 compress_ratio = 6;
inline void DesktopConfig::clear_compress_ratio() {
  compress_ratio_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::compress_ratio() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DesktopConfig.compress_ratio)
  return compress_ratio_;
}
inline void DesktopConfig::set_compress_ratio(::google::protobuf::uint32 value) {
  
  compress_ratio_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DesktopConfig.compress_ratio)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace aspia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::KeyEvent_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::PointerEvent_ButtonMask> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::CursorShape_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DesktopConfig_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::VideoEncoding> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::AudioEncoding> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DesktopFeatures> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_desktop_5fsession_5fmessage_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
namespace file_transfer {
class HostToClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostToClient> {
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost> {
} _ClientToHost_default_instance_;

namespace protobuf_file_5ftransfer_5fsession_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HostToClient_default_instance_.Shutdown();
  _ClientToHost_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::aspia::proto::protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  _HostToClient_default_instance_.DefaultConstruct();
  _ClientToHost_default_instance_.DefaultConstruct();
  _HostToClient_default_instance_.get_mutable()->drive_list_ = const_cast< ::aspia::proto::DriveList*>(
      ::aspia::proto::DriveList::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->directory_list_ = const_cast< ::aspia::proto::DirectoryList*>(
      ::aspia::proto::DirectoryList::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->file_ = const_cast< ::aspia::proto::File*>(
      ::aspia::proto::File::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->drive_list_request_ = const_cast< ::aspia::proto::DriveListRequest*>(
      ::aspia::proto::DriveListRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->directory_list_request_ = const_cast< ::aspia::proto::DirectoryListRequest*>(
      ::aspia::proto::DirectoryListRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_request_ = const_cast< ::aspia::proto::FileRequest*>(
      ::aspia::proto::FileRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_ = const_cast< ::aspia::proto::File*>(
      ::aspia::proto::File::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::aspia::proto::protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_5fsession_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kDriveListFieldNumber;
const int HostToClient::kDirectoryListFieldNumber;
const int HostToClient::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list()) {
    drive_list_ = new ::aspia::proto::DriveList(*from.drive_list_);
  } else {
    drive_list_ = NULL;
  }
  if (from.has_directory_list()) {
    directory_list_ = new ::aspia::proto::DirectoryList(*from.directory_list_);
  } else {
    directory_list_ = NULL;
  }
  if (from.has_file()) {
    file_ = new ::aspia::proto::File(*from.file_);
  } else {
    file_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.HostToClient)
}

void HostToClient::SharedCtor() {
  ::memset(&drive_list_, 0, reinterpret_cast<char*>(&file_) -
    reinterpret_cast<char*>(&drive_list_) + sizeof(file_));
  _cached_size_ = 0;
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_list_;
  }
  if (this != internal_default_instance()) {
    delete directory_list_;
  }
  if (this != internal_default_instance()) {
    delete file_;
  }
}

void HostToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostToClient& HostToClient::default_instance() {
  protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostToClient* HostToClient::New(::google::protobuf::Arena* arena) const {
  HostToClient* n = new HostToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.HostToClient)
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) {
    delete drive_list_;
  }
  drive_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && directory_list_ != NULL) {
    delete directory_list_;
  }
  directory_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_ != NULL) {
    delete file_;
  }
  file_ = NULL;
}

bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.HostToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DriveList drive_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DirectoryList directory_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directory_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.File file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.HostToClient)
  return false;
#undef DO_
}

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DriveList drive_list = 1;
  if (this->has_drive_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->drive_list_, output);
  }

  // .aspia.proto.DirectoryList directory_list = 2;
  if (this->has_directory_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->directory_list_, output);
  }

  // .aspia.proto.File file = 3;
  if (this->has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->file_, output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.HostToClient)
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.HostToClient)
  size_t total_size = 0;

  // .aspia.proto.DriveList drive_list = 1;
  if (this->has_drive_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_list_);
  }

  // .aspia.proto.DirectoryList directory_list = 2;
  if (this->has_directory_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->directory_list_);
  }

  // .aspia.proto.File file = 3;
  if (this->has_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostToClient*>(&from));
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_list()) {
    mutable_drive_list()->::aspia::proto::DriveList::MergeFrom(from.drive_list());
  }
  if (from.has_directory_list()) {
    mutable_directory_list()->::aspia::proto::DirectoryList::MergeFrom(from.directory_list());
  }
  if (from.has_file()) {
    mutable_file()->::aspia::proto::File::MergeFrom(from.file());
  }
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  std::swap(drive_list_, other->drive_list_);
  std::swap(directory_list_, other->directory_list_);
  std::swap(file_, other->file_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostToClient::GetTypeName() const {
  return "aspia.proto.file_transfer.HostToClient";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostToClient

// .aspia.proto.DriveList drive_list = 1;
bool HostToClient::has_drive_list() const {
  return this != internal_default_instance() && drive_list_ != NULL;
}
void HostToClient::clear_drive_list() {
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) delete drive_list_;
  drive_list_ = NULL;
}
const ::aspia::proto::DriveList& HostToClient::drive_list() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.drive_list)
  return drive_list_ != NULL ? *drive_list_
                         : *::aspia::proto::DriveList::internal_default_instance();
}
::aspia::proto::DriveList* HostToClient::mutable_drive_list() {
  
  if (drive_list_ == NULL) {
    drive_list_ = new ::aspia::proto::DriveList;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.drive_list)
  return drive_list_;
}
::aspia::proto::DriveList* HostToClient::release_drive_list() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.drive_list)
  
  ::aspia::proto::DriveList* temp = drive_list_;
  drive_list_ = NULL;
  return temp;
}
void HostToClient::set_allocated_drive_list(::aspia::proto::DriveList* drive_list) {
  delete drive_list_;
  drive_list_ = drive_list;
  if (drive_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.drive_list)
}

// .aspia.proto.DirectoryList directory_list = 2;
bool HostToClient::has_directory_list() const {
  return this != internal_default_instance() && directory_list_ != NULL;
}
void HostToClient::clear_directory_list() {
  if (GetArenaNoVirtual() == NULL && directory_list_ != NULL) delete directory_list_;
  directory_list_ = NULL;
}
const ::aspia::proto::DirectoryList& HostToClient::directory_list() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.directory_list)
  return directory_list_ != NULL ? *directory_list_
                         : *::aspia::proto::DirectoryList::internal_default_instance();
}
::aspia::proto::DirectoryList* HostToClient::mutable_directory_list() {
  
  if (directory_list_ == NULL) {
    directory_list_ = new ::aspia::proto::DirectoryList;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.directory_list)
  return directory_list_;
}
::aspia::proto::DirectoryList* HostToClient::release_directory_list() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.directory_list)
  
  ::aspia::proto::DirectoryList* temp = directory_list_;
  directory_list_ = NULL;
  return temp;
}
void HostToClient::set_allocated_directory_list(::aspia::proto::DirectoryList* directory_list) {
  delete directory_list_;
  directory_list_ = directory_list;
  if (directory_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.directory_list)
}

// .aspia.proto.File file = 3;
bool HostToClient::has_file() const {
  return this != internal_default_instance() && file_ != NULL;
}
void HostToClient::clear_file() {
  if (GetArenaNoVirtual() == NULL && file_ != NULL) delete file_;
  file_ = NULL;
}
const ::aspia::proto::File& HostToClient::file() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.file)
  return file_ != NULL ? *file_
                         : *::aspia::proto::File::internal_default_instance();
}
::aspia::proto::File* HostToClient::mutable_file() {
  
  if (file_ == NULL) {
    file_ = new ::aspia::proto::File;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.file)
  return file_;
}
::aspia::proto::File* HostToClient::release_file() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.file)
  
  ::aspia::proto::File* temp = file_;
  file_ = NULL;
  return temp;
}
void HostToClient::set_allocated_file(::aspia::proto::File* file) {
  delete file_;
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kDriveListRequestFieldNumber;
const int ClientToHost::kDirectoryListRequestFieldNumber;
const int ClientToHost::kFileRequestFieldNumber;
const int ClientToHost::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list_request()) {
    drive_list_request_ = new ::aspia::proto::DriveListRequest(*from.drive_list_request_);
  } else {
    drive_list_request_ = NULL;
  }
  if (from.has_directory_list_request()) {
    directory_list_request_ = new ::aspia::proto::DirectoryListRequest(*from.directory_list_request_);
  } else {
    directory_list_request_ = NULL;
  }
  if (from.has_file_request()) {
    file_request_ = new ::aspia::proto::FileRequest(*from.file_request_);
  } else {
    file_request_ = NULL;
  }
  if (from.has_file()) {
    file_ = new ::aspia::proto::File(*from.file_);
  } else {
    file_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::memset(&drive_list_request_, 0, reinterpret_cast<char*>(&file_) -
    reinterpret_cast<char*>(&drive_list_request_) + sizeof(file_));
  _cached_size_ = 0;
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_list_request_;
  }
  if (this != internal_default_instance()) {
    delete directory_list_request_;
  }
  if (this != internal_default_instance()) {
    delete file_request_;
  }
  if (this != internal_default_instance()) {
    delete file_;
  }
}

void ClientToHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToHost& ClientToHost::default_instance() {
  protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToHost* ClientToHost::New(::google::protobuf::Arena* arena) const {
  ClientToHost* n = new ClientToHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.ClientToHost)
  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) {
    delete drive_list_request_;
  }
  drive_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && directory_list_request_ != NULL) {
    delete directory_list_request_;
  }
  directory_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_request_ != NULL) {
    delete file_request_;
  }
  file_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_ != NULL) {
    delete file_;
  }
  file_ = NULL;
}

bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.ClientToHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DriveListRequest drive_list_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DirectoryListRequest directory_list_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directory_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FileRequest file_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.File file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.ClientToHost)
  return false;
#undef DO_
}

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->drive_list_request_, output);
  }

  // .aspia.proto.DirectoryListRequest directory_list_request = 2;
  if (this->has_directory_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->directory_list_request_, output);
  }

  // .aspia.proto.FileRequest file_request = 3;
  if (this->has_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->file_request_, output);
  }

  // .aspia.proto.File file = 4;
  if (this->has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->file_, output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.ClientToHost)
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.ClientToHost)
  size_t total_size = 0;

  // .aspia.proto.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_list_request_);
  }

  // .aspia.proto.DirectoryListRequest directory_list_request = 2;
  if (this->has_directory_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->directory_list_request_);
  }

  // .aspia.proto.FileRequest file_request = 3;
  if (this->has_file_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_request_);
  }

  // .aspia.proto.File file = 4;
  if (this->has_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToHost*>(&from));
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_list_request()) {
    mutable_drive_list_request()->::aspia::proto::DriveListRequest::MergeFrom(from.drive_list_request());
  }
  if (from.has_directory_list_request()) {
    mutable_directory_list_request()->::aspia::proto::DirectoryListRequest::MergeFrom(from.directory_list_request());
  }
  if (from.has_file_request()) {
    mutable_file_request()->::aspia::proto::FileRequest::MergeFrom(from.file_request());
  }
  if (from.has_file()) {
    mutable_file()->::aspia::proto::File::MergeFrom(from.file());
  }
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  std::swap(drive_list_request_, other->drive_list_request_);
  std::swap(directory_list_request_, other->directory_list_request_);
  std::swap(file_request_, other->file_request_);
  std::swap(file_, other->file_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToHost::GetTypeName() const {
  return "aspia.proto.file_transfer.ClientToHost";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToHost

// .aspia.proto.DriveListRequest drive_list_request = 1;
bool ClientToHost::has_drive_list_request() const {
  return this != internal_default_instance() && drive_list_request_ != NULL;
}
void ClientToHost::clear_drive_list_request() {
  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) delete drive_list_request_;
  drive_list_request_ = NULL;
}
const ::aspia::proto::DriveListRequest& ClientToHost::drive_list_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.drive_list_request)
  return drive_list_request_ != NULL ? *drive_list_request_
                         : *::aspia::proto::DriveListRequest::internal_default_instance();
}
::aspia::proto::DriveListRequest* ClientToHost::mutable_drive_list_request() {
  
  if (drive_list_request_ == NULL) {
    drive_list_request_ = new ::aspia::proto::DriveListRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.drive_list_request)
  return drive_list_request_;
}
::aspia::proto::DriveListRequest* ClientToHost::release_drive_list_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.drive_list_request)
  
  ::aspia::proto::DriveListRequest* temp = drive_list_request_;
  drive_list_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_drive_list_request(::aspia::proto::DriveListRequest* drive_list_request) {
  delete drive_list_request_;
  drive_list_request_ = drive_list_request;
  if (drive_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.drive_list_request)
}

// .aspia.proto.DirectoryListRequest directory_list_request = 2;
bool ClientToHost::has_directory_list_request() const {
  return this != internal_default_instance() && directory_list_request_ != NULL;
}
void ClientToHost::clear_directory_list_request() {
  if (GetArenaNoVirtual() == NULL && directory_list_request_ != NULL) delete directory_list_request_;
  directory_list_request_ = NULL;
}
const ::aspia::proto::DirectoryListRequest& ClientToHost::directory_list_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.directory_list_request)
  return directory_list_request_ != NULL ? *directory_list_request_
                         : *::aspia::proto::DirectoryListRequest::internal_default_instance();
}
::aspia::proto::DirectoryListRequest* ClientToHost::mutable_directory_list_request() {
  
  if (directory_list_request_ == NULL) {
    directory_list_request_ = new ::aspia::proto::DirectoryListRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.directory_list_request)
  return directory_list_request_;
}
::aspia::proto::DirectoryListRequest* ClientToHost::release_directory_list_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.directory_list_request)
  
  ::aspia::proto::DirectoryListRequest* temp = directory_list_request_;
  directory_list_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_directory_list_request(::aspia::proto::DirectoryListRequest* directory_list_request) {
  delete directory_list_request_;
  directory_list_request_ = directory_list_request;
  if (directory_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.directory_list_request)
}

// .aspia.proto.FileRequest file_request = 3;
bool ClientToHost::has_file_request() const {
  return this != internal_default_instance() && file_request_ != NULL;
}
void ClientToHost::clear_file_request() {
  if (GetArenaNoVirtual() == NULL && file_request_ != NULL) delete file_request_;
  file_request_ = NULL;
}
const ::aspia::proto::FileRequest& ClientToHost::file_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file_request)
  return file_request_ != NULL ? *file_request_
                         : *::aspia::proto::FileRequest::internal_default_instance();
}
::aspia::proto::FileRequest* ClientToHost::mutable_file_request() {
  
  if (file_request_ == NULL) {
    file_request_ = new ::aspia::proto::FileRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file_request)
  return file_request_;
}
::aspia::proto::FileRequest* ClientToHost::release_file_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file_request)
  
  ::aspia::proto::FileRequest* temp = file_request_;
  file_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file_request(::aspia::proto::FileRequest* file_request) {
  delete file_request_;
  file_request_ = file_request;
  if (file_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file_request)
}

// .aspia.proto.File file = 4;
bool ClientToHost::has_file() const {
  return this != internal_default_instance() && file_ != NULL;
}
void ClientToHost::clear_file() {
  if (GetArenaNoVirtual() == NULL && file_ != NULL) delete file_;
  file_ = NULL;
}
const ::aspia::proto::File& ClientToHost::file() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file)
  return file_ != NULL ? *file_
                         : *::aspia::proto::File::internal_default_instance();
}
::aspia::proto::File* ClientToHost::mutable_file() {
  
  if (file_ == NULL) {
    file_ = new ::aspia::proto::File;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file)
  return file_;
}
::aspia::proto::File* ClientToHost::release_file() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file)
  
  ::aspia::proto::File* temp = file_;
  file_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file(::aspia::proto::File* file) {
  delete file_;
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace file_transfer
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

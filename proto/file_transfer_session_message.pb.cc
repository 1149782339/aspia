// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class DriveListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveListItem> {
} _DriveListItem_default_instance_;
class DriveListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList> {
} _DriveList_default_instance_;
class DriveListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveListRequest> {
} _DriveListRequest_default_instance_;
class DirectoryListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryListItem> {
} _DirectoryListItem_default_instance_;
class DirectoryListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryList> {
} _DirectoryList_default_instance_;
class DirectoryListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryListRequest> {
} _DirectoryListRequest_default_instance_;
class FileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<File> {
} _File_default_instance_;
class FileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileRequest> {
} _FileRequest_default_instance_;
class RequestFailureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestFailure> {
} _RequestFailure_default_instance_;

namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DriveListItem_default_instance_.Shutdown();
  _DriveList_default_instance_.Shutdown();
  _DriveListRequest_default_instance_.Shutdown();
  _DirectoryListItem_default_instance_.Shutdown();
  _DirectoryList_default_instance_.Shutdown();
  _DirectoryListRequest_default_instance_.Shutdown();
  _File_default_instance_.Shutdown();
  _FileRequest_default_instance_.Shutdown();
  _RequestFailure_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DriveListItem_default_instance_.DefaultConstruct();
  _DriveList_default_instance_.DefaultConstruct();
  _DriveListRequest_default_instance_.DefaultConstruct();
  _DirectoryListItem_default_instance_.DefaultConstruct();
  _DirectoryList_default_instance_.DefaultConstruct();
  _DirectoryListRequest_default_instance_.DefaultConstruct();
  _File_default_instance_.DefaultConstruct();
  _FileRequest_default_instance_.DefaultConstruct();
  _RequestFailure_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto

bool DriveListItem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveListItem_Type DriveListItem::UNKNOWN;
const DriveListItem_Type DriveListItem::CDROM;
const DriveListItem_Type DriveListItem::REMOVABLE;
const DriveListItem_Type DriveListItem::HARDDRIVE;
const DriveListItem_Type DriveListItem::DESKTOP_FOLDER;
const DriveListItem_Type DriveListItem::Type_MIN;
const DriveListItem_Type DriveListItem::Type_MAX;
const int DriveListItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DirectoryListItem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectoryListItem_Type DirectoryListItem::UNKNOWN;
const DirectoryListItem_Type DirectoryListItem::DIRECTORY;
const DirectoryListItem_Type DirectoryListItem::FILE;
const DirectoryListItem_Type DirectoryListItem::Type_MIN;
const DirectoryListItem_Type DirectoryListItem::Type_MAX;
const int DirectoryListItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool File_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const File_Flags File::UNKNOWN_PACKET;
const File_Flags File::FIRST_PACKET;
const File_Flags File::PARTITION_PACKET;
const File_Flags File::LAST_PACKET;
const File_Flags File::Flags_MIN;
const File_Flags File::Flags_MAX;
const int File::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RequestFailure_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestFailure_ErrorCode RequestFailure::UNKNOWN_ERROR;
const RequestFailure_ErrorCode RequestFailure::NO_CONSOLE_SESSION;
const RequestFailure_ErrorCode RequestFailure::ACCESS_DENIED;
const RequestFailure_ErrorCode RequestFailure::FILE_NOT_FOUND;
const RequestFailure_ErrorCode RequestFailure::PATH_NOT_FOUND;
const RequestFailure_ErrorCode RequestFailure::FILE_EXISTS;
const RequestFailure_ErrorCode RequestFailure::NOT_ENOUGH_MEMORY;
const RequestFailure_ErrorCode RequestFailure::ErrorCode_MIN;
const RequestFailure_ErrorCode RequestFailure::ErrorCode_MAX;
const int RequestFailure::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListItem::kPathFieldNumber;
const int DriveListItem::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListItem::DriveListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveListItem)
}
DriveListItem::DriveListItem(const DriveListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveListItem)
}

void DriveListItem::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DriveListItem::~DriveListItem() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveListItem)
  SharedDtor();
}

void DriveListItem::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveListItem& DriveListItem::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveListItem* DriveListItem::New(::google::protobuf::Arena* arena) const {
  DriveListItem* n = new DriveListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveListItem)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool DriveListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DriveListItem.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DriveListItem.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DriveListItem_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveListItem)
  return false;
#undef DO_
}

void DriveListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DriveListItem.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .aspia.proto.DriveListItem.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveListItem)
}

size_t DriveListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveListItem)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .aspia.proto.DriveListItem.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListItem*>(&from));
}

void DriveListItem::MergeFrom(const DriveListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DriveListItem::CopyFrom(const DriveListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListItem::IsInitialized() const {
  return true;
}

void DriveListItem::Swap(DriveListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListItem::InternalSwap(DriveListItem* other) {
  path_.Swap(&other->path_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveListItem::GetTypeName() const {
  return "aspia.proto.DriveListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListItem

// string path = 1;
void DriveListItem::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveListItem::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.path)
  return path_.GetNoArena();
}
void DriveListItem::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.path)
}
#if LANG_CXX11
void DriveListItem::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveListItem.path)
}
#endif
void DriveListItem::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveListItem.path)
}
void DriveListItem::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveListItem.path)
}
::std::string* DriveListItem::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveListItem.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveListItem::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveListItem.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveListItem::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveListItem.path)
}

// .aspia.proto.DriveListItem.Type type = 2;
void DriveListItem::clear_type() {
  type_ = 0;
}
::aspia::proto::DriveListItem_Type DriveListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.type)
  return static_cast< ::aspia::proto::DriveListItem_Type >(type_);
}
void DriveListItem::set_type(::aspia::proto::DriveListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList::DriveList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveList)
}
DriveList::DriveList(const DriveList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveList)
}

void DriveList::SharedCtor() {
  _cached_size_ = 0;
}

DriveList::~DriveList() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveList)
  SharedDtor();
}

void DriveList::SharedDtor() {
}

void DriveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList& DriveList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList* DriveList::New(::google::protobuf::Arena* arena) const {
  DriveList* n = new DriveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveList)
  item_.Clear();
}

bool DriveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DriveListItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveList)
  return false;
#undef DO_
}

void DriveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DriveListItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveList)
}

size_t DriveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveList)
  size_t total_size = 0;

  // repeated .aspia.proto.DriveListItem item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList*>(&from));
}

void DriveList::MergeFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DriveList::CopyFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList::IsInitialized() const {
  return true;
}

void DriveList::Swap(DriveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList::InternalSwap(DriveList* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList::GetTypeName() const {
  return "aspia.proto.DriveList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList

// repeated .aspia.proto.DriveListItem item = 1;
int DriveList::item_size() const {
  return item_.size();
}
void DriveList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::DriveListItem& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.item)
  return item_.Get(index);
}
::aspia::proto::DriveListItem* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.item)
  return item_.Mutable(index);
}
::aspia::proto::DriveListItem* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DriveList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DriveList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DriveList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListRequest::DriveListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveListRequest)
}
DriveListRequest::DriveListRequest(const DriveListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveListRequest)
}

void DriveListRequest::SharedCtor() {
  dummy_ = 0u;
  _cached_size_ = 0;
}

DriveListRequest::~DriveListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveListRequest)
  SharedDtor();
}

void DriveListRequest::SharedDtor() {
}

void DriveListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveListRequest& DriveListRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveListRequest* DriveListRequest::New(::google::protobuf::Arena* arena) const {
  DriveListRequest* n = new DriveListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveListRequest)
  dummy_ = 0u;
}

bool DriveListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveListRequest)
  return false;
#undef DO_
}

void DriveListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveListRequest)
}

size_t DriveListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveListRequest)
  size_t total_size = 0;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListRequest*>(&from));
}

void DriveListRequest::MergeFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void DriveListRequest::CopyFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListRequest::IsInitialized() const {
  return true;
}

void DriveListRequest::Swap(DriveListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListRequest::InternalSwap(DriveListRequest* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveListRequest::GetTypeName() const {
  return "aspia.proto.DriveListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListRequest

// uint32 dummy = 1;
void DriveListRequest::clear_dummy() {
  dummy_ = 0u;
}
::google::protobuf::uint32 DriveListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListRequest.dummy)
  return dummy_;
}
void DriveListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListRequest.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryListItem::kNameFieldNumber;
const int DirectoryListItem::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryListItem::DirectoryListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryListItem)
}
DirectoryListItem::DirectoryListItem(const DirectoryListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryListItem)
}

void DirectoryListItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DirectoryListItem::~DirectoryListItem() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryListItem)
  SharedDtor();
}

void DirectoryListItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryListItem& DirectoryListItem::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryListItem* DirectoryListItem::New(::google::protobuf::Arena* arena) const {
  DirectoryListItem* n = new DirectoryListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryListItem)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool DirectoryListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryListItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DirectoryListItem.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DirectoryListItem_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryListItem)
  return false;
#undef DO_
}

void DirectoryListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryListItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.proto.DirectoryListItem.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryListItem)
}

size_t DirectoryListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryListItem)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aspia.proto.DirectoryListItem.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryListItem*>(&from));
}

void DirectoryListItem::MergeFrom(const DirectoryListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DirectoryListItem::CopyFrom(const DirectoryListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryListItem::IsInitialized() const {
  return true;
}

void DirectoryListItem::Swap(DirectoryListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryListItem::InternalSwap(DirectoryListItem* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryListItem::GetTypeName() const {
  return "aspia.proto.DirectoryListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryListItem

// string name = 1;
void DirectoryListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryListItem::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.name)
  return name_.GetNoArena();
}
void DirectoryListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.name)
}
#if LANG_CXX11
void DirectoryListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListItem.name)
}
#endif
void DirectoryListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListItem.name)
}
void DirectoryListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListItem.name)
}
::std::string* DirectoryListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryListItem::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListItem.name)
}

// .aspia.proto.DirectoryListItem.Type type = 2;
void DirectoryListItem::clear_type() {
  type_ = 0;
}
::aspia::proto::DirectoryListItem_Type DirectoryListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.type)
  return static_cast< ::aspia::proto::DirectoryListItem_Type >(type_);
}
void DirectoryListItem::set_type(::aspia::proto::DirectoryListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryList::kPathFieldNumber;
const int DirectoryList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryList::DirectoryList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryList)
}
DirectoryList::DirectoryList(const DirectoryList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryList)
}

void DirectoryList::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DirectoryList::~DirectoryList() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryList)
  SharedDtor();
}

void DirectoryList::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryList& DirectoryList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryList* DirectoryList::New(::google::protobuf::Arena* arena) const {
  DirectoryList* n = new DirectoryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryList)
  item_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DirectoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryList.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.DirectoryListItem item = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryList)
  return false;
#undef DO_
}

void DirectoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryList.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated .aspia.proto.DirectoryListItem item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryList)
}

size_t DirectoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryList)
  size_t total_size = 0;

  // repeated .aspia.proto.DirectoryListItem item = 2;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryList*>(&from));
}

void DirectoryList::MergeFrom(const DirectoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DirectoryList::CopyFrom(const DirectoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryList::IsInitialized() const {
  return true;
}

void DirectoryList::Swap(DirectoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryList::InternalSwap(DirectoryList* other) {
  item_.InternalSwap(&other->item_);
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryList::GetTypeName() const {
  return "aspia.proto.DirectoryList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryList

// string path = 1;
void DirectoryList::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryList::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.path)
  return path_.GetNoArena();
}
void DirectoryList::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryList.path)
}
#if LANG_CXX11
void DirectoryList::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryList.path)
}
#endif
void DirectoryList::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryList.path)
}
void DirectoryList::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryList.path)
}
::std::string* DirectoryList::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryList::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryList.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryList::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryList.path)
}

// repeated .aspia.proto.DirectoryListItem item = 2;
int DirectoryList::item_size() const {
  return item_.size();
}
void DirectoryList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::DirectoryListItem& DirectoryList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.item)
  return item_.Get(index);
}
::aspia::proto::DirectoryListItem* DirectoryList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.item)
  return item_.Mutable(index);
}
::aspia::proto::DirectoryListItem* DirectoryList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DirectoryList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >*
DirectoryList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DirectoryList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >&
DirectoryList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DirectoryList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryListRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryListRequest::DirectoryListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryListRequest)
}
DirectoryListRequest::DirectoryListRequest(const DirectoryListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryListRequest)
}

void DirectoryListRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DirectoryListRequest::~DirectoryListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryListRequest)
  SharedDtor();
}

void DirectoryListRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryListRequest& DirectoryListRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryListRequest* DirectoryListRequest::New(::google::protobuf::Arena* arena) const {
  DirectoryListRequest* n = new DirectoryListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryListRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DirectoryListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryListRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryListRequest)
  return false;
#undef DO_
}

void DirectoryListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryListRequest)
}

size_t DirectoryListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryListRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryListRequest*>(&from));
}

void DirectoryListRequest::MergeFrom(const DirectoryListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DirectoryListRequest::CopyFrom(const DirectoryListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryListRequest::IsInitialized() const {
  return true;
}

void DirectoryListRequest::Swap(DirectoryListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryListRequest::InternalSwap(DirectoryListRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryListRequest::GetTypeName() const {
  return "aspia.proto.DirectoryListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryListRequest

// string path = 1;
void DirectoryListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryListRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListRequest.path)
  return path_.GetNoArena();
}
void DirectoryListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListRequest.path)
}
#if LANG_CXX11
void DirectoryListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListRequest.path)
}
#endif
void DirectoryListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListRequest.path)
}
void DirectoryListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListRequest.path)
}
::std::string* DirectoryListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryListRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int File::kPathFieldNumber;
const int File::kFlagsFieldNumber;
const int File::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

File::File()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.File)
}
File::File(const File& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.File)
}

void File::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  _cached_size_ = 0;
}

File::~File() {
  // @@protoc_insertion_point(destructor:aspia.proto.File)
  SharedDtor();
}

void File::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const File& File::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

File* File::New(::google::protobuf::Arena* arena) const {
  File* n = new File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.File)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.File.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.File.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.File)
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.File)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const File*>(&from));
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::Swap(File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void File::InternalSwap(File* other) {
  path_.Swap(&other->path_);
  data_.Swap(&other->data_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string File::GetTypeName() const {
  return "aspia.proto.File";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// File

// string path = 1;
void File::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& File::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.path)
  return path_.GetNoArena();
}
void File::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.File.path)
}
#if LANG_CXX11
void File::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.File.path)
}
#endif
void File::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.File.path)
}
void File::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.File.path)
}
::std::string* File::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.File.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* File::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.File.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void File::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.File.path)
}

// uint32 flags = 2;
void File::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 File::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.flags)
  return flags_;
}
void File::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.File.flags)
}

// bytes data = 3;
void File::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& File::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.data)
  return data_.GetNoArena();
}
void File::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.File.data)
}
#if LANG_CXX11
void File::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.File.data)
}
#endif
void File::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.File.data)
}
void File::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.File.data)
}
::std::string* File::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.File.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* File::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.File.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void File::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.File.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequest::FileRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileRequest)
}

void FileRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileRequest& FileRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileRequest* FileRequest::New(::google::protobuf::Arena* arena) const {
  FileRequest* n = new FileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileRequest)
  return false;
#undef DO_
}

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileRequest)
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileRequest*>(&from));
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequest::InternalSwap(FileRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileRequest::GetTypeName() const {
  return "aspia.proto.FileRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileRequest

// string path = 1;
void FileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileRequest.path)
  return path_.GetNoArena();
}
void FileRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileRequest.path)
}
#if LANG_CXX11
void FileRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileRequest.path)
}
#endif
void FileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileRequest.path)
}
void FileRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileRequest.path)
}
::std::string* FileRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestFailure::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFailure::RequestFailure()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RequestFailure)
}
RequestFailure::RequestFailure(const RequestFailure& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RequestFailure)
}

void RequestFailure::SharedCtor() {
  error_code_ = 0;
  _cached_size_ = 0;
}

RequestFailure::~RequestFailure() {
  // @@protoc_insertion_point(destructor:aspia.proto.RequestFailure)
  SharedDtor();
}

void RequestFailure::SharedDtor() {
}

void RequestFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestFailure& RequestFailure::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestFailure* RequestFailure::New(::google::protobuf::Arena* arena) const {
  RequestFailure* n = new RequestFailure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RequestFailure)
  error_code_ = 0;
}

bool RequestFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RequestFailure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.RequestFailure.ErrorCode error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::aspia::proto::RequestFailure_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RequestFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RequestFailure)
  return false;
#undef DO_
}

void RequestFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RequestFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.RequestFailure.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RequestFailure)
}

size_t RequestFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RequestFailure)
  size_t total_size = 0;

  // .aspia.proto.RequestFailure.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestFailure*>(&from));
}

void RequestFailure::MergeFrom(const RequestFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RequestFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void RequestFailure::CopyFrom(const RequestFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RequestFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFailure::IsInitialized() const {
  return true;
}

void RequestFailure::Swap(RequestFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFailure::InternalSwap(RequestFailure* other) {
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RequestFailure::GetTypeName() const {
  return "aspia.proto.RequestFailure";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFailure

// .aspia.proto.RequestFailure.ErrorCode error_code = 1;
void RequestFailure::clear_error_code() {
  error_code_ = 0;
}
::aspia::proto::RequestFailure_ErrorCode RequestFailure::error_code() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RequestFailure.error_code)
  return static_cast< ::aspia::proto::RequestFailure_ErrorCode >(error_code_);
}
void RequestFailure::set_error_code(::aspia::proto::RequestFailure_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.RequestFailure.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

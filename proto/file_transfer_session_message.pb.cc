// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class RequestStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestStatus> {
} _RequestStatus_default_instance_;
class DriveListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveListItem> {
} _DriveListItem_default_instance_;
class DriveListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList> {
} _DriveList_default_instance_;
class DriveListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveListRequest> {
} _DriveListRequest_default_instance_;
class DirectoryListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryListItem> {
} _DirectoryListItem_default_instance_;
class DirectoryListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryList> {
} _DirectoryList_default_instance_;
class DirectoryListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectoryListRequest> {
} _DirectoryListRequest_default_instance_;
class FilePacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilePacket> {
} _FilePacket_default_instance_;
class FileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileRequest> {
} _FileRequest_default_instance_;
class CreateDirectoryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateDirectoryRequest> {
} _CreateDirectoryRequest_default_instance_;
class RenameRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RenameRequest> {
} _RenameRequest_default_instance_;
class RemoveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoveRequest> {
} _RemoveRequest_default_instance_;

namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _RequestStatus_default_instance_.Shutdown();
  _DriveListItem_default_instance_.Shutdown();
  _DriveList_default_instance_.Shutdown();
  _DriveListRequest_default_instance_.Shutdown();
  _DirectoryListItem_default_instance_.Shutdown();
  _DirectoryList_default_instance_.Shutdown();
  _DirectoryListRequest_default_instance_.Shutdown();
  _FilePacket_default_instance_.Shutdown();
  _FileRequest_default_instance_.Shutdown();
  _CreateDirectoryRequest_default_instance_.Shutdown();
  _RenameRequest_default_instance_.Shutdown();
  _RemoveRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::aspia::proto::protobuf_status_2eproto::InitDefaults();
  _RequestStatus_default_instance_.DefaultConstruct();
  _DriveListItem_default_instance_.DefaultConstruct();
  _DriveList_default_instance_.DefaultConstruct();
  _DriveListRequest_default_instance_.DefaultConstruct();
  _DirectoryListItem_default_instance_.DefaultConstruct();
  _DirectoryList_default_instance_.DefaultConstruct();
  _DirectoryListRequest_default_instance_.DefaultConstruct();
  _FilePacket_default_instance_.DefaultConstruct();
  _FileRequest_default_instance_.DefaultConstruct();
  _CreateDirectoryRequest_default_instance_.DefaultConstruct();
  _RenameRequest_default_instance_.DefaultConstruct();
  _RemoveRequest_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::aspia::proto::protobuf_status_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto

bool RequestStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestStatus_Type RequestStatus::UNKNOWN;
const RequestStatus_Type RequestStatus::DRIVE_LIST;
const RequestStatus_Type RequestStatus::DIRECTORY_LIST;
const RequestStatus_Type RequestStatus::CREATE_DIRECTORY;
const RequestStatus_Type RequestStatus::RENAME;
const RequestStatus_Type RequestStatus::REMOVE;
const RequestStatus_Type RequestStatus::SEND_FILE;
const RequestStatus_Type RequestStatus::RECIEVE_FILE;
const RequestStatus_Type RequestStatus::Type_MIN;
const RequestStatus_Type RequestStatus::Type_MAX;
const int RequestStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DriveListItem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveListItem_Type DriveListItem::UNKNOWN;
const DriveListItem_Type DriveListItem::CDROM;
const DriveListItem_Type DriveListItem::REMOVABLE;
const DriveListItem_Type DriveListItem::FIXED;
const DriveListItem_Type DriveListItem::REMOTE;
const DriveListItem_Type DriveListItem::RAM;
const DriveListItem_Type DriveListItem::HOME_FOLDER;
const DriveListItem_Type DriveListItem::DESKTOP_FOLDER;
const DriveListItem_Type DriveListItem::Type_MIN;
const DriveListItem_Type DriveListItem::Type_MAX;
const int DriveListItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DirectoryListItem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectoryListItem_Type DirectoryListItem::UNKNOWN;
const DirectoryListItem_Type DirectoryListItem::DIRECTORY;
const DirectoryListItem_Type DirectoryListItem::FILE;
const DirectoryListItem_Type DirectoryListItem::Type_MIN;
const DirectoryListItem_Type DirectoryListItem::Type_MAX;
const int DirectoryListItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStatus::kTypeFieldNumber;
const int RequestStatus::kCodeFieldNumber;
const int RequestStatus::kFirstPathFieldNumber;
const int RequestStatus::kSecondPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStatus::RequestStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RequestStatus)
}
RequestStatus::RequestStatus(const RequestStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.first_path().size() > 0) {
    first_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_path_);
  }
  second_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.second_path().size() > 0) {
    second_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_path_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RequestStatus)
}

void RequestStatus::SharedCtor() {
  first_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_) + sizeof(code_));
  _cached_size_ = 0;
}

RequestStatus::~RequestStatus() {
  // @@protoc_insertion_point(destructor:aspia.proto.RequestStatus)
  SharedDtor();
}

void RequestStatus::SharedDtor() {
  first_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestStatus& RequestStatus::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestStatus* RequestStatus::New(::google::protobuf::Arena* arena) const {
  RequestStatus* n = new RequestStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RequestStatus)
  first_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_) + sizeof(code_));
}

bool RequestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RequestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.RequestStatus.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::RequestStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Status code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::aspia::proto::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string first_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->first_path().data(), this->first_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RequestStatus.first_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string second_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->second_path().data(), this->second_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RequestStatus.second_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RequestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RequestStatus)
  return false;
#undef DO_
}

void RequestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RequestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.RequestStatus.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .aspia.proto.Status code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // string first_path = 3;
  if (this->first_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->first_path().data(), this->first_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RequestStatus.first_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->first_path(), output);
  }

  // string second_path = 4;
  if (this->second_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second_path().data(), this->second_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RequestStatus.second_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->second_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RequestStatus)
}

size_t RequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RequestStatus)
  size_t total_size = 0;

  // string first_path = 3;
  if (this->first_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first_path());
  }

  // string second_path = 4;
  if (this->second_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second_path());
  }

  // .aspia.proto.RequestStatus.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.Status code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestStatus*>(&from));
}

void RequestStatus::MergeFrom(const RequestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_path().size() > 0) {

    first_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_path_);
  }
  if (from.second_path().size() > 0) {

    second_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void RequestStatus::CopyFrom(const RequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus::IsInitialized() const {
  return true;
}

void RequestStatus::Swap(RequestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStatus::InternalSwap(RequestStatus* other) {
  first_path_.Swap(&other->first_path_);
  second_path_.Swap(&other->second_path_);
  std::swap(type_, other->type_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RequestStatus::GetTypeName() const {
  return "aspia.proto.RequestStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestStatus

// .aspia.proto.RequestStatus.Type type = 1;
void RequestStatus::clear_type() {
  type_ = 0;
}
::aspia::proto::RequestStatus_Type RequestStatus::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RequestStatus.type)
  return static_cast< ::aspia::proto::RequestStatus_Type >(type_);
}
void RequestStatus::set_type(::aspia::proto::RequestStatus_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.RequestStatus.type)
}

// .aspia.proto.Status code = 2;
void RequestStatus::clear_code() {
  code_ = 0;
}
::aspia::proto::Status RequestStatus::code() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RequestStatus.code)
  return static_cast< ::aspia::proto::Status >(code_);
}
void RequestStatus::set_code(::aspia::proto::Status value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.RequestStatus.code)
}

// string first_path = 3;
void RequestStatus::clear_first_path() {
  first_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestStatus::first_path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RequestStatus.first_path)
  return first_path_.GetNoArena();
}
void RequestStatus::set_first_path(const ::std::string& value) {
  
  first_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RequestStatus.first_path)
}
#if LANG_CXX11
void RequestStatus::set_first_path(::std::string&& value) {
  
  first_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RequestStatus.first_path)
}
#endif
void RequestStatus::set_first_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  first_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RequestStatus.first_path)
}
void RequestStatus::set_first_path(const char* value, size_t size) {
  
  first_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RequestStatus.first_path)
}
::std::string* RequestStatus::mutable_first_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RequestStatus.first_path)
  return first_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestStatus::release_first_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RequestStatus.first_path)
  
  return first_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestStatus::set_allocated_first_path(::std::string* first_path) {
  if (first_path != NULL) {
    
  } else {
    
  }
  first_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RequestStatus.first_path)
}

// string second_path = 4;
void RequestStatus::clear_second_path() {
  second_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequestStatus::second_path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RequestStatus.second_path)
  return second_path_.GetNoArena();
}
void RequestStatus::set_second_path(const ::std::string& value) {
  
  second_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RequestStatus.second_path)
}
#if LANG_CXX11
void RequestStatus::set_second_path(::std::string&& value) {
  
  second_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RequestStatus.second_path)
}
#endif
void RequestStatus::set_second_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  second_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RequestStatus.second_path)
}
void RequestStatus::set_second_path(const char* value, size_t size) {
  
  second_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RequestStatus.second_path)
}
::std::string* RequestStatus::mutable_second_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RequestStatus.second_path)
  return second_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestStatus::release_second_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RequestStatus.second_path)
  
  return second_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestStatus::set_allocated_second_path(::std::string* second_path) {
  if (second_path != NULL) {
    
  } else {
    
  }
  second_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RequestStatus.second_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListItem::kTypeFieldNumber;
const int DriveListItem::kNameFieldNumber;
const int DriveListItem::kPathFieldNumber;
const int DriveListItem::kTotalSpaceFieldNumber;
const int DriveListItem::kFreeSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListItem::DriveListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveListItem)
}
DriveListItem::DriveListItem(const DriveListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&total_space_, &from.total_space_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveListItem)
}

void DriveListItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  _cached_size_ = 0;
}

DriveListItem::~DriveListItem() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveListItem)
  SharedDtor();
}

void DriveListItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveListItem& DriveListItem::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveListItem* DriveListItem::New(::google::protobuf::Arena* arena) const {
  DriveListItem* n = new DriveListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveListItem)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
}

bool DriveListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DriveListItem.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DriveListItem_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DriveListItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DriveListItem.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_space = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_space = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveListItem)
  return false;
#undef DO_
}

void DriveListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DriveListItem.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DriveListItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DriveListItem.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // uint64 total_space = 4;
  if (this->total_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_space(), output);
  }

  // uint64 free_space = 5;
  if (this->free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->free_space(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveListItem)
}

size_t DriveListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveListItem)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // uint64 total_space = 4;
  if (this->total_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_space());
  }

  // uint64 free_space = 5;
  if (this->free_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_space());
  }

  // .aspia.proto.DriveListItem.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListItem*>(&from));
}

void DriveListItem::MergeFrom(const DriveListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.total_space() != 0) {
    set_total_space(from.total_space());
  }
  if (from.free_space() != 0) {
    set_free_space(from.free_space());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DriveListItem::CopyFrom(const DriveListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListItem::IsInitialized() const {
  return true;
}

void DriveListItem::Swap(DriveListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListItem::InternalSwap(DriveListItem* other) {
  name_.Swap(&other->name_);
  path_.Swap(&other->path_);
  std::swap(total_space_, other->total_space_);
  std::swap(free_space_, other->free_space_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveListItem::GetTypeName() const {
  return "aspia.proto.DriveListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListItem

// .aspia.proto.DriveListItem.Type type = 1;
void DriveListItem::clear_type() {
  type_ = 0;
}
::aspia::proto::DriveListItem_Type DriveListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.type)
  return static_cast< ::aspia::proto::DriveListItem_Type >(type_);
}
void DriveListItem::set_type(::aspia::proto::DriveListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.type)
}

// string name = 2;
void DriveListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveListItem::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.name)
  return name_.GetNoArena();
}
void DriveListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.name)
}
#if LANG_CXX11
void DriveListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveListItem.name)
}
#endif
void DriveListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveListItem.name)
}
void DriveListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveListItem.name)
}
::std::string* DriveListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveListItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveListItem::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveListItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveListItem.name)
}

// string path = 3;
void DriveListItem::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveListItem::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.path)
  return path_.GetNoArena();
}
void DriveListItem::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.path)
}
#if LANG_CXX11
void DriveListItem::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveListItem.path)
}
#endif
void DriveListItem::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveListItem.path)
}
void DriveListItem::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveListItem.path)
}
::std::string* DriveListItem::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveListItem.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveListItem::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveListItem.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveListItem::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveListItem.path)
}

// uint64 total_space = 4;
void DriveListItem::clear_total_space() {
  total_space_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DriveListItem::total_space() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.total_space)
  return total_space_;
}
void DriveListItem::set_total_space(::google::protobuf::uint64 value) {
  
  total_space_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.total_space)
}

// uint64 free_space = 5;
void DriveListItem::clear_free_space() {
  free_space_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DriveListItem::free_space() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.free_space)
  return free_space_;
}
void DriveListItem::set_free_space(::google::protobuf::uint64 value) {
  
  free_space_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.free_space)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList::DriveList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveList)
}
DriveList::DriveList(const DriveList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveList)
}

void DriveList::SharedCtor() {
  _cached_size_ = 0;
}

DriveList::~DriveList() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveList)
  SharedDtor();
}

void DriveList::SharedDtor() {
}

void DriveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList& DriveList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList* DriveList::New(::google::protobuf::Arena* arena) const {
  DriveList* n = new DriveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveList)
  item_.Clear();
}

bool DriveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DriveListItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveList)
  return false;
#undef DO_
}

void DriveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DriveListItem item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveList)
}

size_t DriveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveList)
  size_t total_size = 0;

  // repeated .aspia.proto.DriveListItem item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList*>(&from));
}

void DriveList::MergeFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DriveList::CopyFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList::IsInitialized() const {
  return true;
}

void DriveList::Swap(DriveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList::InternalSwap(DriveList* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList::GetTypeName() const {
  return "aspia.proto.DriveList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList

// repeated .aspia.proto.DriveListItem item = 1;
int DriveList::item_size() const {
  return item_.size();
}
void DriveList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::DriveListItem& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.item)
  return item_.Get(index);
}
::aspia::proto::DriveListItem* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.item)
  return item_.Mutable(index);
}
::aspia::proto::DriveListItem* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DriveList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DriveList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DriveList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListRequest::DriveListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveListRequest)
}
DriveListRequest::DriveListRequest(const DriveListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveListRequest)
}

void DriveListRequest::SharedCtor() {
  dummy_ = 0u;
  _cached_size_ = 0;
}

DriveListRequest::~DriveListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveListRequest)
  SharedDtor();
}

void DriveListRequest::SharedDtor() {
}

void DriveListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveListRequest& DriveListRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveListRequest* DriveListRequest::New(::google::protobuf::Arena* arena) const {
  DriveListRequest* n = new DriveListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveListRequest)
  dummy_ = 0u;
}

bool DriveListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveListRequest)
  return false;
#undef DO_
}

void DriveListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveListRequest)
}

size_t DriveListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveListRequest)
  size_t total_size = 0;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListRequest*>(&from));
}

void DriveListRequest::MergeFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void DriveListRequest::CopyFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListRequest::IsInitialized() const {
  return true;
}

void DriveListRequest::Swap(DriveListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListRequest::InternalSwap(DriveListRequest* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveListRequest::GetTypeName() const {
  return "aspia.proto.DriveListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListRequest

// uint32 dummy = 1;
void DriveListRequest::clear_dummy() {
  dummy_ = 0u;
}
::google::protobuf::uint32 DriveListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListRequest.dummy)
  return dummy_;
}
void DriveListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListRequest.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryListItem::kTypeFieldNumber;
const int DirectoryListItem::kNameFieldNumber;
const int DirectoryListItem::kSizeFieldNumber;
const int DirectoryListItem::kModifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryListItem::DirectoryListItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryListItem)
}
DirectoryListItem::DirectoryListItem(const DirectoryListItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryListItem)
}

void DirectoryListItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_) + sizeof(type_));
  _cached_size_ = 0;
}

DirectoryListItem::~DirectoryListItem() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryListItem)
  SharedDtor();
}

void DirectoryListItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryListItem& DirectoryListItem::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryListItem* DirectoryListItem::New(::google::protobuf::Arena* arena) const {
  DirectoryListItem* n = new DirectoryListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryListItem)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_) + sizeof(type_));
}

bool DirectoryListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DirectoryListItem.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DirectoryListItem_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryListItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 modified = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryListItem)
  return false;
#undef DO_
}

void DirectoryListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DirectoryListItem.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryListItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // uint64 modified = 4;
  if (this->modified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->modified(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryListItem)
}

size_t DirectoryListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryListItem)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // uint64 modified = 4;
  if (this->modified() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modified());
  }

  // .aspia.proto.DirectoryListItem.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryListItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryListItem*>(&from));
}

void DirectoryListItem::MergeFrom(const DirectoryListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.modified() != 0) {
    set_modified(from.modified());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DirectoryListItem::CopyFrom(const DirectoryListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryListItem::IsInitialized() const {
  return true;
}

void DirectoryListItem::Swap(DirectoryListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryListItem::InternalSwap(DirectoryListItem* other) {
  name_.Swap(&other->name_);
  std::swap(size_, other->size_);
  std::swap(modified_, other->modified_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryListItem::GetTypeName() const {
  return "aspia.proto.DirectoryListItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryListItem

// .aspia.proto.DirectoryListItem.Type type = 1;
void DirectoryListItem::clear_type() {
  type_ = 0;
}
::aspia::proto::DirectoryListItem_Type DirectoryListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.type)
  return static_cast< ::aspia::proto::DirectoryListItem_Type >(type_);
}
void DirectoryListItem::set_type(::aspia::proto::DirectoryListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.type)
}

// string name = 2;
void DirectoryListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryListItem::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.name)
  return name_.GetNoArena();
}
void DirectoryListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.name)
}
#if LANG_CXX11
void DirectoryListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListItem.name)
}
#endif
void DirectoryListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListItem.name)
}
void DirectoryListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListItem.name)
}
::std::string* DirectoryListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryListItem::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListItem.name)
}

// uint64 size = 3;
void DirectoryListItem::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DirectoryListItem::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.size)
  return size_;
}
void DirectoryListItem::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.size)
}

// uint64 modified = 4;
void DirectoryListItem::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DirectoryListItem::modified() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.modified)
  return modified_;
}
void DirectoryListItem::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.modified)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryList::kPathFieldNumber;
const int DirectoryList::kHasParentFieldNumber;
const int DirectoryList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryList::DirectoryList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryList)
}
DirectoryList::DirectoryList(const DirectoryList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  has_parent_ = from.has_parent_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryList)
}

void DirectoryList::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_parent_ = false;
  _cached_size_ = 0;
}

DirectoryList::~DirectoryList() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryList)
  SharedDtor();
}

void DirectoryList::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryList& DirectoryList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryList* DirectoryList::New(::google::protobuf::Arena* arena) const {
  DirectoryList* n = new DirectoryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryList)
  item_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_parent_ = false;
}

bool DirectoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryList.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.DirectoryListItem item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryList)
  return false;
#undef DO_
}

void DirectoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryList.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bool has_parent = 2;
  if (this->has_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_parent(), output);
  }

  // repeated .aspia.proto.DirectoryListItem item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryList)
}

size_t DirectoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryList)
  size_t total_size = 0;

  // repeated .aspia.proto.DirectoryListItem item = 3;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bool has_parent = 2;
  if (this->has_parent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryList*>(&from));
}

void DirectoryList::MergeFrom(const DirectoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_parent() != 0) {
    set_has_parent(from.has_parent());
  }
}

void DirectoryList::CopyFrom(const DirectoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryList::IsInitialized() const {
  return true;
}

void DirectoryList::Swap(DirectoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryList::InternalSwap(DirectoryList* other) {
  item_.InternalSwap(&other->item_);
  path_.Swap(&other->path_);
  std::swap(has_parent_, other->has_parent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryList::GetTypeName() const {
  return "aspia.proto.DirectoryList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryList

// string path = 1;
void DirectoryList::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryList::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.path)
  return path_.GetNoArena();
}
void DirectoryList::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryList.path)
}
#if LANG_CXX11
void DirectoryList::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryList.path)
}
#endif
void DirectoryList::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryList.path)
}
void DirectoryList::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryList.path)
}
::std::string* DirectoryList::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryList::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryList.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryList::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryList.path)
}

// bool has_parent = 2;
void DirectoryList::clear_has_parent() {
  has_parent_ = false;
}
bool DirectoryList::has_parent() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.has_parent)
  return has_parent_;
}
void DirectoryList::set_has_parent(bool value) {
  
  has_parent_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryList.has_parent)
}

// repeated .aspia.proto.DirectoryListItem item = 3;
int DirectoryList::item_size() const {
  return item_.size();
}
void DirectoryList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::DirectoryListItem& DirectoryList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.item)
  return item_.Get(index);
}
::aspia::proto::DirectoryListItem* DirectoryList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.item)
  return item_.Mutable(index);
}
::aspia::proto::DirectoryListItem* DirectoryList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DirectoryList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >*
DirectoryList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DirectoryList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >&
DirectoryList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DirectoryList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryListRequest::kPathFieldNumber;
const int DirectoryListRequest::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryListRequest::DirectoryListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectoryListRequest)
}
DirectoryListRequest::DirectoryListRequest(const DirectoryListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item().size() > 0) {
    item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectoryListRequest)
}

void DirectoryListRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DirectoryListRequest::~DirectoryListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectoryListRequest)
  SharedDtor();
}

void DirectoryListRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryListRequest& DirectoryListRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectoryListRequest* DirectoryListRequest::New(::google::protobuf::Arena* arena) const {
  DirectoryListRequest* n = new DirectoryListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectoryListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectoryListRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DirectoryListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectoryListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryListRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string item = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectoryListRequest.item"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectoryListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectoryListRequest)
  return false;
#undef DO_
}

void DirectoryListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectoryListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string item = 2;
  if (this->item().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectoryListRequest.item");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectoryListRequest)
}

size_t DirectoryListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectoryListRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string item = 2;
  if (this->item().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryListRequest*>(&from));
}

void DirectoryListRequest::MergeFrom(const DirectoryListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectoryListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.item().size() > 0) {

    item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_);
  }
}

void DirectoryListRequest::CopyFrom(const DirectoryListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectoryListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryListRequest::IsInitialized() const {
  return true;
}

void DirectoryListRequest::Swap(DirectoryListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryListRequest::InternalSwap(DirectoryListRequest* other) {
  path_.Swap(&other->path_);
  item_.Swap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectoryListRequest::GetTypeName() const {
  return "aspia.proto.DirectoryListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectoryListRequest

// string path = 1;
void DirectoryListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryListRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListRequest.path)
  return path_.GetNoArena();
}
void DirectoryListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListRequest.path)
}
#if LANG_CXX11
void DirectoryListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListRequest.path)
}
#endif
void DirectoryListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListRequest.path)
}
void DirectoryListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListRequest.path)
}
::std::string* DirectoryListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryListRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListRequest.path)
}

// string item = 2;
void DirectoryListRequest::clear_item() {
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectoryListRequest::item() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListRequest.item)
  return item_.GetNoArena();
}
void DirectoryListRequest::set_item(const ::std::string& value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListRequest.item)
}
#if LANG_CXX11
void DirectoryListRequest::set_item(::std::string&& value) {
  
  item_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListRequest.item)
}
#endif
void DirectoryListRequest::set_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListRequest.item)
}
void DirectoryListRequest::set_item(const char* value, size_t size) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListRequest.item)
}
::std::string* DirectoryListRequest::mutable_item() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListRequest.item)
  return item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectoryListRequest::release_item() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListRequest.item)
  
  return item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectoryListRequest::set_allocated_item(::std::string* item) {
  if (item != NULL) {
    
  } else {
    
  }
  item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListRequest.item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilePacket::kPathFieldNumber;
const int FilePacket::kFullSizeFieldNumber;
const int FilePacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilePacket::FilePacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FilePacket)
}
FilePacket::FilePacket(const FilePacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  full_size_ = from.full_size_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FilePacket)
}

void FilePacket::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

FilePacket::~FilePacket() {
  // @@protoc_insertion_point(destructor:aspia.proto.FilePacket)
  SharedDtor();
}

void FilePacket::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FilePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilePacket& FilePacket::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilePacket* FilePacket::New(::google::protobuf::Arena* arena) const {
  FilePacket* n = new FilePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FilePacket)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_size_ = GOOGLE_ULONGLONG(0);
}

bool FilePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FilePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FilePacket.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 full_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &full_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FilePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FilePacket)
  return false;
#undef DO_
}

void FilePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FilePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FilePacket.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint64 full_size = 2;
  if (this->full_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->full_size(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FilePacket)
}

size_t FilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FilePacket)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 full_size = 2;
  if (this->full_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->full_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilePacket*>(&from));
}

void FilePacket::MergeFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.full_size() != 0) {
    set_full_size(from.full_size());
  }
}

void FilePacket::CopyFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePacket::IsInitialized() const {
  return true;
}

void FilePacket::Swap(FilePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilePacket::InternalSwap(FilePacket* other) {
  path_.Swap(&other->path_);
  data_.Swap(&other->data_);
  std::swap(full_size_, other->full_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FilePacket::GetTypeName() const {
  return "aspia.proto.FilePacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilePacket

// string path = 1;
void FilePacket::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilePacket::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.path)
  return path_.GetNoArena();
}
void FilePacket::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.path)
}
#if LANG_CXX11
void FilePacket::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FilePacket.path)
}
#endif
void FilePacket::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FilePacket.path)
}
void FilePacket::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FilePacket.path)
}
::std::string* FilePacket::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FilePacket.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilePacket::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FilePacket.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilePacket::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FilePacket.path)
}

// uint64 full_size = 2;
void FilePacket::clear_full_size() {
  full_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FilePacket::full_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.full_size)
  return full_size_;
}
void FilePacket::set_full_size(::google::protobuf::uint64 value) {
  
  full_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.full_size)
}

// bytes data = 3;
void FilePacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilePacket::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.data)
  return data_.GetNoArena();
}
void FilePacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.data)
}
#if LANG_CXX11
void FilePacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FilePacket.data)
}
#endif
void FilePacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FilePacket.data)
}
void FilePacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FilePacket.data)
}
::std::string* FilePacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FilePacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilePacket::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.FilePacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilePacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FilePacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequest::FileRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileRequest)
}

void FileRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileRequest& FileRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileRequest* FileRequest::New(::google::protobuf::Arena* arena) const {
  FileRequest* n = new FileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileRequest)
  return false;
#undef DO_
}

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileRequest)
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileRequest*>(&from));
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequest::InternalSwap(FileRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileRequest::GetTypeName() const {
  return "aspia.proto.FileRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileRequest

// string path = 1;
void FileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileRequest.path)
  return path_.GetNoArena();
}
void FileRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileRequest.path)
}
#if LANG_CXX11
void FileRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileRequest.path)
}
#endif
void FileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileRequest.path)
}
void FileRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileRequest.path)
}
::std::string* FileRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDirectoryRequest::kPathFieldNumber;
const int CreateDirectoryRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDirectoryRequest::CreateDirectoryRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.CreateDirectoryRequest)
}
CreateDirectoryRequest::CreateDirectoryRequest(const CreateDirectoryRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.CreateDirectoryRequest)
}

void CreateDirectoryRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateDirectoryRequest::~CreateDirectoryRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.CreateDirectoryRequest)
  SharedDtor();
}

void CreateDirectoryRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateDirectoryRequest& CreateDirectoryRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDirectoryRequest* CreateDirectoryRequest::New(::google::protobuf::Arena* arena) const {
  CreateDirectoryRequest* n = new CreateDirectoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.CreateDirectoryRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateDirectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.CreateDirectoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.CreateDirectoryRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.CreateDirectoryRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.CreateDirectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.CreateDirectoryRequest)
  return false;
#undef DO_
}

void CreateDirectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.CreateDirectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.CreateDirectoryRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.CreateDirectoryRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.CreateDirectoryRequest)
}

size_t CreateDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.CreateDirectoryRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDirectoryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateDirectoryRequest*>(&from));
}

void CreateDirectoryRequest::MergeFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.CreateDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CreateDirectoryRequest::CopyFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.CreateDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryRequest::IsInitialized() const {
  return true;
}

void CreateDirectoryRequest::Swap(CreateDirectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDirectoryRequest::InternalSwap(CreateDirectoryRequest* other) {
  path_.Swap(&other->path_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CreateDirectoryRequest::GetTypeName() const {
  return "aspia.proto.CreateDirectoryRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDirectoryRequest

// string path = 1;
void CreateDirectoryRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDirectoryRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CreateDirectoryRequest.path)
  return path_.GetNoArena();
}
void CreateDirectoryRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CreateDirectoryRequest.path)
}
#if LANG_CXX11
void CreateDirectoryRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CreateDirectoryRequest.path)
}
#endif
void CreateDirectoryRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CreateDirectoryRequest.path)
}
void CreateDirectoryRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CreateDirectoryRequest.path)
}
::std::string* CreateDirectoryRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CreateDirectoryRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDirectoryRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.CreateDirectoryRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDirectoryRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CreateDirectoryRequest.path)
}

// string name = 2;
void CreateDirectoryRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDirectoryRequest::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CreateDirectoryRequest.name)
  return name_.GetNoArena();
}
void CreateDirectoryRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CreateDirectoryRequest.name)
}
#if LANG_CXX11
void CreateDirectoryRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CreateDirectoryRequest.name)
}
#endif
void CreateDirectoryRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CreateDirectoryRequest.name)
}
void CreateDirectoryRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CreateDirectoryRequest.name)
}
::std::string* CreateDirectoryRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CreateDirectoryRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDirectoryRequest::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.CreateDirectoryRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDirectoryRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CreateDirectoryRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kPathFieldNumber;
const int RenameRequest::kOldItemNameFieldNumber;
const int RenameRequest::kNewItemNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  old_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_item_name().size() > 0) {
    old_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_item_name_);
  }
  new_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_item_name().size() > 0) {
    new_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_item_name_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RenameRequest)
}

void RenameRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RenameRequest& RenameRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RenameRequest* RenameRequest::New(::google::protobuf::Arena* arena) const {
  RenameRequest* n = new RenameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RenameRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RenameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RenameRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_item_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_item_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_item_name().data(), this->old_item_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RenameRequest.old_item_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_item_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_item_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_item_name().data(), this->new_item_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RenameRequest.new_item_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RenameRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string old_item_name = 2;
  if (this->old_item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_item_name().data(), this->old_item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RenameRequest.old_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_item_name(), output);
  }

  // string new_item_name = 3;
  if (this->new_item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_item_name().data(), this->new_item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RenameRequest.new_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_item_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RenameRequest)
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RenameRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string old_item_name = 2;
  if (this->old_item_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_item_name());
  }

  // string new_item_name = 3;
  if (this->new_item_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_item_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RenameRequest*>(&from));
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.old_item_name().size() > 0) {

    old_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_item_name_);
  }
  if (from.new_item_name().size() > 0) {

    new_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_item_name_);
  }
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  path_.Swap(&other->path_);
  old_item_name_.Swap(&other->old_item_name_);
  new_item_name_.Swap(&other->new_item_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RenameRequest::GetTypeName() const {
  return "aspia.proto.RenameRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameRequest

// string path = 1;
void RenameRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.path)
  return path_.GetNoArena();
}
void RenameRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.path)
}
#if LANG_CXX11
void RenameRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.path)
}
#endif
void RenameRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.path)
}
void RenameRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.path)
}
::std::string* RenameRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.path)
}

// string old_item_name = 2;
void RenameRequest::clear_old_item_name() {
  old_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::old_item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.old_item_name)
  return old_item_name_.GetNoArena();
}
void RenameRequest::set_old_item_name(const ::std::string& value) {
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.old_item_name)
}
#if LANG_CXX11
void RenameRequest::set_old_item_name(::std::string&& value) {
  
  old_item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.old_item_name)
}
#endif
void RenameRequest::set_old_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.old_item_name)
}
void RenameRequest::set_old_item_name(const char* value, size_t size) {
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.old_item_name)
}
::std::string* RenameRequest::mutable_old_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.old_item_name)
  return old_item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_old_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.old_item_name)
  
  return old_item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_old_item_name(::std::string* old_item_name) {
  if (old_item_name != NULL) {
    
  } else {
    
  }
  old_item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.old_item_name)
}

// string new_item_name = 3;
void RenameRequest::clear_new_item_name() {
  new_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::new_item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.new_item_name)
  return new_item_name_.GetNoArena();
}
void RenameRequest::set_new_item_name(const ::std::string& value) {
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.new_item_name)
}
#if LANG_CXX11
void RenameRequest::set_new_item_name(::std::string&& value) {
  
  new_item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.new_item_name)
}
#endif
void RenameRequest::set_new_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.new_item_name)
}
void RenameRequest::set_new_item_name(const char* value, size_t size) {
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.new_item_name)
}
::std::string* RenameRequest::mutable_new_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.new_item_name)
  return new_item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_new_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.new_item_name)
  
  return new_item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_new_item_name(::std::string* new_item_name) {
  if (new_item_name != NULL) {
    
  } else {
    
  }
  new_item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.new_item_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequest::kPathFieldNumber;
const int RemoveRequest::kItemNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item_name().size() > 0) {
    item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveRequest& RemoveRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveRequest* RemoveRequest::New(::google::protobuf::Arena* arena) const {
  RemoveRequest* n = new RemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RemoveRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RemoveRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string item_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RemoveRequest.item_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RemoveRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string item_name = 2;
  if (this->item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RemoveRequest.item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RemoveRequest)
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RemoveRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string item_name = 2;
  if (this->item_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.item_name().size() > 0) {

    item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
  }
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveRequest::InternalSwap(RemoveRequest* other) {
  path_.Swap(&other->path_);
  item_name_.Swap(&other->item_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoveRequest::GetTypeName() const {
  return "aspia.proto.RemoveRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveRequest

// string path = 1;
void RemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RemoveRequest.path)
  return path_.GetNoArena();
}
void RemoveRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RemoveRequest.path)
}
#if LANG_CXX11
void RemoveRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RemoveRequest.path)
}
#endif
void RemoveRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RemoveRequest.path)
}
void RemoveRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RemoveRequest.path)
}
::std::string* RemoveRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RemoveRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RemoveRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RemoveRequest.path)
}

// string item_name = 2;
void RemoveRequest::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveRequest::item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RemoveRequest.item_name)
  return item_name_.GetNoArena();
}
void RemoveRequest::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RemoveRequest.item_name)
}
#if LANG_CXX11
void RemoveRequest::set_item_name(::std::string&& value) {
  
  item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RemoveRequest.item_name)
}
#endif
void RemoveRequest::set_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RemoveRequest.item_name)
}
void RemoveRequest::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RemoveRequest.item_name)
}
::std::string* RemoveRequest::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RemoveRequest.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveRequest::release_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RemoveRequest.item_name)
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveRequest::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RemoveRequest.item_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

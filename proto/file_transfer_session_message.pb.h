// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session_message.proto

#ifndef PROTOBUF_file_5ftransfer_5fsession_5fmessage_2eproto__INCLUDED
#define PROTOBUF_file_5ftransfer_5fsession_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class CreateDirectoryRequest;
class CreateDirectoryRequestDefaultTypeInternal;
extern CreateDirectoryRequestDefaultTypeInternal _CreateDirectoryRequest_default_instance_;
class DirectoryList;
class DirectoryListDefaultTypeInternal;
extern DirectoryListDefaultTypeInternal _DirectoryList_default_instance_;
class DirectoryListItem;
class DirectoryListItemDefaultTypeInternal;
extern DirectoryListItemDefaultTypeInternal _DirectoryListItem_default_instance_;
class DirectoryListRequest;
class DirectoryListRequestDefaultTypeInternal;
extern DirectoryListRequestDefaultTypeInternal _DirectoryListRequest_default_instance_;
class DriveList;
class DriveListDefaultTypeInternal;
extern DriveListDefaultTypeInternal _DriveList_default_instance_;
class DriveListItem;
class DriveListItemDefaultTypeInternal;
extern DriveListItemDefaultTypeInternal _DriveListItem_default_instance_;
class DriveListRequest;
class DriveListRequestDefaultTypeInternal;
extern DriveListRequestDefaultTypeInternal _DriveListRequest_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileRequest;
class FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class RemoveRequest;
class RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class RenameRequest;
class RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
}  // namespace proto
}  // namespace aspia

namespace aspia {
namespace proto {

namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto

enum DriveListItem_Type {
  DriveListItem_Type_UNKNOWN = 0,
  DriveListItem_Type_CDROM = 1,
  DriveListItem_Type_REMOVABLE = 2,
  DriveListItem_Type_FIXED = 3,
  DriveListItem_Type_REMOTE = 4,
  DriveListItem_Type_RAM = 5,
  DriveListItem_Type_HOME_FOLDER = 6,
  DriveListItem_Type_DESKTOP_FOLDER = 7,
  DriveListItem_Type_DriveListItem_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DriveListItem_Type_DriveListItem_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DriveListItem_Type_IsValid(int value);
const DriveListItem_Type DriveListItem_Type_Type_MIN = DriveListItem_Type_UNKNOWN;
const DriveListItem_Type DriveListItem_Type_Type_MAX = DriveListItem_Type_DESKTOP_FOLDER;
const int DriveListItem_Type_Type_ARRAYSIZE = DriveListItem_Type_Type_MAX + 1;

enum DirectoryListItem_Type {
  DirectoryListItem_Type_UNKNOWN = 0,
  DirectoryListItem_Type_DIRECTORY = 1,
  DirectoryListItem_Type_FILE = 2,
  DirectoryListItem_Type_DirectoryListItem_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DirectoryListItem_Type_DirectoryListItem_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DirectoryListItem_Type_IsValid(int value);
const DirectoryListItem_Type DirectoryListItem_Type_Type_MIN = DirectoryListItem_Type_UNKNOWN;
const DirectoryListItem_Type DirectoryListItem_Type_Type_MAX = DirectoryListItem_Type_FILE;
const int DirectoryListItem_Type_Type_ARRAYSIZE = DirectoryListItem_Type_Type_MAX + 1;

// ===================================================================

class DriveListItem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DriveListItem) */ {
 public:
  DriveListItem();
  virtual ~DriveListItem();

  DriveListItem(const DriveListItem& from);

  inline DriveListItem& operator=(const DriveListItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const DriveListItem& default_instance();

  static inline const DriveListItem* internal_default_instance() {
    return reinterpret_cast<const DriveListItem*>(
               &_DriveListItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DriveListItem* other);

  // implements Message ----------------------------------------------

  inline DriveListItem* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveListItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveListItem& from);
  void MergeFrom(const DriveListItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveListItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DriveListItem_Type Type;
  static const Type UNKNOWN =
    DriveListItem_Type_UNKNOWN;
  static const Type CDROM =
    DriveListItem_Type_CDROM;
  static const Type REMOVABLE =
    DriveListItem_Type_REMOVABLE;
  static const Type FIXED =
    DriveListItem_Type_FIXED;
  static const Type REMOTE =
    DriveListItem_Type_REMOTE;
  static const Type RAM =
    DriveListItem_Type_RAM;
  static const Type HOME_FOLDER =
    DriveListItem_Type_HOME_FOLDER;
  static const Type DESKTOP_FOLDER =
    DriveListItem_Type_DESKTOP_FOLDER;
  static inline bool Type_IsValid(int value) {
    return DriveListItem_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DriveListItem_Type_Type_MIN;
  static const Type Type_MAX =
    DriveListItem_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DriveListItem_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .aspia.proto.DriveListItem.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::aspia::proto::DriveListItem_Type type() const;
  void set_type(::aspia::proto::DriveListItem_Type value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DriveListItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriveList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DriveList) */ {
 public:
  DriveList();
  virtual ~DriveList();

  DriveList(const DriveList& from);

  inline DriveList& operator=(const DriveList& from) {
    CopyFrom(from);
    return *this;
  }

  static const DriveList& default_instance();

  static inline const DriveList* internal_default_instance() {
    return reinterpret_cast<const DriveList*>(
               &_DriveList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DriveList* other);

  // implements Message ----------------------------------------------

  inline DriveList* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveList& from);
  void MergeFrom(const DriveList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DriveListItem item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DriveListItem& item(int index) const;
  ::aspia::proto::DriveListItem* mutable_item(int index);
  ::aspia::proto::DriveListItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DriveList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem > item_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriveListRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DriveListRequest) */ {
 public:
  DriveListRequest();
  virtual ~DriveListRequest();

  DriveListRequest(const DriveListRequest& from);

  inline DriveListRequest& operator=(const DriveListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DriveListRequest& default_instance();

  static inline const DriveListRequest* internal_default_instance() {
    return reinterpret_cast<const DriveListRequest*>(
               &_DriveListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DriveListRequest* other);

  // implements Message ----------------------------------------------

  inline DriveListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveListRequest& from);
  void MergeFrom(const DriveListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::uint32 dummy() const;
  void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DriveListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 dummy_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectoryListItem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DirectoryListItem) */ {
 public:
  DirectoryListItem();
  virtual ~DirectoryListItem();

  DirectoryListItem(const DirectoryListItem& from);

  inline DirectoryListItem& operator=(const DirectoryListItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const DirectoryListItem& default_instance();

  static inline const DirectoryListItem* internal_default_instance() {
    return reinterpret_cast<const DirectoryListItem*>(
               &_DirectoryListItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DirectoryListItem* other);

  // implements Message ----------------------------------------------

  inline DirectoryListItem* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectoryListItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DirectoryListItem& from);
  void MergeFrom(const DirectoryListItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectoryListItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DirectoryListItem_Type Type;
  static const Type UNKNOWN =
    DirectoryListItem_Type_UNKNOWN;
  static const Type DIRECTORY =
    DirectoryListItem_Type_DIRECTORY;
  static const Type FILE =
    DirectoryListItem_Type_FILE;
  static inline bool Type_IsValid(int value) {
    return DirectoryListItem_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DirectoryListItem_Type_Type_MIN;
  static const Type Type_MAX =
    DirectoryListItem_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DirectoryListItem_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // uint64 modified = 4;
  void clear_modified();
  static const int kModifiedFieldNumber = 4;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // .aspia.proto.DirectoryListItem.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::aspia::proto::DirectoryListItem_Type type() const;
  void set_type(::aspia::proto::DirectoryListItem_Type value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DirectoryListItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 modified_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectoryList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DirectoryList) */ {
 public:
  DirectoryList();
  virtual ~DirectoryList();

  DirectoryList(const DirectoryList& from);

  inline DirectoryList& operator=(const DirectoryList& from) {
    CopyFrom(from);
    return *this;
  }

  static const DirectoryList& default_instance();

  static inline const DirectoryList* internal_default_instance() {
    return reinterpret_cast<const DirectoryList*>(
               &_DirectoryList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DirectoryList* other);

  // implements Message ----------------------------------------------

  inline DirectoryList* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectoryList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DirectoryList& from);
  void MergeFrom(const DirectoryList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectoryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DirectoryListItem item = 2;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  const ::aspia::proto::DirectoryListItem& item(int index) const;
  ::aspia::proto::DirectoryListItem* mutable_item(int index);
  ::aspia::proto::DirectoryListItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >&
      item() const;

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:aspia.proto.DirectoryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem > item_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectoryListRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DirectoryListRequest) */ {
 public:
  DirectoryListRequest();
  virtual ~DirectoryListRequest();

  DirectoryListRequest(const DirectoryListRequest& from);

  inline DirectoryListRequest& operator=(const DirectoryListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DirectoryListRequest& default_instance();

  static inline const DirectoryListRequest* internal_default_instance() {
    return reinterpret_cast<const DirectoryListRequest*>(
               &_DirectoryListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DirectoryListRequest* other);

  // implements Message ----------------------------------------------

  inline DirectoryListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectoryListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DirectoryListRequest& from);
  void MergeFrom(const DirectoryListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectoryListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:aspia.proto.DirectoryListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  static const File& default_instance();

  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(File* other);

  // implements Message ----------------------------------------------

  inline File* New() const PROTOBUF_FINAL { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 full_size = 2;
  void clear_full_size();
  static const int kFullSizeFieldNumber = 2;
  ::google::protobuf::uint64 full_size() const;
  void set_full_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 full_size_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.FileRequest) */ {
 public:
  FileRequest();
  virtual ~FileRequest();

  FileRequest(const FileRequest& from);

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const FileRequest& default_instance();

  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FileRequest* other);

  // implements Message ----------------------------------------------

  inline FileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileRequest& from);
  void MergeFrom(const FileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:aspia.proto.FileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateDirectoryRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.CreateDirectoryRequest) */ {
 public:
  CreateDirectoryRequest();
  virtual ~CreateDirectoryRequest();

  CreateDirectoryRequest(const CreateDirectoryRequest& from);

  inline CreateDirectoryRequest& operator=(const CreateDirectoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CreateDirectoryRequest& default_instance();

  static inline const CreateDirectoryRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDirectoryRequest*>(
               &_CreateDirectoryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CreateDirectoryRequest* other);

  // implements Message ----------------------------------------------

  inline CreateDirectoryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDirectoryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CreateDirectoryRequest& from);
  void MergeFrom(const CreateDirectoryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateDirectoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:aspia.proto.CreateDirectoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RenameRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.RenameRequest) */ {
 public:
  RenameRequest();
  virtual ~RenameRequest();

  RenameRequest(const RenameRequest& from);

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const RenameRequest& default_instance();

  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RenameRequest* other);

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RenameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RenameRequest& from);
  void MergeFrom(const RenameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string old_item_name = 2;
  void clear_old_item_name();
  static const int kOldItemNameFieldNumber = 2;
  const ::std::string& old_item_name() const;
  void set_old_item_name(const ::std::string& value);
  #if LANG_CXX11
  void set_old_item_name(::std::string&& value);
  #endif
  void set_old_item_name(const char* value);
  void set_old_item_name(const char* value, size_t size);
  ::std::string* mutable_old_item_name();
  ::std::string* release_old_item_name();
  void set_allocated_old_item_name(::std::string* old_item_name);

  // string new_item_name = 3;
  void clear_new_item_name();
  static const int kNewItemNameFieldNumber = 3;
  const ::std::string& new_item_name() const;
  void set_new_item_name(const ::std::string& value);
  #if LANG_CXX11
  void set_new_item_name(::std::string&& value);
  #endif
  void set_new_item_name(const char* value);
  void set_new_item_name(const char* value, size_t size);
  ::std::string* mutable_new_item_name();
  ::std::string* release_new_item_name();
  void set_allocated_new_item_name(::std::string* new_item_name);

  // @@protoc_insertion_point(class_scope:aspia.proto.RenameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr old_item_name_;
  ::google::protobuf::internal::ArenaStringPtr new_item_name_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.RemoveRequest) */ {
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const RemoveRequest& default_instance();

  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RemoveRequest* other);

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string item_name = 2;
  void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  const ::std::string& item_name() const;
  void set_item_name(const ::std::string& value);
  #if LANG_CXX11
  void set_item_name(::std::string&& value);
  #endif
  void set_item_name(const char* value);
  void set_item_name(const char* value, size_t size);
  ::std::string* mutable_item_name();
  ::std::string* release_item_name();
  void set_allocated_item_name(::std::string* item_name);

  // @@protoc_insertion_point(class_scope:aspia.proto.RemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr item_name_;
  mutable int _cached_size_;
  friend struct protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListItem

// .aspia.proto.DriveListItem.Type type = 1;
inline void DriveListItem::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DriveListItem_Type DriveListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.type)
  return static_cast< ::aspia::proto::DriveListItem_Type >(type_);
}
inline void DriveListItem::set_type(::aspia::proto::DriveListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.type)
}

// string name = 2;
inline void DriveListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveListItem::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.name)
  return name_.GetNoArena();
}
inline void DriveListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.name)
}
#if LANG_CXX11
inline void DriveListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveListItem.name)
}
#endif
inline void DriveListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveListItem.name)
}
inline void DriveListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveListItem.name)
}
inline ::std::string* DriveListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveListItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveListItem::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveListItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveListItem.name)
}

// string path = 3;
inline void DriveListItem::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveListItem::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListItem.path)
  return path_.GetNoArena();
}
inline void DriveListItem::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListItem.path)
}
#if LANG_CXX11
inline void DriveListItem::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveListItem.path)
}
#endif
inline void DriveListItem::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveListItem.path)
}
inline void DriveListItem::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveListItem.path)
}
inline ::std::string* DriveListItem::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveListItem.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveListItem::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveListItem.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveListItem::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveListItem.path)
}

// -------------------------------------------------------------------

// DriveList

// repeated .aspia.proto.DriveListItem item = 1;
inline int DriveList::item_size() const {
  return item_.size();
}
inline void DriveList::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DriveListItem& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.item)
  return item_.Get(index);
}
inline ::aspia::proto::DriveListItem* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DriveListItem* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DriveList.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DriveList.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveListItem >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DriveList.item)
  return item_;
}

// -------------------------------------------------------------------

// DriveListRequest

// uint32 dummy = 1;
inline void DriveListRequest::clear_dummy() {
  dummy_ = 0u;
}
inline ::google::protobuf::uint32 DriveListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveListRequest.dummy)
  return dummy_;
}
inline void DriveListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveListRequest.dummy)
}

// -------------------------------------------------------------------

// DirectoryListItem

// .aspia.proto.DirectoryListItem.Type type = 1;
inline void DirectoryListItem::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DirectoryListItem_Type DirectoryListItem::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.type)
  return static_cast< ::aspia::proto::DirectoryListItem_Type >(type_);
}
inline void DirectoryListItem::set_type(::aspia::proto::DirectoryListItem_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.type)
}

// string name = 2;
inline void DirectoryListItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryListItem::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.name)
  return name_.GetNoArena();
}
inline void DirectoryListItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.name)
}
#if LANG_CXX11
inline void DirectoryListItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListItem.name)
}
#endif
inline void DirectoryListItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListItem.name)
}
inline void DirectoryListItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListItem.name)
}
inline ::std::string* DirectoryListItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryListItem::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryListItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListItem.name)
}

// uint64 size = 3;
inline void DirectoryListItem::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirectoryListItem::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.size)
  return size_;
}
inline void DirectoryListItem::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.size)
}

// uint64 modified = 4;
inline void DirectoryListItem::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirectoryListItem::modified() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListItem.modified)
  return modified_;
}
inline void DirectoryListItem::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListItem.modified)
}

// -------------------------------------------------------------------

// DirectoryList

// string path = 1;
inline void DirectoryList::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryList::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.path)
  return path_.GetNoArena();
}
inline void DirectoryList::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryList.path)
}
#if LANG_CXX11
inline void DirectoryList::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryList.path)
}
#endif
inline void DirectoryList::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryList.path)
}
inline void DirectoryList::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryList.path)
}
inline ::std::string* DirectoryList::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryList::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryList.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryList::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryList.path)
}

// repeated .aspia.proto.DirectoryListItem item = 2;
inline int DirectoryList::item_size() const {
  return item_.size();
}
inline void DirectoryList::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DirectoryListItem& DirectoryList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryList.item)
  return item_.Get(index);
}
inline ::aspia::proto::DirectoryListItem* DirectoryList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryList.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DirectoryListItem* DirectoryList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DirectoryList.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >*
DirectoryList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DirectoryList.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DirectoryListItem >&
DirectoryList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DirectoryList.item)
  return item_;
}

// -------------------------------------------------------------------

// DirectoryListRequest

// string path = 1;
inline void DirectoryListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryListRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectoryListRequest.path)
  return path_.GetNoArena();
}
inline void DirectoryListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectoryListRequest.path)
}
#if LANG_CXX11
inline void DirectoryListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectoryListRequest.path)
}
#endif
inline void DirectoryListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectoryListRequest.path)
}
inline void DirectoryListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectoryListRequest.path)
}
inline ::std::string* DirectoryListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectoryListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryListRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectoryListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectoryListRequest.path)
}

// -------------------------------------------------------------------

// File

// string path = 1;
inline void File::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.path)
  return path_.GetNoArena();
}
inline void File::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.File.path)
}
#if LANG_CXX11
inline void File::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.File.path)
}
#endif
inline void File::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.File.path)
}
inline void File::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.File.path)
}
inline ::std::string* File::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.File.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.File.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.File.path)
}

// uint64 full_size = 2;
inline void File::clear_full_size() {
  full_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::full_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.full_size)
  return full_size_;
}
inline void File::set_full_size(::google::protobuf::uint64 value) {
  
  full_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.File.full_size)
}

// bytes data = 3;
inline void File::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.File.data)
  return data_.GetNoArena();
}
inline void File::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.File.data)
}
#if LANG_CXX11
inline void File::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.File.data)
}
#endif
inline void File::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.File.data)
}
inline void File::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.File.data)
}
inline ::std::string* File::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.File.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.File.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.File.data)
}

// -------------------------------------------------------------------

// FileRequest

// string path = 1;
inline void FileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileRequest.path)
  return path_.GetNoArena();
}
inline void FileRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileRequest.path)
}
#if LANG_CXX11
inline void FileRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileRequest.path)
}
#endif
inline void FileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileRequest.path)
}
inline void FileRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileRequest.path)
}
inline ::std::string* FileRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileRequest.path)
}

// -------------------------------------------------------------------

// CreateDirectoryRequest

// string path = 1;
inline void CreateDirectoryRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDirectoryRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CreateDirectoryRequest.path)
  return path_.GetNoArena();
}
inline void CreateDirectoryRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CreateDirectoryRequest.path)
}
#if LANG_CXX11
inline void CreateDirectoryRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CreateDirectoryRequest.path)
}
#endif
inline void CreateDirectoryRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CreateDirectoryRequest.path)
}
inline void CreateDirectoryRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CreateDirectoryRequest.path)
}
inline ::std::string* CreateDirectoryRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CreateDirectoryRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDirectoryRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.CreateDirectoryRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDirectoryRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CreateDirectoryRequest.path)
}

// string name = 2;
inline void CreateDirectoryRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDirectoryRequest::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CreateDirectoryRequest.name)
  return name_.GetNoArena();
}
inline void CreateDirectoryRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CreateDirectoryRequest.name)
}
#if LANG_CXX11
inline void CreateDirectoryRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CreateDirectoryRequest.name)
}
#endif
inline void CreateDirectoryRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CreateDirectoryRequest.name)
}
inline void CreateDirectoryRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CreateDirectoryRequest.name)
}
inline ::std::string* CreateDirectoryRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CreateDirectoryRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDirectoryRequest::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.CreateDirectoryRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDirectoryRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CreateDirectoryRequest.name)
}

// -------------------------------------------------------------------

// RenameRequest

// string path = 1;
inline void RenameRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.path)
  return path_.GetNoArena();
}
inline void RenameRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.path)
}
#if LANG_CXX11
inline void RenameRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.path)
}
#endif
inline void RenameRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.path)
}
inline void RenameRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.path)
}
inline ::std::string* RenameRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.path)
}

// string old_item_name = 2;
inline void RenameRequest::clear_old_item_name() {
  old_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::old_item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.old_item_name)
  return old_item_name_.GetNoArena();
}
inline void RenameRequest::set_old_item_name(const ::std::string& value) {
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.old_item_name)
}
#if LANG_CXX11
inline void RenameRequest::set_old_item_name(::std::string&& value) {
  
  old_item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.old_item_name)
}
#endif
inline void RenameRequest::set_old_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.old_item_name)
}
inline void RenameRequest::set_old_item_name(const char* value, size_t size) {
  
  old_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.old_item_name)
}
inline ::std::string* RenameRequest::mutable_old_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.old_item_name)
  return old_item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_old_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.old_item_name)
  
  return old_item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_old_item_name(::std::string* old_item_name) {
  if (old_item_name != NULL) {
    
  } else {
    
  }
  old_item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.old_item_name)
}

// string new_item_name = 3;
inline void RenameRequest::clear_new_item_name() {
  new_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::new_item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.new_item_name)
  return new_item_name_.GetNoArena();
}
inline void RenameRequest::set_new_item_name(const ::std::string& value) {
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.new_item_name)
}
#if LANG_CXX11
inline void RenameRequest::set_new_item_name(::std::string&& value) {
  
  new_item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.new_item_name)
}
#endif
inline void RenameRequest::set_new_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.new_item_name)
}
inline void RenameRequest::set_new_item_name(const char* value, size_t size) {
  
  new_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.new_item_name)
}
inline ::std::string* RenameRequest::mutable_new_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.new_item_name)
  return new_item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_new_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.new_item_name)
  
  return new_item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_new_item_name(::std::string* new_item_name) {
  if (new_item_name != NULL) {
    
  } else {
    
  }
  new_item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.new_item_name)
}

// -------------------------------------------------------------------

// RemoveRequest

// string path = 1;
inline void RemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RemoveRequest.path)
  return path_.GetNoArena();
}
inline void RemoveRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RemoveRequest.path)
}
#if LANG_CXX11
inline void RemoveRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RemoveRequest.path)
}
#endif
inline void RemoveRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RemoveRequest.path)
}
inline void RemoveRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RemoveRequest.path)
}
inline ::std::string* RemoveRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RemoveRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RemoveRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RemoveRequest.path)
}

// string item_name = 2;
inline void RemoveRequest::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRequest::item_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RemoveRequest.item_name)
  return item_name_.GetNoArena();
}
inline void RemoveRequest::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RemoveRequest.item_name)
}
#if LANG_CXX11
inline void RemoveRequest::set_item_name(::std::string&& value) {
  
  item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RemoveRequest.item_name)
}
#endif
inline void RemoveRequest::set_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RemoveRequest.item_name)
}
inline void RemoveRequest::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RemoveRequest.item_name)
}
inline ::std::string* RemoveRequest::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RemoveRequest.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRequest::release_item_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RemoveRequest.item_name)
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRequest::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RemoveRequest.item_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace aspia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DriveListItem_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DirectoryListItem_Type> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5ftransfer_5fsession_5fmessage_2eproto__INCLUDED

//
// PROJECT:         Aspia Remote Desktop
// FILE:            proto/file_transfer_session_message.proto
// LICENSE:         Mozilla Public License Version 2.0
// PROGRAMMERS:     Dmitry Chapyshev (dmitry@aspia.ru)
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.proto;

enum RequestStatus
{
    REQUEST_STATUS_SUCCESS             = 0;
    REQUEST_STATUS_INVALID_PATH_NAME   = 1;
    REQUEST_STATUS_PATH_NOT_FOUND      = 2;
    REQUEST_STATUS_PATH_ALREADY_EXISTS = 3;
    REQUEST_STATUS_NO_DRIVES_FOUND     = 4;
    REQUEST_STATUS_DISK_FULL           = 5;
    REQUEST_STATUS_ACCESS_DENIED       = 6;
}

enum RequestType
{
    REQUEST_TYPE_UNKNOWN          = 0;
    REQUEST_TYPE_DRIVE_LIST       = 1;
    REQUEST_TYPE_FILE_LIST        = 2;
    REQUEST_TYPE_DIRECTORY_SIZE   = 3;
    REQUEST_TYPE_CREATE_DIRECTORY = 4;
    REQUEST_TYPE_RENAME           = 5;
    REQUEST_TYPE_REMOVE           = 6;
}

message DriveList
{
    message Item
    {
        enum Type
        {
            UNKNOWN        = 0;
            CDROM          = 1;
            REMOVABLE      = 2;
            FIXED          = 3;
            REMOTE         = 4;
            RAM            = 5;
            HOME_FOLDER    = 6;
            DESKTOP_FOLDER = 7;
        }

        Type type          = 1;
        string name        = 2;
        string path        = 3;
        uint64 total_space = 4;
        uint64 free_space  = 5;
    }

    repeated Item item = 1;
}

message FileList
{
    message Item
    {
        string name             = 1;
        uint64 size             = 2;
        int64 modification_time = 3;
        bool is_directory       = 4;
    }

    string path = 1;
    repeated Item item = 2;
}

message FileListRequest
{
    enum Flags
    {
        DEFAULT   = 0;
        RECURSIVE = 1;
    }

    uint32 flags = 1;
    string path = 2;
}

message DirectorySize
{
    uint64 size = 1;
}

message DirectorySizeRequest
{
    string path = 1;
}

message FilePacket
{
    enum Flags
    {
        ERROR        = 0;
        PACKET       = 1;
        FIRST_PACKET = 2;
        LAST_PACKET  = 4;
    }

    uint32 flags = 1;
    uint64 file_size = 2;
    bytes data = 3;
}

message FilePacketRequest
{
    string path = 1;
}

message CreateDirectoryRequest
{
    string path = 1;
}

message RenameRequest
{
    string old_name = 1;
    string new_name = 2;
}

message RemoveRequest
{
    string path = 1;
}

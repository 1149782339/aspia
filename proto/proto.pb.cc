// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {

void protobuf_ShutdownFile_proto_2eproto() {
  AuthorizationRequest_default_instance_.Shutdown();
  AuthorizationReply_default_instance_.Shutdown();
  AuthorizationResult_default_instance_.Shutdown();
  PowerControl_default_instance_.Shutdown();
  Bell_default_instance_.Shutdown();
  TextChat_default_instance_.Shutdown();
  KeyEvent_default_instance_.Shutdown();
  MouseEvent_default_instance_.Shutdown();
  Clipboard_default_instance_.Shutdown();
  ClipboardRequest_default_instance_.Shutdown();
  ClipboardControl_default_instance_.Shutdown();
  CursorShape_default_instance_.Shutdown();
  CursorShapeControl_default_instance_.Shutdown();
  VideoRect_default_instance_.Shutdown();
  VideoPixelFormat_default_instance_.Shutdown();
  VideoPacketFormat_default_instance_.Shutdown();
  VideoPacket_default_instance_.Shutdown();
  VideoControl_default_instance_.Shutdown();
  AudioPacket_default_instance_.Shutdown();
  AudioControl_default_instance_.Shutdown();
  ServerToClient_default_instance_.Shutdown();
  ClientToServer_default_instance_.Shutdown();
}

void protobuf_InitDefaults_proto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  AuthorizationRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthorizationReply_default_instance_.DefaultConstruct();
  AuthorizationResult_default_instance_.DefaultConstruct();
  PowerControl_default_instance_.DefaultConstruct();
  Bell_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TextChat_default_instance_.DefaultConstruct();
  KeyEvent_default_instance_.DefaultConstruct();
  MouseEvent_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Clipboard_default_instance_.DefaultConstruct();
  ClipboardRequest_default_instance_.DefaultConstruct();
  ClipboardControl_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CursorShape_default_instance_.DefaultConstruct();
  CursorShapeControl_default_instance_.DefaultConstruct();
  VideoRect_default_instance_.DefaultConstruct();
  VideoPixelFormat_default_instance_.DefaultConstruct();
  VideoPacketFormat_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VideoPacket_default_instance_.DefaultConstruct();
  VideoControl_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AudioPacket_default_instance_.DefaultConstruct();
  AudioControl_default_instance_.DefaultConstruct();
  ServerToClient_default_instance_.DefaultConstruct();
  ClientToServer_default_instance_.DefaultConstruct();
  AuthorizationRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthorizationReply_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthorizationResult_default_instance_.get_mutable()->InitAsDefaultInstance();
  PowerControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  Bell_default_instance_.get_mutable()->InitAsDefaultInstance();
  TextChat_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  MouseEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
  Clipboard_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClipboardRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClipboardControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  CursorShape_default_instance_.get_mutable()->InitAsDefaultInstance();
  CursorShapeControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoRect_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoPixelFormat_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoPacketFormat_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoPacket_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  AudioPacket_default_instance_.get_mutable()->InitAsDefaultInstance();
  AudioControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerToClient_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientToServer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_proto_2eproto_once_);
void protobuf_InitDefaults_proto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_proto_2eproto_once_,
                 &protobuf_InitDefaults_proto_2eproto_impl);
}
void protobuf_AddDesc_proto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_proto_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_2eproto_once_);
void protobuf_AddDesc_proto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_2eproto_once_,
                 &protobuf_AddDesc_proto_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2eproto {
  StaticDescriptorInitializer_proto_2eproto() {
    protobuf_AddDesc_proto_2eproto();
  }
} static_descriptor_initializer_proto_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
bool AuthorizationMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool SessionFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool VideoEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorizationRequest::kMethodsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorizationRequest::AuthorizationRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AuthorizationRequest)
}
AuthorizationRequest::AuthorizationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena),
  methods_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AuthorizationRequest)
}

void AuthorizationRequest::InitAsDefaultInstance() {
}

AuthorizationRequest::AuthorizationRequest(const AuthorizationRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AuthorizationRequest)
}

void AuthorizationRequest::SharedCtor() {
  _cached_size_ = 0;
}

AuthorizationRequest::~AuthorizationRequest() {
  // @@protoc_insertion_point(destructor:proto.AuthorizationRequest)
  SharedDtor();
}

void AuthorizationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void AuthorizationRequest::ArenaDtor(void* object) {
  AuthorizationRequest* _this = reinterpret_cast< AuthorizationRequest* >(object);
  (void)_this;
}
void AuthorizationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AuthorizationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorizationRequest& AuthorizationRequest::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthorizationRequest> AuthorizationRequest_default_instance_;

AuthorizationRequest* AuthorizationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AuthorizationRequest>(arena);
}

void AuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AuthorizationRequest)
  methods_.Clear();
}

bool AuthorizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AuthorizationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.AuthorizationMethod methods = 1;
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_methods(static_cast< ::proto::AuthorizationMethod >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_methods(static_cast< ::proto::AuthorizationMethod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AuthorizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AuthorizationRequest)
  return false;
#undef DO_
}

void AuthorizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AuthorizationRequest)
  // repeated .proto.AuthorizationMethod methods = 1;
  if (this->methods_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_methods_cached_byte_size_);
  }
  for (int i = 0; i < this->methods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->methods(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AuthorizationRequest)
}

size_t AuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AuthorizationRequest)
  size_t total_size = 0;

  // repeated .proto.AuthorizationMethod methods = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->methods_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->methods(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _methods_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorizationRequest*>(&from));
}

void AuthorizationRequest::MergeFrom(const AuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AuthorizationRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthorizationRequest::UnsafeMergeFrom(const AuthorizationRequest& from) {
  GOOGLE_DCHECK(&from != this);
  methods_.UnsafeMergeFrom(from.methods_);
}

void AuthorizationRequest::CopyFrom(const AuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AuthorizationRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthorizationRequest::IsInitialized() const {

  return true;
}

void AuthorizationRequest::Swap(AuthorizationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AuthorizationRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AuthorizationRequest::UnsafeArenaSwap(AuthorizationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AuthorizationRequest::InternalSwap(AuthorizationRequest* other) {
  methods_.UnsafeArenaSwap(&other->methods_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthorizationRequest::GetTypeName() const {
  return "proto.AuthorizationRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthorizationRequest

// repeated .proto.AuthorizationMethod methods = 1;
int AuthorizationRequest::methods_size() const {
  return methods_.size();
}
void AuthorizationRequest::clear_methods() {
  methods_.Clear();
}
::proto::AuthorizationMethod AuthorizationRequest::methods(int index) const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationRequest.methods)
  return static_cast< ::proto::AuthorizationMethod >(methods_.Get(index));
}
void AuthorizationRequest::set_methods(int index, ::proto::AuthorizationMethod value) {
  methods_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AuthorizationRequest.methods)
}
void AuthorizationRequest::add_methods(::proto::AuthorizationMethod value) {
  methods_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AuthorizationRequest.methods)
}
const ::google::protobuf::RepeatedField<int>&
AuthorizationRequest::methods() const {
  // @@protoc_insertion_point(field_list:proto.AuthorizationRequest.methods)
  return methods_;
}
::google::protobuf::RepeatedField<int>*
AuthorizationRequest::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:proto.AuthorizationRequest.methods)
  return &methods_;
}

inline const AuthorizationRequest* AuthorizationRequest::internal_default_instance() {
  return &AuthorizationRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorizationReply::kMethodFieldNumber;
const int AuthorizationReply::kDomainFieldNumber;
const int AuthorizationReply::kUserNameFieldNumber;
const int AuthorizationReply::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorizationReply::AuthorizationReply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AuthorizationReply)
}
AuthorizationReply::AuthorizationReply(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AuthorizationReply)
}

void AuthorizationReply::InitAsDefaultInstance() {
}

AuthorizationReply::AuthorizationReply(const AuthorizationReply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AuthorizationReply)
}

void AuthorizationReply::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
  _cached_size_ = 0;
}

AuthorizationReply::~AuthorizationReply() {
  // @@protoc_insertion_point(destructor:proto.AuthorizationReply)
  SharedDtor();
}

void AuthorizationReply::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  domain_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  password_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AuthorizationReply::ArenaDtor(void* object) {
  AuthorizationReply* _this = reinterpret_cast< AuthorizationReply* >(object);
  (void)_this;
}
void AuthorizationReply::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AuthorizationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorizationReply& AuthorizationReply::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthorizationReply> AuthorizationReply_default_instance_;

AuthorizationReply* AuthorizationReply::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AuthorizationReply>(arena);
}

void AuthorizationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AuthorizationReply)
  method_ = 0;
  domain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  password_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool AuthorizationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AuthorizationReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.AuthorizationMethod method = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::proto::AuthorizationMethod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (tag == 18) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AuthorizationReply.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.AuthorizationReply.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional bytes password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AuthorizationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AuthorizationReply)
  return false;
#undef DO_
}

void AuthorizationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AuthorizationReply)
  // optional .proto.AuthorizationMethod method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AuthorizationReply.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional string user_name = 3;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.AuthorizationReply.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional bytes password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AuthorizationReply)
}

size_t AuthorizationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AuthorizationReply)
  size_t total_size = 0;

  // optional .proto.AuthorizationMethod method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  // optional string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // optional bytes password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizationReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorizationReply*>(&from));
}

void AuthorizationReply::MergeFrom(const AuthorizationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AuthorizationReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthorizationReply::UnsafeMergeFrom(const AuthorizationReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.domain().size() > 0) {
    set_domain(from.domain());
  }
  if (from.user_name().size() > 0) {
    set_user_name(from.user_name());
  }
  if (from.password().size() > 0) {
    set_password(from.password());
  }
}

void AuthorizationReply::CopyFrom(const AuthorizationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AuthorizationReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthorizationReply::IsInitialized() const {

  return true;
}

void AuthorizationReply::Swap(AuthorizationReply* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AuthorizationReply temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AuthorizationReply::UnsafeArenaSwap(AuthorizationReply* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AuthorizationReply::InternalSwap(AuthorizationReply* other) {
  std::swap(method_, other->method_);
  domain_.Swap(&other->domain_);
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthorizationReply::GetTypeName() const {
  return "proto.AuthorizationReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthorizationReply

// optional .proto.AuthorizationMethod method = 1;
void AuthorizationReply::clear_method() {
  method_ = 0;
}
::proto::AuthorizationMethod AuthorizationReply::method() const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationReply.method)
  return static_cast< ::proto::AuthorizationMethod >(method_);
}
void AuthorizationReply::set_method(::proto::AuthorizationMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:proto.AuthorizationReply.method)
}

// optional string domain = 2;
void AuthorizationReply::clear_domain() {
  domain_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuthorizationReply::domain() const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationReply.domain)
  return domain_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthorizationReply::set_domain(const ::std::string& value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.AuthorizationReply.domain)
}
void AuthorizationReply::set_domain(const char* value) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.AuthorizationReply.domain)
}
void AuthorizationReply::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.AuthorizationReply.domain)
}
::std::string* AuthorizationReply::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:proto.AuthorizationReply.domain)
  return domain_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::release_domain() {
  // @@protoc_insertion_point(field_release:proto.AuthorizationReply.domain)
  
  return domain_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AuthorizationReply.domain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return domain_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuthorizationReply::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.AuthorizationReply.domain)
}
void AuthorizationReply::unsafe_arena_set_allocated_domain(
    ::std::string* domain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      domain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AuthorizationReply.domain)
}

// optional string user_name = 3;
void AuthorizationReply::clear_user_name() {
  user_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuthorizationReply::user_name() const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationReply.user_name)
  return user_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthorizationReply::set_user_name(const ::std::string& value) {
  
  user_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.AuthorizationReply.user_name)
}
void AuthorizationReply::set_user_name(const char* value) {
  
  user_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.AuthorizationReply.user_name)
}
void AuthorizationReply::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.AuthorizationReply.user_name)
}
::std::string* AuthorizationReply::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.AuthorizationReply.user_name)
  return user_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.AuthorizationReply.user_name)
  
  return user_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::unsafe_arena_release_user_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AuthorizationReply.user_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuthorizationReply::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.AuthorizationReply.user_name)
}
void AuthorizationReply::unsafe_arena_set_allocated_user_name(
    ::std::string* user_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AuthorizationReply.user_name)
}

// optional bytes password = 4;
void AuthorizationReply::clear_password() {
  password_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuthorizationReply::password() const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationReply.password)
  return password_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthorizationReply::set_password(const ::std::string& value) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.AuthorizationReply.password)
}
void AuthorizationReply::set_password(const char* value) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.AuthorizationReply.password)
}
void AuthorizationReply::set_password(const void* value,
    size_t size) {
  
  password_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.AuthorizationReply.password)
}
::std::string* AuthorizationReply::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:proto.AuthorizationReply.password)
  return password_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::release_password() {
  // @@protoc_insertion_point(field_release:proto.AuthorizationReply.password)
  
  return password_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthorizationReply::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AuthorizationReply.password)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return password_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuthorizationReply::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.AuthorizationReply.password)
}
void AuthorizationReply::unsafe_arena_set_allocated_password(
    ::std::string* password) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (password != NULL) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      password, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AuthorizationReply.password)
}

inline const AuthorizationReply* AuthorizationReply::internal_default_instance() {
  return &AuthorizationReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorizationResult::kSuccessFieldNumber;
const int AuthorizationResult::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorizationResult::AuthorizationResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AuthorizationResult)
}
AuthorizationResult::AuthorizationResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena),
  features_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AuthorizationResult)
}

void AuthorizationResult::InitAsDefaultInstance() {
}

AuthorizationResult::AuthorizationResult(const AuthorizationResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AuthorizationResult)
}

void AuthorizationResult::SharedCtor() {
  success_ = false;
  _cached_size_ = 0;
}

AuthorizationResult::~AuthorizationResult() {
  // @@protoc_insertion_point(destructor:proto.AuthorizationResult)
  SharedDtor();
}

void AuthorizationResult::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void AuthorizationResult::ArenaDtor(void* object) {
  AuthorizationResult* _this = reinterpret_cast< AuthorizationResult* >(object);
  (void)_this;
}
void AuthorizationResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AuthorizationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorizationResult& AuthorizationResult::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthorizationResult> AuthorizationResult_default_instance_;

AuthorizationResult* AuthorizationResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AuthorizationResult>(arena);
}

void AuthorizationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AuthorizationResult)
  success_ = false;
  features_.Clear();
}

bool AuthorizationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AuthorizationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // repeated .proto.SessionFeature features = 2;
      case 2: {
        if (tag == 18) {
         parse_features:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_features(static_cast< ::proto::SessionFeature >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_features(static_cast< ::proto::SessionFeature >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AuthorizationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AuthorizationResult)
  return false;
#undef DO_
}

void AuthorizationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AuthorizationResult)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // repeated .proto.SessionFeature features = 2;
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_features_cached_byte_size_);
  }
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->features(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AuthorizationResult)
}

size_t AuthorizationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AuthorizationResult)
  size_t total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // repeated .proto.SessionFeature features = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->features_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizationResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorizationResult*>(&from));
}

void AuthorizationResult::MergeFrom(const AuthorizationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AuthorizationResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthorizationResult::UnsafeMergeFrom(const AuthorizationResult& from) {
  GOOGLE_DCHECK(&from != this);
  features_.UnsafeMergeFrom(from.features_);
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void AuthorizationResult::CopyFrom(const AuthorizationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AuthorizationResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthorizationResult::IsInitialized() const {

  return true;
}

void AuthorizationResult::Swap(AuthorizationResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AuthorizationResult temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AuthorizationResult::UnsafeArenaSwap(AuthorizationResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AuthorizationResult::InternalSwap(AuthorizationResult* other) {
  std::swap(success_, other->success_);
  features_.UnsafeArenaSwap(&other->features_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthorizationResult::GetTypeName() const {
  return "proto.AuthorizationResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthorizationResult

// optional bool success = 1;
void AuthorizationResult::clear_success() {
  success_ = false;
}
bool AuthorizationResult::success() const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationResult.success)
  return success_;
}
void AuthorizationResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.AuthorizationResult.success)
}

// repeated .proto.SessionFeature features = 2;
int AuthorizationResult::features_size() const {
  return features_.size();
}
void AuthorizationResult::clear_features() {
  features_.Clear();
}
::proto::SessionFeature AuthorizationResult::features(int index) const {
  // @@protoc_insertion_point(field_get:proto.AuthorizationResult.features)
  return static_cast< ::proto::SessionFeature >(features_.Get(index));
}
void AuthorizationResult::set_features(int index, ::proto::SessionFeature value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.AuthorizationResult.features)
}
void AuthorizationResult::add_features(::proto::SessionFeature value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:proto.AuthorizationResult.features)
}
const ::google::protobuf::RepeatedField<int>&
AuthorizationResult::features() const {
  // @@protoc_insertion_point(field_list:proto.AuthorizationResult.features)
  return features_;
}
::google::protobuf::RepeatedField<int>*
AuthorizationResult::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:proto.AuthorizationResult.features)
  return &features_;
}

inline const AuthorizationResult* AuthorizationResult::internal_default_instance() {
  return &AuthorizationResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool PowerControl_PowerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerControl_PowerAction PowerControl::POWER_UNKNOWN;
const PowerControl_PowerAction PowerControl::POWER_SHUTDOWN;
const PowerControl_PowerAction PowerControl::POWER_REBOOT;
const PowerControl_PowerAction PowerControl::POWER_POWEROFF;
const PowerControl_PowerAction PowerControl::POWER_HIBERNATE;
const PowerControl_PowerAction PowerControl::POWER_SUSPEND;
const PowerControl_PowerAction PowerControl::POWER_LOGOFF;
const PowerControl_PowerAction PowerControl::PowerAction_MIN;
const PowerControl_PowerAction PowerControl::PowerAction_MAX;
const int PowerControl::PowerAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerControl::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerControl::PowerControl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PowerControl)
}
PowerControl::PowerControl(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PowerControl)
}

void PowerControl::InitAsDefaultInstance() {
}

PowerControl::PowerControl(const PowerControl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PowerControl)
}

void PowerControl::SharedCtor() {
  action_ = 0;
  _cached_size_ = 0;
}

PowerControl::~PowerControl() {
  // @@protoc_insertion_point(destructor:proto.PowerControl)
  SharedDtor();
}

void PowerControl::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void PowerControl::ArenaDtor(void* object) {
  PowerControl* _this = reinterpret_cast< PowerControl* >(object);
  (void)_this;
}
void PowerControl::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PowerControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerControl& PowerControl::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PowerControl> PowerControl_default_instance_;

PowerControl* PowerControl::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PowerControl>(arena);
}

void PowerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PowerControl)
  action_ = 0;
}

bool PowerControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PowerControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.PowerControl.PowerAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::proto::PowerControl_PowerAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PowerControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PowerControl)
  return false;
#undef DO_
}

void PowerControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PowerControl)
  // optional .proto.PowerControl.PowerAction action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PowerControl)
}

size_t PowerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PowerControl)
  size_t total_size = 0;

  // optional .proto.PowerControl.PowerAction action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerControl*>(&from));
}

void PowerControl::MergeFrom(const PowerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PowerControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PowerControl::UnsafeMergeFrom(const PowerControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void PowerControl::CopyFrom(const PowerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PowerControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PowerControl::IsInitialized() const {

  return true;
}

void PowerControl::Swap(PowerControl* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PowerControl temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PowerControl::UnsafeArenaSwap(PowerControl* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PowerControl::InternalSwap(PowerControl* other) {
  std::swap(action_, other->action_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PowerControl::GetTypeName() const {
  return "proto.PowerControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerControl

// optional .proto.PowerControl.PowerAction action = 1;
void PowerControl::clear_action() {
  action_ = 0;
}
::proto::PowerControl_PowerAction PowerControl::action() const {
  // @@protoc_insertion_point(field_get:proto.PowerControl.action)
  return static_cast< ::proto::PowerControl_PowerAction >(action_);
}
void PowerControl::set_action(::proto::PowerControl_PowerAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.PowerControl.action)
}

inline const PowerControl* PowerControl::internal_default_instance() {
  return &PowerControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bell::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bell::Bell()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Bell)
}
Bell::Bell(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.Bell)
}

void Bell::InitAsDefaultInstance() {
}

Bell::Bell(const Bell& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Bell)
}

void Bell::SharedCtor() {
  duration_ = 0;
  _cached_size_ = 0;
}

Bell::~Bell() {
  // @@protoc_insertion_point(destructor:proto.Bell)
  SharedDtor();
}

void Bell::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Bell::ArenaDtor(void* object) {
  Bell* _this = reinterpret_cast< Bell* >(object);
  (void)_this;
}
void Bell::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Bell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bell& Bell::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Bell> Bell_default_instance_;

Bell* Bell::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Bell>(arena);
}

void Bell::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Bell)
  duration_ = 0;
}

bool Bell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Bell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Bell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Bell)
  return false;
#undef DO_
}

void Bell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Bell)
  // optional int32 duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Bell)
}

size_t Bell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Bell)
  size_t total_size = 0;

  // optional int32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bell::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bell*>(&from));
}

void Bell::MergeFrom(const Bell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Bell)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Bell::UnsafeMergeFrom(const Bell& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Bell::CopyFrom(const Bell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Bell)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Bell::IsInitialized() const {

  return true;
}

void Bell::Swap(Bell* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Bell temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Bell::UnsafeArenaSwap(Bell* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Bell::InternalSwap(Bell* other) {
  std::swap(duration_, other->duration_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Bell::GetTypeName() const {
  return "proto.Bell";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bell

// optional int32 duration = 1;
void Bell::clear_duration() {
  duration_ = 0;
}
::google::protobuf::int32 Bell::duration() const {
  // @@protoc_insertion_point(field_get:proto.Bell.duration)
  return duration_;
}
void Bell::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.Bell.duration)
}

inline const Bell* Bell::internal_default_instance() {
  return &Bell_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextChat::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextChat::TextChat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TextChat)
}
TextChat::TextChat(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.TextChat)
}

void TextChat::InitAsDefaultInstance() {
}

TextChat::TextChat(const TextChat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.TextChat)
}

void TextChat::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TextChat::~TextChat() {
  // @@protoc_insertion_point(destructor:proto.TextChat)
  SharedDtor();
}

void TextChat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void TextChat::ArenaDtor(void* object) {
  TextChat* _this = reinterpret_cast< TextChat* >(object);
  (void)_this;
}
void TextChat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TextChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextChat& TextChat::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TextChat> TextChat_default_instance_;

TextChat* TextChat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TextChat>(arena);
}

void TextChat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TextChat)
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool TextChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TextChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.TextChat.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TextChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TextChat)
  return false;
#undef DO_
}

void TextChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TextChat)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.TextChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.TextChat)
}

size_t TextChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TextChat)
  size_t total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextChat*>(&from));
}

void TextChat::MergeFrom(const TextChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TextChat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TextChat::UnsafeMergeFrom(const TextChat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message().size() > 0) {
    set_message(from.message());
  }
}

void TextChat::CopyFrom(const TextChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TextChat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TextChat::IsInitialized() const {

  return true;
}

void TextChat::Swap(TextChat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TextChat temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TextChat::UnsafeArenaSwap(TextChat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TextChat::InternalSwap(TextChat* other) {
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TextChat::GetTypeName() const {
  return "proto.TextChat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextChat

// optional string message = 1;
void TextChat::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TextChat::message() const {
  // @@protoc_insertion_point(field_get:proto.TextChat.message)
  return message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextChat::set_message(const ::std::string& value) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.TextChat.message)
}
void TextChat::set_message(const char* value) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.TextChat.message)
}
void TextChat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.TextChat.message)
}
::std::string* TextChat::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:proto.TextChat.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TextChat::release_message() {
  // @@protoc_insertion_point(field_release:proto.TextChat.message)
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TextChat::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.TextChat.message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TextChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.TextChat.message)
}
void TextChat::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TextChat.message)
}

inline const TextChat* TextChat::internal_default_instance() {
  return &TextChat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kKeycodeFieldNumber;
const int KeyEvent::kExtendedFieldNumber;
const int KeyEvent::kPressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyEvent)
}
KeyEvent::KeyEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.KeyEvent)
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::memset(&keycode_, 0, reinterpret_cast<char*>(&pressed_) -
    reinterpret_cast<char*>(&keycode_) + sizeof(pressed_));
  _cached_size_ = 0;
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:proto.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void KeyEvent::ArenaDtor(void* object) {
  KeyEvent* _this = reinterpret_cast< KeyEvent* >(object);
  (void)_this;
}
void KeyEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyEvent& KeyEvent::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyEvent> KeyEvent_default_instance_;

KeyEvent* KeyEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<KeyEvent>(arena);
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeyEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KeyEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeyEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(keycode_, pressed_);

#undef ZR_HELPER_
#undef ZR_

}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keycode = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extended;
        break;
      }

      // optional uint32 extended = 2;
      case 2: {
        if (tag == 16) {
         parse_extended:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pressed;
        break;
      }

      // optional bool pressed = 3;
      case 3: {
        if (tag == 24) {
         parse_pressed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pressed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.KeyEvent)
  // optional uint32 keycode = 1;
  if (this->keycode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keycode(), output);
  }

  // optional uint32 extended = 2;
  if (this->extended() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extended(), output);
  }

  // optional bool pressed = 3;
  if (this->pressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pressed(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.KeyEvent)
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeyEvent)
  size_t total_size = 0;

  // optional uint32 keycode = 1;
  if (this->keycode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keycode());
  }

  // optional uint32 extended = 2;
  if (this->extended() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extended());
  }

  // optional bool pressed = 3;
  if (this->pressed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.KeyEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyEvent::UnsafeMergeFrom(const KeyEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.keycode() != 0) {
    set_keycode(from.keycode());
  }
  if (from.extended() != 0) {
    set_extended(from.extended());
  }
  if (from.pressed() != 0) {
    set_pressed(from.pressed());
  }
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeyEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    KeyEvent temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void KeyEvent::UnsafeArenaSwap(KeyEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  std::swap(keycode_, other->keycode_);
  std::swap(extended_, other->extended_);
  std::swap(pressed_, other->pressed_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeyEvent::GetTypeName() const {
  return "proto.KeyEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent

// optional uint32 keycode = 1;
void KeyEvent::clear_keycode() {
  keycode_ = 0u;
}
::google::protobuf::uint32 KeyEvent::keycode() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.keycode)
  return keycode_;
}
void KeyEvent::set_keycode(::google::protobuf::uint32 value) {
  
  keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.keycode)
}

// optional uint32 extended = 2;
void KeyEvent::clear_extended() {
  extended_ = 0u;
}
::google::protobuf::uint32 KeyEvent::extended() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.extended)
  return extended_;
}
void KeyEvent::set_extended(::google::protobuf::uint32 value) {
  
  extended_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.extended)
}

// optional bool pressed = 3;
void KeyEvent::clear_pressed() {
  pressed_ = false;
}
bool KeyEvent::pressed() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.pressed)
  return pressed_;
}
void KeyEvent::set_pressed(bool value) {
  
  pressed_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.pressed)
}

inline const KeyEvent* KeyEvent::internal_default_instance() {
  return &KeyEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseEvent::kXFieldNumber;
const int MouseEvent::kYFieldNumber;
const int MouseEvent::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseEvent::MouseEvent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MouseEvent)
}
MouseEvent::MouseEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.MouseEvent)
}

void MouseEvent::InitAsDefaultInstance() {
}

MouseEvent::MouseEvent(const MouseEvent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.MouseEvent)
}

void MouseEvent::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&mask_) -
    reinterpret_cast<char*>(&x_) + sizeof(mask_));
  _cached_size_ = 0;
}

MouseEvent::~MouseEvent() {
  // @@protoc_insertion_point(destructor:proto.MouseEvent)
  SharedDtor();
}

void MouseEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MouseEvent::ArenaDtor(void* object) {
  MouseEvent* _this = reinterpret_cast< MouseEvent* >(object);
  (void)_this;
}
void MouseEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MouseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseEvent& MouseEvent::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MouseEvent> MouseEvent_default_instance_;

MouseEvent* MouseEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MouseEvent>(arena);
}

void MouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MouseEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MouseEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MouseEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, mask_);

#undef ZR_HELPER_
#undef ZR_

}

bool MouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MouseEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask;
        break;
      }

      // optional uint32 mask = 3;
      case 3: {
        if (tag == 24) {
         parse_mask:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MouseEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MouseEvent)
  return false;
#undef DO_
}

void MouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MouseEvent)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional uint32 mask = 3;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mask(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.MouseEvent)
}

size_t MouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MouseEvent)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional uint32 mask = 3;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseEvent*>(&from));
}

void MouseEvent::MergeFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MouseEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MouseEvent::UnsafeMergeFrom(const MouseEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.mask() != 0) {
    set_mask(from.mask());
  }
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MouseEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MouseEvent::IsInitialized() const {

  return true;
}

void MouseEvent::Swap(MouseEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MouseEvent temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MouseEvent::UnsafeArenaSwap(MouseEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MouseEvent::InternalSwap(MouseEvent* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(mask_, other->mask_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MouseEvent::GetTypeName() const {
  return "proto.MouseEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MouseEvent

// optional int32 x = 1;
void MouseEvent::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 MouseEvent::x() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.x)
  return x_;
}
void MouseEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.x)
}

// optional int32 y = 2;
void MouseEvent::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 MouseEvent::y() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.y)
  return y_;
}
void MouseEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.y)
}

// optional uint32 mask = 3;
void MouseEvent::clear_mask() {
  mask_ = 0u;
}
::google::protobuf::uint32 MouseEvent::mask() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.mask)
  return mask_;
}
void MouseEvent::set_mask(::google::protobuf::uint32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.mask)
}

inline const MouseEvent* MouseEvent::internal_default_instance() {
  return &MouseEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Clipboard::kMimeTypeFieldNumber;
const int Clipboard::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Clipboard::Clipboard()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Clipboard)
}
Clipboard::Clipboard(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.Clipboard)
}

void Clipboard::InitAsDefaultInstance() {
}

Clipboard::Clipboard(const Clipboard& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Clipboard)
}

void Clipboard::SharedCtor() {
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Clipboard::~Clipboard() {
  // @@protoc_insertion_point(destructor:proto.Clipboard)
  SharedDtor();
}

void Clipboard::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  mime_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Clipboard::ArenaDtor(void* object) {
  Clipboard* _this = reinterpret_cast< Clipboard* >(object);
  (void)_this;
}
void Clipboard::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Clipboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Clipboard& Clipboard::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Clipboard> Clipboard_default_instance_;

Clipboard* Clipboard::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Clipboard>(arena);
}

void Clipboard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Clipboard)
  mime_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Clipboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Clipboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mime_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Clipboard.mime_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Clipboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Clipboard)
  return false;
#undef DO_
}

void Clipboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Clipboard)
  // optional string mime_type = 1;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Clipboard.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Clipboard)
}

size_t Clipboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Clipboard)
  size_t total_size = 0;

  // optional string mime_type = 1;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clipboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Clipboard*>(&from));
}

void Clipboard::MergeFrom(const Clipboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Clipboard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Clipboard::UnsafeMergeFrom(const Clipboard& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mime_type().size() > 0) {
    set_mime_type(from.mime_type());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void Clipboard::CopyFrom(const Clipboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Clipboard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Clipboard::IsInitialized() const {

  return true;
}

void Clipboard::Swap(Clipboard* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Clipboard temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Clipboard::UnsafeArenaSwap(Clipboard* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Clipboard::InternalSwap(Clipboard* other) {
  mime_type_.Swap(&other->mime_type_);
  data_.Swap(&other->data_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Clipboard::GetTypeName() const {
  return "proto.Clipboard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Clipboard

// optional string mime_type = 1;
void Clipboard::clear_mime_type() {
  mime_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Clipboard::mime_type() const {
  // @@protoc_insertion_point(field_get:proto.Clipboard.mime_type)
  return mime_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Clipboard::set_mime_type(const ::std::string& value) {
  
  mime_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.Clipboard.mime_type)
}
void Clipboard::set_mime_type(const char* value) {
  
  mime_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.Clipboard.mime_type)
}
void Clipboard::set_mime_type(const char* value,
    size_t size) {
  
  mime_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.Clipboard.mime_type)
}
::std::string* Clipboard::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.Clipboard.mime_type)
  return mime_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Clipboard::release_mime_type() {
  // @@protoc_insertion_point(field_release:proto.Clipboard.mime_type)
  
  return mime_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Clipboard::unsafe_arena_release_mime_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Clipboard.mime_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mime_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Clipboard::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.Clipboard.mime_type)
}
void Clipboard::unsafe_arena_set_allocated_mime_type(
    ::std::string* mime_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mime_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Clipboard.mime_type)
}

// optional bytes data = 2;
void Clipboard::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Clipboard::data() const {
  // @@protoc_insertion_point(field_get:proto.Clipboard.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Clipboard::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.Clipboard.data)
}
void Clipboard::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.Clipboard.data)
}
void Clipboard::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.Clipboard.data)
}
::std::string* Clipboard::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.Clipboard.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Clipboard::release_data() {
  // @@protoc_insertion_point(field_release:proto.Clipboard.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Clipboard::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Clipboard.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Clipboard::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.Clipboard.data)
}
void Clipboard::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Clipboard.data)
}

inline const Clipboard* Clipboard::internal_default_instance() {
  return &Clipboard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipboardRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipboardRequest::ClipboardRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClipboardRequest)
}
ClipboardRequest::ClipboardRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.ClipboardRequest)
}

void ClipboardRequest::InitAsDefaultInstance() {
}

ClipboardRequest::ClipboardRequest(const ClipboardRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ClipboardRequest)
}

void ClipboardRequest::SharedCtor() {
  dummy_ = false;
  _cached_size_ = 0;
}

ClipboardRequest::~ClipboardRequest() {
  // @@protoc_insertion_point(destructor:proto.ClipboardRequest)
  SharedDtor();
}

void ClipboardRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ClipboardRequest::ArenaDtor(void* object) {
  ClipboardRequest* _this = reinterpret_cast< ClipboardRequest* >(object);
  (void)_this;
}
void ClipboardRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClipboardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipboardRequest& ClipboardRequest::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClipboardRequest> ClipboardRequest_default_instance_;

ClipboardRequest* ClipboardRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClipboardRequest>(arena);
}

void ClipboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClipboardRequest)
  dummy_ = false;
}

bool ClipboardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClipboardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dummy = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClipboardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClipboardRequest)
  return false;
#undef DO_
}

void ClipboardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClipboardRequest)
  // optional bool dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClipboardRequest)
}

size_t ClipboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClipboardRequest)
  size_t total_size = 0;

  // optional bool dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipboardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardRequest*>(&from));
}

void ClipboardRequest::MergeFrom(const ClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClipboardRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClipboardRequest::UnsafeMergeFrom(const ClipboardRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void ClipboardRequest::CopyFrom(const ClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClipboardRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClipboardRequest::IsInitialized() const {

  return true;
}

void ClipboardRequest::Swap(ClipboardRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClipboardRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClipboardRequest::UnsafeArenaSwap(ClipboardRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClipboardRequest::InternalSwap(ClipboardRequest* other) {
  std::swap(dummy_, other->dummy_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClipboardRequest::GetTypeName() const {
  return "proto.ClipboardRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClipboardRequest

// optional bool dummy = 1;
void ClipboardRequest::clear_dummy() {
  dummy_ = false;
}
bool ClipboardRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardRequest.dummy)
  return dummy_;
}
void ClipboardRequest::set_dummy(bool value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.ClipboardRequest.dummy)
}

inline const ClipboardRequest* ClipboardRequest::internal_default_instance() {
  return &ClipboardRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipboardControl::kAutoSendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipboardControl::ClipboardControl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClipboardControl)
}
ClipboardControl::ClipboardControl(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.ClipboardControl)
}

void ClipboardControl::InitAsDefaultInstance() {
}

ClipboardControl::ClipboardControl(const ClipboardControl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ClipboardControl)
}

void ClipboardControl::SharedCtor() {
  auto_send_ = false;
  _cached_size_ = 0;
}

ClipboardControl::~ClipboardControl() {
  // @@protoc_insertion_point(destructor:proto.ClipboardControl)
  SharedDtor();
}

void ClipboardControl::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ClipboardControl::ArenaDtor(void* object) {
  ClipboardControl* _this = reinterpret_cast< ClipboardControl* >(object);
  (void)_this;
}
void ClipboardControl::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClipboardControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipboardControl& ClipboardControl::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClipboardControl> ClipboardControl_default_instance_;

ClipboardControl* ClipboardControl::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClipboardControl>(arena);
}

void ClipboardControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClipboardControl)
  auto_send_ = false;
}

bool ClipboardControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClipboardControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool auto_send = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_send_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClipboardControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClipboardControl)
  return false;
#undef DO_
}

void ClipboardControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClipboardControl)
  // optional bool auto_send = 1;
  if (this->auto_send() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_send(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClipboardControl)
}

size_t ClipboardControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClipboardControl)
  size_t total_size = 0;

  // optional bool auto_send = 1;
  if (this->auto_send() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipboardControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardControl*>(&from));
}

void ClipboardControl::MergeFrom(const ClipboardControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClipboardControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClipboardControl::UnsafeMergeFrom(const ClipboardControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.auto_send() != 0) {
    set_auto_send(from.auto_send());
  }
}

void ClipboardControl::CopyFrom(const ClipboardControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClipboardControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClipboardControl::IsInitialized() const {

  return true;
}

void ClipboardControl::Swap(ClipboardControl* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClipboardControl temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClipboardControl::UnsafeArenaSwap(ClipboardControl* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClipboardControl::InternalSwap(ClipboardControl* other) {
  std::swap(auto_send_, other->auto_send_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClipboardControl::GetTypeName() const {
  return "proto.ClipboardControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClipboardControl

// optional bool auto_send = 1;
void ClipboardControl::clear_auto_send() {
  auto_send_ = false;
}
bool ClipboardControl::auto_send() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardControl.auto_send)
  return auto_send_;
}
void ClipboardControl::set_auto_send(bool value) {
  
  auto_send_ = value;
  // @@protoc_insertion_point(field_set:proto.ClipboardControl.auto_send)
}

inline const ClipboardControl* ClipboardControl::internal_default_instance() {
  return &ClipboardControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorShape::kWidthFieldNumber;
const int CursorShape::kHeightFieldNumber;
const int CursorShape::kHotspotXFieldNumber;
const int CursorShape::kHotspotYFieldNumber;
const int CursorShape::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorShape::CursorShape()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CursorShape)
}
CursorShape::CursorShape(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CursorShape)
}

void CursorShape::InitAsDefaultInstance() {
}

CursorShape::CursorShape(const CursorShape& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.CursorShape)
}

void CursorShape::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&width_) + sizeof(hotspot_y_));
  _cached_size_ = 0;
}

CursorShape::~CursorShape() {
  // @@protoc_insertion_point(destructor:proto.CursorShape)
  SharedDtor();
}

void CursorShape::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CursorShape::ArenaDtor(void* object) {
  CursorShape* _this = reinterpret_cast< CursorShape* >(object);
  (void)_this;
}
void CursorShape::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CursorShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorShape& CursorShape::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CursorShape> CursorShape_default_instance_;

CursorShape* CursorShape::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CursorShape>(arena);
}

void CursorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CursorShape)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CursorShape, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CursorShape*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, hotspot_y_);
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool CursorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CursorShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hotspot_x;
        break;
      }

      // optional int32 hotspot_x = 3;
      case 3: {
        if (tag == 24) {
         parse_hotspot_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hotspot_y;
        break;
      }

      // optional int32 hotspot_y = 4;
      case 4: {
        if (tag == 32) {
         parse_hotspot_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CursorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CursorShape)
  return false;
#undef DO_
}

void CursorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CursorShape)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 hotspot_x = 3;
  if (this->hotspot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hotspot_x(), output);
  }

  // optional int32 hotspot_y = 4;
  if (this->hotspot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hotspot_y(), output);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.CursorShape)
}

size_t CursorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CursorShape)
  size_t total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional int32 hotspot_x = 3;
  if (this->hotspot_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_x());
  }

  // optional int32 hotspot_y = 4;
  if (this->hotspot_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_y());
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorShape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorShape*>(&from));
}

void CursorShape::MergeFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CursorShape)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CursorShape::UnsafeMergeFrom(const CursorShape& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hotspot_x() != 0) {
    set_hotspot_x(from.hotspot_x());
  }
  if (from.hotspot_y() != 0) {
    set_hotspot_y(from.hotspot_y());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void CursorShape::CopyFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CursorShape)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CursorShape::IsInitialized() const {

  return true;
}

void CursorShape::Swap(CursorShape* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CursorShape temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CursorShape::UnsafeArenaSwap(CursorShape* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CursorShape::InternalSwap(CursorShape* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(hotspot_x_, other->hotspot_x_);
  std::swap(hotspot_y_, other->hotspot_y_);
  data_.Swap(&other->data_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CursorShape::GetTypeName() const {
  return "proto.CursorShape";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CursorShape

// optional int32 width = 1;
void CursorShape::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.width)
  return width_;
}
void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.width)
}

// optional int32 height = 2;
void CursorShape::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.height)
  return height_;
}
void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.height)
}

// optional int32 hotspot_x = 3;
void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_x)
}

// optional int32 hotspot_y = 4;
void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_y)
}

// optional bytes data = 5;
void CursorShape::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CursorShape::data() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CursorShape::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.CursorShape.data)
}
void CursorShape::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.CursorShape.data)
}
void CursorShape::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.CursorShape.data)
}
::std::string* CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.CursorShape.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:proto.CursorShape.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CursorShape::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CursorShape.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.CursorShape.data)
}
void CursorShape::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CursorShape.data)
}

inline const CursorShape* CursorShape::internal_default_instance() {
  return &CursorShape_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorShapeControl::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorShapeControl::CursorShapeControl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CursorShapeControl)
}
CursorShapeControl::CursorShapeControl(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CursorShapeControl)
}

void CursorShapeControl::InitAsDefaultInstance() {
}

CursorShapeControl::CursorShapeControl(const CursorShapeControl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.CursorShapeControl)
}

void CursorShapeControl::SharedCtor() {
  enable_ = false;
  _cached_size_ = 0;
}

CursorShapeControl::~CursorShapeControl() {
  // @@protoc_insertion_point(destructor:proto.CursorShapeControl)
  SharedDtor();
}

void CursorShapeControl::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void CursorShapeControl::ArenaDtor(void* object) {
  CursorShapeControl* _this = reinterpret_cast< CursorShapeControl* >(object);
  (void)_this;
}
void CursorShapeControl::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CursorShapeControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorShapeControl& CursorShapeControl::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CursorShapeControl> CursorShapeControl_default_instance_;

CursorShapeControl* CursorShapeControl::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CursorShapeControl>(arena);
}

void CursorShapeControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CursorShapeControl)
  enable_ = false;
}

bool CursorShapeControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CursorShapeControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CursorShapeControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CursorShapeControl)
  return false;
#undef DO_
}

void CursorShapeControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CursorShapeControl)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.CursorShapeControl)
}

size_t CursorShapeControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CursorShapeControl)
  size_t total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorShapeControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorShapeControl*>(&from));
}

void CursorShapeControl::MergeFrom(const CursorShapeControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CursorShapeControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CursorShapeControl::UnsafeMergeFrom(const CursorShapeControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void CursorShapeControl::CopyFrom(const CursorShapeControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CursorShapeControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CursorShapeControl::IsInitialized() const {

  return true;
}

void CursorShapeControl::Swap(CursorShapeControl* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CursorShapeControl temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CursorShapeControl::UnsafeArenaSwap(CursorShapeControl* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CursorShapeControl::InternalSwap(CursorShapeControl* other) {
  std::swap(enable_, other->enable_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CursorShapeControl::GetTypeName() const {
  return "proto.CursorShapeControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CursorShapeControl

// optional bool enable = 1;
void CursorShapeControl::clear_enable() {
  enable_ = false;
}
bool CursorShapeControl::enable() const {
  // @@protoc_insertion_point(field_get:proto.CursorShapeControl.enable)
  return enable_;
}
void CursorShapeControl::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShapeControl.enable)
}

inline const CursorShapeControl* CursorShapeControl::internal_default_instance() {
  return &CursorShapeControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRect::kXFieldNumber;
const int VideoRect::kYFieldNumber;
const int VideoRect::kWidthFieldNumber;
const int VideoRect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRect::VideoRect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoRect)
}
VideoRect::VideoRect(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.VideoRect)
}

void VideoRect::InitAsDefaultInstance() {
}

VideoRect::VideoRect(const VideoRect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.VideoRect)
}

void VideoRect::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  _cached_size_ = 0;
}

VideoRect::~VideoRect() {
  // @@protoc_insertion_point(destructor:proto.VideoRect)
  SharedDtor();
}

void VideoRect::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void VideoRect::ArenaDtor(void* object) {
  VideoRect* _this = reinterpret_cast< VideoRect* >(object);
  (void)_this;
}
void VideoRect::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VideoRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoRect& VideoRect::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoRect> VideoRect_default_instance_;

VideoRect* VideoRect::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VideoRect>(arena);
}

void VideoRect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoRect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoRect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoRect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool VideoRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoRect)
  return false;
#undef DO_
}

void VideoRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoRect)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoRect)
}

size_t VideoRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoRect)
  size_t total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoRect*>(&from));
}

void VideoRect::MergeFrom(const VideoRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoRect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoRect::UnsafeMergeFrom(const VideoRect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoRect::CopyFrom(const VideoRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoRect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoRect::IsInitialized() const {

  return true;
}

void VideoRect::Swap(VideoRect* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VideoRect temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VideoRect::UnsafeArenaSwap(VideoRect* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VideoRect::InternalSwap(VideoRect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoRect::GetTypeName() const {
  return "proto.VideoRect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRect

// optional int32 x = 1;
void VideoRect::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 VideoRect::x() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.x)
  return x_;
}
void VideoRect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.x)
}

// optional int32 y = 2;
void VideoRect::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 VideoRect::y() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.y)
  return y_;
}
void VideoRect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.y)
}

// optional int32 width = 3;
void VideoRect::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 VideoRect::width() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.width)
  return width_;
}
void VideoRect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.width)
}

// optional int32 height = 4;
void VideoRect::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 VideoRect::height() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.height)
  return height_;
}
void VideoRect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.height)
}

inline const VideoRect* VideoRect::internal_default_instance() {
  return &VideoRect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPixelFormat::kBitsPerPixelFieldNumber;
const int VideoPixelFormat::kRedMaxFieldNumber;
const int VideoPixelFormat::kGreenMaxFieldNumber;
const int VideoPixelFormat::kBlueMaxFieldNumber;
const int VideoPixelFormat::kRedShiftFieldNumber;
const int VideoPixelFormat::kGreenShiftFieldNumber;
const int VideoPixelFormat::kBlueShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPixelFormat::VideoPixelFormat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoPixelFormat)
}
VideoPixelFormat::VideoPixelFormat(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.VideoPixelFormat)
}

void VideoPixelFormat::InitAsDefaultInstance() {
}

VideoPixelFormat::VideoPixelFormat(const VideoPixelFormat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.VideoPixelFormat)
}

void VideoPixelFormat::SharedCtor() {
  ::memset(&bits_per_pixel_, 0, reinterpret_cast<char*>(&blue_shift_) -
    reinterpret_cast<char*>(&bits_per_pixel_) + sizeof(blue_shift_));
  _cached_size_ = 0;
}

VideoPixelFormat::~VideoPixelFormat() {
  // @@protoc_insertion_point(destructor:proto.VideoPixelFormat)
  SharedDtor();
}

void VideoPixelFormat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void VideoPixelFormat::ArenaDtor(void* object) {
  VideoPixelFormat* _this = reinterpret_cast< VideoPixelFormat* >(object);
  (void)_this;
}
void VideoPixelFormat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VideoPixelFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPixelFormat& VideoPixelFormat::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoPixelFormat> VideoPixelFormat_default_instance_;

VideoPixelFormat* VideoPixelFormat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VideoPixelFormat>(arena);
}

void VideoPixelFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoPixelFormat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoPixelFormat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoPixelFormat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bits_per_pixel_, blue_shift_);

#undef ZR_HELPER_
#undef ZR_

}

bool VideoPixelFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoPixelFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bits_per_pixel = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_per_pixel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_red_max;
        break;
      }

      // optional int32 red_max = 2;
      case 2: {
        if (tag == 16) {
         parse_red_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_green_max;
        break;
      }

      // optional int32 green_max = 3;
      case 3: {
        if (tag == 24) {
         parse_green_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blue_max;
        break;
      }

      // optional int32 blue_max = 4;
      case 4: {
        if (tag == 32) {
         parse_blue_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_red_shift;
        break;
      }

      // optional int32 red_shift = 5;
      case 5: {
        if (tag == 40) {
         parse_red_shift:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_green_shift;
        break;
      }

      // optional int32 green_shift = 6;
      case 6: {
        if (tag == 48) {
         parse_green_shift:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blue_shift;
        break;
      }

      // optional int32 blue_shift = 7;
      case 7: {
        if (tag == 56) {
         parse_blue_shift:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_shift_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoPixelFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoPixelFormat)
  return false;
#undef DO_
}

void VideoPixelFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoPixelFormat)
  // optional int32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bits_per_pixel(), output);
  }

  // optional int32 red_max = 2;
  if (this->red_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->red_max(), output);
  }

  // optional int32 green_max = 3;
  if (this->green_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->green_max(), output);
  }

  // optional int32 blue_max = 4;
  if (this->blue_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blue_max(), output);
  }

  // optional int32 red_shift = 5;
  if (this->red_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->red_shift(), output);
  }

  // optional int32 green_shift = 6;
  if (this->green_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->green_shift(), output);
  }

  // optional int32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blue_shift(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoPixelFormat)
}

size_t VideoPixelFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoPixelFormat)
  size_t total_size = 0;

  // optional int32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bits_per_pixel());
  }

  // optional int32 red_max = 2;
  if (this->red_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red_max());
  }

  // optional int32 green_max = 3;
  if (this->green_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green_max());
  }

  // optional int32 blue_max = 4;
  if (this->blue_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue_max());
  }

  // optional int32 red_shift = 5;
  if (this->red_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red_shift());
  }

  // optional int32 green_shift = 6;
  if (this->green_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green_shift());
  }

  // optional int32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue_shift());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPixelFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPixelFormat*>(&from));
}

void VideoPixelFormat::MergeFrom(const VideoPixelFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoPixelFormat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoPixelFormat::UnsafeMergeFrom(const VideoPixelFormat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bits_per_pixel() != 0) {
    set_bits_per_pixel(from.bits_per_pixel());
  }
  if (from.red_max() != 0) {
    set_red_max(from.red_max());
  }
  if (from.green_max() != 0) {
    set_green_max(from.green_max());
  }
  if (from.blue_max() != 0) {
    set_blue_max(from.blue_max());
  }
  if (from.red_shift() != 0) {
    set_red_shift(from.red_shift());
  }
  if (from.green_shift() != 0) {
    set_green_shift(from.green_shift());
  }
  if (from.blue_shift() != 0) {
    set_blue_shift(from.blue_shift());
  }
}

void VideoPixelFormat::CopyFrom(const VideoPixelFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoPixelFormat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoPixelFormat::IsInitialized() const {

  return true;
}

void VideoPixelFormat::Swap(VideoPixelFormat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VideoPixelFormat temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VideoPixelFormat::UnsafeArenaSwap(VideoPixelFormat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VideoPixelFormat::InternalSwap(VideoPixelFormat* other) {
  std::swap(bits_per_pixel_, other->bits_per_pixel_);
  std::swap(red_max_, other->red_max_);
  std::swap(green_max_, other->green_max_);
  std::swap(blue_max_, other->blue_max_);
  std::swap(red_shift_, other->red_shift_);
  std::swap(green_shift_, other->green_shift_);
  std::swap(blue_shift_, other->blue_shift_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPixelFormat::GetTypeName() const {
  return "proto.VideoPixelFormat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPixelFormat

// optional int32 bits_per_pixel = 1;
void VideoPixelFormat::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.bits_per_pixel)
  return bits_per_pixel_;
}
void VideoPixelFormat::set_bits_per_pixel(::google::protobuf::int32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.bits_per_pixel)
}

// optional int32 red_max = 2;
void VideoPixelFormat::clear_red_max() {
  red_max_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::red_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.red_max)
  return red_max_;
}
void VideoPixelFormat::set_red_max(::google::protobuf::int32 value) {
  
  red_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.red_max)
}

// optional int32 green_max = 3;
void VideoPixelFormat::clear_green_max() {
  green_max_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::green_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.green_max)
  return green_max_;
}
void VideoPixelFormat::set_green_max(::google::protobuf::int32 value) {
  
  green_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.green_max)
}

// optional int32 blue_max = 4;
void VideoPixelFormat::clear_blue_max() {
  blue_max_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::blue_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.blue_max)
  return blue_max_;
}
void VideoPixelFormat::set_blue_max(::google::protobuf::int32 value) {
  
  blue_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.blue_max)
}

// optional int32 red_shift = 5;
void VideoPixelFormat::clear_red_shift() {
  red_shift_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::red_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.red_shift)
  return red_shift_;
}
void VideoPixelFormat::set_red_shift(::google::protobuf::int32 value) {
  
  red_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.red_shift)
}

// optional int32 green_shift = 6;
void VideoPixelFormat::clear_green_shift() {
  green_shift_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::green_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.green_shift)
  return green_shift_;
}
void VideoPixelFormat::set_green_shift(::google::protobuf::int32 value) {
  
  green_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.green_shift)
}

// optional int32 blue_shift = 7;
void VideoPixelFormat::clear_blue_shift() {
  blue_shift_ = 0;
}
::google::protobuf::int32 VideoPixelFormat::blue_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.blue_shift)
  return blue_shift_;
}
void VideoPixelFormat::set_blue_shift(::google::protobuf::int32 value) {
  
  blue_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.blue_shift)
}

inline const VideoPixelFormat* VideoPixelFormat::internal_default_instance() {
  return &VideoPixelFormat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void VideoPacketFormat::_slow_mutable_pixel_format() {
  pixel_format_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoPixelFormat >(
      GetArenaNoVirtual());
}
::proto::VideoPixelFormat* VideoPacketFormat::_slow_release_pixel_format() {
  if (pixel_format_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoPixelFormat* temp = new ::proto::VideoPixelFormat(*pixel_format_);
    pixel_format_ = NULL;
    return temp;
  }
}
::proto::VideoPixelFormat* VideoPacketFormat::unsafe_arena_release_pixel_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.VideoPacketFormat.pixel_format)
  
  ::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
void VideoPacketFormat::_slow_set_allocated_pixel_format(
    ::google::protobuf::Arena* message_arena, ::proto::VideoPixelFormat** pixel_format) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pixel_format) == NULL) {
      message_arena->Own(*pixel_format);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pixel_format)) {
      ::proto::VideoPixelFormat* new_pixel_format = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoPixelFormat >(
            message_arena);
      new_pixel_format->CopyFrom(**pixel_format);
      *pixel_format = new_pixel_format;
    }
}
void VideoPacketFormat::unsafe_arena_set_allocated_pixel_format(
    ::proto::VideoPixelFormat* pixel_format) {
  if (GetArenaNoVirtual() == NULL) {
    delete pixel_format_;
  }
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.VideoPacketFormat.pixel_format)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacketFormat::kEncodingFieldNumber;
const int VideoPacketFormat::kScreenWidthFieldNumber;
const int VideoPacketFormat::kScreenHeightFieldNumber;
const int VideoPacketFormat::kPixelFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacketFormat::VideoPacketFormat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoPacketFormat)
}
VideoPacketFormat::VideoPacketFormat(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.VideoPacketFormat)
}

void VideoPacketFormat::InitAsDefaultInstance() {
  pixel_format_ = const_cast< ::proto::VideoPixelFormat*>(
      ::proto::VideoPixelFormat::internal_default_instance());
}

VideoPacketFormat::VideoPacketFormat(const VideoPacketFormat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.VideoPacketFormat)
}

void VideoPacketFormat::SharedCtor() {
  pixel_format_ = NULL;
  ::memset(&encoding_, 0, reinterpret_cast<char*>(&screen_height_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(screen_height_));
  _cached_size_ = 0;
}

VideoPacketFormat::~VideoPacketFormat() {
  // @@protoc_insertion_point(destructor:proto.VideoPacketFormat)
  SharedDtor();
}

void VideoPacketFormat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &VideoPacketFormat_default_instance_.get()) {
    delete pixel_format_;
  }
}

void VideoPacketFormat::ArenaDtor(void* object) {
  VideoPacketFormat* _this = reinterpret_cast< VideoPacketFormat* >(object);
  (void)_this;
}
void VideoPacketFormat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VideoPacketFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPacketFormat& VideoPacketFormat::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoPacketFormat> VideoPacketFormat_default_instance_;

VideoPacketFormat* VideoPacketFormat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VideoPacketFormat>(arena);
}

void VideoPacketFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoPacketFormat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoPacketFormat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoPacketFormat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(encoding_, screen_height_);
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool VideoPacketFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoPacketFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.VideoEncoding encoding = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 2;
      case 2: {
        if (tag == 16) {
         parse_screen_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 3;
      case 3: {
        if (tag == 24) {
         parse_screen_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pixel_format;
        break;
      }

      // optional .proto.VideoPixelFormat pixel_format = 4;
      case 4: {
        if (tag == 34) {
         parse_pixel_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoPacketFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoPacketFormat)
  return false;
#undef DO_
}

void VideoPacketFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoPacketFormat)
  // optional .proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // optional int32 screen_width = 2;
  if (this->screen_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screen_width(), output);
  }

  // optional int32 screen_height = 3;
  if (this->screen_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->screen_height(), output);
  }

  // optional .proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->pixel_format_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoPacketFormat)
}

size_t VideoPacketFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoPacketFormat)
  size_t total_size = 0;

  // optional .proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // optional int32 screen_width = 2;
  if (this->screen_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->screen_width());
  }

  // optional int32 screen_height = 3;
  if (this->screen_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->screen_height());
  }

  // optional .proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pixel_format_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPacketFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacketFormat*>(&from));
}

void VideoPacketFormat::MergeFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoPacketFormat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoPacketFormat::UnsafeMergeFrom(const VideoPacketFormat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.screen_width() != 0) {
    set_screen_width(from.screen_width());
  }
  if (from.screen_height() != 0) {
    set_screen_height(from.screen_height());
  }
  if (from.has_pixel_format()) {
    mutable_pixel_format()->::proto::VideoPixelFormat::MergeFrom(from.pixel_format());
  }
}

void VideoPacketFormat::CopyFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoPacketFormat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoPacketFormat::IsInitialized() const {

  return true;
}

void VideoPacketFormat::Swap(VideoPacketFormat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VideoPacketFormat temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VideoPacketFormat::UnsafeArenaSwap(VideoPacketFormat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VideoPacketFormat::InternalSwap(VideoPacketFormat* other) {
  std::swap(encoding_, other->encoding_);
  std::swap(screen_width_, other->screen_width_);
  std::swap(screen_height_, other->screen_height_);
  std::swap(pixel_format_, other->pixel_format_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPacketFormat::GetTypeName() const {
  return "proto.VideoPacketFormat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPacketFormat

// optional .proto.VideoEncoding encoding = 1;
void VideoPacketFormat::clear_encoding() {
  encoding_ = 0;
}
::proto::VideoEncoding VideoPacketFormat::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.encoding)
  return static_cast< ::proto::VideoEncoding >(encoding_);
}
void VideoPacketFormat::set_encoding(::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.encoding)
}

// optional int32 screen_width = 2;
void VideoPacketFormat::clear_screen_width() {
  screen_width_ = 0;
}
::google::protobuf::int32 VideoPacketFormat::screen_width() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.screen_width)
  return screen_width_;
}
void VideoPacketFormat::set_screen_width(::google::protobuf::int32 value) {
  
  screen_width_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.screen_width)
}

// optional int32 screen_height = 3;
void VideoPacketFormat::clear_screen_height() {
  screen_height_ = 0;
}
::google::protobuf::int32 VideoPacketFormat::screen_height() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.screen_height)
  return screen_height_;
}
void VideoPacketFormat::set_screen_height(::google::protobuf::int32 value) {
  
  screen_height_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.screen_height)
}

// optional .proto.VideoPixelFormat pixel_format = 4;
bool VideoPacketFormat::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
void VideoPacketFormat::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
const ::proto::VideoPixelFormat& VideoPacketFormat::pixel_format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::proto::VideoPixelFormat::internal_default_instance();
}
::proto::VideoPixelFormat* VideoPacketFormat::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    _slow_mutable_pixel_format();
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.pixel_format)
  return pixel_format_;
}
::proto::VideoPixelFormat* VideoPacketFormat::release_pixel_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.pixel_format)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pixel_format();
  } else {
    ::proto::VideoPixelFormat* temp = pixel_format_;
    pixel_format_ = NULL;
    return temp;
  }
}
 void VideoPacketFormat::set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pixel_format_;
  }
  if (pixel_format != NULL) {
    _slow_set_allocated_pixel_format(message_arena, &pixel_format);
  }
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.pixel_format)
}

inline const VideoPacketFormat* VideoPacketFormat::internal_default_instance() {
  return &VideoPacketFormat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool VideoPacket_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoPacket_Flags VideoPacket::UNKNOWN_PACKET;
const VideoPacket_Flags VideoPacket::FIRST_PACKET;
const VideoPacket_Flags VideoPacket::LAST_PACKET;
const VideoPacket_Flags VideoPacket::PARTITION_PACKET;
const VideoPacket_Flags VideoPacket::Flags_MIN;
const VideoPacket_Flags VideoPacket::Flags_MAX;
const int VideoPacket::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
void VideoPacket::_slow_mutable_format() {
  format_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoPacketFormat >(
      GetArenaNoVirtual());
}
::proto::VideoPacketFormat* VideoPacket::_slow_release_format() {
  if (format_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoPacketFormat* temp = new ::proto::VideoPacketFormat(*format_);
    format_ = NULL;
    return temp;
  }
}
::proto::VideoPacketFormat* VideoPacket::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.VideoPacket.format)
  
  ::proto::VideoPacketFormat* temp = format_;
  format_ = NULL;
  return temp;
}
void VideoPacket::_slow_set_allocated_format(
    ::google::protobuf::Arena* message_arena, ::proto::VideoPacketFormat** format) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*format) == NULL) {
      message_arena->Own(*format);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*format)) {
      ::proto::VideoPacketFormat* new_format = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoPacketFormat >(
            message_arena);
      new_format->CopyFrom(**format);
      *format = new_format;
    }
}
void VideoPacket::unsafe_arena_set_allocated_format(
    ::proto::VideoPacketFormat* format) {
  if (GetArenaNoVirtual() == NULL) {
    delete format_;
  }
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.VideoPacket.format)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacket::kFlagsFieldNumber;
const int VideoPacket::kFormatFieldNumber;
const int VideoPacket::kChangedRectFieldNumber;
const int VideoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacket::VideoPacket()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoPacket)
}
VideoPacket::VideoPacket(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena),
  changed_rect_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.VideoPacket)
}

void VideoPacket::InitAsDefaultInstance() {
  format_ = const_cast< ::proto::VideoPacketFormat*>(
      ::proto::VideoPacketFormat::internal_default_instance());
}

VideoPacket::VideoPacket(const VideoPacket& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.VideoPacket)
}

void VideoPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = NULL;
  flags_ = 0;
  _cached_size_ = 0;
}

VideoPacket::~VideoPacket() {
  // @@protoc_insertion_point(destructor:proto.VideoPacket)
  SharedDtor();
}

void VideoPacket::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &VideoPacket_default_instance_.get()) {
    delete format_;
  }
}

void VideoPacket::ArenaDtor(void* object) {
  VideoPacket* _this = reinterpret_cast< VideoPacket* >(object);
  (void)_this;
}
void VideoPacket::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VideoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPacket& VideoPacket::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoPacket> VideoPacket_default_instance_;

VideoPacket* VideoPacket::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VideoPacket>(arena);
}

void VideoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoPacket)
  flags_ = 0;
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  changed_rect_.Clear();
}

bool VideoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flags = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // optional .proto.VideoPacketFormat format = 2;
      case 2: {
        if (tag == 18) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_changed_rect;
        break;
      }

      // repeated .proto.VideoRect changed_rect = 3;
      case 3: {
        if (tag == 26) {
         parse_changed_rect:
          DO_(input->IncrementRecursionDepth());
         parse_loop_changed_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_changed_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_changed_rect;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoPacket)
  return false;
#undef DO_
}

void VideoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoPacket)
  // optional int32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // optional .proto.VideoPacketFormat format = 2;
  if (this->has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->format_, output);
  }

  // repeated .proto.VideoRect changed_rect = 3;
  for (unsigned int i = 0, n = this->changed_rect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->changed_rect(i), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoPacket)
}

size_t VideoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoPacket)
  size_t total_size = 0;

  // optional int32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  // optional .proto.VideoPacketFormat format = 2;
  if (this->has_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated .proto.VideoRect changed_rect = 3;
  {
    unsigned int count = this->changed_rect_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changed_rect(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacket*>(&from));
}

void VideoPacket::MergeFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoPacket)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoPacket::UnsafeMergeFrom(const VideoPacket& from) {
  GOOGLE_DCHECK(&from != this);
  changed_rect_.MergeFrom(from.changed_rect_);
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.has_format()) {
    mutable_format()->::proto::VideoPacketFormat::MergeFrom(from.format());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void VideoPacket::CopyFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoPacket)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoPacket::IsInitialized() const {

  return true;
}

void VideoPacket::Swap(VideoPacket* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VideoPacket temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VideoPacket::UnsafeArenaSwap(VideoPacket* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VideoPacket::InternalSwap(VideoPacket* other) {
  std::swap(flags_, other->flags_);
  std::swap(format_, other->format_);
  changed_rect_.UnsafeArenaSwap(&other->changed_rect_);
  data_.Swap(&other->data_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPacket::GetTypeName() const {
  return "proto.VideoPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPacket

// optional int32 flags = 1;
void VideoPacket::clear_flags() {
  flags_ = 0;
}
::google::protobuf::int32 VideoPacket::flags() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.flags)
  return flags_;
}
void VideoPacket::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacket.flags)
}

// optional .proto.VideoPacketFormat format = 2;
bool VideoPacket::has_format() const {
  return this != internal_default_instance() && format_ != NULL;
}
void VideoPacket::clear_format() {
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
}
const ::proto::VideoPacketFormat& VideoPacket::format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.format)
  return format_ != NULL ? *format_
                         : *::proto::VideoPacketFormat::internal_default_instance();
}
::proto::VideoPacketFormat* VideoPacket::mutable_format() {
  
  if (format_ == NULL) {
    _slow_mutable_format();
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.format)
  return format_;
}
::proto::VideoPacketFormat* VideoPacket::release_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.format)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_format();
  } else {
    ::proto::VideoPacketFormat* temp = format_;
    format_ = NULL;
    return temp;
  }
}
 void VideoPacket::set_allocated_format(::proto::VideoPacketFormat* format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete format_;
  }
  if (format != NULL) {
    _slow_set_allocated_format(message_arena, &format);
  }
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.format)
}

// repeated .proto.VideoRect changed_rect = 3;
int VideoPacket::changed_rect_size() const {
  return changed_rect_.size();
}
void VideoPacket::clear_changed_rect() {
  changed_rect_.Clear();
}
const ::proto::VideoRect& VideoPacket::changed_rect(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.changed_rect)
  return changed_rect_.Get(index);
}
::proto::VideoRect* VideoPacket::mutable_changed_rect(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.changed_rect)
  return changed_rect_.Mutable(index);
}
::proto::VideoRect* VideoPacket::add_changed_rect() {
  // @@protoc_insertion_point(field_add:proto.VideoPacket.changed_rect)
  return changed_rect_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::VideoRect >*
VideoPacket::mutable_changed_rect() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoPacket.changed_rect)
  return &changed_rect_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::VideoRect >&
VideoPacket::changed_rect() const {
  // @@protoc_insertion_point(field_list:proto.VideoPacket.changed_rect)
  return changed_rect_;
}

// optional bytes data = 4;
void VideoPacket::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoPacket::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.VideoPacket.data)
}
void VideoPacket::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.VideoPacket.data)
}
void VideoPacket::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.VideoPacket.data)
}
::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VideoPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.VideoPacket.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.data)
}
void VideoPacket::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.VideoPacket.data)
}

inline const VideoPacket* VideoPacket::internal_default_instance() {
  return &VideoPacket_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void VideoControl::_slow_mutable_rect() {
  rect_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoRect >(
      GetArenaNoVirtual());
}
::proto::VideoRect* VideoControl::_slow_release_rect() {
  if (rect_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoRect* temp = new ::proto::VideoRect(*rect_);
    rect_ = NULL;
    return temp;
  }
}
::proto::VideoRect* VideoControl::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.VideoControl.rect)
  
  ::proto::VideoRect* temp = rect_;
  rect_ = NULL;
  return temp;
}
void VideoControl::_slow_set_allocated_rect(
    ::google::protobuf::Arena* message_arena, ::proto::VideoRect** rect) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rect) == NULL) {
      message_arena->Own(*rect);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rect)) {
      ::proto::VideoRect* new_rect = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoRect >(
            message_arena);
      new_rect->CopyFrom(**rect);
      *rect = new_rect;
    }
}
void VideoControl::unsafe_arena_set_allocated_rect(
    ::proto::VideoRect* rect) {
  if (GetArenaNoVirtual() == NULL) {
    delete rect_;
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.VideoControl.rect)
}
void VideoControl::_slow_mutable_pixel_format() {
  pixel_format_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoPixelFormat >(
      GetArenaNoVirtual());
}
::proto::VideoPixelFormat* VideoControl::_slow_release_pixel_format() {
  if (pixel_format_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoPixelFormat* temp = new ::proto::VideoPixelFormat(*pixel_format_);
    pixel_format_ = NULL;
    return temp;
  }
}
::proto::VideoPixelFormat* VideoControl::unsafe_arena_release_pixel_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.VideoControl.pixel_format)
  
  ::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
void VideoControl::_slow_set_allocated_pixel_format(
    ::google::protobuf::Arena* message_arena, ::proto::VideoPixelFormat** pixel_format) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pixel_format) == NULL) {
      message_arena->Own(*pixel_format);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pixel_format)) {
      ::proto::VideoPixelFormat* new_pixel_format = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoPixelFormat >(
            message_arena);
      new_pixel_format->CopyFrom(**pixel_format);
      *pixel_format = new_pixel_format;
    }
}
void VideoControl::unsafe_arena_set_allocated_pixel_format(
    ::proto::VideoPixelFormat* pixel_format) {
  if (GetArenaNoVirtual() == NULL) {
    delete pixel_format_;
  }
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.VideoControl.pixel_format)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoControl::kEnableFieldNumber;
const int VideoControl::kRectFieldNumber;
const int VideoControl::kEncodingFieldNumber;
const int VideoControl::kPixelFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoControl::VideoControl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoControl)
}
VideoControl::VideoControl(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.VideoControl)
}

void VideoControl::InitAsDefaultInstance() {
  rect_ = const_cast< ::proto::VideoRect*>(
      ::proto::VideoRect::internal_default_instance());
  pixel_format_ = const_cast< ::proto::VideoPixelFormat*>(
      ::proto::VideoPixelFormat::internal_default_instance());
}

VideoControl::VideoControl(const VideoControl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.VideoControl)
}

void VideoControl::SharedCtor() {
  rect_ = NULL;
  pixel_format_ = NULL;
  ::memset(&enable_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&enable_) + sizeof(encoding_));
  _cached_size_ = 0;
}

VideoControl::~VideoControl() {
  // @@protoc_insertion_point(destructor:proto.VideoControl)
  SharedDtor();
}

void VideoControl::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &VideoControl_default_instance_.get()) {
    delete rect_;
    delete pixel_format_;
  }
}

void VideoControl::ArenaDtor(void* object) {
  VideoControl* _this = reinterpret_cast< VideoControl* >(object);
  (void)_this;
}
void VideoControl::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VideoControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoControl& VideoControl::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoControl> VideoControl_default_instance_;

VideoControl* VideoControl::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VideoControl>(arena);
}

void VideoControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoControl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoControl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoControl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_, encoding_);
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool VideoControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rect;
        break;
      }

      // optional .proto.VideoRect rect = 2;
      case 2: {
        if (tag == 18) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_encoding;
        break;
      }

      // optional .proto.VideoEncoding encoding = 3;
      case 3: {
        if (tag == 24) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pixel_format;
        break;
      }

      // optional .proto.VideoPixelFormat pixel_format = 4;
      case 4: {
        if (tag == 34) {
         parse_pixel_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoControl)
  return false;
#undef DO_
}

void VideoControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoControl)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional .proto.VideoRect rect = 2;
  if (this->has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->rect_, output);
  }

  // optional .proto.VideoEncoding encoding = 3;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding(), output);
  }

  // optional .proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->pixel_format_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoControl)
}

size_t VideoControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoControl)
  size_t total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // optional .proto.VideoRect rect = 2;
  if (this->has_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rect_);
  }

  // optional .proto.VideoEncoding encoding = 3;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // optional .proto.VideoPixelFormat pixel_format = 4;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pixel_format_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoControl*>(&from));
}

void VideoControl::MergeFrom(const VideoControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoControl::UnsafeMergeFrom(const VideoControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.has_rect()) {
    mutable_rect()->::proto::VideoRect::MergeFrom(from.rect());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.has_pixel_format()) {
    mutable_pixel_format()->::proto::VideoPixelFormat::MergeFrom(from.pixel_format());
  }
}

void VideoControl::CopyFrom(const VideoControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoControl::IsInitialized() const {

  return true;
}

void VideoControl::Swap(VideoControl* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VideoControl temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VideoControl::UnsafeArenaSwap(VideoControl* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VideoControl::InternalSwap(VideoControl* other) {
  std::swap(enable_, other->enable_);
  std::swap(rect_, other->rect_);
  std::swap(encoding_, other->encoding_);
  std::swap(pixel_format_, other->pixel_format_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoControl::GetTypeName() const {
  return "proto.VideoControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoControl

// optional bool enable = 1;
void VideoControl::clear_enable() {
  enable_ = false;
}
bool VideoControl::enable() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.enable)
  return enable_;
}
void VideoControl::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoControl.enable)
}

// optional .proto.VideoRect rect = 2;
bool VideoControl::has_rect() const {
  return this != internal_default_instance() && rect_ != NULL;
}
void VideoControl::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
}
const ::proto::VideoRect& VideoControl::rect() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.rect)
  return rect_ != NULL ? *rect_
                         : *::proto::VideoRect::internal_default_instance();
}
::proto::VideoRect* VideoControl::mutable_rect() {
  
  if (rect_ == NULL) {
    _slow_mutable_rect();
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoControl.rect)
  return rect_;
}
::proto::VideoRect* VideoControl::release_rect() {
  // @@protoc_insertion_point(field_release:proto.VideoControl.rect)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rect();
  } else {
    ::proto::VideoRect* temp = rect_;
    rect_ = NULL;
    return temp;
  }
}
 void VideoControl::set_allocated_rect(::proto::VideoRect* rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rect_;
  }
  if (rect != NULL) {
    _slow_set_allocated_rect(message_arena, &rect);
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoControl.rect)
}

// optional .proto.VideoEncoding encoding = 3;
void VideoControl::clear_encoding() {
  encoding_ = 0;
}
::proto::VideoEncoding VideoControl::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.encoding)
  return static_cast< ::proto::VideoEncoding >(encoding_);
}
void VideoControl::set_encoding(::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoControl.encoding)
}

// optional .proto.VideoPixelFormat pixel_format = 4;
bool VideoControl::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
void VideoControl::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
const ::proto::VideoPixelFormat& VideoControl::pixel_format() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::proto::VideoPixelFormat::internal_default_instance();
}
::proto::VideoPixelFormat* VideoControl::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    _slow_mutable_pixel_format();
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoControl.pixel_format)
  return pixel_format_;
}
::proto::VideoPixelFormat* VideoControl::release_pixel_format() {
  // @@protoc_insertion_point(field_release:proto.VideoControl.pixel_format)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pixel_format();
  } else {
    ::proto::VideoPixelFormat* temp = pixel_format_;
    pixel_format_ = NULL;
    return temp;
  }
}
 void VideoControl::set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pixel_format_;
  }
  if (pixel_format != NULL) {
    _slow_set_allocated_pixel_format(message_arena, &pixel_format);
  }
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoControl.pixel_format)
}

inline const VideoControl* VideoControl::internal_default_instance() {
  return &VideoControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPacket::kEncodingFieldNumber;
const int AudioPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPacket::AudioPacket()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AudioPacket)
}
AudioPacket::AudioPacket(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AudioPacket)
}

void AudioPacket::InitAsDefaultInstance() {
}

AudioPacket::AudioPacket(const AudioPacket& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AudioPacket)
}

void AudioPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_ = 0;
  _cached_size_ = 0;
}

AudioPacket::~AudioPacket() {
  // @@protoc_insertion_point(destructor:proto.AudioPacket)
  SharedDtor();
}

void AudioPacket::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AudioPacket::ArenaDtor(void* object) {
  AudioPacket* _this = reinterpret_cast< AudioPacket* >(object);
  (void)_this;
}
void AudioPacket::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AudioPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioPacket& AudioPacket::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AudioPacket> AudioPacket_default_instance_;

AudioPacket* AudioPacket::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AudioPacket>(arena);
}

void AudioPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AudioPacket)
  encoding_ = 0;
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool AudioPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AudioPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.AudioEncoding encoding = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AudioPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AudioPacket)
  return false;
#undef DO_
}

void AudioPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AudioPacket)
  // optional .proto.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AudioPacket)
}

size_t AudioPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AudioPacket)
  size_t total_size = 0;

  // optional .proto.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPacket*>(&from));
}

void AudioPacket::MergeFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AudioPacket)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AudioPacket::UnsafeMergeFrom(const AudioPacket& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void AudioPacket::CopyFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AudioPacket)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AudioPacket::IsInitialized() const {

  return true;
}

void AudioPacket::Swap(AudioPacket* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AudioPacket temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AudioPacket::UnsafeArenaSwap(AudioPacket* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AudioPacket::InternalSwap(AudioPacket* other) {
  std::swap(encoding_, other->encoding_);
  data_.Swap(&other->data_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioPacket::GetTypeName() const {
  return "proto.AudioPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPacket

// optional .proto.AudioEncoding encoding = 1;
void AudioPacket::clear_encoding() {
  encoding_ = 0;
}
::proto::AudioEncoding AudioPacket::encoding() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.encoding)
  return static_cast< ::proto::AudioEncoding >(encoding_);
}
void AudioPacket::set_encoding(::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.encoding)
}

// optional bytes data = 2;
void AudioPacket::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AudioPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioPacket::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:proto.AudioPacket.data)
}
void AudioPacket::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:proto.AudioPacket.data)
}
void AudioPacket::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:proto.AudioPacket.data)
}
::std::string* AudioPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.AudioPacket.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AudioPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.AudioPacket.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AudioPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.AudioPacket.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AudioPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:proto.AudioPacket.data)
}
void AudioPacket::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AudioPacket.data)
}

inline const AudioPacket* AudioPacket::internal_default_instance() {
  return &AudioPacket_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioControl::kEnableFieldNumber;
const int AudioControl::kEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioControl::AudioControl()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AudioControl)
}
AudioControl::AudioControl(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AudioControl)
}

void AudioControl::InitAsDefaultInstance() {
}

AudioControl::AudioControl(const AudioControl& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.AudioControl)
}

void AudioControl::SharedCtor() {
  ::memset(&enable_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&enable_) + sizeof(encoding_));
  _cached_size_ = 0;
}

AudioControl::~AudioControl() {
  // @@protoc_insertion_point(destructor:proto.AudioControl)
  SharedDtor();
}

void AudioControl::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void AudioControl::ArenaDtor(void* object) {
  AudioControl* _this = reinterpret_cast< AudioControl* >(object);
  (void)_this;
}
void AudioControl::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AudioControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioControl& AudioControl::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AudioControl> AudioControl_default_instance_;

AudioControl* AudioControl::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AudioControl>(arena);
}

void AudioControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AudioControl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AudioControl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AudioControl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_, encoding_);

#undef ZR_HELPER_
#undef ZR_

}

bool AudioControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AudioControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_encoding;
        break;
      }

      // optional .proto.AudioEncoding encoding = 3;
      case 3: {
        if (tag == 24) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AudioControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AudioControl)
  return false;
#undef DO_
}

void AudioControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AudioControl)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional .proto.AudioEncoding encoding = 3;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AudioControl)
}

size_t AudioControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AudioControl)
  size_t total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // optional .proto.AudioEncoding encoding = 3;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioControl*>(&from));
}

void AudioControl::MergeFrom(const AudioControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AudioControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AudioControl::UnsafeMergeFrom(const AudioControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void AudioControl::CopyFrom(const AudioControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AudioControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AudioControl::IsInitialized() const {

  return true;
}

void AudioControl::Swap(AudioControl* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AudioControl temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AudioControl::UnsafeArenaSwap(AudioControl* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AudioControl::InternalSwap(AudioControl* other) {
  std::swap(enable_, other->enable_);
  std::swap(encoding_, other->encoding_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioControl::GetTypeName() const {
  return "proto.AudioControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioControl

// optional bool enable = 1;
void AudioControl::clear_enable() {
  enable_ = false;
}
bool AudioControl::enable() const {
  // @@protoc_insertion_point(field_get:proto.AudioControl.enable)
  return enable_;
}
void AudioControl::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioControl.enable)
}

// optional .proto.AudioEncoding encoding = 3;
void AudioControl::clear_encoding() {
  encoding_ = 0;
}
::proto::AudioEncoding AudioControl::encoding() const {
  // @@protoc_insertion_point(field_get:proto.AudioControl.encoding)
  return static_cast< ::proto::AudioEncoding >(encoding_);
}
void AudioControl::set_encoding(::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioControl.encoding)
}

inline const AudioControl* AudioControl::internal_default_instance() {
  return &AudioControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServerToClient::_slow_mutable_video_packet() {
  video_packet_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoPacket >(
      GetArenaNoVirtual());
}
::proto::VideoPacket* ServerToClient::_slow_release_video_packet() {
  if (video_packet_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoPacket* temp = new ::proto::VideoPacket(*video_packet_);
    video_packet_ = NULL;
    return temp;
  }
}
::proto::VideoPacket* ServerToClient::unsafe_arena_release_video_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.video_packet)
  
  ::proto::VideoPacket* temp = video_packet_;
  video_packet_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_video_packet(
    ::google::protobuf::Arena* message_arena, ::proto::VideoPacket** video_packet) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_packet) == NULL) {
      message_arena->Own(*video_packet);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_packet)) {
      ::proto::VideoPacket* new_video_packet = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoPacket >(
            message_arena);
      new_video_packet->CopyFrom(**video_packet);
      *video_packet = new_video_packet;
    }
}
void ServerToClient::unsafe_arena_set_allocated_video_packet(
    ::proto::VideoPacket* video_packet) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_packet_;
  }
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.video_packet)
}
void ServerToClient::_slow_mutable_audio_packet() {
  audio_packet_ = ::google::protobuf::Arena::CreateMessage< ::proto::AudioPacket >(
      GetArenaNoVirtual());
}
::proto::AudioPacket* ServerToClient::_slow_release_audio_packet() {
  if (audio_packet_ == NULL) {
    return NULL;
  } else {
    ::proto::AudioPacket* temp = new ::proto::AudioPacket(*audio_packet_);
    audio_packet_ = NULL;
    return temp;
  }
}
::proto::AudioPacket* ServerToClient::unsafe_arena_release_audio_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.audio_packet)
  
  ::proto::AudioPacket* temp = audio_packet_;
  audio_packet_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_audio_packet(
    ::google::protobuf::Arena* message_arena, ::proto::AudioPacket** audio_packet) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*audio_packet) == NULL) {
      message_arena->Own(*audio_packet);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*audio_packet)) {
      ::proto::AudioPacket* new_audio_packet = 
            ::google::protobuf::Arena::CreateMessage< ::proto::AudioPacket >(
            message_arena);
      new_audio_packet->CopyFrom(**audio_packet);
      *audio_packet = new_audio_packet;
    }
}
void ServerToClient::unsafe_arena_set_allocated_audio_packet(
    ::proto::AudioPacket* audio_packet) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_packet_;
  }
  audio_packet_ = audio_packet;
  if (audio_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.audio_packet)
}
void ServerToClient::_slow_mutable_cursor() {
  cursor_ = ::google::protobuf::Arena::CreateMessage< ::proto::CursorShape >(
      GetArenaNoVirtual());
}
::proto::CursorShape* ServerToClient::_slow_release_cursor() {
  if (cursor_ == NULL) {
    return NULL;
  } else {
    ::proto::CursorShape* temp = new ::proto::CursorShape(*cursor_);
    cursor_ = NULL;
    return temp;
  }
}
::proto::CursorShape* ServerToClient::unsafe_arena_release_cursor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.cursor)
  
  ::proto::CursorShape* temp = cursor_;
  cursor_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_cursor(
    ::google::protobuf::Arena* message_arena, ::proto::CursorShape** cursor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cursor) == NULL) {
      message_arena->Own(*cursor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cursor)) {
      ::proto::CursorShape* new_cursor = 
            ::google::protobuf::Arena::CreateMessage< ::proto::CursorShape >(
            message_arena);
      new_cursor->CopyFrom(**cursor);
      *cursor = new_cursor;
    }
}
void ServerToClient::unsafe_arena_set_allocated_cursor(
    ::proto::CursorShape* cursor) {
  if (GetArenaNoVirtual() == NULL) {
    delete cursor_;
  }
  cursor_ = cursor;
  if (cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.cursor)
}
void ServerToClient::_slow_mutable_clipboard() {
  clipboard_ = ::google::protobuf::Arena::CreateMessage< ::proto::Clipboard >(
      GetArenaNoVirtual());
}
::proto::Clipboard* ServerToClient::_slow_release_clipboard() {
  if (clipboard_ == NULL) {
    return NULL;
  } else {
    ::proto::Clipboard* temp = new ::proto::Clipboard(*clipboard_);
    clipboard_ = NULL;
    return temp;
  }
}
::proto::Clipboard* ServerToClient::unsafe_arena_release_clipboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.clipboard)
  
  ::proto::Clipboard* temp = clipboard_;
  clipboard_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_clipboard(
    ::google::protobuf::Arena* message_arena, ::proto::Clipboard** clipboard) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clipboard) == NULL) {
      message_arena->Own(*clipboard);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clipboard)) {
      ::proto::Clipboard* new_clipboard = 
            ::google::protobuf::Arena::CreateMessage< ::proto::Clipboard >(
            message_arena);
      new_clipboard->CopyFrom(**clipboard);
      *clipboard = new_clipboard;
    }
}
void ServerToClient::unsafe_arena_set_allocated_clipboard(
    ::proto::Clipboard* clipboard) {
  if (GetArenaNoVirtual() == NULL) {
    delete clipboard_;
  }
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.clipboard)
}
void ServerToClient::_slow_mutable_text_chat() {
  text_chat_ = ::google::protobuf::Arena::CreateMessage< ::proto::TextChat >(
      GetArenaNoVirtual());
}
::proto::TextChat* ServerToClient::_slow_release_text_chat() {
  if (text_chat_ == NULL) {
    return NULL;
  } else {
    ::proto::TextChat* temp = new ::proto::TextChat(*text_chat_);
    text_chat_ = NULL;
    return temp;
  }
}
::proto::TextChat* ServerToClient::unsafe_arena_release_text_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.text_chat)
  
  ::proto::TextChat* temp = text_chat_;
  text_chat_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_text_chat(
    ::google::protobuf::Arena* message_arena, ::proto::TextChat** text_chat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*text_chat) == NULL) {
      message_arena->Own(*text_chat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*text_chat)) {
      ::proto::TextChat* new_text_chat = 
            ::google::protobuf::Arena::CreateMessage< ::proto::TextChat >(
            message_arena);
      new_text_chat->CopyFrom(**text_chat);
      *text_chat = new_text_chat;
    }
}
void ServerToClient::unsafe_arena_set_allocated_text_chat(
    ::proto::TextChat* text_chat) {
  if (GetArenaNoVirtual() == NULL) {
    delete text_chat_;
  }
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.text_chat)
}
void ServerToClient::_slow_mutable_auth_request() {
  auth_request_ = ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationRequest >(
      GetArenaNoVirtual());
}
::proto::AuthorizationRequest* ServerToClient::_slow_release_auth_request() {
  if (auth_request_ == NULL) {
    return NULL;
  } else {
    ::proto::AuthorizationRequest* temp = new ::proto::AuthorizationRequest(*auth_request_);
    auth_request_ = NULL;
    return temp;
  }
}
::proto::AuthorizationRequest* ServerToClient::unsafe_arena_release_auth_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.auth_request)
  
  ::proto::AuthorizationRequest* temp = auth_request_;
  auth_request_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_auth_request(
    ::google::protobuf::Arena* message_arena, ::proto::AuthorizationRequest** auth_request) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auth_request) == NULL) {
      message_arena->Own(*auth_request);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auth_request)) {
      ::proto::AuthorizationRequest* new_auth_request = 
            ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationRequest >(
            message_arena);
      new_auth_request->CopyFrom(**auth_request);
      *auth_request = new_auth_request;
    }
}
void ServerToClient::unsafe_arena_set_allocated_auth_request(
    ::proto::AuthorizationRequest* auth_request) {
  if (GetArenaNoVirtual() == NULL) {
    delete auth_request_;
  }
  auth_request_ = auth_request;
  if (auth_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.auth_request)
}
void ServerToClient::_slow_mutable_auth_result() {
  auth_result_ = ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationResult >(
      GetArenaNoVirtual());
}
::proto::AuthorizationResult* ServerToClient::_slow_release_auth_result() {
  if (auth_result_ == NULL) {
    return NULL;
  } else {
    ::proto::AuthorizationResult* temp = new ::proto::AuthorizationResult(*auth_result_);
    auth_result_ = NULL;
    return temp;
  }
}
::proto::AuthorizationResult* ServerToClient::unsafe_arena_release_auth_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ServerToClient.auth_result)
  
  ::proto::AuthorizationResult* temp = auth_result_;
  auth_result_ = NULL;
  return temp;
}
void ServerToClient::_slow_set_allocated_auth_result(
    ::google::protobuf::Arena* message_arena, ::proto::AuthorizationResult** auth_result) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auth_result) == NULL) {
      message_arena->Own(*auth_result);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auth_result)) {
      ::proto::AuthorizationResult* new_auth_result = 
            ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationResult >(
            message_arena);
      new_auth_result->CopyFrom(**auth_result);
      *auth_result = new_auth_result;
    }
}
void ServerToClient::unsafe_arena_set_allocated_auth_result(
    ::proto::AuthorizationResult* auth_result) {
  if (GetArenaNoVirtual() == NULL) {
    delete auth_result_;
  }
  auth_result_ = auth_result;
  if (auth_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ServerToClient.auth_result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerToClient::kVideoPacketFieldNumber;
const int ServerToClient::kAudioPacketFieldNumber;
const int ServerToClient::kCursorFieldNumber;
const int ServerToClient::kClipboardFieldNumber;
const int ServerToClient::kTextChatFieldNumber;
const int ServerToClient::kAuthRequestFieldNumber;
const int ServerToClient::kAuthResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerToClient::ServerToClient()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerToClient)
}
ServerToClient::ServerToClient(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.ServerToClient)
}

void ServerToClient::InitAsDefaultInstance() {
  video_packet_ = const_cast< ::proto::VideoPacket*>(
      ::proto::VideoPacket::internal_default_instance());
  audio_packet_ = const_cast< ::proto::AudioPacket*>(
      ::proto::AudioPacket::internal_default_instance());
  cursor_ = const_cast< ::proto::CursorShape*>(
      ::proto::CursorShape::internal_default_instance());
  clipboard_ = const_cast< ::proto::Clipboard*>(
      ::proto::Clipboard::internal_default_instance());
  text_chat_ = const_cast< ::proto::TextChat*>(
      ::proto::TextChat::internal_default_instance());
  auth_request_ = const_cast< ::proto::AuthorizationRequest*>(
      ::proto::AuthorizationRequest::internal_default_instance());
  auth_result_ = const_cast< ::proto::AuthorizationResult*>(
      ::proto::AuthorizationResult::internal_default_instance());
}

ServerToClient::ServerToClient(const ServerToClient& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ServerToClient)
}

void ServerToClient::SharedCtor() {
  video_packet_ = NULL;
  audio_packet_ = NULL;
  cursor_ = NULL;
  clipboard_ = NULL;
  text_chat_ = NULL;
  auth_request_ = NULL;
  auth_result_ = NULL;
  _cached_size_ = 0;
}

ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:proto.ServerToClient)
  SharedDtor();
}

void ServerToClient::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &ServerToClient_default_instance_.get()) {
    delete video_packet_;
    delete audio_packet_;
    delete cursor_;
    delete clipboard_;
    delete text_chat_;
    delete auth_request_;
    delete auth_result_;
  }
}

void ServerToClient::ArenaDtor(void* object) {
  ServerToClient* _this = reinterpret_cast< ServerToClient* >(object);
  (void)_this;
}
void ServerToClient::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServerToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerToClient& ServerToClient::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerToClient> ServerToClient_default_instance_;

ServerToClient* ServerToClient::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServerToClient>(arena);
}

void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerToClient)
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) delete audio_packet_;
  audio_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && cursor_ != NULL) delete cursor_;
  cursor_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
  if (GetArenaNoVirtual() == NULL && auth_request_ != NULL) delete auth_request_;
  auth_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && auth_result_ != NULL) delete auth_result_;
  auth_result_ = NULL;
}

bool ServerToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.VideoPacket video_packet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio_packet;
        break;
      }

      // optional .proto.AudioPacket audio_packet = 2;
      case 2: {
        if (tag == 18) {
         parse_audio_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_packet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cursor;
        break;
      }

      // optional .proto.CursorShape cursor = 3;
      case 3: {
        if (tag == 26) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clipboard;
        break;
      }

      // optional .proto.Clipboard clipboard = 4;
      case 4: {
        if (tag == 34) {
         parse_clipboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_text_chat;
        break;
      }

      // optional .proto.TextChat text_chat = 5;
      case 5: {
        if (tag == 42) {
         parse_text_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_auth_request;
        break;
      }

      // optional .proto.AuthorizationRequest auth_request = 6;
      case 6: {
        if (tag == 50) {
         parse_auth_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_auth_result;
        break;
      }

      // optional .proto.AuthorizationResult auth_result = 7;
      case 7: {
        if (tag == 58) {
         parse_auth_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerToClient)
  return false;
#undef DO_
}

void ServerToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerToClient)
  // optional .proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->video_packet_, output);
  }

  // optional .proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->audio_packet_, output);
  }

  // optional .proto.CursorShape cursor = 3;
  if (this->has_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cursor_, output);
  }

  // optional .proto.Clipboard clipboard = 4;
  if (this->has_clipboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipboard_, output);
  }

  // optional .proto.TextChat text_chat = 5;
  if (this->has_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->text_chat_, output);
  }

  // optional .proto.AuthorizationRequest auth_request = 6;
  if (this->has_auth_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->auth_request_, output);
  }

  // optional .proto.AuthorizationResult auth_result = 7;
  if (this->has_auth_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->auth_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ServerToClient)
}

size_t ServerToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerToClient)
  size_t total_size = 0;

  // optional .proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_packet_);
  }

  // optional .proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_packet_);
  }

  // optional .proto.CursorShape cursor = 3;
  if (this->has_cursor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cursor_);
  }

  // optional .proto.Clipboard clipboard = 4;
  if (this->has_clipboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_);
  }

  // optional .proto.TextChat text_chat = 5;
  if (this->has_text_chat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_chat_);
  }

  // optional .proto.AuthorizationRequest auth_request = 6;
  if (this->has_auth_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auth_request_);
  }

  // optional .proto.AuthorizationResult auth_result = 7;
  if (this->has_auth_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auth_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerToClient*>(&from));
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerToClient)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerToClient::UnsafeMergeFrom(const ServerToClient& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_video_packet()) {
    mutable_video_packet()->::proto::VideoPacket::MergeFrom(from.video_packet());
  }
  if (from.has_audio_packet()) {
    mutable_audio_packet()->::proto::AudioPacket::MergeFrom(from.audio_packet());
  }
  if (from.has_cursor()) {
    mutable_cursor()->::proto::CursorShape::MergeFrom(from.cursor());
  }
  if (from.has_clipboard()) {
    mutable_clipboard()->::proto::Clipboard::MergeFrom(from.clipboard());
  }
  if (from.has_text_chat()) {
    mutable_text_chat()->::proto::TextChat::MergeFrom(from.text_chat());
  }
  if (from.has_auth_request()) {
    mutable_auth_request()->::proto::AuthorizationRequest::MergeFrom(from.auth_request());
  }
  if (from.has_auth_result()) {
    mutable_auth_result()->::proto::AuthorizationResult::MergeFrom(from.auth_result());
  }
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerToClient)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerToClient::IsInitialized() const {

  return true;
}

void ServerToClient::Swap(ServerToClient* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServerToClient temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ServerToClient::UnsafeArenaSwap(ServerToClient* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServerToClient::InternalSwap(ServerToClient* other) {
  std::swap(video_packet_, other->video_packet_);
  std::swap(audio_packet_, other->audio_packet_);
  std::swap(cursor_, other->cursor_);
  std::swap(clipboard_, other->clipboard_);
  std::swap(text_chat_, other->text_chat_);
  std::swap(auth_request_, other->auth_request_);
  std::swap(auth_result_, other->auth_result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerToClient::GetTypeName() const {
  return "proto.ServerToClient";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerToClient

// optional .proto.VideoPacket video_packet = 1;
bool ServerToClient::has_video_packet() const {
  return this != internal_default_instance() && video_packet_ != NULL;
}
void ServerToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
}
const ::proto::VideoPacket& ServerToClient::video_packet() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.video_packet)
  return video_packet_ != NULL ? *video_packet_
                         : *::proto::VideoPacket::internal_default_instance();
}
::proto::VideoPacket* ServerToClient::mutable_video_packet() {
  
  if (video_packet_ == NULL) {
    _slow_mutable_video_packet();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.video_packet)
  return video_packet_;
}
::proto::VideoPacket* ServerToClient::release_video_packet() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.video_packet)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_packet();
  } else {
    ::proto::VideoPacket* temp = video_packet_;
    video_packet_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_video_packet(::proto::VideoPacket* video_packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_packet_;
  }
  if (video_packet != NULL) {
    _slow_set_allocated_video_packet(message_arena, &video_packet);
  }
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.video_packet)
}

// optional .proto.AudioPacket audio_packet = 2;
bool ServerToClient::has_audio_packet() const {
  return this != internal_default_instance() && audio_packet_ != NULL;
}
void ServerToClient::clear_audio_packet() {
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) delete audio_packet_;
  audio_packet_ = NULL;
}
const ::proto::AudioPacket& ServerToClient::audio_packet() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.audio_packet)
  return audio_packet_ != NULL ? *audio_packet_
                         : *::proto::AudioPacket::internal_default_instance();
}
::proto::AudioPacket* ServerToClient::mutable_audio_packet() {
  
  if (audio_packet_ == NULL) {
    _slow_mutable_audio_packet();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.audio_packet)
  return audio_packet_;
}
::proto::AudioPacket* ServerToClient::release_audio_packet() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.audio_packet)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_audio_packet();
  } else {
    ::proto::AudioPacket* temp = audio_packet_;
    audio_packet_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_audio_packet(::proto::AudioPacket* audio_packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_packet_;
  }
  if (audio_packet != NULL) {
    _slow_set_allocated_audio_packet(message_arena, &audio_packet);
  }
  audio_packet_ = audio_packet;
  if (audio_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.audio_packet)
}

// optional .proto.CursorShape cursor = 3;
bool ServerToClient::has_cursor() const {
  return this != internal_default_instance() && cursor_ != NULL;
}
void ServerToClient::clear_cursor() {
  if (GetArenaNoVirtual() == NULL && cursor_ != NULL) delete cursor_;
  cursor_ = NULL;
}
const ::proto::CursorShape& ServerToClient::cursor() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.cursor)
  return cursor_ != NULL ? *cursor_
                         : *::proto::CursorShape::internal_default_instance();
}
::proto::CursorShape* ServerToClient::mutable_cursor() {
  
  if (cursor_ == NULL) {
    _slow_mutable_cursor();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.cursor)
  return cursor_;
}
::proto::CursorShape* ServerToClient::release_cursor() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.cursor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cursor();
  } else {
    ::proto::CursorShape* temp = cursor_;
    cursor_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_cursor(::proto::CursorShape* cursor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cursor_;
  }
  if (cursor != NULL) {
    _slow_set_allocated_cursor(message_arena, &cursor);
  }
  cursor_ = cursor;
  if (cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.cursor)
}

// optional .proto.Clipboard clipboard = 4;
bool ServerToClient::has_clipboard() const {
  return this != internal_default_instance() && clipboard_ != NULL;
}
void ServerToClient::clear_clipboard() {
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
}
const ::proto::Clipboard& ServerToClient::clipboard() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.clipboard)
  return clipboard_ != NULL ? *clipboard_
                         : *::proto::Clipboard::internal_default_instance();
}
::proto::Clipboard* ServerToClient::mutable_clipboard() {
  
  if (clipboard_ == NULL) {
    _slow_mutable_clipboard();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.clipboard)
  return clipboard_;
}
::proto::Clipboard* ServerToClient::release_clipboard() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.clipboard)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clipboard();
  } else {
    ::proto::Clipboard* temp = clipboard_;
    clipboard_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_clipboard(::proto::Clipboard* clipboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clipboard_;
  }
  if (clipboard != NULL) {
    _slow_set_allocated_clipboard(message_arena, &clipboard);
  }
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.clipboard)
}

// optional .proto.TextChat text_chat = 5;
bool ServerToClient::has_text_chat() const {
  return this != internal_default_instance() && text_chat_ != NULL;
}
void ServerToClient::clear_text_chat() {
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
}
const ::proto::TextChat& ServerToClient::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.text_chat)
  return text_chat_ != NULL ? *text_chat_
                         : *::proto::TextChat::internal_default_instance();
}
::proto::TextChat* ServerToClient::mutable_text_chat() {
  
  if (text_chat_ == NULL) {
    _slow_mutable_text_chat();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.text_chat)
  return text_chat_;
}
::proto::TextChat* ServerToClient::release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.text_chat)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_text_chat();
  } else {
    ::proto::TextChat* temp = text_chat_;
    text_chat_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_text_chat(::proto::TextChat* text_chat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_chat_;
  }
  if (text_chat != NULL) {
    _slow_set_allocated_text_chat(message_arena, &text_chat);
  }
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.text_chat)
}

// optional .proto.AuthorizationRequest auth_request = 6;
bool ServerToClient::has_auth_request() const {
  return this != internal_default_instance() && auth_request_ != NULL;
}
void ServerToClient::clear_auth_request() {
  if (GetArenaNoVirtual() == NULL && auth_request_ != NULL) delete auth_request_;
  auth_request_ = NULL;
}
const ::proto::AuthorizationRequest& ServerToClient::auth_request() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.auth_request)
  return auth_request_ != NULL ? *auth_request_
                         : *::proto::AuthorizationRequest::internal_default_instance();
}
::proto::AuthorizationRequest* ServerToClient::mutable_auth_request() {
  
  if (auth_request_ == NULL) {
    _slow_mutable_auth_request();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.auth_request)
  return auth_request_;
}
::proto::AuthorizationRequest* ServerToClient::release_auth_request() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.auth_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auth_request();
  } else {
    ::proto::AuthorizationRequest* temp = auth_request_;
    auth_request_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_auth_request(::proto::AuthorizationRequest* auth_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auth_request_;
  }
  if (auth_request != NULL) {
    _slow_set_allocated_auth_request(message_arena, &auth_request);
  }
  auth_request_ = auth_request;
  if (auth_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.auth_request)
}

// optional .proto.AuthorizationResult auth_result = 7;
bool ServerToClient::has_auth_result() const {
  return this != internal_default_instance() && auth_result_ != NULL;
}
void ServerToClient::clear_auth_result() {
  if (GetArenaNoVirtual() == NULL && auth_result_ != NULL) delete auth_result_;
  auth_result_ = NULL;
}
const ::proto::AuthorizationResult& ServerToClient::auth_result() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.auth_result)
  return auth_result_ != NULL ? *auth_result_
                         : *::proto::AuthorizationResult::internal_default_instance();
}
::proto::AuthorizationResult* ServerToClient::mutable_auth_result() {
  
  if (auth_result_ == NULL) {
    _slow_mutable_auth_result();
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.auth_result)
  return auth_result_;
}
::proto::AuthorizationResult* ServerToClient::release_auth_result() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.auth_result)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auth_result();
  } else {
    ::proto::AuthorizationResult* temp = auth_result_;
    auth_result_ = NULL;
    return temp;
  }
}
 void ServerToClient::set_allocated_auth_result(::proto::AuthorizationResult* auth_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auth_result_;
  }
  if (auth_result != NULL) {
    _slow_set_allocated_auth_result(message_arena, &auth_result);
  }
  auth_result_ = auth_result;
  if (auth_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.auth_result)
}

inline const ServerToClient* ServerToClient::internal_default_instance() {
  return &ServerToClient_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClientToServer::_slow_mutable_video_control() {
  video_control_ = ::google::protobuf::Arena::CreateMessage< ::proto::VideoControl >(
      GetArenaNoVirtual());
}
::proto::VideoControl* ClientToServer::_slow_release_video_control() {
  if (video_control_ == NULL) {
    return NULL;
  } else {
    ::proto::VideoControl* temp = new ::proto::VideoControl(*video_control_);
    video_control_ = NULL;
    return temp;
  }
}
::proto::VideoControl* ClientToServer::unsafe_arena_release_video_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.video_control)
  
  ::proto::VideoControl* temp = video_control_;
  video_control_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_video_control(
    ::google::protobuf::Arena* message_arena, ::proto::VideoControl** video_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_control) == NULL) {
      message_arena->Own(*video_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_control)) {
      ::proto::VideoControl* new_video_control = 
            ::google::protobuf::Arena::CreateMessage< ::proto::VideoControl >(
            message_arena);
      new_video_control->CopyFrom(**video_control);
      *video_control = new_video_control;
    }
}
void ClientToServer::unsafe_arena_set_allocated_video_control(
    ::proto::VideoControl* video_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_control_;
  }
  video_control_ = video_control;
  if (video_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.video_control)
}
void ClientToServer::_slow_mutable_audio_control() {
  audio_control_ = ::google::protobuf::Arena::CreateMessage< ::proto::AudioControl >(
      GetArenaNoVirtual());
}
::proto::AudioControl* ClientToServer::_slow_release_audio_control() {
  if (audio_control_ == NULL) {
    return NULL;
  } else {
    ::proto::AudioControl* temp = new ::proto::AudioControl(*audio_control_);
    audio_control_ = NULL;
    return temp;
  }
}
::proto::AudioControl* ClientToServer::unsafe_arena_release_audio_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.audio_control)
  
  ::proto::AudioControl* temp = audio_control_;
  audio_control_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_audio_control(
    ::google::protobuf::Arena* message_arena, ::proto::AudioControl** audio_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*audio_control) == NULL) {
      message_arena->Own(*audio_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*audio_control)) {
      ::proto::AudioControl* new_audio_control = 
            ::google::protobuf::Arena::CreateMessage< ::proto::AudioControl >(
            message_arena);
      new_audio_control->CopyFrom(**audio_control);
      *audio_control = new_audio_control;
    }
}
void ClientToServer::unsafe_arena_set_allocated_audio_control(
    ::proto::AudioControl* audio_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_control_;
  }
  audio_control_ = audio_control;
  if (audio_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.audio_control)
}
void ClientToServer::_slow_mutable_cursor_shape_control() {
  cursor_shape_control_ = ::google::protobuf::Arena::CreateMessage< ::proto::CursorShapeControl >(
      GetArenaNoVirtual());
}
::proto::CursorShapeControl* ClientToServer::_slow_release_cursor_shape_control() {
  if (cursor_shape_control_ == NULL) {
    return NULL;
  } else {
    ::proto::CursorShapeControl* temp = new ::proto::CursorShapeControl(*cursor_shape_control_);
    cursor_shape_control_ = NULL;
    return temp;
  }
}
::proto::CursorShapeControl* ClientToServer::unsafe_arena_release_cursor_shape_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.cursor_shape_control)
  
  ::proto::CursorShapeControl* temp = cursor_shape_control_;
  cursor_shape_control_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_cursor_shape_control(
    ::google::protobuf::Arena* message_arena, ::proto::CursorShapeControl** cursor_shape_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cursor_shape_control) == NULL) {
      message_arena->Own(*cursor_shape_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cursor_shape_control)) {
      ::proto::CursorShapeControl* new_cursor_shape_control = 
            ::google::protobuf::Arena::CreateMessage< ::proto::CursorShapeControl >(
            message_arena);
      new_cursor_shape_control->CopyFrom(**cursor_shape_control);
      *cursor_shape_control = new_cursor_shape_control;
    }
}
void ClientToServer::unsafe_arena_set_allocated_cursor_shape_control(
    ::proto::CursorShapeControl* cursor_shape_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete cursor_shape_control_;
  }
  cursor_shape_control_ = cursor_shape_control;
  if (cursor_shape_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.cursor_shape_control)
}
void ClientToServer::_slow_mutable_clipboard_control() {
  clipboard_control_ = ::google::protobuf::Arena::CreateMessage< ::proto::ClipboardControl >(
      GetArenaNoVirtual());
}
::proto::ClipboardControl* ClientToServer::_slow_release_clipboard_control() {
  if (clipboard_control_ == NULL) {
    return NULL;
  } else {
    ::proto::ClipboardControl* temp = new ::proto::ClipboardControl(*clipboard_control_);
    clipboard_control_ = NULL;
    return temp;
  }
}
::proto::ClipboardControl* ClientToServer::unsafe_arena_release_clipboard_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.clipboard_control)
  
  ::proto::ClipboardControl* temp = clipboard_control_;
  clipboard_control_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_clipboard_control(
    ::google::protobuf::Arena* message_arena, ::proto::ClipboardControl** clipboard_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clipboard_control) == NULL) {
      message_arena->Own(*clipboard_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clipboard_control)) {
      ::proto::ClipboardControl* new_clipboard_control = 
            ::google::protobuf::Arena::CreateMessage< ::proto::ClipboardControl >(
            message_arena);
      new_clipboard_control->CopyFrom(**clipboard_control);
      *clipboard_control = new_clipboard_control;
    }
}
void ClientToServer::unsafe_arena_set_allocated_clipboard_control(
    ::proto::ClipboardControl* clipboard_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete clipboard_control_;
  }
  clipboard_control_ = clipboard_control;
  if (clipboard_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.clipboard_control)
}
void ClientToServer::_slow_mutable_clipboard_request() {
  clipboard_request_ = ::google::protobuf::Arena::CreateMessage< ::proto::ClipboardRequest >(
      GetArenaNoVirtual());
}
::proto::ClipboardRequest* ClientToServer::_slow_release_clipboard_request() {
  if (clipboard_request_ == NULL) {
    return NULL;
  } else {
    ::proto::ClipboardRequest* temp = new ::proto::ClipboardRequest(*clipboard_request_);
    clipboard_request_ = NULL;
    return temp;
  }
}
::proto::ClipboardRequest* ClientToServer::unsafe_arena_release_clipboard_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.clipboard_request)
  
  ::proto::ClipboardRequest* temp = clipboard_request_;
  clipboard_request_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_clipboard_request(
    ::google::protobuf::Arena* message_arena, ::proto::ClipboardRequest** clipboard_request) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clipboard_request) == NULL) {
      message_arena->Own(*clipboard_request);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clipboard_request)) {
      ::proto::ClipboardRequest* new_clipboard_request = 
            ::google::protobuf::Arena::CreateMessage< ::proto::ClipboardRequest >(
            message_arena);
      new_clipboard_request->CopyFrom(**clipboard_request);
      *clipboard_request = new_clipboard_request;
    }
}
void ClientToServer::unsafe_arena_set_allocated_clipboard_request(
    ::proto::ClipboardRequest* clipboard_request) {
  if (GetArenaNoVirtual() == NULL) {
    delete clipboard_request_;
  }
  clipboard_request_ = clipboard_request;
  if (clipboard_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.clipboard_request)
}
void ClientToServer::_slow_mutable_clipboard() {
  clipboard_ = ::google::protobuf::Arena::CreateMessage< ::proto::Clipboard >(
      GetArenaNoVirtual());
}
::proto::Clipboard* ClientToServer::_slow_release_clipboard() {
  if (clipboard_ == NULL) {
    return NULL;
  } else {
    ::proto::Clipboard* temp = new ::proto::Clipboard(*clipboard_);
    clipboard_ = NULL;
    return temp;
  }
}
::proto::Clipboard* ClientToServer::unsafe_arena_release_clipboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.clipboard)
  
  ::proto::Clipboard* temp = clipboard_;
  clipboard_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_clipboard(
    ::google::protobuf::Arena* message_arena, ::proto::Clipboard** clipboard) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clipboard) == NULL) {
      message_arena->Own(*clipboard);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clipboard)) {
      ::proto::Clipboard* new_clipboard = 
            ::google::protobuf::Arena::CreateMessage< ::proto::Clipboard >(
            message_arena);
      new_clipboard->CopyFrom(**clipboard);
      *clipboard = new_clipboard;
    }
}
void ClientToServer::unsafe_arena_set_allocated_clipboard(
    ::proto::Clipboard* clipboard) {
  if (GetArenaNoVirtual() == NULL) {
    delete clipboard_;
  }
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.clipboard)
}
void ClientToServer::_slow_mutable_mouse_event() {
  mouse_event_ = ::google::protobuf::Arena::CreateMessage< ::proto::MouseEvent >(
      GetArenaNoVirtual());
}
::proto::MouseEvent* ClientToServer::_slow_release_mouse_event() {
  if (mouse_event_ == NULL) {
    return NULL;
  } else {
    ::proto::MouseEvent* temp = new ::proto::MouseEvent(*mouse_event_);
    mouse_event_ = NULL;
    return temp;
  }
}
::proto::MouseEvent* ClientToServer::unsafe_arena_release_mouse_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.mouse_event)
  
  ::proto::MouseEvent* temp = mouse_event_;
  mouse_event_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_mouse_event(
    ::google::protobuf::Arena* message_arena, ::proto::MouseEvent** mouse_event) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*mouse_event) == NULL) {
      message_arena->Own(*mouse_event);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*mouse_event)) {
      ::proto::MouseEvent* new_mouse_event = 
            ::google::protobuf::Arena::CreateMessage< ::proto::MouseEvent >(
            message_arena);
      new_mouse_event->CopyFrom(**mouse_event);
      *mouse_event = new_mouse_event;
    }
}
void ClientToServer::unsafe_arena_set_allocated_mouse_event(
    ::proto::MouseEvent* mouse_event) {
  if (GetArenaNoVirtual() == NULL) {
    delete mouse_event_;
  }
  mouse_event_ = mouse_event;
  if (mouse_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.mouse_event)
}
void ClientToServer::_slow_mutable_key_event() {
  key_event_ = ::google::protobuf::Arena::CreateMessage< ::proto::KeyEvent >(
      GetArenaNoVirtual());
}
::proto::KeyEvent* ClientToServer::_slow_release_key_event() {
  if (key_event_ == NULL) {
    return NULL;
  } else {
    ::proto::KeyEvent* temp = new ::proto::KeyEvent(*key_event_);
    key_event_ = NULL;
    return temp;
  }
}
::proto::KeyEvent* ClientToServer::unsafe_arena_release_key_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.key_event)
  
  ::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_key_event(
    ::google::protobuf::Arena* message_arena, ::proto::KeyEvent** key_event) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*key_event) == NULL) {
      message_arena->Own(*key_event);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*key_event)) {
      ::proto::KeyEvent* new_key_event = 
            ::google::protobuf::Arena::CreateMessage< ::proto::KeyEvent >(
            message_arena);
      new_key_event->CopyFrom(**key_event);
      *key_event = new_key_event;
    }
}
void ClientToServer::unsafe_arena_set_allocated_key_event(
    ::proto::KeyEvent* key_event) {
  if (GetArenaNoVirtual() == NULL) {
    delete key_event_;
  }
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.key_event)
}
void ClientToServer::_slow_mutable_bell() {
  bell_ = ::google::protobuf::Arena::CreateMessage< ::proto::Bell >(
      GetArenaNoVirtual());
}
::proto::Bell* ClientToServer::_slow_release_bell() {
  if (bell_ == NULL) {
    return NULL;
  } else {
    ::proto::Bell* temp = new ::proto::Bell(*bell_);
    bell_ = NULL;
    return temp;
  }
}
::proto::Bell* ClientToServer::unsafe_arena_release_bell() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.bell)
  
  ::proto::Bell* temp = bell_;
  bell_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_bell(
    ::google::protobuf::Arena* message_arena, ::proto::Bell** bell) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*bell) == NULL) {
      message_arena->Own(*bell);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*bell)) {
      ::proto::Bell* new_bell = 
            ::google::protobuf::Arena::CreateMessage< ::proto::Bell >(
            message_arena);
      new_bell->CopyFrom(**bell);
      *bell = new_bell;
    }
}
void ClientToServer::unsafe_arena_set_allocated_bell(
    ::proto::Bell* bell) {
  if (GetArenaNoVirtual() == NULL) {
    delete bell_;
  }
  bell_ = bell;
  if (bell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.bell)
}
void ClientToServer::_slow_mutable_text_chat() {
  text_chat_ = ::google::protobuf::Arena::CreateMessage< ::proto::TextChat >(
      GetArenaNoVirtual());
}
::proto::TextChat* ClientToServer::_slow_release_text_chat() {
  if (text_chat_ == NULL) {
    return NULL;
  } else {
    ::proto::TextChat* temp = new ::proto::TextChat(*text_chat_);
    text_chat_ = NULL;
    return temp;
  }
}
::proto::TextChat* ClientToServer::unsafe_arena_release_text_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.text_chat)
  
  ::proto::TextChat* temp = text_chat_;
  text_chat_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_text_chat(
    ::google::protobuf::Arena* message_arena, ::proto::TextChat** text_chat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*text_chat) == NULL) {
      message_arena->Own(*text_chat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*text_chat)) {
      ::proto::TextChat* new_text_chat = 
            ::google::protobuf::Arena::CreateMessage< ::proto::TextChat >(
            message_arena);
      new_text_chat->CopyFrom(**text_chat);
      *text_chat = new_text_chat;
    }
}
void ClientToServer::unsafe_arena_set_allocated_text_chat(
    ::proto::TextChat* text_chat) {
  if (GetArenaNoVirtual() == NULL) {
    delete text_chat_;
  }
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.text_chat)
}
void ClientToServer::_slow_mutable_power_control() {
  power_control_ = ::google::protobuf::Arena::CreateMessage< ::proto::PowerControl >(
      GetArenaNoVirtual());
}
::proto::PowerControl* ClientToServer::_slow_release_power_control() {
  if (power_control_ == NULL) {
    return NULL;
  } else {
    ::proto::PowerControl* temp = new ::proto::PowerControl(*power_control_);
    power_control_ = NULL;
    return temp;
  }
}
::proto::PowerControl* ClientToServer::unsafe_arena_release_power_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.power_control)
  
  ::proto::PowerControl* temp = power_control_;
  power_control_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_power_control(
    ::google::protobuf::Arena* message_arena, ::proto::PowerControl** power_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*power_control) == NULL) {
      message_arena->Own(*power_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*power_control)) {
      ::proto::PowerControl* new_power_control = 
            ::google::protobuf::Arena::CreateMessage< ::proto::PowerControl >(
            message_arena);
      new_power_control->CopyFrom(**power_control);
      *power_control = new_power_control;
    }
}
void ClientToServer::unsafe_arena_set_allocated_power_control(
    ::proto::PowerControl* power_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete power_control_;
  }
  power_control_ = power_control;
  if (power_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.power_control)
}
void ClientToServer::_slow_mutable_auth_reply() {
  auth_reply_ = ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationReply >(
      GetArenaNoVirtual());
}
::proto::AuthorizationReply* ClientToServer::_slow_release_auth_reply() {
  if (auth_reply_ == NULL) {
    return NULL;
  } else {
    ::proto::AuthorizationReply* temp = new ::proto::AuthorizationReply(*auth_reply_);
    auth_reply_ = NULL;
    return temp;
  }
}
::proto::AuthorizationReply* ClientToServer::unsafe_arena_release_auth_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ClientToServer.auth_reply)
  
  ::proto::AuthorizationReply* temp = auth_reply_;
  auth_reply_ = NULL;
  return temp;
}
void ClientToServer::_slow_set_allocated_auth_reply(
    ::google::protobuf::Arena* message_arena, ::proto::AuthorizationReply** auth_reply) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auth_reply) == NULL) {
      message_arena->Own(*auth_reply);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auth_reply)) {
      ::proto::AuthorizationReply* new_auth_reply = 
            ::google::protobuf::Arena::CreateMessage< ::proto::AuthorizationReply >(
            message_arena);
      new_auth_reply->CopyFrom(**auth_reply);
      *auth_reply = new_auth_reply;
    }
}
void ClientToServer::unsafe_arena_set_allocated_auth_reply(
    ::proto::AuthorizationReply* auth_reply) {
  if (GetArenaNoVirtual() == NULL) {
    delete auth_reply_;
  }
  auth_reply_ = auth_reply;
  if (auth_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientToServer.auth_reply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer::kVideoControlFieldNumber;
const int ClientToServer::kAudioControlFieldNumber;
const int ClientToServer::kCursorShapeControlFieldNumber;
const int ClientToServer::kClipboardControlFieldNumber;
const int ClientToServer::kClipboardRequestFieldNumber;
const int ClientToServer::kClipboardFieldNumber;
const int ClientToServer::kMouseEventFieldNumber;
const int ClientToServer::kKeyEventFieldNumber;
const int ClientToServer::kBellFieldNumber;
const int ClientToServer::kTextChatFieldNumber;
const int ClientToServer::kPowerControlFieldNumber;
const int ClientToServer::kAuthReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer::ClientToServer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientToServer)
}
ClientToServer::ClientToServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::MessageLite(),
  _arena_ptr_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_proto_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.ClientToServer)
}

void ClientToServer::InitAsDefaultInstance() {
  video_control_ = const_cast< ::proto::VideoControl*>(
      ::proto::VideoControl::internal_default_instance());
  audio_control_ = const_cast< ::proto::AudioControl*>(
      ::proto::AudioControl::internal_default_instance());
  cursor_shape_control_ = const_cast< ::proto::CursorShapeControl*>(
      ::proto::CursorShapeControl::internal_default_instance());
  clipboard_control_ = const_cast< ::proto::ClipboardControl*>(
      ::proto::ClipboardControl::internal_default_instance());
  clipboard_request_ = const_cast< ::proto::ClipboardRequest*>(
      ::proto::ClipboardRequest::internal_default_instance());
  clipboard_ = const_cast< ::proto::Clipboard*>(
      ::proto::Clipboard::internal_default_instance());
  mouse_event_ = const_cast< ::proto::MouseEvent*>(
      ::proto::MouseEvent::internal_default_instance());
  key_event_ = const_cast< ::proto::KeyEvent*>(
      ::proto::KeyEvent::internal_default_instance());
  bell_ = const_cast< ::proto::Bell*>(
      ::proto::Bell::internal_default_instance());
  text_chat_ = const_cast< ::proto::TextChat*>(
      ::proto::TextChat::internal_default_instance());
  power_control_ = const_cast< ::proto::PowerControl*>(
      ::proto::PowerControl::internal_default_instance());
  auth_reply_ = const_cast< ::proto::AuthorizationReply*>(
      ::proto::AuthorizationReply::internal_default_instance());
}

ClientToServer::ClientToServer(const ClientToServer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ClientToServer)
}

void ClientToServer::SharedCtor() {
  video_control_ = NULL;
  audio_control_ = NULL;
  cursor_shape_control_ = NULL;
  clipboard_control_ = NULL;
  clipboard_request_ = NULL;
  clipboard_ = NULL;
  mouse_event_ = NULL;
  key_event_ = NULL;
  bell_ = NULL;
  text_chat_ = NULL;
  power_control_ = NULL;
  auth_reply_ = NULL;
  _cached_size_ = 0;
}

ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:proto.ClientToServer)
  SharedDtor();
}

void ClientToServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &ClientToServer_default_instance_.get()) {
    delete video_control_;
    delete audio_control_;
    delete cursor_shape_control_;
    delete clipboard_control_;
    delete clipboard_request_;
    delete clipboard_;
    delete mouse_event_;
    delete key_event_;
    delete bell_;
    delete text_chat_;
    delete power_control_;
    delete auth_reply_;
  }
}

void ClientToServer::ArenaDtor(void* object) {
  ClientToServer* _this = reinterpret_cast< ClientToServer* >(object);
  (void)_this;
}
void ClientToServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServer& ClientToServer::default_instance() {
  protobuf_InitDefaults_proto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientToServer> ClientToServer_default_instance_;

ClientToServer* ClientToServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClientToServer>(arena);
}

void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientToServer)
  if (GetArenaNoVirtual() == NULL && video_control_ != NULL) delete video_control_;
  video_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_control_ != NULL) delete audio_control_;
  audio_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && cursor_shape_control_ != NULL) delete cursor_shape_control_;
  cursor_shape_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_control_ != NULL) delete clipboard_control_;
  clipboard_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_request_ != NULL) delete clipboard_request_;
  clipboard_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) delete mouse_event_;
  mouse_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && bell_ != NULL) delete bell_;
  bell_ = NULL;
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
  if (GetArenaNoVirtual() == NULL && power_control_ != NULL) delete power_control_;
  power_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && auth_reply_ != NULL) delete auth_reply_;
  auth_reply_ = NULL;
}

bool ClientToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.VideoControl video_control = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio_control;
        break;
      }

      // optional .proto.AudioControl audio_control = 2;
      case 2: {
        if (tag == 18) {
         parse_audio_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cursor_shape_control;
        break;
      }

      // optional .proto.CursorShapeControl cursor_shape_control = 3;
      case 3: {
        if (tag == 26) {
         parse_cursor_shape_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_shape_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clipboard_control;
        break;
      }

      // optional .proto.ClipboardControl clipboard_control = 4;
      case 4: {
        if (tag == 34) {
         parse_clipboard_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_clipboard_request;
        break;
      }

      // optional .proto.ClipboardRequest clipboard_request = 5;
      case 5: {
        if (tag == 42) {
         parse_clipboard_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_clipboard;
        break;
      }

      // optional .proto.Clipboard clipboard = 6;
      case 6: {
        if (tag == 50) {
         parse_clipboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mouse_event;
        break;
      }

      // optional .proto.MouseEvent mouse_event = 7;
      case 7: {
        if (tag == 58) {
         parse_mouse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_key_event;
        break;
      }

      // optional .proto.KeyEvent key_event = 8;
      case 8: {
        if (tag == 66) {
         parse_key_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bell;
        break;
      }

      // optional .proto.Bell bell = 9;
      case 9: {
        if (tag == 74) {
         parse_bell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_text_chat;
        break;
      }

      // optional .proto.TextChat text_chat = 10;
      case 10: {
        if (tag == 82) {
         parse_text_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_power_control;
        break;
      }

      // optional .proto.PowerControl power_control = 11;
      case 11: {
        if (tag == 90) {
         parse_power_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_auth_reply;
        break;
      }

      // optional .proto.AuthorizationReply auth_reply = 12;
      case 12: {
        if (tag == 98) {
         parse_auth_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientToServer)
  return false;
#undef DO_
}

void ClientToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientToServer)
  // optional .proto.VideoControl video_control = 1;
  if (this->has_video_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->video_control_, output);
  }

  // optional .proto.AudioControl audio_control = 2;
  if (this->has_audio_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->audio_control_, output);
  }

  // optional .proto.CursorShapeControl cursor_shape_control = 3;
  if (this->has_cursor_shape_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cursor_shape_control_, output);
  }

  // optional .proto.ClipboardControl clipboard_control = 4;
  if (this->has_clipboard_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipboard_control_, output);
  }

  // optional .proto.ClipboardRequest clipboard_request = 5;
  if (this->has_clipboard_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->clipboard_request_, output);
  }

  // optional .proto.Clipboard clipboard = 6;
  if (this->has_clipboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->clipboard_, output);
  }

  // optional .proto.MouseEvent mouse_event = 7;
  if (this->has_mouse_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->mouse_event_, output);
  }

  // optional .proto.KeyEvent key_event = 8;
  if (this->has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->key_event_, output);
  }

  // optional .proto.Bell bell = 9;
  if (this->has_bell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->bell_, output);
  }

  // optional .proto.TextChat text_chat = 10;
  if (this->has_text_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->text_chat_, output);
  }

  // optional .proto.PowerControl power_control = 11;
  if (this->has_power_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->power_control_, output);
  }

  // optional .proto.AuthorizationReply auth_reply = 12;
  if (this->has_auth_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->auth_reply_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClientToServer)
}

size_t ClientToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientToServer)
  size_t total_size = 0;

  // optional .proto.VideoControl video_control = 1;
  if (this->has_video_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_control_);
  }

  // optional .proto.AudioControl audio_control = 2;
  if (this->has_audio_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_control_);
  }

  // optional .proto.CursorShapeControl cursor_shape_control = 3;
  if (this->has_cursor_shape_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cursor_shape_control_);
  }

  // optional .proto.ClipboardControl clipboard_control = 4;
  if (this->has_clipboard_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_control_);
  }

  // optional .proto.ClipboardRequest clipboard_request = 5;
  if (this->has_clipboard_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_request_);
  }

  // optional .proto.Clipboard clipboard = 6;
  if (this->has_clipboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_);
  }

  // optional .proto.MouseEvent mouse_event = 7;
  if (this->has_mouse_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mouse_event_);
  }

  // optional .proto.KeyEvent key_event = 8;
  if (this->has_key_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_event_);
  }

  // optional .proto.Bell bell = 9;
  if (this->has_bell()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bell_);
  }

  // optional .proto.TextChat text_chat = 10;
  if (this->has_text_chat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_chat_);
  }

  // optional .proto.PowerControl power_control = 11;
  if (this->has_power_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->power_control_);
  }

  // optional .proto.AuthorizationReply auth_reply = 12;
  if (this->has_auth_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auth_reply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServer*>(&from));
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientToServer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientToServer::UnsafeMergeFrom(const ClientToServer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_video_control()) {
    mutable_video_control()->::proto::VideoControl::MergeFrom(from.video_control());
  }
  if (from.has_audio_control()) {
    mutable_audio_control()->::proto::AudioControl::MergeFrom(from.audio_control());
  }
  if (from.has_cursor_shape_control()) {
    mutable_cursor_shape_control()->::proto::CursorShapeControl::MergeFrom(from.cursor_shape_control());
  }
  if (from.has_clipboard_control()) {
    mutable_clipboard_control()->::proto::ClipboardControl::MergeFrom(from.clipboard_control());
  }
  if (from.has_clipboard_request()) {
    mutable_clipboard_request()->::proto::ClipboardRequest::MergeFrom(from.clipboard_request());
  }
  if (from.has_clipboard()) {
    mutable_clipboard()->::proto::Clipboard::MergeFrom(from.clipboard());
  }
  if (from.has_mouse_event()) {
    mutable_mouse_event()->::proto::MouseEvent::MergeFrom(from.mouse_event());
  }
  if (from.has_key_event()) {
    mutable_key_event()->::proto::KeyEvent::MergeFrom(from.key_event());
  }
  if (from.has_bell()) {
    mutable_bell()->::proto::Bell::MergeFrom(from.bell());
  }
  if (from.has_text_chat()) {
    mutable_text_chat()->::proto::TextChat::MergeFrom(from.text_chat());
  }
  if (from.has_power_control()) {
    mutable_power_control()->::proto::PowerControl::MergeFrom(from.power_control());
  }
  if (from.has_auth_reply()) {
    mutable_auth_reply()->::proto::AuthorizationReply::MergeFrom(from.auth_reply());
  }
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientToServer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientToServer::IsInitialized() const {

  return true;
}

void ClientToServer::Swap(ClientToServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientToServer temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClientToServer::UnsafeArenaSwap(ClientToServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientToServer::InternalSwap(ClientToServer* other) {
  std::swap(video_control_, other->video_control_);
  std::swap(audio_control_, other->audio_control_);
  std::swap(cursor_shape_control_, other->cursor_shape_control_);
  std::swap(clipboard_control_, other->clipboard_control_);
  std::swap(clipboard_request_, other->clipboard_request_);
  std::swap(clipboard_, other->clipboard_);
  std::swap(mouse_event_, other->mouse_event_);
  std::swap(key_event_, other->key_event_);
  std::swap(bell_, other->bell_);
  std::swap(text_chat_, other->text_chat_);
  std::swap(power_control_, other->power_control_);
  std::swap(auth_reply_, other->auth_reply_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToServer::GetTypeName() const {
  return "proto.ClientToServer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToServer

// optional .proto.VideoControl video_control = 1;
bool ClientToServer::has_video_control() const {
  return this != internal_default_instance() && video_control_ != NULL;
}
void ClientToServer::clear_video_control() {
  if (GetArenaNoVirtual() == NULL && video_control_ != NULL) delete video_control_;
  video_control_ = NULL;
}
const ::proto::VideoControl& ClientToServer::video_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.video_control)
  return video_control_ != NULL ? *video_control_
                         : *::proto::VideoControl::internal_default_instance();
}
::proto::VideoControl* ClientToServer::mutable_video_control() {
  
  if (video_control_ == NULL) {
    _slow_mutable_video_control();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.video_control)
  return video_control_;
}
::proto::VideoControl* ClientToServer::release_video_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.video_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_control();
  } else {
    ::proto::VideoControl* temp = video_control_;
    video_control_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_video_control(::proto::VideoControl* video_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_control_;
  }
  if (video_control != NULL) {
    _slow_set_allocated_video_control(message_arena, &video_control);
  }
  video_control_ = video_control;
  if (video_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.video_control)
}

// optional .proto.AudioControl audio_control = 2;
bool ClientToServer::has_audio_control() const {
  return this != internal_default_instance() && audio_control_ != NULL;
}
void ClientToServer::clear_audio_control() {
  if (GetArenaNoVirtual() == NULL && audio_control_ != NULL) delete audio_control_;
  audio_control_ = NULL;
}
const ::proto::AudioControl& ClientToServer::audio_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.audio_control)
  return audio_control_ != NULL ? *audio_control_
                         : *::proto::AudioControl::internal_default_instance();
}
::proto::AudioControl* ClientToServer::mutable_audio_control() {
  
  if (audio_control_ == NULL) {
    _slow_mutable_audio_control();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.audio_control)
  return audio_control_;
}
::proto::AudioControl* ClientToServer::release_audio_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.audio_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_audio_control();
  } else {
    ::proto::AudioControl* temp = audio_control_;
    audio_control_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_audio_control(::proto::AudioControl* audio_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_control_;
  }
  if (audio_control != NULL) {
    _slow_set_allocated_audio_control(message_arena, &audio_control);
  }
  audio_control_ = audio_control;
  if (audio_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.audio_control)
}

// optional .proto.CursorShapeControl cursor_shape_control = 3;
bool ClientToServer::has_cursor_shape_control() const {
  return this != internal_default_instance() && cursor_shape_control_ != NULL;
}
void ClientToServer::clear_cursor_shape_control() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_control_ != NULL) delete cursor_shape_control_;
  cursor_shape_control_ = NULL;
}
const ::proto::CursorShapeControl& ClientToServer::cursor_shape_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.cursor_shape_control)
  return cursor_shape_control_ != NULL ? *cursor_shape_control_
                         : *::proto::CursorShapeControl::internal_default_instance();
}
::proto::CursorShapeControl* ClientToServer::mutable_cursor_shape_control() {
  
  if (cursor_shape_control_ == NULL) {
    _slow_mutable_cursor_shape_control();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.cursor_shape_control)
  return cursor_shape_control_;
}
::proto::CursorShapeControl* ClientToServer::release_cursor_shape_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.cursor_shape_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cursor_shape_control();
  } else {
    ::proto::CursorShapeControl* temp = cursor_shape_control_;
    cursor_shape_control_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_cursor_shape_control(::proto::CursorShapeControl* cursor_shape_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cursor_shape_control_;
  }
  if (cursor_shape_control != NULL) {
    _slow_set_allocated_cursor_shape_control(message_arena, &cursor_shape_control);
  }
  cursor_shape_control_ = cursor_shape_control;
  if (cursor_shape_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.cursor_shape_control)
}

// optional .proto.ClipboardControl clipboard_control = 4;
bool ClientToServer::has_clipboard_control() const {
  return this != internal_default_instance() && clipboard_control_ != NULL;
}
void ClientToServer::clear_clipboard_control() {
  if (GetArenaNoVirtual() == NULL && clipboard_control_ != NULL) delete clipboard_control_;
  clipboard_control_ = NULL;
}
const ::proto::ClipboardControl& ClientToServer::clipboard_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard_control)
  return clipboard_control_ != NULL ? *clipboard_control_
                         : *::proto::ClipboardControl::internal_default_instance();
}
::proto::ClipboardControl* ClientToServer::mutable_clipboard_control() {
  
  if (clipboard_control_ == NULL) {
    _slow_mutable_clipboard_control();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard_control)
  return clipboard_control_;
}
::proto::ClipboardControl* ClientToServer::release_clipboard_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clipboard_control();
  } else {
    ::proto::ClipboardControl* temp = clipboard_control_;
    clipboard_control_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_clipboard_control(::proto::ClipboardControl* clipboard_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clipboard_control_;
  }
  if (clipboard_control != NULL) {
    _slow_set_allocated_clipboard_control(message_arena, &clipboard_control);
  }
  clipboard_control_ = clipboard_control;
  if (clipboard_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard_control)
}

// optional .proto.ClipboardRequest clipboard_request = 5;
bool ClientToServer::has_clipboard_request() const {
  return this != internal_default_instance() && clipboard_request_ != NULL;
}
void ClientToServer::clear_clipboard_request() {
  if (GetArenaNoVirtual() == NULL && clipboard_request_ != NULL) delete clipboard_request_;
  clipboard_request_ = NULL;
}
const ::proto::ClipboardRequest& ClientToServer::clipboard_request() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard_request)
  return clipboard_request_ != NULL ? *clipboard_request_
                         : *::proto::ClipboardRequest::internal_default_instance();
}
::proto::ClipboardRequest* ClientToServer::mutable_clipboard_request() {
  
  if (clipboard_request_ == NULL) {
    _slow_mutable_clipboard_request();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard_request)
  return clipboard_request_;
}
::proto::ClipboardRequest* ClientToServer::release_clipboard_request() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clipboard_request();
  } else {
    ::proto::ClipboardRequest* temp = clipboard_request_;
    clipboard_request_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_clipboard_request(::proto::ClipboardRequest* clipboard_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clipboard_request_;
  }
  if (clipboard_request != NULL) {
    _slow_set_allocated_clipboard_request(message_arena, &clipboard_request);
  }
  clipboard_request_ = clipboard_request;
  if (clipboard_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard_request)
}

// optional .proto.Clipboard clipboard = 6;
bool ClientToServer::has_clipboard() const {
  return this != internal_default_instance() && clipboard_ != NULL;
}
void ClientToServer::clear_clipboard() {
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
}
const ::proto::Clipboard& ClientToServer::clipboard() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard)
  return clipboard_ != NULL ? *clipboard_
                         : *::proto::Clipboard::internal_default_instance();
}
::proto::Clipboard* ClientToServer::mutable_clipboard() {
  
  if (clipboard_ == NULL) {
    _slow_mutable_clipboard();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard)
  return clipboard_;
}
::proto::Clipboard* ClientToServer::release_clipboard() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clipboard();
  } else {
    ::proto::Clipboard* temp = clipboard_;
    clipboard_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_clipboard(::proto::Clipboard* clipboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clipboard_;
  }
  if (clipboard != NULL) {
    _slow_set_allocated_clipboard(message_arena, &clipboard);
  }
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard)
}

// optional .proto.MouseEvent mouse_event = 7;
bool ClientToServer::has_mouse_event() const {
  return this != internal_default_instance() && mouse_event_ != NULL;
}
void ClientToServer::clear_mouse_event() {
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) delete mouse_event_;
  mouse_event_ = NULL;
}
const ::proto::MouseEvent& ClientToServer::mouse_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.mouse_event)
  return mouse_event_ != NULL ? *mouse_event_
                         : *::proto::MouseEvent::internal_default_instance();
}
::proto::MouseEvent* ClientToServer::mutable_mouse_event() {
  
  if (mouse_event_ == NULL) {
    _slow_mutable_mouse_event();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.mouse_event)
  return mouse_event_;
}
::proto::MouseEvent* ClientToServer::release_mouse_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.mouse_event)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_mouse_event();
  } else {
    ::proto::MouseEvent* temp = mouse_event_;
    mouse_event_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_mouse_event(::proto::MouseEvent* mouse_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mouse_event_;
  }
  if (mouse_event != NULL) {
    _slow_set_allocated_mouse_event(message_arena, &mouse_event);
  }
  mouse_event_ = mouse_event;
  if (mouse_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.mouse_event)
}

// optional .proto.KeyEvent key_event = 8;
bool ClientToServer::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
void ClientToServer::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
const ::proto::KeyEvent& ClientToServer::key_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::proto::KeyEvent::internal_default_instance();
}
::proto::KeyEvent* ClientToServer::mutable_key_event() {
  
  if (key_event_ == NULL) {
    _slow_mutable_key_event();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.key_event)
  return key_event_;
}
::proto::KeyEvent* ClientToServer::release_key_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.key_event)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_key_event();
  } else {
    ::proto::KeyEvent* temp = key_event_;
    key_event_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_key_event(::proto::KeyEvent* key_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_event_;
  }
  if (key_event != NULL) {
    _slow_set_allocated_key_event(message_arena, &key_event);
  }
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.key_event)
}

// optional .proto.Bell bell = 9;
bool ClientToServer::has_bell() const {
  return this != internal_default_instance() && bell_ != NULL;
}
void ClientToServer::clear_bell() {
  if (GetArenaNoVirtual() == NULL && bell_ != NULL) delete bell_;
  bell_ = NULL;
}
const ::proto::Bell& ClientToServer::bell() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.bell)
  return bell_ != NULL ? *bell_
                         : *::proto::Bell::internal_default_instance();
}
::proto::Bell* ClientToServer::mutable_bell() {
  
  if (bell_ == NULL) {
    _slow_mutable_bell();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.bell)
  return bell_;
}
::proto::Bell* ClientToServer::release_bell() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.bell)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_bell();
  } else {
    ::proto::Bell* temp = bell_;
    bell_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_bell(::proto::Bell* bell) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bell_;
  }
  if (bell != NULL) {
    _slow_set_allocated_bell(message_arena, &bell);
  }
  bell_ = bell;
  if (bell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.bell)
}

// optional .proto.TextChat text_chat = 10;
bool ClientToServer::has_text_chat() const {
  return this != internal_default_instance() && text_chat_ != NULL;
}
void ClientToServer::clear_text_chat() {
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
}
const ::proto::TextChat& ClientToServer::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.text_chat)
  return text_chat_ != NULL ? *text_chat_
                         : *::proto::TextChat::internal_default_instance();
}
::proto::TextChat* ClientToServer::mutable_text_chat() {
  
  if (text_chat_ == NULL) {
    _slow_mutable_text_chat();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.text_chat)
  return text_chat_;
}
::proto::TextChat* ClientToServer::release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.text_chat)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_text_chat();
  } else {
    ::proto::TextChat* temp = text_chat_;
    text_chat_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_text_chat(::proto::TextChat* text_chat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_chat_;
  }
  if (text_chat != NULL) {
    _slow_set_allocated_text_chat(message_arena, &text_chat);
  }
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.text_chat)
}

// optional .proto.PowerControl power_control = 11;
bool ClientToServer::has_power_control() const {
  return this != internal_default_instance() && power_control_ != NULL;
}
void ClientToServer::clear_power_control() {
  if (GetArenaNoVirtual() == NULL && power_control_ != NULL) delete power_control_;
  power_control_ = NULL;
}
const ::proto::PowerControl& ClientToServer::power_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.power_control)
  return power_control_ != NULL ? *power_control_
                         : *::proto::PowerControl::internal_default_instance();
}
::proto::PowerControl* ClientToServer::mutable_power_control() {
  
  if (power_control_ == NULL) {
    _slow_mutable_power_control();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.power_control)
  return power_control_;
}
::proto::PowerControl* ClientToServer::release_power_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.power_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_power_control();
  } else {
    ::proto::PowerControl* temp = power_control_;
    power_control_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_power_control(::proto::PowerControl* power_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_control_;
  }
  if (power_control != NULL) {
    _slow_set_allocated_power_control(message_arena, &power_control);
  }
  power_control_ = power_control;
  if (power_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.power_control)
}

// optional .proto.AuthorizationReply auth_reply = 12;
bool ClientToServer::has_auth_reply() const {
  return this != internal_default_instance() && auth_reply_ != NULL;
}
void ClientToServer::clear_auth_reply() {
  if (GetArenaNoVirtual() == NULL && auth_reply_ != NULL) delete auth_reply_;
  auth_reply_ = NULL;
}
const ::proto::AuthorizationReply& ClientToServer::auth_reply() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.auth_reply)
  return auth_reply_ != NULL ? *auth_reply_
                         : *::proto::AuthorizationReply::internal_default_instance();
}
::proto::AuthorizationReply* ClientToServer::mutable_auth_reply() {
  
  if (auth_reply_ == NULL) {
    _slow_mutable_auth_reply();
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.auth_reply)
  return auth_reply_;
}
::proto::AuthorizationReply* ClientToServer::release_auth_reply() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.auth_reply)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auth_reply();
  } else {
    ::proto::AuthorizationReply* temp = auth_reply_;
    auth_reply_ = NULL;
    return temp;
  }
}
 void ClientToServer::set_allocated_auth_reply(::proto::AuthorizationReply* auth_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auth_reply_;
  }
  if (auth_reply != NULL) {
    _slow_set_allocated_auth_reply(message_arena, &auth_reply);
  }
  auth_reply_ = auth_reply;
  if (auth_reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.auth_reply)
}

inline const ClientToServer* ClientToServer::internal_default_instance() {
  return &ClientToServer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

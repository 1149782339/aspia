// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef PROTOBUF_proto_2eproto__INCLUDED
#define PROTOBUF_proto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2eproto();
void protobuf_InitDefaults_proto_2eproto();
void protobuf_AssignDesc_proto_2eproto();
void protobuf_ShutdownFile_proto_2eproto();

class Bell;
class ClientToServer;
class Clipboard;
class ClipboardControl;
class ClipboardRequest;
class CursorShape;
class CursorShapeControl;
class KeyEvent;
class PointerEvent;
class PowerControl;
class ServerToClient;
class TextChat;
class VideoControl;
class VideoPacket;
class VideoPacketFormat;
class VideoPixelFormat;
class VideoRect;
class VideoSize;

enum PowerControl_PowerAction {
  PowerControl_PowerAction_POWER_UNKNOWN = 0,
  PowerControl_PowerAction_POWER_SHUTDOWN = 1,
  PowerControl_PowerAction_POWER_REBOOT = 2,
  PowerControl_PowerAction_POWER_POWEROFF = 3,
  PowerControl_PowerAction_POWER_HIBERNATE = 4,
  PowerControl_PowerAction_POWER_SUSPEND = 5,
  PowerControl_PowerAction_POWER_LOGOFF = 6,
  PowerControl_PowerAction_PowerControl_PowerAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PowerControl_PowerAction_PowerControl_PowerAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PowerControl_PowerAction_IsValid(int value);
const PowerControl_PowerAction PowerControl_PowerAction_PowerAction_MIN = PowerControl_PowerAction_POWER_UNKNOWN;
const PowerControl_PowerAction PowerControl_PowerAction_PowerAction_MAX = PowerControl_PowerAction_POWER_LOGOFF;
const int PowerControl_PowerAction_PowerAction_ARRAYSIZE = PowerControl_PowerAction_PowerAction_MAX + 1;

enum PointerEvent_ButtonMask {
  PointerEvent_ButtonMask_EMPTY = 0,
  PointerEvent_ButtonMask_LEFT_BUTTON = 1,
  PointerEvent_ButtonMask_MIDDLE_BUTTON = 2,
  PointerEvent_ButtonMask_RIGHT_BUTTON = 4,
  PointerEvent_ButtonMask_WHEEL_UP = 8,
  PointerEvent_ButtonMask_WHEEL_DOWN = 16,
  PointerEvent_ButtonMask_PointerEvent_ButtonMask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointerEvent_ButtonMask_PointerEvent_ButtonMask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointerEvent_ButtonMask_IsValid(int value);
const PointerEvent_ButtonMask PointerEvent_ButtonMask_ButtonMask_MIN = PointerEvent_ButtonMask_EMPTY;
const PointerEvent_ButtonMask PointerEvent_ButtonMask_ButtonMask_MAX = PointerEvent_ButtonMask_WHEEL_DOWN;
const int PointerEvent_ButtonMask_ButtonMask_ARRAYSIZE = PointerEvent_ButtonMask_ButtonMask_MAX + 1;

enum VideoPacket_Flags {
  VideoPacket_Flags_UNKNOWN_PACKET = 0,
  VideoPacket_Flags_FIRST_PACKET = 1,
  VideoPacket_Flags_LAST_PACKET = 2,
  VideoPacket_Flags_PARTITION_PACKET = 4,
  VideoPacket_Flags_VideoPacket_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoPacket_Flags_VideoPacket_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoPacket_Flags_IsValid(int value);
const VideoPacket_Flags VideoPacket_Flags_Flags_MIN = VideoPacket_Flags_UNKNOWN_PACKET;
const VideoPacket_Flags VideoPacket_Flags_Flags_MAX = VideoPacket_Flags_PARTITION_PACKET;
const int VideoPacket_Flags_Flags_ARRAYSIZE = VideoPacket_Flags_Flags_MAX + 1;

enum VideoEncoding {
  VIDEO_ENCODING_UNKNOWN = 0,
  VIDEO_ENCODING_RAW = 1,
  VIDEO_ENCODING_ZLIB = 2,
  VIDEO_ENCODING_VP8 = 4,
  VideoEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoEncoding_IsValid(int value);
const VideoEncoding VideoEncoding_MIN = VIDEO_ENCODING_UNKNOWN;
const VideoEncoding VideoEncoding_MAX = VIDEO_ENCODING_VP8;
const int VideoEncoding_ARRAYSIZE = VideoEncoding_MAX + 1;

// ===================================================================

class PowerControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.PowerControl) */ {
 public:
  PowerControl();
  virtual ~PowerControl();

  PowerControl(const PowerControl& from);

  inline PowerControl& operator=(const PowerControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const PowerControl& default_instance();

  static const PowerControl* internal_default_instance();

  void Swap(PowerControl* other);

  // implements Message ----------------------------------------------

  inline PowerControl* New() const { return New(NULL); }

  PowerControl* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PowerControl& from);
  void MergeFrom(const PowerControl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerControl* other);
  void UnsafeMergeFrom(const PowerControl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PowerControl_PowerAction PowerAction;
  static const PowerAction POWER_UNKNOWN =
    PowerControl_PowerAction_POWER_UNKNOWN;
  static const PowerAction POWER_SHUTDOWN =
    PowerControl_PowerAction_POWER_SHUTDOWN;
  static const PowerAction POWER_REBOOT =
    PowerControl_PowerAction_POWER_REBOOT;
  static const PowerAction POWER_POWEROFF =
    PowerControl_PowerAction_POWER_POWEROFF;
  static const PowerAction POWER_HIBERNATE =
    PowerControl_PowerAction_POWER_HIBERNATE;
  static const PowerAction POWER_SUSPEND =
    PowerControl_PowerAction_POWER_SUSPEND;
  static const PowerAction POWER_LOGOFF =
    PowerControl_PowerAction_POWER_LOGOFF;
  static inline bool PowerAction_IsValid(int value) {
    return PowerControl_PowerAction_IsValid(value);
  }
  static const PowerAction PowerAction_MIN =
    PowerControl_PowerAction_PowerAction_MIN;
  static const PowerAction PowerAction_MAX =
    PowerControl_PowerAction_PowerAction_MAX;
  static const int PowerAction_ARRAYSIZE =
    PowerControl_PowerAction_PowerAction_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .proto.PowerControl.PowerAction action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::proto::PowerControl_PowerAction action() const;
  void set_action(::proto::PowerControl_PowerAction value);

  // @@protoc_insertion_point(class_scope:proto.PowerControl)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  int action_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PowerControl> PowerControl_default_instance_;

// -------------------------------------------------------------------

class Bell : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.Bell) */ {
 public:
  Bell();
  virtual ~Bell();

  Bell(const Bell& from);

  inline Bell& operator=(const Bell& from) {
    CopyFrom(from);
    return *this;
  }

  static const Bell& default_instance();

  static const Bell* internal_default_instance();

  void Swap(Bell* other);

  // implements Message ----------------------------------------------

  inline Bell* New() const { return New(NULL); }

  Bell* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Bell& from);
  void MergeFrom(const Bell& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bell* other);
  void UnsafeMergeFrom(const Bell& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  bool dummy() const;
  void set_dummy(bool value);

  // @@protoc_insertion_point(class_scope:proto.Bell)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool dummy_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Bell> Bell_default_instance_;

// -------------------------------------------------------------------

class TextChat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.TextChat) */ {
 public:
  TextChat();
  virtual ~TextChat();

  TextChat(const TextChat& from);

  inline TextChat& operator=(const TextChat& from) {
    CopyFrom(from);
    return *this;
  }

  static const TextChat& default_instance();

  static const TextChat* internal_default_instance();

  void Swap(TextChat* other);

  // implements Message ----------------------------------------------

  inline TextChat* New() const { return New(NULL); }

  TextChat* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TextChat& from);
  void MergeFrom(const TextChat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextChat* other);
  void UnsafeMergeFrom(const TextChat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:proto.TextChat)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TextChat> TextChat_default_instance_;

// -------------------------------------------------------------------

class KeyEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.KeyEvent) */ {
 public:
  KeyEvent();
  virtual ~KeyEvent();

  KeyEvent(const KeyEvent& from);

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const KeyEvent& default_instance();

  static const KeyEvent* internal_default_instance();

  void Swap(KeyEvent* other);

  // implements Message ----------------------------------------------

  inline KeyEvent* New() const { return New(NULL); }

  KeyEvent* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KeyEvent& from);
  void MergeFrom(const KeyEvent& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyEvent* other);
  void UnsafeMergeFrom(const KeyEvent& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 keycode = 1;
  void clear_keycode();
  static const int kKeycodeFieldNumber = 1;
  ::google::protobuf::int32 keycode() const;
  void set_keycode(::google::protobuf::int32 value);

  // optional bool extended = 2;
  void clear_extended();
  static const int kExtendedFieldNumber = 2;
  bool extended() const;
  void set_extended(bool value);

  // optional bool pressed = 3;
  void clear_pressed();
  static const int kPressedFieldNumber = 3;
  bool pressed() const;
  void set_pressed(bool value);

  // @@protoc_insertion_point(class_scope:proto.KeyEvent)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 keycode_;
  bool extended_;
  bool pressed_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent> KeyEvent_default_instance_;

// -------------------------------------------------------------------

class PointerEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.PointerEvent) */ {
 public:
  PointerEvent();
  virtual ~PointerEvent();

  PointerEvent(const PointerEvent& from);

  inline PointerEvent& operator=(const PointerEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const PointerEvent& default_instance();

  static const PointerEvent* internal_default_instance();

  void Swap(PointerEvent* other);

  // implements Message ----------------------------------------------

  inline PointerEvent* New() const { return New(NULL); }

  PointerEvent* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PointerEvent& from);
  void MergeFrom(const PointerEvent& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointerEvent* other);
  void UnsafeMergeFrom(const PointerEvent& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef PointerEvent_ButtonMask ButtonMask;
  static const ButtonMask EMPTY =
    PointerEvent_ButtonMask_EMPTY;
  static const ButtonMask LEFT_BUTTON =
    PointerEvent_ButtonMask_LEFT_BUTTON;
  static const ButtonMask MIDDLE_BUTTON =
    PointerEvent_ButtonMask_MIDDLE_BUTTON;
  static const ButtonMask RIGHT_BUTTON =
    PointerEvent_ButtonMask_RIGHT_BUTTON;
  static const ButtonMask WHEEL_UP =
    PointerEvent_ButtonMask_WHEEL_UP;
  static const ButtonMask WHEEL_DOWN =
    PointerEvent_ButtonMask_WHEEL_DOWN;
  static inline bool ButtonMask_IsValid(int value) {
    return PointerEvent_ButtonMask_IsValid(value);
  }
  static const ButtonMask ButtonMask_MIN =
    PointerEvent_ButtonMask_ButtonMask_MIN;
  static const ButtonMask ButtonMask_MAX =
    PointerEvent_ButtonMask_ButtonMask_MAX;
  static const int ButtonMask_ARRAYSIZE =
    PointerEvent_ButtonMask_ButtonMask_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 mask = 1;
  void clear_mask();
  static const int kMaskFieldNumber = 1;
  ::google::protobuf::int32 mask() const;
  void set_mask(::google::protobuf::int32 value);

  // optional int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.PointerEvent)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 mask_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PointerEvent> PointerEvent_default_instance_;

// -------------------------------------------------------------------

class Clipboard : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.Clipboard) */ {
 public:
  Clipboard();
  virtual ~Clipboard();

  Clipboard(const Clipboard& from);

  inline Clipboard& operator=(const Clipboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const Clipboard& default_instance();

  static const Clipboard* internal_default_instance();

  void Swap(Clipboard* other);

  // implements Message ----------------------------------------------

  inline Clipboard* New() const { return New(NULL); }

  Clipboard* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Clipboard& from);
  void MergeFrom(const Clipboard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Clipboard* other);
  void UnsafeMergeFrom(const Clipboard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mime_type = 1;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 1;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.Clipboard)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Clipboard> Clipboard_default_instance_;

// -------------------------------------------------------------------

class ClipboardRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ClipboardRequest) */ {
 public:
  ClipboardRequest();
  virtual ~ClipboardRequest();

  ClipboardRequest(const ClipboardRequest& from);

  inline ClipboardRequest& operator=(const ClipboardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClipboardRequest& default_instance();

  static const ClipboardRequest* internal_default_instance();

  void Swap(ClipboardRequest* other);

  // implements Message ----------------------------------------------

  inline ClipboardRequest* New() const { return New(NULL); }

  ClipboardRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClipboardRequest& from);
  void MergeFrom(const ClipboardRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClipboardRequest* other);
  void UnsafeMergeFrom(const ClipboardRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  bool dummy() const;
  void set_dummy(bool value);

  // @@protoc_insertion_point(class_scope:proto.ClipboardRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool dummy_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClipboardRequest> ClipboardRequest_default_instance_;

// -------------------------------------------------------------------

class ClipboardControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ClipboardControl) */ {
 public:
  ClipboardControl();
  virtual ~ClipboardControl();

  ClipboardControl(const ClipboardControl& from);

  inline ClipboardControl& operator=(const ClipboardControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClipboardControl& default_instance();

  static const ClipboardControl* internal_default_instance();

  void Swap(ClipboardControl* other);

  // implements Message ----------------------------------------------

  inline ClipboardControl* New() const { return New(NULL); }

  ClipboardControl* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClipboardControl& from);
  void MergeFrom(const ClipboardControl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClipboardControl* other);
  void UnsafeMergeFrom(const ClipboardControl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool auto_send = 1;
  void clear_auto_send();
  static const int kAutoSendFieldNumber = 1;
  bool auto_send() const;
  void set_auto_send(bool value);

  // @@protoc_insertion_point(class_scope:proto.ClipboardControl)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool auto_send_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClipboardControl> ClipboardControl_default_instance_;

// -------------------------------------------------------------------

class CursorShape : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.CursorShape) */ {
 public:
  CursorShape();
  virtual ~CursorShape();

  CursorShape(const CursorShape& from);

  inline CursorShape& operator=(const CursorShape& from) {
    CopyFrom(from);
    return *this;
  }

  static const CursorShape& default_instance();

  static const CursorShape* internal_default_instance();

  void Swap(CursorShape* other);

  // implements Message ----------------------------------------------

  inline CursorShape* New() const { return New(NULL); }

  CursorShape* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CursorShape& from);
  void MergeFrom(const CursorShape& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CursorShape* other);
  void UnsafeMergeFrom(const CursorShape& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 hotspot_x = 3;
  void clear_hotspot_x();
  static const int kHotspotXFieldNumber = 3;
  ::google::protobuf::int32 hotspot_x() const;
  void set_hotspot_x(::google::protobuf::int32 value);

  // optional int32 hotspot_y = 4;
  void clear_hotspot_y();
  static const int kHotspotYFieldNumber = 4;
  ::google::protobuf::int32 hotspot_y() const;
  void set_hotspot_y(::google::protobuf::int32 value);

  // optional int32 bits_per_pixel = 5;
  void clear_bits_per_pixel();
  static const int kBitsPerPixelFieldNumber = 5;
  ::google::protobuf::int32 bits_per_pixel() const;
  void set_bits_per_pixel(::google::protobuf::int32 value);

  // optional bytes color = 6;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const void* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional bytes mask = 7;
  void clear_mask();
  static const int kMaskFieldNumber = 7;
  const ::std::string& mask() const;
  void set_mask(const ::std::string& value);
  void set_mask(const char* value);
  void set_mask(const void* value, size_t size);
  ::std::string* mutable_mask();
  ::std::string* release_mask();
  void set_allocated_mask(::std::string* mask);

  // @@protoc_insertion_point(class_scope:proto.CursorShape)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr mask_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 hotspot_x_;
  ::google::protobuf::int32 hotspot_y_;
  ::google::protobuf::int32 bits_per_pixel_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CursorShape> CursorShape_default_instance_;

// -------------------------------------------------------------------

class CursorShapeControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.CursorShapeControl) */ {
 public:
  CursorShapeControl();
  virtual ~CursorShapeControl();

  CursorShapeControl(const CursorShapeControl& from);

  inline CursorShapeControl& operator=(const CursorShapeControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const CursorShapeControl& default_instance();

  static const CursorShapeControl* internal_default_instance();

  void Swap(CursorShapeControl* other);

  // implements Message ----------------------------------------------

  inline CursorShapeControl* New() const { return New(NULL); }

  CursorShapeControl* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CursorShapeControl& from);
  void MergeFrom(const CursorShapeControl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CursorShapeControl* other);
  void UnsafeMergeFrom(const CursorShapeControl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:proto.CursorShapeControl)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool enable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CursorShapeControl> CursorShapeControl_default_instance_;

// -------------------------------------------------------------------

class VideoRect : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoRect) */ {
 public:
  VideoRect();
  virtual ~VideoRect();

  VideoRect(const VideoRect& from);

  inline VideoRect& operator=(const VideoRect& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoRect& default_instance();

  static const VideoRect* internal_default_instance();

  void Swap(VideoRect* other);

  // implements Message ----------------------------------------------

  inline VideoRect* New() const { return New(NULL); }

  VideoRect* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoRect& from);
  void MergeFrom(const VideoRect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRect* other);
  void UnsafeMergeFrom(const VideoRect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.VideoRect)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoRect> VideoRect_default_instance_;

// -------------------------------------------------------------------

class VideoPixelFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoPixelFormat) */ {
 public:
  VideoPixelFormat();
  virtual ~VideoPixelFormat();

  VideoPixelFormat(const VideoPixelFormat& from);

  inline VideoPixelFormat& operator=(const VideoPixelFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPixelFormat& default_instance();

  static const VideoPixelFormat* internal_default_instance();

  void Swap(VideoPixelFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPixelFormat* New() const { return New(NULL); }

  VideoPixelFormat* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPixelFormat& from);
  void MergeFrom(const VideoPixelFormat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPixelFormat* other);
  void UnsafeMergeFrom(const VideoPixelFormat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bits_per_pixel = 1;
  void clear_bits_per_pixel();
  static const int kBitsPerPixelFieldNumber = 1;
  ::google::protobuf::int32 bits_per_pixel() const;
  void set_bits_per_pixel(::google::protobuf::int32 value);

  // optional int32 red_max = 2;
  void clear_red_max();
  static const int kRedMaxFieldNumber = 2;
  ::google::protobuf::int32 red_max() const;
  void set_red_max(::google::protobuf::int32 value);

  // optional int32 green_max = 3;
  void clear_green_max();
  static const int kGreenMaxFieldNumber = 3;
  ::google::protobuf::int32 green_max() const;
  void set_green_max(::google::protobuf::int32 value);

  // optional int32 blue_max = 4;
  void clear_blue_max();
  static const int kBlueMaxFieldNumber = 4;
  ::google::protobuf::int32 blue_max() const;
  void set_blue_max(::google::protobuf::int32 value);

  // optional int32 red_shift = 5;
  void clear_red_shift();
  static const int kRedShiftFieldNumber = 5;
  ::google::protobuf::int32 red_shift() const;
  void set_red_shift(::google::protobuf::int32 value);

  // optional int32 green_shift = 6;
  void clear_green_shift();
  static const int kGreenShiftFieldNumber = 6;
  ::google::protobuf::int32 green_shift() const;
  void set_green_shift(::google::protobuf::int32 value);

  // optional int32 blue_shift = 7;
  void clear_blue_shift();
  static const int kBlueShiftFieldNumber = 7;
  ::google::protobuf::int32 blue_shift() const;
  void set_blue_shift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.VideoPixelFormat)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 bits_per_pixel_;
  ::google::protobuf::int32 red_max_;
  ::google::protobuf::int32 green_max_;
  ::google::protobuf::int32 blue_max_;
  ::google::protobuf::int32 red_shift_;
  ::google::protobuf::int32 green_shift_;
  ::google::protobuf::int32 blue_shift_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPixelFormat> VideoPixelFormat_default_instance_;

// -------------------------------------------------------------------

class VideoSize : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoSize) */ {
 public:
  VideoSize();
  virtual ~VideoSize();

  VideoSize(const VideoSize& from);

  inline VideoSize& operator=(const VideoSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoSize& default_instance();

  static const VideoSize* internal_default_instance();

  void Swap(VideoSize* other);

  // implements Message ----------------------------------------------

  inline VideoSize* New() const { return New(NULL); }

  VideoSize* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoSize& from);
  void MergeFrom(const VideoSize& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSize* other);
  void UnsafeMergeFrom(const VideoSize& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.VideoSize)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoSize> VideoSize_default_instance_;

// -------------------------------------------------------------------

class VideoPacketFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoPacketFormat) */ {
 public:
  VideoPacketFormat();
  virtual ~VideoPacketFormat();

  VideoPacketFormat(const VideoPacketFormat& from);

  inline VideoPacketFormat& operator=(const VideoPacketFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacketFormat& default_instance();

  static const VideoPacketFormat* internal_default_instance();

  void Swap(VideoPacketFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPacketFormat* New() const { return New(NULL); }

  VideoPacketFormat* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPacketFormat& from);
  void MergeFrom(const VideoPacketFormat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacketFormat* other);
  void UnsafeMergeFrom(const VideoPacketFormat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::google::protobuf::int32 encoding() const;
  void set_encoding(::google::protobuf::int32 value);

  // optional .proto.VideoSize screen_size = 2;
  bool has_screen_size() const;
  void clear_screen_size();
  static const int kScreenSizeFieldNumber = 2;
  const ::proto::VideoSize& screen_size() const;
  ::proto::VideoSize* mutable_screen_size();
  ::proto::VideoSize* release_screen_size();
  void set_allocated_screen_size(::proto::VideoSize* screen_size);

  // optional .proto.VideoPixelFormat pixel_format = 3;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 3;
  const ::proto::VideoPixelFormat& pixel_format() const;
  ::proto::VideoPixelFormat* mutable_pixel_format();
  ::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format);

  // @@protoc_insertion_point(class_scope:proto.VideoPacketFormat)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::proto::VideoSize* screen_size_;
  ::proto::VideoPixelFormat* pixel_format_;
  ::google::protobuf::int32 encoding_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPacketFormat> VideoPacketFormat_default_instance_;

// -------------------------------------------------------------------

class VideoPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoPacket) */ {
 public:
  VideoPacket();
  virtual ~VideoPacket();

  VideoPacket(const VideoPacket& from);

  inline VideoPacket& operator=(const VideoPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacket& default_instance();

  static const VideoPacket* internal_default_instance();

  void Swap(VideoPacket* other);

  // implements Message ----------------------------------------------

  inline VideoPacket* New() const { return New(NULL); }

  VideoPacket* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPacket& from);
  void MergeFrom(const VideoPacket& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacket* other);
  void UnsafeMergeFrom(const VideoPacket& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef VideoPacket_Flags Flags;
  static const Flags UNKNOWN_PACKET =
    VideoPacket_Flags_UNKNOWN_PACKET;
  static const Flags FIRST_PACKET =
    VideoPacket_Flags_FIRST_PACKET;
  static const Flags LAST_PACKET =
    VideoPacket_Flags_LAST_PACKET;
  static const Flags PARTITION_PACKET =
    VideoPacket_Flags_PARTITION_PACKET;
  static inline bool Flags_IsValid(int value) {
    return VideoPacket_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    VideoPacket_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    VideoPacket_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    VideoPacket_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // optional .proto.VideoPacketFormat format = 2;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::proto::VideoPacketFormat& format() const;
  ::proto::VideoPacketFormat* mutable_format();
  ::proto::VideoPacketFormat* release_format();
  void set_allocated_format(::proto::VideoPacketFormat* format);

  // repeated .proto.VideoRect changed_rect = 3;
  int changed_rect_size() const;
  void clear_changed_rect();
  static const int kChangedRectFieldNumber = 3;
  const ::proto::VideoRect& changed_rect(int index) const;
  ::proto::VideoRect* mutable_changed_rect(int index);
  ::proto::VideoRect* add_changed_rect();
  ::google::protobuf::RepeatedPtrField< ::proto::VideoRect >*
      mutable_changed_rect();
  const ::google::protobuf::RepeatedPtrField< ::proto::VideoRect >&
      changed_rect() const;

  // optional bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.VideoPacket)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::RepeatedPtrField< ::proto::VideoRect > changed_rect_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::proto::VideoPacketFormat* format_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPacket> VideoPacket_default_instance_;

// -------------------------------------------------------------------

class VideoControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoControl) */ {
 public:
  VideoControl();
  virtual ~VideoControl();

  VideoControl(const VideoControl& from);

  inline VideoControl& operator=(const VideoControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoControl& default_instance();

  static const VideoControl* internal_default_instance();

  void Swap(VideoControl* other);

  // implements Message ----------------------------------------------

  inline VideoControl* New() const { return New(NULL); }

  VideoControl* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoControl& from);
  void MergeFrom(const VideoControl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoControl* other);
  void UnsafeMergeFrom(const VideoControl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // optional int32 encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::google::protobuf::int32 encoding() const;
  void set_encoding(::google::protobuf::int32 value);

  // optional .proto.VideoPixelFormat pixel_format = 3;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 3;
  const ::proto::VideoPixelFormat& pixel_format() const;
  ::proto::VideoPixelFormat* mutable_pixel_format();
  ::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format);

  // @@protoc_insertion_point(class_scope:proto.VideoControl)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::proto::VideoPixelFormat* pixel_format_;
  bool enable_;
  ::google::protobuf::int32 encoding_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoControl> VideoControl_default_instance_;

// -------------------------------------------------------------------

class ServerToClient : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ServerToClient) */ {
 public:
  ServerToClient();
  virtual ~ServerToClient();

  ServerToClient(const ServerToClient& from);

  inline ServerToClient& operator=(const ServerToClient& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServerToClient& default_instance();

  static const ServerToClient* internal_default_instance();

  void Swap(ServerToClient* other);

  // implements Message ----------------------------------------------

  inline ServerToClient* New() const { return New(NULL); }

  ServerToClient* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerToClient& from);
  void MergeFrom(const ServerToClient& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerToClient* other);
  void UnsafeMergeFrom(const ServerToClient& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.VideoPacket video_packet = 1;
  bool has_video_packet() const;
  void clear_video_packet();
  static const int kVideoPacketFieldNumber = 1;
  const ::proto::VideoPacket& video_packet() const;
  ::proto::VideoPacket* mutable_video_packet();
  ::proto::VideoPacket* release_video_packet();
  void set_allocated_video_packet(::proto::VideoPacket* video_packet);

  // optional .proto.CursorShape cursor = 2;
  bool has_cursor() const;
  void clear_cursor();
  static const int kCursorFieldNumber = 2;
  const ::proto::CursorShape& cursor() const;
  ::proto::CursorShape* mutable_cursor();
  ::proto::CursorShape* release_cursor();
  void set_allocated_cursor(::proto::CursorShape* cursor);

  // optional .proto.Clipboard clipboard = 3;
  bool has_clipboard() const;
  void clear_clipboard();
  static const int kClipboardFieldNumber = 3;
  const ::proto::Clipboard& clipboard() const;
  ::proto::Clipboard* mutable_clipboard();
  ::proto::Clipboard* release_clipboard();
  void set_allocated_clipboard(::proto::Clipboard* clipboard);

  // optional .proto.TextChat text_chat = 4;
  bool has_text_chat() const;
  void clear_text_chat();
  static const int kTextChatFieldNumber = 4;
  const ::proto::TextChat& text_chat() const;
  ::proto::TextChat* mutable_text_chat();
  ::proto::TextChat* release_text_chat();
  void set_allocated_text_chat(::proto::TextChat* text_chat);

  // @@protoc_insertion_point(class_scope:proto.ServerToClient)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::proto::VideoPacket* video_packet_;
  ::proto::CursorShape* cursor_;
  ::proto::Clipboard* clipboard_;
  ::proto::TextChat* text_chat_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerToClient> ServerToClient_default_instance_;

// -------------------------------------------------------------------

class ClientToServer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ClientToServer) */ {
 public:
  ClientToServer();
  virtual ~ClientToServer();

  ClientToServer(const ClientToServer& from);

  inline ClientToServer& operator=(const ClientToServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientToServer& default_instance();

  static const ClientToServer* internal_default_instance();

  void Swap(ClientToServer* other);

  // implements Message ----------------------------------------------

  inline ClientToServer* New() const { return New(NULL); }

  ClientToServer* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientToServer& from);
  void MergeFrom(const ClientToServer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToServer* other);
  void UnsafeMergeFrom(const ClientToServer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.VideoControl video_control = 1;
  bool has_video_control() const;
  void clear_video_control();
  static const int kVideoControlFieldNumber = 1;
  const ::proto::VideoControl& video_control() const;
  ::proto::VideoControl* mutable_video_control();
  ::proto::VideoControl* release_video_control();
  void set_allocated_video_control(::proto::VideoControl* video_control);

  // optional .proto.CursorShapeControl cursor_shape_control = 2;
  bool has_cursor_shape_control() const;
  void clear_cursor_shape_control();
  static const int kCursorShapeControlFieldNumber = 2;
  const ::proto::CursorShapeControl& cursor_shape_control() const;
  ::proto::CursorShapeControl* mutable_cursor_shape_control();
  ::proto::CursorShapeControl* release_cursor_shape_control();
  void set_allocated_cursor_shape_control(::proto::CursorShapeControl* cursor_shape_control);

  // optional .proto.ClipboardControl clipboard_control = 3;
  bool has_clipboard_control() const;
  void clear_clipboard_control();
  static const int kClipboardControlFieldNumber = 3;
  const ::proto::ClipboardControl& clipboard_control() const;
  ::proto::ClipboardControl* mutable_clipboard_control();
  ::proto::ClipboardControl* release_clipboard_control();
  void set_allocated_clipboard_control(::proto::ClipboardControl* clipboard_control);

  // optional .proto.ClipboardRequest clipboard_request = 4;
  bool has_clipboard_request() const;
  void clear_clipboard_request();
  static const int kClipboardRequestFieldNumber = 4;
  const ::proto::ClipboardRequest& clipboard_request() const;
  ::proto::ClipboardRequest* mutable_clipboard_request();
  ::proto::ClipboardRequest* release_clipboard_request();
  void set_allocated_clipboard_request(::proto::ClipboardRequest* clipboard_request);

  // optional .proto.Clipboard clipboard = 5;
  bool has_clipboard() const;
  void clear_clipboard();
  static const int kClipboardFieldNumber = 5;
  const ::proto::Clipboard& clipboard() const;
  ::proto::Clipboard* mutable_clipboard();
  ::proto::Clipboard* release_clipboard();
  void set_allocated_clipboard(::proto::Clipboard* clipboard);

  // optional .proto.PointerEvent pointer_event = 6;
  bool has_pointer_event() const;
  void clear_pointer_event();
  static const int kPointerEventFieldNumber = 6;
  const ::proto::PointerEvent& pointer_event() const;
  ::proto::PointerEvent* mutable_pointer_event();
  ::proto::PointerEvent* release_pointer_event();
  void set_allocated_pointer_event(::proto::PointerEvent* pointer_event);

  // optional .proto.KeyEvent key_event = 7;
  bool has_key_event() const;
  void clear_key_event();
  static const int kKeyEventFieldNumber = 7;
  const ::proto::KeyEvent& key_event() const;
  ::proto::KeyEvent* mutable_key_event();
  ::proto::KeyEvent* release_key_event();
  void set_allocated_key_event(::proto::KeyEvent* key_event);

  // optional .proto.Bell bell = 8;
  bool has_bell() const;
  void clear_bell();
  static const int kBellFieldNumber = 8;
  const ::proto::Bell& bell() const;
  ::proto::Bell* mutable_bell();
  ::proto::Bell* release_bell();
  void set_allocated_bell(::proto::Bell* bell);

  // optional .proto.TextChat text_chat = 9;
  bool has_text_chat() const;
  void clear_text_chat();
  static const int kTextChatFieldNumber = 9;
  const ::proto::TextChat& text_chat() const;
  ::proto::TextChat* mutable_text_chat();
  ::proto::TextChat* release_text_chat();
  void set_allocated_text_chat(::proto::TextChat* text_chat);

  // optional .proto.PowerControl power_control = 10;
  bool has_power_control() const;
  void clear_power_control();
  static const int kPowerControlFieldNumber = 10;
  const ::proto::PowerControl& power_control() const;
  ::proto::PowerControl* mutable_power_control();
  ::proto::PowerControl* release_power_control();
  void set_allocated_power_control(::proto::PowerControl* power_control);

  // @@protoc_insertion_point(class_scope:proto.ClientToServer)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::proto::VideoControl* video_control_;
  ::proto::CursorShapeControl* cursor_shape_control_;
  ::proto::ClipboardControl* clipboard_control_;
  ::proto::ClipboardRequest* clipboard_request_;
  ::proto::Clipboard* clipboard_;
  ::proto::PointerEvent* pointer_event_;
  ::proto::KeyEvent* key_event_;
  ::proto::Bell* bell_;
  ::proto::TextChat* text_chat_;
  ::proto::PowerControl* power_control_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_2eproto_impl();
  friend void  protobuf_AddDesc_proto_2eproto_impl();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer> ClientToServer_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerControl

// optional .proto.PowerControl.PowerAction action = 1;
inline void PowerControl::clear_action() {
  action_ = 0;
}
inline ::proto::PowerControl_PowerAction PowerControl::action() const {
  // @@protoc_insertion_point(field_get:proto.PowerControl.action)
  return static_cast< ::proto::PowerControl_PowerAction >(action_);
}
inline void PowerControl::set_action(::proto::PowerControl_PowerAction value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.PowerControl.action)
}

inline const PowerControl* PowerControl::internal_default_instance() {
  return &PowerControl_default_instance_.get();
}
// -------------------------------------------------------------------

// Bell

// optional bool dummy = 1;
inline void Bell::clear_dummy() {
  dummy_ = false;
}
inline bool Bell::dummy() const {
  // @@protoc_insertion_point(field_get:proto.Bell.dummy)
  return dummy_;
}
inline void Bell::set_dummy(bool value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.Bell.dummy)
}

inline const Bell* Bell::internal_default_instance() {
  return &Bell_default_instance_.get();
}
// -------------------------------------------------------------------

// TextChat

// optional string message = 1;
inline void TextChat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextChat::message() const {
  // @@protoc_insertion_point(field_get:proto.TextChat.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextChat::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.TextChat.message)
}
inline void TextChat::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TextChat.message)
}
inline void TextChat::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TextChat.message)
}
inline ::std::string* TextChat::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:proto.TextChat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextChat::release_message() {
  // @@protoc_insertion_point(field_release:proto.TextChat.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.TextChat.message)
}

inline const TextChat* TextChat::internal_default_instance() {
  return &TextChat_default_instance_.get();
}
// -------------------------------------------------------------------

// KeyEvent

// optional int32 keycode = 1;
inline void KeyEvent::clear_keycode() {
  keycode_ = 0;
}
inline ::google::protobuf::int32 KeyEvent::keycode() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.keycode)
  return keycode_;
}
inline void KeyEvent::set_keycode(::google::protobuf::int32 value) {
  
  keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.keycode)
}

// optional bool extended = 2;
inline void KeyEvent::clear_extended() {
  extended_ = false;
}
inline bool KeyEvent::extended() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.extended)
  return extended_;
}
inline void KeyEvent::set_extended(bool value) {
  
  extended_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.extended)
}

// optional bool pressed = 3;
inline void KeyEvent::clear_pressed() {
  pressed_ = false;
}
inline bool KeyEvent::pressed() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.pressed)
  return pressed_;
}
inline void KeyEvent::set_pressed(bool value) {
  
  pressed_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.pressed)
}

inline const KeyEvent* KeyEvent::internal_default_instance() {
  return &KeyEvent_default_instance_.get();
}
// -------------------------------------------------------------------

// PointerEvent

// optional int32 mask = 1;
inline void PointerEvent::clear_mask() {
  mask_ = 0;
}
inline ::google::protobuf::int32 PointerEvent::mask() const {
  // @@protoc_insertion_point(field_get:proto.PointerEvent.mask)
  return mask_;
}
inline void PointerEvent::set_mask(::google::protobuf::int32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:proto.PointerEvent.mask)
}

// optional int32 x = 2;
inline void PointerEvent::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 PointerEvent::x() const {
  // @@protoc_insertion_point(field_get:proto.PointerEvent.x)
  return x_;
}
inline void PointerEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.PointerEvent.x)
}

// optional int32 y = 3;
inline void PointerEvent::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 PointerEvent::y() const {
  // @@protoc_insertion_point(field_get:proto.PointerEvent.y)
  return y_;
}
inline void PointerEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.PointerEvent.y)
}

inline const PointerEvent* PointerEvent::internal_default_instance() {
  return &PointerEvent_default_instance_.get();
}
// -------------------------------------------------------------------

// Clipboard

// optional string mime_type = 1;
inline void Clipboard::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Clipboard::mime_type() const {
  // @@protoc_insertion_point(field_get:proto.Clipboard.mime_type)
  return mime_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Clipboard::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Clipboard.mime_type)
}
inline void Clipboard::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Clipboard.mime_type)
}
inline void Clipboard::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Clipboard.mime_type)
}
inline ::std::string* Clipboard::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.Clipboard.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Clipboard::release_mime_type() {
  // @@protoc_insertion_point(field_release:proto.Clipboard.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Clipboard::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:proto.Clipboard.mime_type)
}

// optional bytes data = 2;
inline void Clipboard::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Clipboard::data() const {
  // @@protoc_insertion_point(field_get:proto.Clipboard.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Clipboard::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Clipboard.data)
}
inline void Clipboard::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Clipboard.data)
}
inline void Clipboard::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Clipboard.data)
}
inline ::std::string* Clipboard::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.Clipboard.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Clipboard::release_data() {
  // @@protoc_insertion_point(field_release:proto.Clipboard.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Clipboard::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.Clipboard.data)
}

inline const Clipboard* Clipboard::internal_default_instance() {
  return &Clipboard_default_instance_.get();
}
// -------------------------------------------------------------------

// ClipboardRequest

// optional bool dummy = 1;
inline void ClipboardRequest::clear_dummy() {
  dummy_ = false;
}
inline bool ClipboardRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardRequest.dummy)
  return dummy_;
}
inline void ClipboardRequest::set_dummy(bool value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.ClipboardRequest.dummy)
}

inline const ClipboardRequest* ClipboardRequest::internal_default_instance() {
  return &ClipboardRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ClipboardControl

// optional bool auto_send = 1;
inline void ClipboardControl::clear_auto_send() {
  auto_send_ = false;
}
inline bool ClipboardControl::auto_send() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardControl.auto_send)
  return auto_send_;
}
inline void ClipboardControl::set_auto_send(bool value) {
  
  auto_send_ = value;
  // @@protoc_insertion_point(field_set:proto.ClipboardControl.auto_send)
}

inline const ClipboardControl* ClipboardControl::internal_default_instance() {
  return &ClipboardControl_default_instance_.get();
}
// -------------------------------------------------------------------

// CursorShape

// optional int32 width = 1;
inline void CursorShape::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.width)
  return width_;
}
inline void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.width)
}

// optional int32 height = 2;
inline void CursorShape::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.height)
  return height_;
}
inline void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.height)
}

// optional int32 hotspot_x = 3;
inline void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
inline void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_x)
}

// optional int32 hotspot_y = 4;
inline void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
inline void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_y)
}

// optional int32 bits_per_pixel = 5;
inline void CursorShape::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
}
inline ::google::protobuf::int32 CursorShape::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.bits_per_pixel)
  return bits_per_pixel_;
}
inline void CursorShape::set_bits_per_pixel(::google::protobuf::int32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.bits_per_pixel)
}

// optional bytes color = 6;
inline void CursorShape::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CursorShape::color() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CursorShape.color)
}
inline void CursorShape::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CursorShape.color)
}
inline void CursorShape::set_color(const void* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CursorShape.color)
}
inline ::std::string* CursorShape::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:proto.CursorShape.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CursorShape::release_color() {
  // @@protoc_insertion_point(field_release:proto.CursorShape.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:proto.CursorShape.color)
}

// optional bytes mask = 7;
inline void CursorShape::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CursorShape::mask() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.mask)
  return mask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CursorShape.mask)
}
inline void CursorShape::set_mask(const char* value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CursorShape.mask)
}
inline void CursorShape::set_mask(const void* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CursorShape.mask)
}
inline ::std::string* CursorShape::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:proto.CursorShape.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CursorShape::release_mask() {
  // @@protoc_insertion_point(field_release:proto.CursorShape.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:proto.CursorShape.mask)
}

inline const CursorShape* CursorShape::internal_default_instance() {
  return &CursorShape_default_instance_.get();
}
// -------------------------------------------------------------------

// CursorShapeControl

// optional bool enable = 1;
inline void CursorShapeControl::clear_enable() {
  enable_ = false;
}
inline bool CursorShapeControl::enable() const {
  // @@protoc_insertion_point(field_get:proto.CursorShapeControl.enable)
  return enable_;
}
inline void CursorShapeControl::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShapeControl.enable)
}

inline const CursorShapeControl* CursorShapeControl::internal_default_instance() {
  return &CursorShapeControl_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoRect

// optional int32 x = 1;
inline void VideoRect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 VideoRect::x() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.x)
  return x_;
}
inline void VideoRect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.x)
}

// optional int32 y = 2;
inline void VideoRect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 VideoRect::y() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.y)
  return y_;
}
inline void VideoRect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.y)
}

// optional int32 width = 3;
inline void VideoRect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoRect::width() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.width)
  return width_;
}
inline void VideoRect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.width)
}

// optional int32 height = 4;
inline void VideoRect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoRect::height() const {
  // @@protoc_insertion_point(field_get:proto.VideoRect.height)
  return height_;
}
inline void VideoRect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoRect.height)
}

inline const VideoRect* VideoRect::internal_default_instance() {
  return &VideoRect_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPixelFormat

// optional int32 bits_per_pixel = 1;
inline void VideoPixelFormat::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.bits_per_pixel)
  return bits_per_pixel_;
}
inline void VideoPixelFormat::set_bits_per_pixel(::google::protobuf::int32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.bits_per_pixel)
}

// optional int32 red_max = 2;
inline void VideoPixelFormat::clear_red_max() {
  red_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::red_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.red_max)
  return red_max_;
}
inline void VideoPixelFormat::set_red_max(::google::protobuf::int32 value) {
  
  red_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.red_max)
}

// optional int32 green_max = 3;
inline void VideoPixelFormat::clear_green_max() {
  green_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::green_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.green_max)
  return green_max_;
}
inline void VideoPixelFormat::set_green_max(::google::protobuf::int32 value) {
  
  green_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.green_max)
}

// optional int32 blue_max = 4;
inline void VideoPixelFormat::clear_blue_max() {
  blue_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::blue_max() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.blue_max)
  return blue_max_;
}
inline void VideoPixelFormat::set_blue_max(::google::protobuf::int32 value) {
  
  blue_max_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.blue_max)
}

// optional int32 red_shift = 5;
inline void VideoPixelFormat::clear_red_shift() {
  red_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::red_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.red_shift)
  return red_shift_;
}
inline void VideoPixelFormat::set_red_shift(::google::protobuf::int32 value) {
  
  red_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.red_shift)
}

// optional int32 green_shift = 6;
inline void VideoPixelFormat::clear_green_shift() {
  green_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::green_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.green_shift)
  return green_shift_;
}
inline void VideoPixelFormat::set_green_shift(::google::protobuf::int32 value) {
  
  green_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.green_shift)
}

// optional int32 blue_shift = 7;
inline void VideoPixelFormat::clear_blue_shift() {
  blue_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::blue_shift() const {
  // @@protoc_insertion_point(field_get:proto.VideoPixelFormat.blue_shift)
  return blue_shift_;
}
inline void VideoPixelFormat::set_blue_shift(::google::protobuf::int32 value) {
  
  blue_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPixelFormat.blue_shift)
}

inline const VideoPixelFormat* VideoPixelFormat::internal_default_instance() {
  return &VideoPixelFormat_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoSize

// optional int32 width = 1;
inline void VideoSize::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoSize::width() const {
  // @@protoc_insertion_point(field_get:proto.VideoSize.width)
  return width_;
}
inline void VideoSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoSize.width)
}

// optional int32 height = 2;
inline void VideoSize::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoSize::height() const {
  // @@protoc_insertion_point(field_get:proto.VideoSize.height)
  return height_;
}
inline void VideoSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoSize.height)
}

inline const VideoSize* VideoSize::internal_default_instance() {
  return &VideoSize_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPacketFormat

// optional int32 encoding = 1;
inline void VideoPacketFormat::clear_encoding() {
  encoding_ = 0;
}
inline ::google::protobuf::int32 VideoPacketFormat::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.encoding)
  return encoding_;
}
inline void VideoPacketFormat::set_encoding(::google::protobuf::int32 value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.encoding)
}

// optional .proto.VideoSize screen_size = 2;
inline bool VideoPacketFormat::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
inline void VideoPacketFormat::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
inline const ::proto::VideoSize& VideoPacketFormat::screen_size() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::proto::VideoSize::internal_default_instance();
}
inline ::proto::VideoSize* VideoPacketFormat::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::proto::VideoSize;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.screen_size)
  return screen_size_;
}
inline ::proto::VideoSize* VideoPacketFormat::release_screen_size() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.screen_size)
  
  ::proto::VideoSize* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_screen_size(::proto::VideoSize* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.screen_size)
}

// optional .proto.VideoPixelFormat pixel_format = 3;
inline bool VideoPacketFormat::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void VideoPacketFormat::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::proto::VideoPixelFormat& VideoPacketFormat::pixel_format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::proto::VideoPixelFormat::internal_default_instance();
}
inline ::proto::VideoPixelFormat* VideoPacketFormat::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.pixel_format)
  return pixel_format_;
}
inline ::proto::VideoPixelFormat* VideoPacketFormat::release_pixel_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.pixel_format)
  
  ::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.pixel_format)
}

inline const VideoPacketFormat* VideoPacketFormat::internal_default_instance() {
  return &VideoPacketFormat_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPacket

// optional int32 flags = 1;
inline void VideoPacket::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 VideoPacket::flags() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.flags)
  return flags_;
}
inline void VideoPacket::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacket.flags)
}

// optional .proto.VideoPacketFormat format = 2;
inline bool VideoPacket::has_format() const {
  return this != internal_default_instance() && format_ != NULL;
}
inline void VideoPacket::clear_format() {
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
}
inline const ::proto::VideoPacketFormat& VideoPacket::format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.format)
  return format_ != NULL ? *format_
                         : *::proto::VideoPacketFormat::internal_default_instance();
}
inline ::proto::VideoPacketFormat* VideoPacket::mutable_format() {
  
  if (format_ == NULL) {
    format_ = new ::proto::VideoPacketFormat;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.format)
  return format_;
}
inline ::proto::VideoPacketFormat* VideoPacket::release_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.format)
  
  ::proto::VideoPacketFormat* temp = format_;
  format_ = NULL;
  return temp;
}
inline void VideoPacket::set_allocated_format(::proto::VideoPacketFormat* format) {
  delete format_;
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.format)
}

// repeated .proto.VideoRect changed_rect = 3;
inline int VideoPacket::changed_rect_size() const {
  return changed_rect_.size();
}
inline void VideoPacket::clear_changed_rect() {
  changed_rect_.Clear();
}
inline const ::proto::VideoRect& VideoPacket::changed_rect(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.changed_rect)
  return changed_rect_.Get(index);
}
inline ::proto::VideoRect* VideoPacket::mutable_changed_rect(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.changed_rect)
  return changed_rect_.Mutable(index);
}
inline ::proto::VideoRect* VideoPacket::add_changed_rect() {
  // @@protoc_insertion_point(field_add:proto.VideoPacket.changed_rect)
  return changed_rect_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::VideoRect >*
VideoPacket::mutable_changed_rect() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoPacket.changed_rect)
  return &changed_rect_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::VideoRect >&
VideoPacket::changed_rect() const {
  // @@protoc_insertion_point(field_list:proto.VideoPacket.changed_rect)
  return changed_rect_;
}

// optional bytes data = 4;
inline void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.VideoPacket.data)
}
inline ::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.data)
}

inline const VideoPacket* VideoPacket::internal_default_instance() {
  return &VideoPacket_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoControl

// optional bool enable = 1;
inline void VideoControl::clear_enable() {
  enable_ = false;
}
inline bool VideoControl::enable() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.enable)
  return enable_;
}
inline void VideoControl::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoControl.enable)
}

// optional int32 encoding = 2;
inline void VideoControl::clear_encoding() {
  encoding_ = 0;
}
inline ::google::protobuf::int32 VideoControl::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.encoding)
  return encoding_;
}
inline void VideoControl::set_encoding(::google::protobuf::int32 value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoControl.encoding)
}

// optional .proto.VideoPixelFormat pixel_format = 3;
inline bool VideoControl::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void VideoControl::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::proto::VideoPixelFormat& VideoControl::pixel_format() const {
  // @@protoc_insertion_point(field_get:proto.VideoControl.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::proto::VideoPixelFormat::internal_default_instance();
}
inline ::proto::VideoPixelFormat* VideoControl::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoControl.pixel_format)
  return pixel_format_;
}
inline ::proto::VideoPixelFormat* VideoControl::release_pixel_format() {
  // @@protoc_insertion_point(field_release:proto.VideoControl.pixel_format)
  
  ::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void VideoControl::set_allocated_pixel_format(::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoControl.pixel_format)
}

inline const VideoControl* VideoControl::internal_default_instance() {
  return &VideoControl_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerToClient

// optional .proto.VideoPacket video_packet = 1;
inline bool ServerToClient::has_video_packet() const {
  return this != internal_default_instance() && video_packet_ != NULL;
}
inline void ServerToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
}
inline const ::proto::VideoPacket& ServerToClient::video_packet() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.video_packet)
  return video_packet_ != NULL ? *video_packet_
                         : *::proto::VideoPacket::internal_default_instance();
}
inline ::proto::VideoPacket* ServerToClient::mutable_video_packet() {
  
  if (video_packet_ == NULL) {
    video_packet_ = new ::proto::VideoPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.video_packet)
  return video_packet_;
}
inline ::proto::VideoPacket* ServerToClient::release_video_packet() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.video_packet)
  
  ::proto::VideoPacket* temp = video_packet_;
  video_packet_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_video_packet(::proto::VideoPacket* video_packet) {
  delete video_packet_;
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.video_packet)
}

// optional .proto.CursorShape cursor = 2;
inline bool ServerToClient::has_cursor() const {
  return this != internal_default_instance() && cursor_ != NULL;
}
inline void ServerToClient::clear_cursor() {
  if (GetArenaNoVirtual() == NULL && cursor_ != NULL) delete cursor_;
  cursor_ = NULL;
}
inline const ::proto::CursorShape& ServerToClient::cursor() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.cursor)
  return cursor_ != NULL ? *cursor_
                         : *::proto::CursorShape::internal_default_instance();
}
inline ::proto::CursorShape* ServerToClient::mutable_cursor() {
  
  if (cursor_ == NULL) {
    cursor_ = new ::proto::CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.cursor)
  return cursor_;
}
inline ::proto::CursorShape* ServerToClient::release_cursor() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.cursor)
  
  ::proto::CursorShape* temp = cursor_;
  cursor_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_cursor(::proto::CursorShape* cursor) {
  delete cursor_;
  cursor_ = cursor;
  if (cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.cursor)
}

// optional .proto.Clipboard clipboard = 3;
inline bool ServerToClient::has_clipboard() const {
  return this != internal_default_instance() && clipboard_ != NULL;
}
inline void ServerToClient::clear_clipboard() {
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
}
inline const ::proto::Clipboard& ServerToClient::clipboard() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.clipboard)
  return clipboard_ != NULL ? *clipboard_
                         : *::proto::Clipboard::internal_default_instance();
}
inline ::proto::Clipboard* ServerToClient::mutable_clipboard() {
  
  if (clipboard_ == NULL) {
    clipboard_ = new ::proto::Clipboard;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.clipboard)
  return clipboard_;
}
inline ::proto::Clipboard* ServerToClient::release_clipboard() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.clipboard)
  
  ::proto::Clipboard* temp = clipboard_;
  clipboard_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_clipboard(::proto::Clipboard* clipboard) {
  delete clipboard_;
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.clipboard)
}

// optional .proto.TextChat text_chat = 4;
inline bool ServerToClient::has_text_chat() const {
  return this != internal_default_instance() && text_chat_ != NULL;
}
inline void ServerToClient::clear_text_chat() {
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
}
inline const ::proto::TextChat& ServerToClient::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.ServerToClient.text_chat)
  return text_chat_ != NULL ? *text_chat_
                         : *::proto::TextChat::internal_default_instance();
}
inline ::proto::TextChat* ServerToClient::mutable_text_chat() {
  
  if (text_chat_ == NULL) {
    text_chat_ = new ::proto::TextChat;
  }
  // @@protoc_insertion_point(field_mutable:proto.ServerToClient.text_chat)
  return text_chat_;
}
inline ::proto::TextChat* ServerToClient::release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.ServerToClient.text_chat)
  
  ::proto::TextChat* temp = text_chat_;
  text_chat_ = NULL;
  return temp;
}
inline void ServerToClient::set_allocated_text_chat(::proto::TextChat* text_chat) {
  delete text_chat_;
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ServerToClient.text_chat)
}

inline const ServerToClient* ServerToClient::internal_default_instance() {
  return &ServerToClient_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientToServer

// optional .proto.VideoControl video_control = 1;
inline bool ClientToServer::has_video_control() const {
  return this != internal_default_instance() && video_control_ != NULL;
}
inline void ClientToServer::clear_video_control() {
  if (GetArenaNoVirtual() == NULL && video_control_ != NULL) delete video_control_;
  video_control_ = NULL;
}
inline const ::proto::VideoControl& ClientToServer::video_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.video_control)
  return video_control_ != NULL ? *video_control_
                         : *::proto::VideoControl::internal_default_instance();
}
inline ::proto::VideoControl* ClientToServer::mutable_video_control() {
  
  if (video_control_ == NULL) {
    video_control_ = new ::proto::VideoControl;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.video_control)
  return video_control_;
}
inline ::proto::VideoControl* ClientToServer::release_video_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.video_control)
  
  ::proto::VideoControl* temp = video_control_;
  video_control_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_video_control(::proto::VideoControl* video_control) {
  delete video_control_;
  video_control_ = video_control;
  if (video_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.video_control)
}

// optional .proto.CursorShapeControl cursor_shape_control = 2;
inline bool ClientToServer::has_cursor_shape_control() const {
  return this != internal_default_instance() && cursor_shape_control_ != NULL;
}
inline void ClientToServer::clear_cursor_shape_control() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_control_ != NULL) delete cursor_shape_control_;
  cursor_shape_control_ = NULL;
}
inline const ::proto::CursorShapeControl& ClientToServer::cursor_shape_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.cursor_shape_control)
  return cursor_shape_control_ != NULL ? *cursor_shape_control_
                         : *::proto::CursorShapeControl::internal_default_instance();
}
inline ::proto::CursorShapeControl* ClientToServer::mutable_cursor_shape_control() {
  
  if (cursor_shape_control_ == NULL) {
    cursor_shape_control_ = new ::proto::CursorShapeControl;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.cursor_shape_control)
  return cursor_shape_control_;
}
inline ::proto::CursorShapeControl* ClientToServer::release_cursor_shape_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.cursor_shape_control)
  
  ::proto::CursorShapeControl* temp = cursor_shape_control_;
  cursor_shape_control_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_cursor_shape_control(::proto::CursorShapeControl* cursor_shape_control) {
  delete cursor_shape_control_;
  cursor_shape_control_ = cursor_shape_control;
  if (cursor_shape_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.cursor_shape_control)
}

// optional .proto.ClipboardControl clipboard_control = 3;
inline bool ClientToServer::has_clipboard_control() const {
  return this != internal_default_instance() && clipboard_control_ != NULL;
}
inline void ClientToServer::clear_clipboard_control() {
  if (GetArenaNoVirtual() == NULL && clipboard_control_ != NULL) delete clipboard_control_;
  clipboard_control_ = NULL;
}
inline const ::proto::ClipboardControl& ClientToServer::clipboard_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard_control)
  return clipboard_control_ != NULL ? *clipboard_control_
                         : *::proto::ClipboardControl::internal_default_instance();
}
inline ::proto::ClipboardControl* ClientToServer::mutable_clipboard_control() {
  
  if (clipboard_control_ == NULL) {
    clipboard_control_ = new ::proto::ClipboardControl;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard_control)
  return clipboard_control_;
}
inline ::proto::ClipboardControl* ClientToServer::release_clipboard_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard_control)
  
  ::proto::ClipboardControl* temp = clipboard_control_;
  clipboard_control_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_clipboard_control(::proto::ClipboardControl* clipboard_control) {
  delete clipboard_control_;
  clipboard_control_ = clipboard_control;
  if (clipboard_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard_control)
}

// optional .proto.ClipboardRequest clipboard_request = 4;
inline bool ClientToServer::has_clipboard_request() const {
  return this != internal_default_instance() && clipboard_request_ != NULL;
}
inline void ClientToServer::clear_clipboard_request() {
  if (GetArenaNoVirtual() == NULL && clipboard_request_ != NULL) delete clipboard_request_;
  clipboard_request_ = NULL;
}
inline const ::proto::ClipboardRequest& ClientToServer::clipboard_request() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard_request)
  return clipboard_request_ != NULL ? *clipboard_request_
                         : *::proto::ClipboardRequest::internal_default_instance();
}
inline ::proto::ClipboardRequest* ClientToServer::mutable_clipboard_request() {
  
  if (clipboard_request_ == NULL) {
    clipboard_request_ = new ::proto::ClipboardRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard_request)
  return clipboard_request_;
}
inline ::proto::ClipboardRequest* ClientToServer::release_clipboard_request() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard_request)
  
  ::proto::ClipboardRequest* temp = clipboard_request_;
  clipboard_request_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_clipboard_request(::proto::ClipboardRequest* clipboard_request) {
  delete clipboard_request_;
  clipboard_request_ = clipboard_request;
  if (clipboard_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard_request)
}

// optional .proto.Clipboard clipboard = 5;
inline bool ClientToServer::has_clipboard() const {
  return this != internal_default_instance() && clipboard_ != NULL;
}
inline void ClientToServer::clear_clipboard() {
  if (GetArenaNoVirtual() == NULL && clipboard_ != NULL) delete clipboard_;
  clipboard_ = NULL;
}
inline const ::proto::Clipboard& ClientToServer::clipboard() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.clipboard)
  return clipboard_ != NULL ? *clipboard_
                         : *::proto::Clipboard::internal_default_instance();
}
inline ::proto::Clipboard* ClientToServer::mutable_clipboard() {
  
  if (clipboard_ == NULL) {
    clipboard_ = new ::proto::Clipboard;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.clipboard)
  return clipboard_;
}
inline ::proto::Clipboard* ClientToServer::release_clipboard() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.clipboard)
  
  ::proto::Clipboard* temp = clipboard_;
  clipboard_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_clipboard(::proto::Clipboard* clipboard) {
  delete clipboard_;
  clipboard_ = clipboard;
  if (clipboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.clipboard)
}

// optional .proto.PointerEvent pointer_event = 6;
inline bool ClientToServer::has_pointer_event() const {
  return this != internal_default_instance() && pointer_event_ != NULL;
}
inline void ClientToServer::clear_pointer_event() {
  if (GetArenaNoVirtual() == NULL && pointer_event_ != NULL) delete pointer_event_;
  pointer_event_ = NULL;
}
inline const ::proto::PointerEvent& ClientToServer::pointer_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.pointer_event)
  return pointer_event_ != NULL ? *pointer_event_
                         : *::proto::PointerEvent::internal_default_instance();
}
inline ::proto::PointerEvent* ClientToServer::mutable_pointer_event() {
  
  if (pointer_event_ == NULL) {
    pointer_event_ = new ::proto::PointerEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.pointer_event)
  return pointer_event_;
}
inline ::proto::PointerEvent* ClientToServer::release_pointer_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.pointer_event)
  
  ::proto::PointerEvent* temp = pointer_event_;
  pointer_event_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_pointer_event(::proto::PointerEvent* pointer_event) {
  delete pointer_event_;
  pointer_event_ = pointer_event;
  if (pointer_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.pointer_event)
}

// optional .proto.KeyEvent key_event = 7;
inline bool ClientToServer::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
inline void ClientToServer::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
inline const ::proto::KeyEvent& ClientToServer::key_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::proto::KeyEvent::internal_default_instance();
}
inline ::proto::KeyEvent* ClientToServer::mutable_key_event() {
  
  if (key_event_ == NULL) {
    key_event_ = new ::proto::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.key_event)
  return key_event_;
}
inline ::proto::KeyEvent* ClientToServer::release_key_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.key_event)
  
  ::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_key_event(::proto::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.key_event)
}

// optional .proto.Bell bell = 8;
inline bool ClientToServer::has_bell() const {
  return this != internal_default_instance() && bell_ != NULL;
}
inline void ClientToServer::clear_bell() {
  if (GetArenaNoVirtual() == NULL && bell_ != NULL) delete bell_;
  bell_ = NULL;
}
inline const ::proto::Bell& ClientToServer::bell() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.bell)
  return bell_ != NULL ? *bell_
                         : *::proto::Bell::internal_default_instance();
}
inline ::proto::Bell* ClientToServer::mutable_bell() {
  
  if (bell_ == NULL) {
    bell_ = new ::proto::Bell;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.bell)
  return bell_;
}
inline ::proto::Bell* ClientToServer::release_bell() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.bell)
  
  ::proto::Bell* temp = bell_;
  bell_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_bell(::proto::Bell* bell) {
  delete bell_;
  bell_ = bell;
  if (bell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.bell)
}

// optional .proto.TextChat text_chat = 9;
inline bool ClientToServer::has_text_chat() const {
  return this != internal_default_instance() && text_chat_ != NULL;
}
inline void ClientToServer::clear_text_chat() {
  if (GetArenaNoVirtual() == NULL && text_chat_ != NULL) delete text_chat_;
  text_chat_ = NULL;
}
inline const ::proto::TextChat& ClientToServer::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.text_chat)
  return text_chat_ != NULL ? *text_chat_
                         : *::proto::TextChat::internal_default_instance();
}
inline ::proto::TextChat* ClientToServer::mutable_text_chat() {
  
  if (text_chat_ == NULL) {
    text_chat_ = new ::proto::TextChat;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.text_chat)
  return text_chat_;
}
inline ::proto::TextChat* ClientToServer::release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.text_chat)
  
  ::proto::TextChat* temp = text_chat_;
  text_chat_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_text_chat(::proto::TextChat* text_chat) {
  delete text_chat_;
  text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.text_chat)
}

// optional .proto.PowerControl power_control = 10;
inline bool ClientToServer::has_power_control() const {
  return this != internal_default_instance() && power_control_ != NULL;
}
inline void ClientToServer::clear_power_control() {
  if (GetArenaNoVirtual() == NULL && power_control_ != NULL) delete power_control_;
  power_control_ = NULL;
}
inline const ::proto::PowerControl& ClientToServer::power_control() const {
  // @@protoc_insertion_point(field_get:proto.ClientToServer.power_control)
  return power_control_ != NULL ? *power_control_
                         : *::proto::PowerControl::internal_default_instance();
}
inline ::proto::PowerControl* ClientToServer::mutable_power_control() {
  
  if (power_control_ == NULL) {
    power_control_ = new ::proto::PowerControl;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToServer.power_control)
  return power_control_;
}
inline ::proto::PowerControl* ClientToServer::release_power_control() {
  // @@protoc_insertion_point(field_release:proto.ClientToServer.power_control)
  
  ::proto::PowerControl* temp = power_control_;
  power_control_ = NULL;
  return temp;
}
inline void ClientToServer::set_allocated_power_control(::proto::PowerControl* power_control) {
  delete power_control_;
  power_control_ = power_control;
  if (power_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToServer.power_control)
}

inline const ClientToServer* ClientToServer::internal_default_instance() {
  return &ClientToServer_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::PowerControl_PowerAction> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::PointerEvent_ButtonMask> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::VideoPacket_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::VideoEncoding> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2eproto__INCLUDED

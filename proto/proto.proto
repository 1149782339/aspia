syntax = "proto3";

option optimize_for = LITE_RUNTIME;

import "auth.proto";
import "video.proto";

package aspia.proto;

//
// TODO: Протокол передачи файлов
//

//
// Отправляется только от клиента к серверу
//
message PowerControl
{
    enum Action
    {
        SHUTDOWN  = 0; // Выключение компьютера.
        REBOOT    = 1; // Перезагрузка оперционной системы, в которой запущен сервер
        HIBERNATE = 2; // Переход в режим гибернации
        SUSPEND   = 3; // Переход в режим сна
        LOGOFF    = 4; // Завершение сеанса текущего пользователя
    }

    Action action = 1;
}

//
// Отправляется только от клиента к серверу
//
message KeyEvent
{
    // The keyboard (Caps/Num) lock states.
    enum Flags
    {
        UNKNOWN  = 0;
        CAPSLOCK = 1;
        NUMLOCK  = 2;
        EXTENDED = 4;
        PRESSED  = 8;
    }

    uint32 keycode = 1; // Windows virtual key code
    uint32 flags = 2;
}

//
// Отправляется только от клиента к серверу
//
message PointerEvent
{
    enum ButtonMask
    {
        EMPTY         = 0;
        LEFT_BUTTON   = 1;
        MIDDLE_BUTTON = 2;
        RIGHT_BUTTON  = 4;
        WHEEL_UP      = 8;
        WHEEL_DOWN    = 16;
    }

    uint32 mask = 1; // Button mask
    int32 x = 2;    // x position
    int32 y = 3;    // y position
}

enum ClipboardEncoding
{
    CLIPBOARD_ENCODING_UNKNOWN = 0;
    CLIPBOARD_ENCODING_RAW     = 1;
    CLIPBOARD_ENCODING_ZLIB    = 2;
}

//
// Отправляется в обоих направлениях между сервером и клиентом
//
message Clipboard
{
    ClipboardEncoding encoding = 1;

    string mime_type = 2;
    bytes data = 3;
}

//
// Отправляется только от клиента к серверу
//
message ClipboardControl
{
    enum Flags
    {
        DISABLE_AUTOSEND = 0;
        ENABLE_AUTOSEND  = 1;
        REQUESTED        = 2;
    }

    uint32 flags = 1;
}

enum CursorShapeEncoding
{
    CURSOR_SHAPE_ENCODING_UNKNOWN = 0;
    CURSOR_SHAPE_ENCODING_RAW     = 1;
    CURSOR_SHAPE_ENCODING_ZLIB    = 2;
    CURSOR_SHAPE_ENCODING_CACHE   = 4;
}

//
// Отправляется только от сервера к клиенту.
//
message CursorShape
{
    CursorShapeEncoding encoding = 1;

    int32 index = 2;

    // Width, height (in screen pixels) of the cursor.
    int32 width  = 3;
    int32 height = 4;

    // X,Y coordinates (relative to upper-left corner) of the cursor hotspot.
    int32 hotspot_x = 5;
    int32 hotspot_y = 6;

    bytes color = 7;
    bytes mask  = 8;
}

message CursorShapeControl
{
    //
    // Если поле установлено в true, то сервер должен начать посылать изображение курсора (сообщение CursorShape).
    // Если поле установлено в false, то сервер должен прекратить посылать изображение курсора.
    // Сервер не обязан подчиняться данной команде для приостановки передачи изображения курсора.
    //
    bool enable = 1;
}

message BellEvent
{
    uint32 flags = 1;
}

//
// Сообщения, которые отправляются от хоста к клиенту
//
message HostToClient
{
    VideoPacket video_packet = 1;
    CursorShape cursor       = 2;
    Clipboard clipboard      = 3;
}

message Control
{
    VideoControl video              = 1;
    CursorShapeControl cursor_shape = 2;
    ClipboardControl clipboard      = 3;
    PowerControl power              = 4;
}

//
// Сообщения, которые отправляются от клиента к хосту
//
message ClientToHost
{
    PointerEvent pointer_event = 1;
    KeyEvent key_event         = 2;
    BellEvent bell_event       = 3;
    Clipboard clipboard        = 4;
    Control control            = 5;
}

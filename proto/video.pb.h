// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#ifndef PROTOBUF_video_2eproto__INCLUDED
#define PROTOBUF_video_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_video_2eproto();
void protobuf_InitDefaults_video_2eproto();
void protobuf_AssignDesc_video_2eproto();
void protobuf_ShutdownFile_video_2eproto();

class VideoControl;
class VideoPacket;
class VideoPacketFormat;
class VideoPixelFormat;
class VideoRect;
class VideoSize;

enum VideoPacket_Flags {
  VideoPacket_Flags_PARTITION_PACKET = 0,
  VideoPacket_Flags_FIRST_PACKET = 1,
  VideoPacket_Flags_LAST_PACKET = 2,
  VideoPacket_Flags_VideoPacket_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoPacket_Flags_VideoPacket_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoPacket_Flags_IsValid(int value);
const VideoPacket_Flags VideoPacket_Flags_Flags_MIN = VideoPacket_Flags_PARTITION_PACKET;
const VideoPacket_Flags VideoPacket_Flags_Flags_MAX = VideoPacket_Flags_LAST_PACKET;
const int VideoPacket_Flags_Flags_ARRAYSIZE = VideoPacket_Flags_Flags_MAX + 1;

enum VideoControl_Flags {
  VideoControl_Flags_DISABLE_VIDEO = 0,
  VideoControl_Flags_ENABLE_VIDEO = 1,
  VideoControl_Flags_DISABLE_DESKTOP_EFFECTS = 2,
  VideoControl_Flags_VideoControl_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoControl_Flags_VideoControl_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoControl_Flags_IsValid(int value);
const VideoControl_Flags VideoControl_Flags_Flags_MIN = VideoControl_Flags_DISABLE_VIDEO;
const VideoControl_Flags VideoControl_Flags_Flags_MAX = VideoControl_Flags_DISABLE_DESKTOP_EFFECTS;
const int VideoControl_Flags_Flags_ARRAYSIZE = VideoControl_Flags_Flags_MAX + 1;

enum VideoEncoding {
  VIDEO_ENCODING_UNKNOWN = 0,
  VIDEO_ENCODING_ZLIB = 1,
  VIDEO_ENCODING_VP8 = 2,
  VIDEO_ENCODING_VP9 = 3,
  VideoEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoEncoding_IsValid(int value);
const VideoEncoding VideoEncoding_MIN = VIDEO_ENCODING_UNKNOWN;
const VideoEncoding VideoEncoding_MAX = VIDEO_ENCODING_VP9;
const int VideoEncoding_ARRAYSIZE = VideoEncoding_MAX + 1;

// ===================================================================

class VideoRect : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoRect) */ {
 public:
  VideoRect();
  virtual ~VideoRect();

  VideoRect(const VideoRect& from);

  inline VideoRect& operator=(const VideoRect& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoRect& default_instance();

  static const VideoRect* internal_default_instance();

  void Swap(VideoRect* other);

  // implements Message ----------------------------------------------

  inline VideoRect* New() const { return New(NULL); }

  VideoRect* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoRect& from);
  void MergeFrom(const VideoRect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRect* other);
  void UnsafeMergeFrom(const VideoRect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoRect)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoRect> VideoRect_default_instance_;

// -------------------------------------------------------------------

class VideoPixelFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoPixelFormat) */ {
 public:
  VideoPixelFormat();
  virtual ~VideoPixelFormat();

  VideoPixelFormat(const VideoPixelFormat& from);

  inline VideoPixelFormat& operator=(const VideoPixelFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPixelFormat& default_instance();

  static const VideoPixelFormat* internal_default_instance();

  void Swap(VideoPixelFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPixelFormat* New() const { return New(NULL); }

  VideoPixelFormat* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPixelFormat& from);
  void MergeFrom(const VideoPixelFormat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPixelFormat* other);
  void UnsafeMergeFrom(const VideoPixelFormat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bits_per_pixel = 1;
  void clear_bits_per_pixel();
  static const int kBitsPerPixelFieldNumber = 1;
  ::google::protobuf::int32 bits_per_pixel() const;
  void set_bits_per_pixel(::google::protobuf::int32 value);

  // optional int32 red_max = 2;
  void clear_red_max();
  static const int kRedMaxFieldNumber = 2;
  ::google::protobuf::int32 red_max() const;
  void set_red_max(::google::protobuf::int32 value);

  // optional int32 green_max = 3;
  void clear_green_max();
  static const int kGreenMaxFieldNumber = 3;
  ::google::protobuf::int32 green_max() const;
  void set_green_max(::google::protobuf::int32 value);

  // optional int32 blue_max = 4;
  void clear_blue_max();
  static const int kBlueMaxFieldNumber = 4;
  ::google::protobuf::int32 blue_max() const;
  void set_blue_max(::google::protobuf::int32 value);

  // optional int32 red_shift = 5;
  void clear_red_shift();
  static const int kRedShiftFieldNumber = 5;
  ::google::protobuf::int32 red_shift() const;
  void set_red_shift(::google::protobuf::int32 value);

  // optional int32 green_shift = 6;
  void clear_green_shift();
  static const int kGreenShiftFieldNumber = 6;
  ::google::protobuf::int32 green_shift() const;
  void set_green_shift(::google::protobuf::int32 value);

  // optional int32 blue_shift = 7;
  void clear_blue_shift();
  static const int kBlueShiftFieldNumber = 7;
  ::google::protobuf::int32 blue_shift() const;
  void set_blue_shift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoPixelFormat)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 bits_per_pixel_;
  ::google::protobuf::int32 red_max_;
  ::google::protobuf::int32 green_max_;
  ::google::protobuf::int32 blue_max_;
  ::google::protobuf::int32 red_shift_;
  ::google::protobuf::int32 green_shift_;
  ::google::protobuf::int32 blue_shift_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPixelFormat> VideoPixelFormat_default_instance_;

// -------------------------------------------------------------------

class VideoSize : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoSize) */ {
 public:
  VideoSize();
  virtual ~VideoSize();

  VideoSize(const VideoSize& from);

  inline VideoSize& operator=(const VideoSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoSize& default_instance();

  static const VideoSize* internal_default_instance();

  void Swap(VideoSize* other);

  // implements Message ----------------------------------------------

  inline VideoSize* New() const { return New(NULL); }

  VideoSize* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoSize& from);
  void MergeFrom(const VideoSize& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSize* other);
  void UnsafeMergeFrom(const VideoSize& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoSize)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoSize> VideoSize_default_instance_;

// -------------------------------------------------------------------

class VideoPacketFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoPacketFormat) */ {
 public:
  VideoPacketFormat();
  virtual ~VideoPacketFormat();

  VideoPacketFormat(const VideoPacketFormat& from);

  inline VideoPacketFormat& operator=(const VideoPacketFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacketFormat& default_instance();

  static const VideoPacketFormat* internal_default_instance();

  void Swap(VideoPacketFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPacketFormat* New() const { return New(NULL); }

  VideoPacketFormat* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPacketFormat& from);
  void MergeFrom(const VideoPacketFormat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacketFormat* other);
  void UnsafeMergeFrom(const VideoPacketFormat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .aspia.proto.VideoEncoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::aspia::proto::VideoEncoding encoding() const;
  void set_encoding(::aspia::proto::VideoEncoding value);

  // optional .aspia.proto.VideoSize screen_size = 2;
  bool has_screen_size() const;
  void clear_screen_size();
  static const int kScreenSizeFieldNumber = 2;
  const ::aspia::proto::VideoSize& screen_size() const;
  ::aspia::proto::VideoSize* mutable_screen_size();
  ::aspia::proto::VideoSize* release_screen_size();
  void set_allocated_screen_size(::aspia::proto::VideoSize* screen_size);

  // optional .aspia.proto.VideoPixelFormat pixel_format = 3;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 3;
  const ::aspia::proto::VideoPixelFormat& pixel_format() const;
  ::aspia::proto::VideoPixelFormat* mutable_pixel_format();
  ::aspia::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoPacketFormat)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::aspia::proto::VideoSize* screen_size_;
  ::aspia::proto::VideoPixelFormat* pixel_format_;
  int encoding_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPacketFormat> VideoPacketFormat_default_instance_;

// -------------------------------------------------------------------

class VideoPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoPacket) */ {
 public:
  VideoPacket();
  virtual ~VideoPacket();

  VideoPacket(const VideoPacket& from);

  inline VideoPacket& operator=(const VideoPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacket& default_instance();

  static const VideoPacket* internal_default_instance();

  void Swap(VideoPacket* other);

  // implements Message ----------------------------------------------

  inline VideoPacket* New() const { return New(NULL); }

  VideoPacket* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoPacket& from);
  void MergeFrom(const VideoPacket& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacket* other);
  void UnsafeMergeFrom(const VideoPacket& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef VideoPacket_Flags Flags;
  static const Flags PARTITION_PACKET =
    VideoPacket_Flags_PARTITION_PACKET;
  static const Flags FIRST_PACKET =
    VideoPacket_Flags_FIRST_PACKET;
  static const Flags LAST_PACKET =
    VideoPacket_Flags_LAST_PACKET;
  static inline bool Flags_IsValid(int value) {
    return VideoPacket_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    VideoPacket_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    VideoPacket_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    VideoPacket_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional .aspia.proto.VideoPacketFormat format = 2;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::aspia::proto::VideoPacketFormat& format() const;
  ::aspia::proto::VideoPacketFormat* mutable_format();
  ::aspia::proto::VideoPacketFormat* release_format();
  void set_allocated_format(::aspia::proto::VideoPacketFormat* format);

  // repeated .aspia.proto.VideoRect dirty_rect = 3;
  int dirty_rect_size() const;
  void clear_dirty_rect();
  static const int kDirtyRectFieldNumber = 3;
  const ::aspia::proto::VideoRect& dirty_rect(int index) const;
  ::aspia::proto::VideoRect* mutable_dirty_rect(int index);
  ::aspia::proto::VideoRect* add_dirty_rect();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >*
      mutable_dirty_rect();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >&
      dirty_rect() const;

  // optional bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoPacket)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect > dirty_rect_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::aspia::proto::VideoPacketFormat* format_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoPacket> VideoPacket_default_instance_;

// -------------------------------------------------------------------

class VideoControl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoControl) */ {
 public:
  VideoControl();
  virtual ~VideoControl();

  VideoControl(const VideoControl& from);

  inline VideoControl& operator=(const VideoControl& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoControl& default_instance();

  static const VideoControl* internal_default_instance();

  void Swap(VideoControl* other);

  // implements Message ----------------------------------------------

  inline VideoControl* New() const { return New(NULL); }

  VideoControl* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoControl& from);
  void MergeFrom(const VideoControl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoControl* other);
  void UnsafeMergeFrom(const VideoControl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef VideoControl_Flags Flags;
  static const Flags DISABLE_VIDEO =
    VideoControl_Flags_DISABLE_VIDEO;
  static const Flags ENABLE_VIDEO =
    VideoControl_Flags_ENABLE_VIDEO;
  static const Flags DISABLE_DESKTOP_EFFECTS =
    VideoControl_Flags_DISABLE_DESKTOP_EFFECTS;
  static inline bool Flags_IsValid(int value) {
    return VideoControl_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    VideoControl_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    VideoControl_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    VideoControl_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional .aspia.proto.VideoEncoding encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::aspia::proto::VideoEncoding encoding() const;
  void set_encoding(::aspia::proto::VideoEncoding value);

  // optional .aspia.proto.VideoPixelFormat pixel_format = 3;
  bool has_pixel_format() const;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 3;
  const ::aspia::proto::VideoPixelFormat& pixel_format() const;
  ::aspia::proto::VideoPixelFormat* mutable_pixel_format();
  ::aspia::proto::VideoPixelFormat* release_pixel_format();
  void set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format);

  // optional int32 update_interval = 4;
  void clear_update_interval();
  static const int kUpdateIntervalFieldNumber = 4;
  ::google::protobuf::int32 update_interval() const;
  void set_update_interval(::google::protobuf::int32 value);

  // optional int32 compress_ratio = 5;
  void clear_compress_ratio();
  static const int kCompressRatioFieldNumber = 5;
  ::google::protobuf::int32 compress_ratio() const;
  void set_compress_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoControl)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::aspia::proto::VideoPixelFormat* pixel_format_;
  ::google::protobuf::uint32 flags_;
  int encoding_;
  ::google::protobuf::int32 update_interval_;
  ::google::protobuf::int32 compress_ratio_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_video_2eproto_impl();
  friend void  protobuf_AddDesc_video_2eproto_impl();
  friend void protobuf_AssignDesc_video_2eproto();
  friend void protobuf_ShutdownFile_video_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoControl> VideoControl_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoRect

// optional int32 x = 1;
inline void VideoRect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 VideoRect::x() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.x)
  return x_;
}
inline void VideoRect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.x)
}

// optional int32 y = 2;
inline void VideoRect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 VideoRect::y() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.y)
  return y_;
}
inline void VideoRect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.y)
}

// optional int32 width = 3;
inline void VideoRect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoRect::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.width)
  return width_;
}
inline void VideoRect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.width)
}

// optional int32 height = 4;
inline void VideoRect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoRect::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoRect.height)
  return height_;
}
inline void VideoRect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoRect.height)
}

inline const VideoRect* VideoRect::internal_default_instance() {
  return &VideoRect_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPixelFormat

// optional int32 bits_per_pixel = 1;
inline void VideoPixelFormat::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.bits_per_pixel)
  return bits_per_pixel_;
}
inline void VideoPixelFormat::set_bits_per_pixel(::google::protobuf::int32 value) {
  
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.bits_per_pixel)
}

// optional int32 red_max = 2;
inline void VideoPixelFormat::clear_red_max() {
  red_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::red_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_max)
  return red_max_;
}
inline void VideoPixelFormat::set_red_max(::google::protobuf::int32 value) {
  
  red_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_max)
}

// optional int32 green_max = 3;
inline void VideoPixelFormat::clear_green_max() {
  green_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::green_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_max)
  return green_max_;
}
inline void VideoPixelFormat::set_green_max(::google::protobuf::int32 value) {
  
  green_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_max)
}

// optional int32 blue_max = 4;
inline void VideoPixelFormat::clear_blue_max() {
  blue_max_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::blue_max() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_max)
  return blue_max_;
}
inline void VideoPixelFormat::set_blue_max(::google::protobuf::int32 value) {
  
  blue_max_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_max)
}

// optional int32 red_shift = 5;
inline void VideoPixelFormat::clear_red_shift() {
  red_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::red_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.red_shift)
  return red_shift_;
}
inline void VideoPixelFormat::set_red_shift(::google::protobuf::int32 value) {
  
  red_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.red_shift)
}

// optional int32 green_shift = 6;
inline void VideoPixelFormat::clear_green_shift() {
  green_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::green_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.green_shift)
  return green_shift_;
}
inline void VideoPixelFormat::set_green_shift(::google::protobuf::int32 value) {
  
  green_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.green_shift)
}

// optional int32 blue_shift = 7;
inline void VideoPixelFormat::clear_blue_shift() {
  blue_shift_ = 0;
}
inline ::google::protobuf::int32 VideoPixelFormat::blue_shift() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPixelFormat.blue_shift)
  return blue_shift_;
}
inline void VideoPixelFormat::set_blue_shift(::google::protobuf::int32 value) {
  
  blue_shift_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPixelFormat.blue_shift)
}

inline const VideoPixelFormat* VideoPixelFormat::internal_default_instance() {
  return &VideoPixelFormat_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoSize

// optional int32 width = 1;
inline void VideoSize::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 VideoSize::width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.width)
  return width_;
}
inline void VideoSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.width)
}

// optional int32 height = 2;
inline void VideoSize::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 VideoSize::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoSize.height)
  return height_;
}
inline void VideoSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoSize.height)
}

inline const VideoSize* VideoSize::internal_default_instance() {
  return &VideoSize_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPacketFormat

// optional .aspia.proto.VideoEncoding encoding = 1;
inline void VideoPacketFormat::clear_encoding() {
  encoding_ = 0;
}
inline ::aspia::proto::VideoEncoding VideoPacketFormat::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacketFormat.encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(encoding_);
}
inline void VideoPacketFormat::set_encoding(::aspia::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacketFormat.encoding)
}

// optional .aspia.proto.VideoSize screen_size = 2;
inline bool VideoPacketFormat::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
inline void VideoPacketFormat::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
inline const ::aspia::proto::VideoSize& VideoPacketFormat::screen_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacketFormat.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::aspia::proto::VideoSize::internal_default_instance();
}
inline ::aspia::proto::VideoSize* VideoPacketFormat::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::aspia::proto::VideoSize;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacketFormat.screen_size)
  return screen_size_;
}
inline ::aspia::proto::VideoSize* VideoPacketFormat::release_screen_size() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacketFormat.screen_size)
  
  ::aspia::proto::VideoSize* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_screen_size(::aspia::proto::VideoSize* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacketFormat.screen_size)
}

// optional .aspia.proto.VideoPixelFormat pixel_format = 3;
inline bool VideoPacketFormat::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void VideoPacketFormat::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::aspia::proto::VideoPixelFormat& VideoPacketFormat::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacketFormat.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
inline ::aspia::proto::VideoPixelFormat* VideoPacketFormat::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacketFormat.pixel_format)
  return pixel_format_;
}
inline ::aspia::proto::VideoPixelFormat* VideoPacketFormat::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacketFormat.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacketFormat.pixel_format)
}

inline const VideoPacketFormat* VideoPacketFormat::internal_default_instance() {
  return &VideoPacketFormat_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoPacket

// optional uint32 flags = 1;
inline void VideoPacket::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 VideoPacket::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.flags)
  return flags_;
}
inline void VideoPacket::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.flags)
}

// optional .aspia.proto.VideoPacketFormat format = 2;
inline bool VideoPacket::has_format() const {
  return this != internal_default_instance() && format_ != NULL;
}
inline void VideoPacket::clear_format() {
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
}
inline const ::aspia::proto::VideoPacketFormat& VideoPacket::format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.format)
  return format_ != NULL ? *format_
                         : *::aspia::proto::VideoPacketFormat::internal_default_instance();
}
inline ::aspia::proto::VideoPacketFormat* VideoPacket::mutable_format() {
  
  if (format_ == NULL) {
    format_ = new ::aspia::proto::VideoPacketFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.format)
  return format_;
}
inline ::aspia::proto::VideoPacketFormat* VideoPacket::release_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.format)
  
  ::aspia::proto::VideoPacketFormat* temp = format_;
  format_ = NULL;
  return temp;
}
inline void VideoPacket::set_allocated_format(::aspia::proto::VideoPacketFormat* format) {
  delete format_;
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.format)
}

// repeated .aspia.proto.VideoRect dirty_rect = 3;
inline int VideoPacket::dirty_rect_size() const {
  return dirty_rect_.size();
}
inline void VideoPacket::clear_dirty_rect() {
  dirty_rect_.Clear();
}
inline const ::aspia::proto::VideoRect& VideoPacket::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Get(index);
}
inline ::aspia::proto::VideoRect* VideoPacket::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Mutable(index);
}
inline ::aspia::proto::VideoRect* VideoPacket::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >*
VideoPacket::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.VideoPacket.dirty_rect)
  return &dirty_rect_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoRect >&
VideoPacket::dirty_rect() const {
  // @@protoc_insertion_point(field_list:aspia.proto.VideoPacket.dirty_rect)
  return dirty_rect_;
}

// optional bytes data = 4;
inline void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoPacket.data)
}
inline ::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoPacket.data)
}

inline const VideoPacket* VideoPacket::internal_default_instance() {
  return &VideoPacket_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoControl

// optional uint32 flags = 1;
inline void VideoControl::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 VideoControl::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoControl.flags)
  return flags_;
}
inline void VideoControl::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoControl.flags)
}

// optional .aspia.proto.VideoEncoding encoding = 2;
inline void VideoControl::clear_encoding() {
  encoding_ = 0;
}
inline ::aspia::proto::VideoEncoding VideoControl::encoding() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoControl.encoding)
  return static_cast< ::aspia::proto::VideoEncoding >(encoding_);
}
inline void VideoControl::set_encoding(::aspia::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoControl.encoding)
}

// optional .aspia.proto.VideoPixelFormat pixel_format = 3;
inline bool VideoControl::has_pixel_format() const {
  return this != internal_default_instance() && pixel_format_ != NULL;
}
inline void VideoControl::clear_pixel_format() {
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) delete pixel_format_;
  pixel_format_ = NULL;
}
inline const ::aspia::proto::VideoPixelFormat& VideoControl::pixel_format() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoControl.pixel_format)
  return pixel_format_ != NULL ? *pixel_format_
                         : *::aspia::proto::VideoPixelFormat::internal_default_instance();
}
inline ::aspia::proto::VideoPixelFormat* VideoControl::mutable_pixel_format() {
  
  if (pixel_format_ == NULL) {
    pixel_format_ = new ::aspia::proto::VideoPixelFormat;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoControl.pixel_format)
  return pixel_format_;
}
inline ::aspia::proto::VideoPixelFormat* VideoControl::release_pixel_format() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoControl.pixel_format)
  
  ::aspia::proto::VideoPixelFormat* temp = pixel_format_;
  pixel_format_ = NULL;
  return temp;
}
inline void VideoControl::set_allocated_pixel_format(::aspia::proto::VideoPixelFormat* pixel_format) {
  delete pixel_format_;
  pixel_format_ = pixel_format;
  if (pixel_format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoControl.pixel_format)
}

// optional int32 update_interval = 4;
inline void VideoControl::clear_update_interval() {
  update_interval_ = 0;
}
inline ::google::protobuf::int32 VideoControl::update_interval() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoControl.update_interval)
  return update_interval_;
}
inline void VideoControl::set_update_interval(::google::protobuf::int32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoControl.update_interval)
}

// optional int32 compress_ratio = 5;
inline void VideoControl::clear_compress_ratio() {
  compress_ratio_ = 0;
}
inline ::google::protobuf::int32 VideoControl::compress_ratio() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoControl.compress_ratio)
  return compress_ratio_;
}
inline void VideoControl::set_compress_ratio(::google::protobuf::int32 value) {
  
  compress_ratio_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoControl.compress_ratio)
}

inline const VideoControl* VideoControl::internal_default_instance() {
  return &VideoControl_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::VideoPacket_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::VideoControl_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::VideoEncoding> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_video_2eproto__INCLUDED

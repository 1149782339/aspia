syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.proto;

message VideoRect
{
    int32 x = 1;
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
}

message VideoPixelFormat
{
    int32 bits_per_pixel = 1;

    int32 red_max   = 2;
    int32 green_max = 3;
    int32 blue_max  = 4;

    int32 red_shift   = 5;
    int32 green_shift = 6;
    int32 blue_shift  = 7;
}

// Identifies how the image was encoded.
enum VideoEncoding
{
    VIDEO_ENCODING_UNKNOWN = 0;
    VIDEO_ENCODING_ZLIB    = 1;
    VIDEO_ENCODING_VP8     = 2;
    VIDEO_ENCODING_VP9     = 3; // LossLess
}

message VideoSize
{
    int32 width = 1;
    int32 height = 2;
}

message VideoPacketFormat
{
    //
    // Кодировка, которая используется при текущем обновлении.
    // Обязательное поле, должно присутствовать в каждом обновлении, которое имеет
    // флаг FIRST_PACKET.
    //
    VideoEncoding encoding = 1;

    //
    // Текущая ширина и высота экрана на сервере. При приеме видео
    // пакета клиент должен проверять не изменились ли эти величины. Если они
    // изменились, то клиент должен переинициализировать себя для работы с
    // новыми размерами.
    // Поле отсутствует, если размеры экрана не изменились.
    //
    VideoSize screen_size = 2;

    //
    // Формат пикселей, в котором отправлено текущее обновление. При каждом приеме
    // видео-пакета клиент должен проверять не изменился ли формат и переинициализироваться
    // в соответствии с этим. Данный параметр опциональный и используется при кодировке
    // VIDEO_ENCODING_ZLIB.
    // Поле отсутствует, если формат пикселей не изменился.
    //
    VideoPixelFormat pixel_format = 3;
}

//
// Отправляется только от сервера к клиенту
//
message VideoPacket
{
    //
    // Энкодер может разбить одно обновление на несколько видео-пакетов
    // (например, каждый измененный прямоугольник (VideoRect) с использованием
    // VIDEO_ENCODER_ZLIB отправляется отдельным пакетом).
    // FIRST_PACKET - говорит о том, что пакет является первым.
    // LAST_PACKET - говорит о том, что пакет является последним.
    // Наличие обоих флагов (FIRST_PACKET и LAST_PACKET) говорит о том, что
    // пакет является единственным.
    // PARTITION_PACKET - говорит о том, что пакет является частью логического
    // обновления.
    // Поле format сообщения заполняется только если пакет имеет флаг FIRST_PACKET.
    //
    enum Flags
    {
        PARTITION_PACKET = 0;
        FIRST_PACKET     = 1;
        LAST_PACKET      = 2;
    }

    uint32 flags = 1;

    VideoPacketFormat format = 2;

    // Список измененнившихся областей (прямоугольников).
    repeated VideoRect dirty_rect = 3;

    // Закодированные данные
    bytes data = 4;
}

//
// Отправляется только от клиента к серверу.
//
message VideoControl
{
    enum Flags
    {
        DISABLE_VIDEO           = 0;
        ENABLE_VIDEO            = 1;
        ENABLE_CURSOR_SHAPE     = 2;
        DISABLE_DESKTOP_EFFECTS = 4;
    }

    uint32 flags = 1;

    //
    // Устанавливает кодировку, которая будет использоваться для кодирования видео-пакетов.
    // Сервер не обязан подчиняться данной команде (может не поддерживать указанную кодировку).
    //
    VideoEncoding encoding = 2;

    //
    // Формат пикселей, который используется клиентом. Если формат клиента отличается от формата
    // сервера, то пиксели в изображении будут перекодированы в формат клиента.
    // Данный параметр применим для кодирования VIDEO_ENCODING_ZLIB, в остальных
    // случаях игнорируется.
    // Клиент не должен переинициалироваться после отправки данного параметра. Если сервер поддерживает
    // перекодировку в отправленный формат, то при следующем получении сообщения VideoPacket нужно
    // проверить, переключился ли сервер на новый формат и переинициализироваться при необходимости.
    // Сервер не обязан подчиняться данной команде (может не поддерживать указанный формат).
    //
    VideoPixelFormat pixel_format = 3;

    int32 update_interval = 4;
    int32 compress_ratio = 5;
}

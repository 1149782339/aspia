// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_ata.proto

#include "category_ata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class ATA_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ATA_Item>
      _instance;
} _ATA_Item_default_instance_;
class ATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ATA>
      _instance;
} _ATA_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fata_2eproto {
void InitDefaultsATA_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_ATA_Item_default_instance_;
    new (ptr) ::aspia::proto::ATA_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::ATA_Item::InitAsDefaultInstance();
}

void InitDefaultsATA_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsATA_ItemImpl);
}

void InitDefaultsATAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fata_2eproto::InitDefaultsATA_Item();
  {
    void* ptr = &::aspia::proto::_ATA_default_instance_;
    new (ptr) ::aspia::proto::ATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::ATA::InitAsDefaultInstance();
}

void InitDefaultsATA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsATAImpl);
}

}  // namespace protobuf_category_5fata_2eproto
namespace aspia {
namespace proto {
bool ATA_BusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ATA_BusType ATA::BUS_TYPE_UNKNOWN;
const ATA_BusType ATA::BUS_TYPE_SCSI;
const ATA_BusType ATA::BUS_TYPE_ATAPI;
const ATA_BusType ATA::BUS_TYPE_ATA;
const ATA_BusType ATA::BUS_TYPE_IEEE1394;
const ATA_BusType ATA::BUS_TYPE_SSA;
const ATA_BusType ATA::BUS_TYPE_FIBRE;
const ATA_BusType ATA::BUS_TYPE_USB;
const ATA_BusType ATA::BUS_TYPE_RAID;
const ATA_BusType ATA::BUS_TYPE_ISCSI;
const ATA_BusType ATA::BUS_TYPE_SAS;
const ATA_BusType ATA::BUS_TYPE_SATA;
const ATA_BusType ATA::BUS_TYPE_SD;
const ATA_BusType ATA::BUS_TYPE_MMC;
const ATA_BusType ATA::BUS_TYPE_VIRTUAL;
const ATA_BusType ATA::BUS_TYPE_FILE_BACKED_VIRTUAL;
const ATA_BusType ATA::BusType_MIN;
const ATA_BusType ATA::BusType_MAX;
const int ATA::BusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ATA_TransferMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ATA_TransferMode ATA::TRANSFER_MODE_UNKNOWN;
const ATA_TransferMode ATA::TRANSFER_MODE_PIO;
const ATA_TransferMode ATA::TRANSFER_MODE_PIO_DMA;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_133;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_100;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_66;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_44;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_33;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_25;
const ATA_TransferMode ATA::TRANSFER_MODE_ULTRA_DMA_16;
const ATA_TransferMode ATA::TRANSFER_MODE_SATA_600;
const ATA_TransferMode ATA::TRANSFER_MODE_SATA_300;
const ATA_TransferMode ATA::TRANSFER_MODE_SATA_150;
const ATA_TransferMode ATA::TransferMode_MIN;
const ATA_TransferMode ATA::TransferMode_MAX;
const int ATA::TransferMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ATA_Features_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ATA_Features ATA::FEATURE_UNKNOWN;
const ATA_Features ATA::FEATURE_48BIT_LBA;
const ATA_Features ATA::FEATURE_ADVANCED_POWER_MANAGEMENT;
const ATA_Features ATA::FEATURE_AUTOMATIC_ACOUSTIC_MANAGEMENT;
const ATA_Features ATA::FEATURE_SMART;
const ATA_Features ATA::FEATURE_SMART_ERROR_LOGGING;
const ATA_Features ATA::FEATURE_SMART_SELF_TEST;
const ATA_Features ATA::FEATURE_STREAMING;
const ATA_Features ATA::FEATURE_GENERAL_PURPOSE_LOGGING;
const ATA_Features ATA::FEATURE_SECURITY_MODE;
const ATA_Features ATA::FEATURE_POWER_MANAGEMENT;
const ATA_Features ATA::FEATURE_WRITE_CACHE;
const ATA_Features ATA::FEATURE_READ_LOCK_AHEAD;
const ATA_Features ATA::FEATURE_HOST_PROTECTED_AREA;
const ATA_Features ATA::FEATURE_RELEASE_INTERRUPT;
const ATA_Features ATA::FEATURE_POWER_UP_IN_STANDBY;
const ATA_Features ATA::FEATURE_DEVICE_CONFIGURATION_OVERLAY;
const ATA_Features ATA::FEATURE_SERVICE_INTERRUPT;
const ATA_Features ATA::FEATURE_NATIVE_COMMAND_QUEUING;
const ATA_Features ATA::FEATURE_TRIM;
const ATA_Features ATA::Features_MIN;
const ATA_Features ATA::Features_MAX;
const int ATA::Features_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ATA_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ATA_Item::kModelNumberFieldNumber;
const int ATA_Item::kSerialNumberFieldNumber;
const int ATA_Item::kFirmwareRevisionFieldNumber;
const int ATA_Item::kBusTypeFieldNumber;
const int ATA_Item::kTransferModeFieldNumber;
const int ATA_Item::kRotationRateFieldNumber;
const int ATA_Item::kDriveSizeFieldNumber;
const int ATA_Item::kBufferSizeFieldNumber;
const int ATA_Item::kMultisectorsFieldNumber;
const int ATA_Item::kEccSizeFieldNumber;
const int ATA_Item::kIsRemovableFieldNumber;
const int ATA_Item::kCylindersNumberFieldNumber;
const int ATA_Item::kTracksPerCylinderFieldNumber;
const int ATA_Item::kSectorsPerTrackFieldNumber;
const int ATA_Item::kBytesPerSectorFieldNumber;
const int ATA_Item::kHeadsNumberFieldNumber;
const int ATA_Item::kSupportedFeaturesFieldNumber;
const int ATA_Item::kEnabledFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ATA_Item::ATA_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fata_2eproto::InitDefaultsATA_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.ATA.Item)
}
ATA_Item::ATA_Item(const ATA_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_number().size() > 0) {
    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_revision().size() > 0) {
    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  ::memcpy(&bus_type_, &from.bus_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&heads_number_) -
    reinterpret_cast<char*>(&bus_type_)) + sizeof(heads_number_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.ATA.Item)
}

void ATA_Item::SharedCtor() {
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bus_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heads_number_) -
      reinterpret_cast<char*>(&bus_type_)) + sizeof(heads_number_));
  _cached_size_ = 0;
}

ATA_Item::~ATA_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.ATA.Item)
  SharedDtor();
}

void ATA_Item::SharedDtor() {
  model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ATA_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ATA_Item& ATA_Item::default_instance() {
  ::protobuf_category_5fata_2eproto::InitDefaultsATA_Item();
  return *internal_default_instance();
}

ATA_Item* ATA_Item::New(::google::protobuf::Arena* arena) const {
  ATA_Item* n = new ATA_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ATA_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.ATA.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bus_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heads_number_) -
      reinterpret_cast<char*>(&bus_type_)) + sizeof(heads_number_));
  _internal_metadata_.Clear();
}

bool ATA_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.ATA.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_number().data(), static_cast<int>(this->model_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.ATA.Item.model_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.ATA.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.ATA.Item.firmware_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.ATA.BusType bus_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bus_type(static_cast< ::aspia::proto::ATA_BusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.ATA.TransferMode transfer_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transfer_mode(static_cast< ::aspia::proto::ATA_TransferMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rotation_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotation_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 drive_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &drive_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buffer_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 multisectors = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multisectors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ecc_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecc_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_removable = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_removable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cylinders_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cylinders_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tracks_per_cylinder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracks_per_cylinder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sectors_per_track = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sectors_per_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bytes_per_sector = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_per_sector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heads_number = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heads_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 supported_features = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &supported_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enabled_features = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enabled_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.ATA.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.ATA.Item)
  return false;
#undef DO_
}

void ATA_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.ATA.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_number = 1;
  if (this->model_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_number().data(), static_cast<int>(this->model_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.ATA.Item.model_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_number(), output);
  }

  // string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.ATA.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  // string firmware_revision = 3;
  if (this->firmware_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.ATA.Item.firmware_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmware_revision(), output);
  }

  // .aspia.proto.ATA.BusType bus_type = 4;
  if (this->bus_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bus_type(), output);
  }

  // .aspia.proto.ATA.TransferMode transfer_mode = 5;
  if (this->transfer_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transfer_mode(), output);
  }

  // uint32 rotation_rate = 6;
  if (this->rotation_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rotation_rate(), output);
  }

  // uint64 drive_size = 7;
  if (this->drive_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->drive_size(), output);
  }

  // uint32 buffer_size = 8;
  if (this->buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->buffer_size(), output);
  }

  // uint32 multisectors = 9;
  if (this->multisectors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multisectors(), output);
  }

  // uint32 ecc_size = 10;
  if (this->ecc_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ecc_size(), output);
  }

  // bool is_removable = 11;
  if (this->is_removable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_removable(), output);
  }

  // uint64 cylinders_number = 12;
  if (this->cylinders_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->cylinders_number(), output);
  }

  // uint32 tracks_per_cylinder = 13;
  if (this->tracks_per_cylinder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tracks_per_cylinder(), output);
  }

  // uint32 sectors_per_track = 14;
  if (this->sectors_per_track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->sectors_per_track(), output);
  }

  // uint32 bytes_per_sector = 15;
  if (this->bytes_per_sector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bytes_per_sector(), output);
  }

  // uint32 heads_number = 16;
  if (this->heads_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->heads_number(), output);
  }

  // uint64 supported_features = 17;
  if (this->supported_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->supported_features(), output);
  }

  // uint64 enabled_features = 18;
  if (this->enabled_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->enabled_features(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.ATA.Item)
}

size_t ATA_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.ATA.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string model_number = 1;
  if (this->model_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_number());
  }

  // string serial_number = 2;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string firmware_revision = 3;
  if (this->firmware_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_revision());
  }

  // .aspia.proto.ATA.BusType bus_type = 4;
  if (this->bus_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bus_type());
  }

  // .aspia.proto.ATA.TransferMode transfer_mode = 5;
  if (this->transfer_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_mode());
  }

  // uint64 drive_size = 7;
  if (this->drive_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->drive_size());
  }

  // uint32 rotation_rate = 6;
  if (this->rotation_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rotation_rate());
  }

  // uint32 buffer_size = 8;
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buffer_size());
  }

  // uint32 multisectors = 9;
  if (this->multisectors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multisectors());
  }

  // uint32 ecc_size = 10;
  if (this->ecc_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ecc_size());
  }

  // uint64 cylinders_number = 12;
  if (this->cylinders_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cylinders_number());
  }

  // bool is_removable = 11;
  if (this->is_removable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tracks_per_cylinder = 13;
  if (this->tracks_per_cylinder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracks_per_cylinder());
  }

  // uint32 sectors_per_track = 14;
  if (this->sectors_per_track() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sectors_per_track());
  }

  // uint32 bytes_per_sector = 15;
  if (this->bytes_per_sector() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_per_sector());
  }

  // uint64 supported_features = 17;
  if (this->supported_features() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->supported_features());
  }

  // uint64 enabled_features = 18;
  if (this->enabled_features() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enabled_features());
  }

  // uint32 heads_number = 16;
  if (this->heads_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heads_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATA_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ATA_Item*>(&from));
}

void ATA_Item::MergeFrom(const ATA_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.ATA.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_number().size() > 0) {

    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.firmware_revision().size() > 0) {

    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  if (from.bus_type() != 0) {
    set_bus_type(from.bus_type());
  }
  if (from.transfer_mode() != 0) {
    set_transfer_mode(from.transfer_mode());
  }
  if (from.drive_size() != 0) {
    set_drive_size(from.drive_size());
  }
  if (from.rotation_rate() != 0) {
    set_rotation_rate(from.rotation_rate());
  }
  if (from.buffer_size() != 0) {
    set_buffer_size(from.buffer_size());
  }
  if (from.multisectors() != 0) {
    set_multisectors(from.multisectors());
  }
  if (from.ecc_size() != 0) {
    set_ecc_size(from.ecc_size());
  }
  if (from.cylinders_number() != 0) {
    set_cylinders_number(from.cylinders_number());
  }
  if (from.is_removable() != 0) {
    set_is_removable(from.is_removable());
  }
  if (from.tracks_per_cylinder() != 0) {
    set_tracks_per_cylinder(from.tracks_per_cylinder());
  }
  if (from.sectors_per_track() != 0) {
    set_sectors_per_track(from.sectors_per_track());
  }
  if (from.bytes_per_sector() != 0) {
    set_bytes_per_sector(from.bytes_per_sector());
  }
  if (from.supported_features() != 0) {
    set_supported_features(from.supported_features());
  }
  if (from.enabled_features() != 0) {
    set_enabled_features(from.enabled_features());
  }
  if (from.heads_number() != 0) {
    set_heads_number(from.heads_number());
  }
}

void ATA_Item::CopyFrom(const ATA_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.ATA.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATA_Item::IsInitialized() const {
  return true;
}

void ATA_Item::Swap(ATA_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ATA_Item::InternalSwap(ATA_Item* other) {
  using std::swap;
  model_number_.Swap(&other->model_number_);
  serial_number_.Swap(&other->serial_number_);
  firmware_revision_.Swap(&other->firmware_revision_);
  swap(bus_type_, other->bus_type_);
  swap(transfer_mode_, other->transfer_mode_);
  swap(drive_size_, other->drive_size_);
  swap(rotation_rate_, other->rotation_rate_);
  swap(buffer_size_, other->buffer_size_);
  swap(multisectors_, other->multisectors_);
  swap(ecc_size_, other->ecc_size_);
  swap(cylinders_number_, other->cylinders_number_);
  swap(is_removable_, other->is_removable_);
  swap(tracks_per_cylinder_, other->tracks_per_cylinder_);
  swap(sectors_per_track_, other->sectors_per_track_);
  swap(bytes_per_sector_, other->bytes_per_sector_);
  swap(supported_features_, other->supported_features_);
  swap(enabled_features_, other->enabled_features_);
  swap(heads_number_, other->heads_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ATA_Item::GetTypeName() const {
  return "aspia.proto.ATA.Item";
}


// ===================================================================

void ATA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ATA::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ATA::ATA()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fata_2eproto::InitDefaultsATA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.ATA)
}
ATA::ATA(const ATA& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.ATA)
}

void ATA::SharedCtor() {
  _cached_size_ = 0;
}

ATA::~ATA() {
  // @@protoc_insertion_point(destructor:aspia.proto.ATA)
  SharedDtor();
}

void ATA::SharedDtor() {
}

void ATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ATA& ATA::default_instance() {
  ::protobuf_category_5fata_2eproto::InitDefaultsATA();
  return *internal_default_instance();
}

ATA* ATA::New(::google::protobuf::Arena* arena) const {
  ATA* n = new ATA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ATA::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.ATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool ATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.ATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.ATA.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.ATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.ATA)
  return false;
#undef DO_
}

void ATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.ATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.ATA.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.ATA)
}

size_t ATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.ATA)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.ATA.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATA::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ATA*>(&from));
}

void ATA::MergeFrom(const ATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.ATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void ATA::CopyFrom(const ATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.ATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATA::IsInitialized() const {
  return true;
}

void ATA::Swap(ATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ATA::InternalSwap(ATA* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ATA::GetTypeName() const {
  return "aspia.proto.ATA";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

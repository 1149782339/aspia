// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_connection.proto

#ifndef PROTOBUF_category_5fconnection_2eproto__INCLUDED
#define PROTOBUF_category_5fconnection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fconnection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsConnection_ItemImpl();
void InitDefaultsConnection_Item();
void InitDefaultsConnectionImpl();
void InitDefaultsConnection();
inline void InitDefaults() {
  InitDefaultsConnection_Item();
  InitDefaultsConnection();
}
}  // namespace protobuf_category_5fconnection_2eproto
namespace aspia {
namespace proto {
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class Connection_Item;
class Connection_ItemDefaultTypeInternal;
extern Connection_ItemDefaultTypeInternal _Connection_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum Connection_Protocol {
  Connection_Protocol_PROTOCOL_UNKNOWN = 0,
  Connection_Protocol_PROTOCOL_TCP = 1,
  Connection_Protocol_PROTOCOL_UDP = 2,
  Connection_Protocol_Connection_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Connection_Protocol_Connection_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Connection_Protocol_IsValid(int value);
const Connection_Protocol Connection_Protocol_Protocol_MIN = Connection_Protocol_PROTOCOL_UNKNOWN;
const Connection_Protocol Connection_Protocol_Protocol_MAX = Connection_Protocol_PROTOCOL_UDP;
const int Connection_Protocol_Protocol_ARRAYSIZE = Connection_Protocol_Protocol_MAX + 1;

enum Connection_State {
  Connection_State_STATE_UNKNOWN = 0,
  Connection_State_STATE_CLOSED = 1,
  Connection_State_STATE_LISTENING = 2,
  Connection_State_STATE_SYN_SENT = 3,
  Connection_State_STATE_SYN_RCVD = 4,
  Connection_State_STATE_ESTABLISHED = 5,
  Connection_State_STATE_FIN_WAIT1 = 6,
  Connection_State_STATE_FIN_WAIT2 = 7,
  Connection_State_STATE_CLOSE_WAIT = 8,
  Connection_State_STATE_CLOSING = 9,
  Connection_State_STATE_LAST_ACK = 10,
  Connection_State_STATE_TIME_WAIT = 11,
  Connection_State_STATE_DELETE_TCB = 12,
  Connection_State_Connection_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Connection_State_Connection_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Connection_State_IsValid(int value);
const Connection_State Connection_State_State_MIN = Connection_State_STATE_UNKNOWN;
const Connection_State Connection_State_State_MAX = Connection_State_STATE_DELETE_TCB;
const int Connection_State_State_ARRAYSIZE = Connection_State_State_MAX + 1;

// ===================================================================

class Connection_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Connection.Item) */ {
 public:
  Connection_Item();
  virtual ~Connection_Item();

  Connection_Item(const Connection_Item& from);

  inline Connection_Item& operator=(const Connection_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection_Item(Connection_Item&& from) noexcept
    : Connection_Item() {
    *this = ::std::move(from);
  }

  inline Connection_Item& operator=(Connection_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Connection_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection_Item* internal_default_instance() {
    return reinterpret_cast<const Connection_Item*>(
               &_Connection_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Connection_Item* other);
  friend void swap(Connection_Item& a, Connection_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Connection_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Connection_Item& from);
  void MergeFrom(const Connection_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Connection_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string process_name = 1;
  void clear_process_name();
  static const int kProcessNameFieldNumber = 1;
  const ::std::string& process_name() const;
  void set_process_name(const ::std::string& value);
  #if LANG_CXX11
  void set_process_name(::std::string&& value);
  #endif
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  ::std::string* mutable_process_name();
  ::std::string* release_process_name();
  void set_allocated_process_name(::std::string* process_name);

  // string local_address = 3;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 3;
  const ::std::string& local_address() const;
  void set_local_address(const ::std::string& value);
  #if LANG_CXX11
  void set_local_address(::std::string&& value);
  #endif
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  ::std::string* mutable_local_address();
  ::std::string* release_local_address();
  void set_allocated_local_address(::std::string* local_address);

  // string remote_address = 4;
  void clear_remote_address();
  static const int kRemoteAddressFieldNumber = 4;
  const ::std::string& remote_address() const;
  void set_remote_address(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_address(::std::string&& value);
  #endif
  void set_remote_address(const char* value);
  void set_remote_address(const char* value, size_t size);
  ::std::string* mutable_remote_address();
  ::std::string* release_remote_address();
  void set_allocated_remote_address(::std::string* remote_address);

  // .aspia.proto.Connection.Protocol protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  ::aspia::proto::Connection_Protocol protocol() const;
  void set_protocol(::aspia::proto::Connection_Protocol value);

  // uint32 local_port = 5;
  void clear_local_port();
  static const int kLocalPortFieldNumber = 5;
  ::google::protobuf::uint32 local_port() const;
  void set_local_port(::google::protobuf::uint32 value);

  // uint32 remote_port = 6;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 6;
  ::google::protobuf::uint32 remote_port() const;
  void set_remote_port(::google::protobuf::uint32 value);

  // .aspia.proto.Connection.State state = 7;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::aspia::proto::Connection_State state() const;
  void set_state(::aspia::proto::Connection_State value);

  // @@protoc_insertion_point(class_scope:aspia.proto.Connection.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr process_name_;
  ::google::protobuf::internal::ArenaStringPtr local_address_;
  ::google::protobuf::internal::ArenaStringPtr remote_address_;
  int protocol_;
  ::google::protobuf::uint32 local_port_;
  ::google::protobuf::uint32 remote_port_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fconnection_2eproto::TableStruct;
  friend void ::protobuf_category_5fconnection_2eproto::InitDefaultsConnection_ItemImpl();
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Connection* other);
  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const PROTOBUF_FINAL { return New(NULL); }

  Connection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Connection_Item Item;

  typedef Connection_Protocol Protocol;
  static const Protocol PROTOCOL_UNKNOWN =
    Connection_Protocol_PROTOCOL_UNKNOWN;
  static const Protocol PROTOCOL_TCP =
    Connection_Protocol_PROTOCOL_TCP;
  static const Protocol PROTOCOL_UDP =
    Connection_Protocol_PROTOCOL_UDP;
  static inline bool Protocol_IsValid(int value) {
    return Connection_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    Connection_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    Connection_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    Connection_Protocol_Protocol_ARRAYSIZE;

  typedef Connection_State State;
  static const State STATE_UNKNOWN =
    Connection_State_STATE_UNKNOWN;
  static const State STATE_CLOSED =
    Connection_State_STATE_CLOSED;
  static const State STATE_LISTENING =
    Connection_State_STATE_LISTENING;
  static const State STATE_SYN_SENT =
    Connection_State_STATE_SYN_SENT;
  static const State STATE_SYN_RCVD =
    Connection_State_STATE_SYN_RCVD;
  static const State STATE_ESTABLISHED =
    Connection_State_STATE_ESTABLISHED;
  static const State STATE_FIN_WAIT1 =
    Connection_State_STATE_FIN_WAIT1;
  static const State STATE_FIN_WAIT2 =
    Connection_State_STATE_FIN_WAIT2;
  static const State STATE_CLOSE_WAIT =
    Connection_State_STATE_CLOSE_WAIT;
  static const State STATE_CLOSING =
    Connection_State_STATE_CLOSING;
  static const State STATE_LAST_ACK =
    Connection_State_STATE_LAST_ACK;
  static const State STATE_TIME_WAIT =
    Connection_State_STATE_TIME_WAIT;
  static const State STATE_DELETE_TCB =
    Connection_State_STATE_DELETE_TCB;
  static inline bool State_IsValid(int value) {
    return Connection_State_IsValid(value);
  }
  static const State State_MIN =
    Connection_State_State_MIN;
  static const State State_MAX =
    Connection_State_State_MAX;
  static const int State_ARRAYSIZE =
    Connection_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.Connection.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::Connection_Item& item(int index) const;
  ::aspia::proto::Connection_Item* mutable_item(int index);
  ::aspia::proto::Connection_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Connection_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Connection_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.Connection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Connection_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fconnection_2eproto::TableStruct;
  friend void ::protobuf_category_5fconnection_2eproto::InitDefaultsConnectionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Connection_Item

// string process_name = 1;
inline void Connection_Item::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connection_Item::process_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.process_name)
  return process_name_.GetNoArena();
}
inline void Connection_Item::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.process_name)
}
#if LANG_CXX11
inline void Connection_Item::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Connection.Item.process_name)
}
#endif
inline void Connection_Item::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Connection.Item.process_name)
}
inline void Connection_Item::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Connection.Item.process_name)
}
inline ::std::string* Connection_Item::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Connection.Item.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connection_Item::release_process_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Connection.Item.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connection_Item::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Connection.Item.process_name)
}

// .aspia.proto.Connection.Protocol protocol = 2;
inline void Connection_Item::clear_protocol() {
  protocol_ = 0;
}
inline ::aspia::proto::Connection_Protocol Connection_Item::protocol() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.protocol)
  return static_cast< ::aspia::proto::Connection_Protocol >(protocol_);
}
inline void Connection_Item::set_protocol(::aspia::proto::Connection_Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.protocol)
}

// string local_address = 3;
inline void Connection_Item::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connection_Item::local_address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.local_address)
  return local_address_.GetNoArena();
}
inline void Connection_Item::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.local_address)
}
#if LANG_CXX11
inline void Connection_Item::set_local_address(::std::string&& value) {
  
  local_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Connection.Item.local_address)
}
#endif
inline void Connection_Item::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Connection.Item.local_address)
}
inline void Connection_Item::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Connection.Item.local_address)
}
inline ::std::string* Connection_Item::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Connection.Item.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connection_Item::release_local_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.Connection.Item.local_address)
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connection_Item::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Connection.Item.local_address)
}

// string remote_address = 4;
inline void Connection_Item::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Connection_Item::remote_address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.remote_address)
  return remote_address_.GetNoArena();
}
inline void Connection_Item::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.remote_address)
}
#if LANG_CXX11
inline void Connection_Item::set_remote_address(::std::string&& value) {
  
  remote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Connection.Item.remote_address)
}
#endif
inline void Connection_Item::set_remote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Connection.Item.remote_address)
}
inline void Connection_Item::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Connection.Item.remote_address)
}
inline ::std::string* Connection_Item::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Connection.Item.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Connection_Item::release_remote_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.Connection.Item.remote_address)
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Connection_Item::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Connection.Item.remote_address)
}

// uint32 local_port = 5;
inline void Connection_Item::clear_local_port() {
  local_port_ = 0u;
}
inline ::google::protobuf::uint32 Connection_Item::local_port() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.local_port)
  return local_port_;
}
inline void Connection_Item::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.local_port)
}

// uint32 remote_port = 6;
inline void Connection_Item::clear_remote_port() {
  remote_port_ = 0u;
}
inline ::google::protobuf::uint32 Connection_Item::remote_port() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.remote_port)
  return remote_port_;
}
inline void Connection_Item::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.remote_port)
}

// .aspia.proto.Connection.State state = 7;
inline void Connection_Item::clear_state() {
  state_ = 0;
}
inline ::aspia::proto::Connection_State Connection_Item::state() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.Item.state)
  return static_cast< ::aspia::proto::Connection_State >(state_);
}
inline void Connection_Item::set_state(::aspia::proto::Connection_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Connection.Item.state)
}

// -------------------------------------------------------------------

// Connection

// repeated .aspia.proto.Connection.Item item = 1;
inline int Connection::item_size() const {
  return item_.size();
}
inline void Connection::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::Connection_Item& Connection::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.Connection.item)
  return item_.Get(index);
}
inline ::aspia::proto::Connection_Item* Connection::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.Connection.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::Connection_Item* Connection::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.Connection.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::Connection_Item >*
Connection::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.Connection.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Connection_Item >&
Connection::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.Connection.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::Connection_Protocol> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::Connection_State> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fconnection_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_cpu.proto

#ifndef PROTOBUF_category_5fcpu_2eproto__INCLUDED
#define PROTOBUF_category_5fcpu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fcpu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsCPU_FeaturesImpl();
void InitDefaultsCPU_Features();
void InitDefaultsCPUImpl();
void InitDefaultsCPU();
inline void InitDefaults() {
  InitDefaultsCPU_Features();
  InitDefaultsCPU();
}
}  // namespace protobuf_category_5fcpu_2eproto
namespace aspia {
namespace proto {
class CPU;
class CPUDefaultTypeInternal;
extern CPUDefaultTypeInternal _CPU_default_instance_;
class CPU_Features;
class CPU_FeaturesDefaultTypeInternal;
extern CPU_FeaturesDefaultTypeInternal _CPU_Features_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class CPU_Features : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.CPU.Features) */ {
 public:
  CPU_Features();
  virtual ~CPU_Features();

  CPU_Features(const CPU_Features& from);

  inline CPU_Features& operator=(const CPU_Features& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPU_Features(CPU_Features&& from) noexcept
    : CPU_Features() {
    *this = ::std::move(from);
  }

  inline CPU_Features& operator=(CPU_Features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CPU_Features& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPU_Features* internal_default_instance() {
    return reinterpret_cast<const CPU_Features*>(
               &_CPU_Features_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CPU_Features* other);
  friend void swap(CPU_Features& a, CPU_Features& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPU_Features* New() const PROTOBUF_FINAL { return New(NULL); }

  CPU_Features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CPU_Features& from);
  void MergeFrom(const CPU_Features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CPU_Features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool has_fpu = 1;
  void clear_has_fpu();
  static const int kHasFpuFieldNumber = 1;
  bool has_fpu() const;
  void set_has_fpu(bool value);

  // bool has_vme = 2;
  void clear_has_vme();
  static const int kHasVmeFieldNumber = 2;
  bool has_vme() const;
  void set_has_vme(bool value);

  // bool has_de = 3;
  void clear_has_de();
  static const int kHasDeFieldNumber = 3;
  bool has_de() const;
  void set_has_de(bool value);

  // bool has_pse = 4;
  void clear_has_pse();
  static const int kHasPseFieldNumber = 4;
  bool has_pse() const;
  void set_has_pse(bool value);

  // bool has_tsc = 5;
  void clear_has_tsc();
  static const int kHasTscFieldNumber = 5;
  bool has_tsc() const;
  void set_has_tsc(bool value);

  // bool has_msr = 6;
  void clear_has_msr();
  static const int kHasMsrFieldNumber = 6;
  bool has_msr() const;
  void set_has_msr(bool value);

  // bool has_pae = 7;
  void clear_has_pae();
  static const int kHasPaeFieldNumber = 7;
  bool has_pae() const;
  void set_has_pae(bool value);

  // bool has_mce = 8;
  void clear_has_mce();
  static const int kHasMceFieldNumber = 8;
  bool has_mce() const;
  void set_has_mce(bool value);

  // bool has_cx8 = 9;
  void clear_has_cx8();
  static const int kHasCx8FieldNumber = 9;
  bool has_cx8() const;
  void set_has_cx8(bool value);

  // bool has_apic = 10;
  void clear_has_apic();
  static const int kHasApicFieldNumber = 10;
  bool has_apic() const;
  void set_has_apic(bool value);

  // bool has_sep = 11;
  void clear_has_sep();
  static const int kHasSepFieldNumber = 11;
  bool has_sep() const;
  void set_has_sep(bool value);

  // bool has_mtrr = 12;
  void clear_has_mtrr();
  static const int kHasMtrrFieldNumber = 12;
  bool has_mtrr() const;
  void set_has_mtrr(bool value);

  // bool has_pge = 13;
  void clear_has_pge();
  static const int kHasPgeFieldNumber = 13;
  bool has_pge() const;
  void set_has_pge(bool value);

  // bool has_mca = 14;
  void clear_has_mca();
  static const int kHasMcaFieldNumber = 14;
  bool has_mca() const;
  void set_has_mca(bool value);

  // bool has_cmov = 15;
  void clear_has_cmov();
  static const int kHasCmovFieldNumber = 15;
  bool has_cmov() const;
  void set_has_cmov(bool value);

  // bool has_pat = 16;
  void clear_has_pat();
  static const int kHasPatFieldNumber = 16;
  bool has_pat() const;
  void set_has_pat(bool value);

  // bool has_pse36 = 17;
  void clear_has_pse36();
  static const int kHasPse36FieldNumber = 17;
  bool has_pse36() const;
  void set_has_pse36(bool value);

  // bool has_psn = 18;
  void clear_has_psn();
  static const int kHasPsnFieldNumber = 18;
  bool has_psn() const;
  void set_has_psn(bool value);

  // bool has_clfsh = 19;
  void clear_has_clfsh();
  static const int kHasClfshFieldNumber = 19;
  bool has_clfsh() const;
  void set_has_clfsh(bool value);

  // bool has_ds = 20;
  void clear_has_ds();
  static const int kHasDsFieldNumber = 20;
  bool has_ds() const;
  void set_has_ds(bool value);

  // bool has_acpu = 21;
  void clear_has_acpu();
  static const int kHasAcpuFieldNumber = 21;
  bool has_acpu() const;
  void set_has_acpu(bool value);

  // bool has_mmx = 22;
  void clear_has_mmx();
  static const int kHasMmxFieldNumber = 22;
  bool has_mmx() const;
  void set_has_mmx(bool value);

  // bool has_fxsr = 23;
  void clear_has_fxsr();
  static const int kHasFxsrFieldNumber = 23;
  bool has_fxsr() const;
  void set_has_fxsr(bool value);

  // bool has_sse = 24;
  void clear_has_sse();
  static const int kHasSseFieldNumber = 24;
  bool has_sse() const;
  void set_has_sse(bool value);

  // bool has_sse2 = 25;
  void clear_has_sse2();
  static const int kHasSse2FieldNumber = 25;
  bool has_sse2() const;
  void set_has_sse2(bool value);

  // bool has_ss = 26;
  void clear_has_ss();
  static const int kHasSsFieldNumber = 26;
  bool has_ss() const;
  void set_has_ss(bool value);

  // bool has_htt = 27;
  void clear_has_htt();
  static const int kHasHttFieldNumber = 27;
  bool has_htt() const;
  void set_has_htt(bool value);

  // bool has_tm = 28;
  void clear_has_tm();
  static const int kHasTmFieldNumber = 28;
  bool has_tm() const;
  void set_has_tm(bool value);

  // bool has_ia64 = 29;
  void clear_has_ia64();
  static const int kHasIa64FieldNumber = 29;
  bool has_ia64() const;
  void set_has_ia64(bool value);

  // bool has_pbe = 30;
  void clear_has_pbe();
  static const int kHasPbeFieldNumber = 30;
  bool has_pbe() const;
  void set_has_pbe(bool value);

  // bool has_sse3 = 31;
  void clear_has_sse3();
  static const int kHasSse3FieldNumber = 31;
  bool has_sse3() const;
  void set_has_sse3(bool value);

  // bool has_pclmuldq = 32;
  void clear_has_pclmuldq();
  static const int kHasPclmuldqFieldNumber = 32;
  bool has_pclmuldq() const;
  void set_has_pclmuldq(bool value);

  // bool has_dtes64 = 33;
  void clear_has_dtes64();
  static const int kHasDtes64FieldNumber = 33;
  bool has_dtes64() const;
  void set_has_dtes64(bool value);

  // bool has_monitor = 34;
  void clear_has_monitor();
  static const int kHasMonitorFieldNumber = 34;
  bool has_monitor() const;
  void set_has_monitor(bool value);

  // bool has_ds_cpl = 35;
  void clear_has_ds_cpl();
  static const int kHasDsCplFieldNumber = 35;
  bool has_ds_cpl() const;
  void set_has_ds_cpl(bool value);

  // bool has_vmx = 36;
  void clear_has_vmx();
  static const int kHasVmxFieldNumber = 36;
  bool has_vmx() const;
  void set_has_vmx(bool value);

  // bool has_smx = 37;
  void clear_has_smx();
  static const int kHasSmxFieldNumber = 37;
  bool has_smx() const;
  void set_has_smx(bool value);

  // bool has_est = 38;
  void clear_has_est();
  static const int kHasEstFieldNumber = 38;
  bool has_est() const;
  void set_has_est(bool value);

  // bool has_tm2 = 39;
  void clear_has_tm2();
  static const int kHasTm2FieldNumber = 39;
  bool has_tm2() const;
  void set_has_tm2(bool value);

  // bool has_ssse3 = 40;
  void clear_has_ssse3();
  static const int kHasSsse3FieldNumber = 40;
  bool has_ssse3() const;
  void set_has_ssse3(bool value);

  // bool has_cnxt_id = 41;
  void clear_has_cnxt_id();
  static const int kHasCnxtIdFieldNumber = 41;
  bool has_cnxt_id() const;
  void set_has_cnxt_id(bool value);

  // bool has_sdbg = 42;
  void clear_has_sdbg();
  static const int kHasSdbgFieldNumber = 42;
  bool has_sdbg() const;
  void set_has_sdbg(bool value);

  // bool has_fma = 43;
  void clear_has_fma();
  static const int kHasFmaFieldNumber = 43;
  bool has_fma() const;
  void set_has_fma(bool value);

  // bool has_cx16 = 44;
  void clear_has_cx16();
  static const int kHasCx16FieldNumber = 44;
  bool has_cx16() const;
  void set_has_cx16(bool value);

  // bool has_xtpr = 45;
  void clear_has_xtpr();
  static const int kHasXtprFieldNumber = 45;
  bool has_xtpr() const;
  void set_has_xtpr(bool value);

  // bool has_pdcm = 46;
  void clear_has_pdcm();
  static const int kHasPdcmFieldNumber = 46;
  bool has_pdcm() const;
  void set_has_pdcm(bool value);

  // bool has_pcid = 47;
  void clear_has_pcid();
  static const int kHasPcidFieldNumber = 47;
  bool has_pcid() const;
  void set_has_pcid(bool value);

  // bool has_dca = 48;
  void clear_has_dca();
  static const int kHasDcaFieldNumber = 48;
  bool has_dca() const;
  void set_has_dca(bool value);

  // bool has_sse41 = 49;
  void clear_has_sse41();
  static const int kHasSse41FieldNumber = 49;
  bool has_sse41() const;
  void set_has_sse41(bool value);

  // bool has_sse42 = 50;
  void clear_has_sse42();
  static const int kHasSse42FieldNumber = 50;
  bool has_sse42() const;
  void set_has_sse42(bool value);

  // bool has_x2apic = 51;
  void clear_has_x2apic();
  static const int kHasX2ApicFieldNumber = 51;
  bool has_x2apic() const;
  void set_has_x2apic(bool value);

  // bool has_movbe = 52;
  void clear_has_movbe();
  static const int kHasMovbeFieldNumber = 52;
  bool has_movbe() const;
  void set_has_movbe(bool value);

  // bool has_popcnt = 53;
  void clear_has_popcnt();
  static const int kHasPopcntFieldNumber = 53;
  bool has_popcnt() const;
  void set_has_popcnt(bool value);

  // bool has_tsc_deadline = 54;
  void clear_has_tsc_deadline();
  static const int kHasTscDeadlineFieldNumber = 54;
  bool has_tsc_deadline() const;
  void set_has_tsc_deadline(bool value);

  // bool has_aes = 55;
  void clear_has_aes();
  static const int kHasAesFieldNumber = 55;
  bool has_aes() const;
  void set_has_aes(bool value);

  // bool has_xsave = 56;
  void clear_has_xsave();
  static const int kHasXsaveFieldNumber = 56;
  bool has_xsave() const;
  void set_has_xsave(bool value);

  // bool has_osxsave = 57;
  void clear_has_osxsave();
  static const int kHasOsxsaveFieldNumber = 57;
  bool has_osxsave() const;
  void set_has_osxsave(bool value);

  // bool has_avx = 58;
  void clear_has_avx();
  static const int kHasAvxFieldNumber = 58;
  bool has_avx() const;
  void set_has_avx(bool value);

  // bool has_f16c = 59;
  void clear_has_f16c();
  static const int kHasF16CFieldNumber = 59;
  bool has_f16c() const;
  void set_has_f16c(bool value);

  // bool has_rdrand = 60;
  void clear_has_rdrand();
  static const int kHasRdrandFieldNumber = 60;
  bool has_rdrand() const;
  void set_has_rdrand(bool value);

  // bool has_hypervisor = 61;
  void clear_has_hypervisor();
  static const int kHasHypervisorFieldNumber = 61;
  bool has_hypervisor() const;
  void set_has_hypervisor(bool value);

  // bool has_syscall = 62;
  void clear_has_syscall();
  static const int kHasSyscallFieldNumber = 62;
  bool has_syscall() const;
  void set_has_syscall(bool value);

  // bool has_xd_bit = 63;
  void clear_has_xd_bit();
  static const int kHasXdBitFieldNumber = 63;
  bool has_xd_bit() const;
  void set_has_xd_bit(bool value);

  // bool has_mmxext = 64;
  void clear_has_mmxext();
  static const int kHasMmxextFieldNumber = 64;
  bool has_mmxext() const;
  void set_has_mmxext(bool value);

  // bool has_1gb_pages = 65;
  void clear_has_1gb_pages();
  static const int kHas1GbPagesFieldNumber = 65;
  bool has_1gb_pages() const;
  void set_has_1gb_pages(bool value);

  // bool has_rdtscp = 66;
  void clear_has_rdtscp();
  static const int kHasRdtscpFieldNumber = 66;
  bool has_rdtscp() const;
  void set_has_rdtscp(bool value);

  // bool has_intel64 = 67;
  void clear_has_intel64();
  static const int kHasIntel64FieldNumber = 67;
  bool has_intel64() const;
  void set_has_intel64(bool value);

  // bool has_3dnowext = 68;
  void clear_has_3dnowext();
  static const int kHas3DnowextFieldNumber = 68;
  bool has_3dnowext() const;
  void set_has_3dnowext(bool value);

  // bool has_3dnow = 69;
  void clear_has_3dnow();
  static const int kHas3DnowFieldNumber = 69;
  bool has_3dnow() const;
  void set_has_3dnow(bool value);

  // bool has_lahf = 70;
  void clear_has_lahf();
  static const int kHasLahfFieldNumber = 70;
  bool has_lahf() const;
  void set_has_lahf(bool value);

  // bool has_svm = 71;
  void clear_has_svm();
  static const int kHasSvmFieldNumber = 71;
  bool has_svm() const;
  void set_has_svm(bool value);

  // bool has_lzcnt = 72;
  void clear_has_lzcnt();
  static const int kHasLzcntFieldNumber = 72;
  bool has_lzcnt() const;
  void set_has_lzcnt(bool value);

  // bool has_sse4a = 73;
  void clear_has_sse4a();
  static const int kHasSse4AFieldNumber = 73;
  bool has_sse4a() const;
  void set_has_sse4a(bool value);

  // bool has_misalignsse = 74;
  void clear_has_misalignsse();
  static const int kHasMisalignsseFieldNumber = 74;
  bool has_misalignsse() const;
  void set_has_misalignsse(bool value);

  // bool has_3dnow_prefetch = 75;
  void clear_has_3dnow_prefetch();
  static const int kHas3DnowPrefetchFieldNumber = 75;
  bool has_3dnow_prefetch() const;
  void set_has_3dnow_prefetch(bool value);

  // bool has_xop = 76;
  void clear_has_xop();
  static const int kHasXopFieldNumber = 76;
  bool has_xop() const;
  void set_has_xop(bool value);

  // bool has_wdt = 77;
  void clear_has_wdt();
  static const int kHasWdtFieldNumber = 77;
  bool has_wdt() const;
  void set_has_wdt(bool value);

  // bool has_fma4 = 78;
  void clear_has_fma4();
  static const int kHasFma4FieldNumber = 78;
  bool has_fma4() const;
  void set_has_fma4(bool value);

  // bool has_fsgsbase = 79;
  void clear_has_fsgsbase();
  static const int kHasFsgsbaseFieldNumber = 79;
  bool has_fsgsbase() const;
  void set_has_fsgsbase(bool value);

  // bool has_sgx = 80;
  void clear_has_sgx();
  static const int kHasSgxFieldNumber = 80;
  bool has_sgx() const;
  void set_has_sgx(bool value);

  // bool has_bmi1 = 81;
  void clear_has_bmi1();
  static const int kHasBmi1FieldNumber = 81;
  bool has_bmi1() const;
  void set_has_bmi1(bool value);

  // bool has_hle = 82;
  void clear_has_hle();
  static const int kHasHleFieldNumber = 82;
  bool has_hle() const;
  void set_has_hle(bool value);

  // bool has_avx2 = 83;
  void clear_has_avx2();
  static const int kHasAvx2FieldNumber = 83;
  bool has_avx2() const;
  void set_has_avx2(bool value);

  // bool has_smep = 84;
  void clear_has_smep();
  static const int kHasSmepFieldNumber = 84;
  bool has_smep() const;
  void set_has_smep(bool value);

  // bool has_bmi2 = 85;
  void clear_has_bmi2();
  static const int kHasBmi2FieldNumber = 85;
  bool has_bmi2() const;
  void set_has_bmi2(bool value);

  // bool has_erms = 86;
  void clear_has_erms();
  static const int kHasErmsFieldNumber = 86;
  bool has_erms() const;
  void set_has_erms(bool value);

  // bool has_invpcid = 87;
  void clear_has_invpcid();
  static const int kHasInvpcidFieldNumber = 87;
  bool has_invpcid() const;
  void set_has_invpcid(bool value);

  // bool has_rtm = 88;
  void clear_has_rtm();
  static const int kHasRtmFieldNumber = 88;
  bool has_rtm() const;
  void set_has_rtm(bool value);

  // bool has_pqm = 89;
  void clear_has_pqm();
  static const int kHasPqmFieldNumber = 89;
  bool has_pqm() const;
  void set_has_pqm(bool value);

  // bool has_mpx = 90;
  void clear_has_mpx();
  static const int kHasMpxFieldNumber = 90;
  bool has_mpx() const;
  void set_has_mpx(bool value);

  // bool has_pqe = 91;
  void clear_has_pqe();
  static const int kHasPqeFieldNumber = 91;
  bool has_pqe() const;
  void set_has_pqe(bool value);

  // bool has_avx512f = 92;
  void clear_has_avx512f();
  static const int kHasAvx512FFieldNumber = 92;
  bool has_avx512f() const;
  void set_has_avx512f(bool value);

  // bool has_avx512dq = 93;
  void clear_has_avx512dq();
  static const int kHasAvx512DqFieldNumber = 93;
  bool has_avx512dq() const;
  void set_has_avx512dq(bool value);

  // bool has_rdseed = 94;
  void clear_has_rdseed();
  static const int kHasRdseedFieldNumber = 94;
  bool has_rdseed() const;
  void set_has_rdseed(bool value);

  // bool has_adx = 95;
  void clear_has_adx();
  static const int kHasAdxFieldNumber = 95;
  bool has_adx() const;
  void set_has_adx(bool value);

  // bool has_smap = 96;
  void clear_has_smap();
  static const int kHasSmapFieldNumber = 96;
  bool has_smap() const;
  void set_has_smap(bool value);

  // bool has_avx512ifma = 97;
  void clear_has_avx512ifma();
  static const int kHasAvx512IfmaFieldNumber = 97;
  bool has_avx512ifma() const;
  void set_has_avx512ifma(bool value);

  // bool has_pcommit = 98;
  void clear_has_pcommit();
  static const int kHasPcommitFieldNumber = 98;
  bool has_pcommit() const;
  void set_has_pcommit(bool value);

  // bool has_clflushopt = 99;
  void clear_has_clflushopt();
  static const int kHasClflushoptFieldNumber = 99;
  bool has_clflushopt() const;
  void set_has_clflushopt(bool value);

  // bool has_clwb = 100;
  void clear_has_clwb();
  static const int kHasClwbFieldNumber = 100;
  bool has_clwb() const;
  void set_has_clwb(bool value);

  // bool has_intel_pt = 101;
  void clear_has_intel_pt();
  static const int kHasIntelPtFieldNumber = 101;
  bool has_intel_pt() const;
  void set_has_intel_pt(bool value);

  // bool has_avx512pf = 102;
  void clear_has_avx512pf();
  static const int kHasAvx512PfFieldNumber = 102;
  bool has_avx512pf() const;
  void set_has_avx512pf(bool value);

  // bool has_avx512er = 103;
  void clear_has_avx512er();
  static const int kHasAvx512ErFieldNumber = 103;
  bool has_avx512er() const;
  void set_has_avx512er(bool value);

  // bool has_avx512cd = 104;
  void clear_has_avx512cd();
  static const int kHasAvx512CdFieldNumber = 104;
  bool has_avx512cd() const;
  void set_has_avx512cd(bool value);

  // bool has_sha = 105;
  void clear_has_sha();
  static const int kHasShaFieldNumber = 105;
  bool has_sha() const;
  void set_has_sha(bool value);

  // bool has_avx512bw = 106;
  void clear_has_avx512bw();
  static const int kHasAvx512BwFieldNumber = 106;
  bool has_avx512bw() const;
  void set_has_avx512bw(bool value);

  // bool has_avx512vl = 107;
  void clear_has_avx512vl();
  static const int kHasAvx512VlFieldNumber = 107;
  bool has_avx512vl() const;
  void set_has_avx512vl(bool value);

  // bool has_prefetchwt1 = 108;
  void clear_has_prefetchwt1();
  static const int kHasPrefetchwt1FieldNumber = 108;
  bool has_prefetchwt1() const;
  void set_has_prefetchwt1(bool value);

  // bool has_avx512vbmi = 109;
  void clear_has_avx512vbmi();
  static const int kHasAvx512VbmiFieldNumber = 109;
  bool has_avx512vbmi() const;
  void set_has_avx512vbmi(bool value);

  // bool has_umip = 110;
  void clear_has_umip();
  static const int kHasUmipFieldNumber = 110;
  bool has_umip() const;
  void set_has_umip(bool value);

  // bool has_pku = 111;
  void clear_has_pku();
  static const int kHasPkuFieldNumber = 111;
  bool has_pku() const;
  void set_has_pku(bool value);

  // bool has_ospke = 112;
  void clear_has_ospke();
  static const int kHasOspkeFieldNumber = 112;
  bool has_ospke() const;
  void set_has_ospke(bool value);

  // bool has_avx512vbmi2 = 113;
  void clear_has_avx512vbmi2();
  static const int kHasAvx512Vbmi2FieldNumber = 113;
  bool has_avx512vbmi2() const;
  void set_has_avx512vbmi2(bool value);

  // bool has_gfni = 114;
  void clear_has_gfni();
  static const int kHasGfniFieldNumber = 114;
  bool has_gfni() const;
  void set_has_gfni(bool value);

  // bool has_vaes = 115;
  void clear_has_vaes();
  static const int kHasVaesFieldNumber = 115;
  bool has_vaes() const;
  void set_has_vaes(bool value);

  // bool has_vpclmulqdq = 116;
  void clear_has_vpclmulqdq();
  static const int kHasVpclmulqdqFieldNumber = 116;
  bool has_vpclmulqdq() const;
  void set_has_vpclmulqdq(bool value);

  // bool has_avx512vnni = 117;
  void clear_has_avx512vnni();
  static const int kHasAvx512VnniFieldNumber = 117;
  bool has_avx512vnni() const;
  void set_has_avx512vnni(bool value);

  // bool has_avx512bitalg = 118;
  void clear_has_avx512bitalg();
  static const int kHasAvx512BitalgFieldNumber = 118;
  bool has_avx512bitalg() const;
  void set_has_avx512bitalg(bool value);

  // bool has_avx512vpopcntdq = 119;
  void clear_has_avx512vpopcntdq();
  static const int kHasAvx512VpopcntdqFieldNumber = 119;
  bool has_avx512vpopcntdq() const;
  void set_has_avx512vpopcntdq(bool value);

  // bool has_rdpid = 120;
  void clear_has_rdpid();
  static const int kHasRdpidFieldNumber = 120;
  bool has_rdpid() const;
  void set_has_rdpid(bool value);

  // bool has_sgx_lc = 121;
  void clear_has_sgx_lc();
  static const int kHasSgxLcFieldNumber = 121;
  bool has_sgx_lc() const;
  void set_has_sgx_lc(bool value);

  // bool has_avx512_4vnniw = 122;
  void clear_has_avx512_4vnniw();
  static const int kHasAvx5124VnniwFieldNumber = 122;
  bool has_avx512_4vnniw() const;
  void set_has_avx512_4vnniw(bool value);

  // bool has_avx512_4fmaps = 123;
  void clear_has_avx512_4fmaps();
  static const int kHasAvx5124FmapsFieldNumber = 123;
  bool has_avx512_4fmaps() const;
  void set_has_avx512_4fmaps(bool value);

  // bool has_ais = 124;
  void clear_has_ais();
  static const int kHasAisFieldNumber = 124;
  bool has_ais() const;
  void set_has_ais(bool value);

  // bool has_ais_e = 125;
  void clear_has_ais_e();
  static const int kHasAisEFieldNumber = 125;
  bool has_ais_e() const;
  void set_has_ais_e(bool value);

  // bool has_rng = 126;
  void clear_has_rng();
  static const int kHasRngFieldNumber = 126;
  bool has_rng() const;
  void set_has_rng(bool value);

  // bool has_rng_e = 127;
  void clear_has_rng_e();
  static const int kHasRngEFieldNumber = 127;
  bool has_rng_e() const;
  void set_has_rng_e(bool value);

  // bool has_lh = 128;
  void clear_has_lh();
  static const int kHasLhFieldNumber = 128;
  bool has_lh() const;
  void set_has_lh(bool value);

  // bool has_femms = 129;
  void clear_has_femms();
  static const int kHasFemmsFieldNumber = 129;
  bool has_femms() const;
  void set_has_femms(bool value);

  // bool has_ace = 130;
  void clear_has_ace();
  static const int kHasAceFieldNumber = 130;
  bool has_ace() const;
  void set_has_ace(bool value);

  // bool has_ace_e = 131;
  void clear_has_ace_e();
  static const int kHasAceEFieldNumber = 131;
  bool has_ace_e() const;
  void set_has_ace_e(bool value);

  // bool has_ace2 = 132;
  void clear_has_ace2();
  static const int kHasAce2FieldNumber = 132;
  bool has_ace2() const;
  void set_has_ace2(bool value);

  // bool has_ace2_e = 133;
  void clear_has_ace2_e();
  static const int kHasAce2EFieldNumber = 133;
  bool has_ace2_e() const;
  void set_has_ace2_e(bool value);

  // bool has_phe = 134;
  void clear_has_phe();
  static const int kHasPheFieldNumber = 134;
  bool has_phe() const;
  void set_has_phe(bool value);

  // bool has_phe_e = 135;
  void clear_has_phe_e();
  static const int kHasPheEFieldNumber = 135;
  bool has_phe_e() const;
  void set_has_phe_e(bool value);

  // bool has_pmm = 136;
  void clear_has_pmm();
  static const int kHasPmmFieldNumber = 136;
  bool has_pmm() const;
  void set_has_pmm(bool value);

  // bool has_pmm_e = 137;
  void clear_has_pmm_e();
  static const int kHasPmmEFieldNumber = 137;
  bool has_pmm_e() const;
  void set_has_pmm_e(bool value);

  // bool has_parallax = 138;
  void clear_has_parallax();
  static const int kHasParallaxFieldNumber = 138;
  bool has_parallax() const;
  void set_has_parallax(bool value);

  // bool has_parallax_e = 139;
  void clear_has_parallax_e();
  static const int kHasParallaxEFieldNumber = 139;
  bool has_parallax_e() const;
  void set_has_parallax_e(bool value);

  // bool has_overstress = 140;
  void clear_has_overstress();
  static const int kHasOverstressFieldNumber = 140;
  bool has_overstress() const;
  void set_has_overstress(bool value);

  // bool has_overstress_e = 141;
  void clear_has_overstress_e();
  static const int kHasOverstressEFieldNumber = 141;
  bool has_overstress_e() const;
  void set_has_overstress_e(bool value);

  // bool has_tm3 = 142;
  void clear_has_tm3();
  static const int kHasTm3FieldNumber = 142;
  bool has_tm3() const;
  void set_has_tm3(bool value);

  // bool has_tm3_e = 143;
  void clear_has_tm3_e();
  static const int kHasTm3EFieldNumber = 143;
  bool has_tm3_e() const;
  void set_has_tm3_e(bool value);

  // bool has_rng2 = 144;
  void clear_has_rng2();
  static const int kHasRng2FieldNumber = 144;
  bool has_rng2() const;
  void set_has_rng2(bool value);

  // bool has_rng2_e = 145;
  void clear_has_rng2_e();
  static const int kHasRng2EFieldNumber = 145;
  bool has_rng2_e() const;
  void set_has_rng2_e(bool value);

  // bool has_phe2 = 146;
  void clear_has_phe2();
  static const int kHasPhe2FieldNumber = 146;
  bool has_phe2() const;
  void set_has_phe2(bool value);

  // bool has_phe2_e = 147;
  void clear_has_phe2_e();
  static const int kHasPhe2EFieldNumber = 147;
  bool has_phe2_e() const;
  void set_has_phe2_e(bool value);

  // bool has_ibs = 148;
  void clear_has_ibs();
  static const int kHasIbsFieldNumber = 148;
  bool has_ibs() const;
  void set_has_ibs(bool value);

  // bool has_skinit = 149;
  void clear_has_skinit();
  static const int kHasSkinitFieldNumber = 149;
  bool has_skinit() const;
  void set_has_skinit(bool value);

  // bool has_lwp = 150;
  void clear_has_lwp();
  static const int kHasLwpFieldNumber = 150;
  bool has_lwp() const;
  void set_has_lwp(bool value);

  // bool has_tbm = 151;
  void clear_has_tbm();
  static const int kHasTbmFieldNumber = 151;
  bool has_tbm() const;
  void set_has_tbm(bool value);

  // bool has_perfctr_core = 152;
  void clear_has_perfctr_core();
  static const int kHasPerfctrCoreFieldNumber = 152;
  bool has_perfctr_core() const;
  void set_has_perfctr_core(bool value);

  // bool has_perfctr_nb = 153;
  void clear_has_perfctr_nb();
  static const int kHasPerfctrNbFieldNumber = 153;
  bool has_perfctr_nb() const;
  void set_has_perfctr_nb(bool value);

  // bool has_bpext = 154;
  void clear_has_bpext();
  static const int kHasBpextFieldNumber = 154;
  bool has_bpext() const;
  void set_has_bpext(bool value);

  // bool has_ptsc = 155;
  void clear_has_ptsc();
  static const int kHasPtscFieldNumber = 155;
  bool has_ptsc() const;
  void set_has_ptsc(bool value);

  // bool has_mwaitx = 156;
  void clear_has_mwaitx();
  static const int kHasMwaitxFieldNumber = 156;
  bool has_mwaitx() const;
  void set_has_mwaitx(bool value);

  // bool has_extapic = 157;
  void clear_has_extapic();
  static const int kHasExtapicFieldNumber = 157;
  bool has_extapic() const;
  void set_has_extapic(bool value);

  // bool has_longrun = 158;
  void clear_has_longrun();
  static const int kHasLongrunFieldNumber = 158;
  bool has_longrun() const;
  void set_has_longrun(bool value);

  // bool has_lrti = 159;
  void clear_has_lrti();
  static const int kHasLrtiFieldNumber = 159;
  bool has_lrti() const;
  void set_has_lrti(bool value);

  // @@protoc_insertion_point(class_scope:aspia.proto.CPU.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool has_fpu_;
  bool has_vme_;
  bool has_de_;
  bool has_pse_;
  bool has_tsc_;
  bool has_msr_;
  bool has_pae_;
  bool has_mce_;
  bool has_cx8_;
  bool has_apic_;
  bool has_sep_;
  bool has_mtrr_;
  bool has_pge_;
  bool has_mca_;
  bool has_cmov_;
  bool has_pat_;
  bool has_pse36_;
  bool has_psn_;
  bool has_clfsh_;
  bool has_ds_;
  bool has_acpu_;
  bool has_mmx_;
  bool has_fxsr_;
  bool has_sse_;
  bool has_sse2_;
  bool has_ss_;
  bool has_htt_;
  bool has_tm_;
  bool has_ia64_;
  bool has_pbe_;
  bool has_sse3_;
  bool has_pclmuldq_;
  bool has_dtes64_;
  bool has_monitor_;
  bool has_ds_cpl_;
  bool has_vmx_;
  bool has_smx_;
  bool has_est_;
  bool has_tm2_;
  bool has_ssse3_;
  bool has_cnxt_id_;
  bool has_sdbg_;
  bool has_fma_;
  bool has_cx16_;
  bool has_xtpr_;
  bool has_pdcm_;
  bool has_pcid_;
  bool has_dca_;
  bool has_sse41_;
  bool has_sse42_;
  bool has_x2apic_;
  bool has_movbe_;
  bool has_popcnt_;
  bool has_tsc_deadline_;
  bool has_aes_;
  bool has_xsave_;
  bool has_osxsave_;
  bool has_avx_;
  bool has_f16c_;
  bool has_rdrand_;
  bool has_hypervisor_;
  bool has_syscall_;
  bool has_xd_bit_;
  bool has_mmxext_;
  bool has_1gb_pages_;
  bool has_rdtscp_;
  bool has_intel64_;
  bool has_3dnowext_;
  bool has_3dnow_;
  bool has_lahf_;
  bool has_svm_;
  bool has_lzcnt_;
  bool has_sse4a_;
  bool has_misalignsse_;
  bool has_3dnow_prefetch_;
  bool has_xop_;
  bool has_wdt_;
  bool has_fma4_;
  bool has_fsgsbase_;
  bool has_sgx_;
  bool has_bmi1_;
  bool has_hle_;
  bool has_avx2_;
  bool has_smep_;
  bool has_bmi2_;
  bool has_erms_;
  bool has_invpcid_;
  bool has_rtm_;
  bool has_pqm_;
  bool has_mpx_;
  bool has_pqe_;
  bool has_avx512f_;
  bool has_avx512dq_;
  bool has_rdseed_;
  bool has_adx_;
  bool has_smap_;
  bool has_avx512ifma_;
  bool has_pcommit_;
  bool has_clflushopt_;
  bool has_clwb_;
  bool has_intel_pt_;
  bool has_avx512pf_;
  bool has_avx512er_;
  bool has_avx512cd_;
  bool has_sha_;
  bool has_avx512bw_;
  bool has_avx512vl_;
  bool has_prefetchwt1_;
  bool has_avx512vbmi_;
  bool has_umip_;
  bool has_pku_;
  bool has_ospke_;
  bool has_avx512vbmi2_;
  bool has_gfni_;
  bool has_vaes_;
  bool has_vpclmulqdq_;
  bool has_avx512vnni_;
  bool has_avx512bitalg_;
  bool has_avx512vpopcntdq_;
  bool has_rdpid_;
  bool has_sgx_lc_;
  bool has_avx512_4vnniw_;
  bool has_avx512_4fmaps_;
  bool has_ais_;
  bool has_ais_e_;
  bool has_rng_;
  bool has_rng_e_;
  bool has_lh_;
  bool has_femms_;
  bool has_ace_;
  bool has_ace_e_;
  bool has_ace2_;
  bool has_ace2_e_;
  bool has_phe_;
  bool has_phe_e_;
  bool has_pmm_;
  bool has_pmm_e_;
  bool has_parallax_;
  bool has_parallax_e_;
  bool has_overstress_;
  bool has_overstress_e_;
  bool has_tm3_;
  bool has_tm3_e_;
  bool has_rng2_;
  bool has_rng2_e_;
  bool has_phe2_;
  bool has_phe2_e_;
  bool has_ibs_;
  bool has_skinit_;
  bool has_lwp_;
  bool has_tbm_;
  bool has_perfctr_core_;
  bool has_perfctr_nb_;
  bool has_bpext_;
  bool has_ptsc_;
  bool has_mwaitx_;
  bool has_extapic_;
  bool has_longrun_;
  bool has_lrti_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fcpu_2eproto::TableStruct;
  friend void ::protobuf_category_5fcpu_2eproto::InitDefaultsCPU_FeaturesImpl();
};
// -------------------------------------------------------------------

class CPU : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.CPU) */ {
 public:
  CPU();
  virtual ~CPU();

  CPU(const CPU& from);

  inline CPU& operator=(const CPU& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPU(CPU&& from) noexcept
    : CPU() {
    *this = ::std::move(from);
  }

  inline CPU& operator=(CPU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CPU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPU* internal_default_instance() {
    return reinterpret_cast<const CPU*>(
               &_CPU_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CPU* other);
  friend void swap(CPU& a, CPU& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPU* New() const PROTOBUF_FINAL { return New(NULL); }

  CPU* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CPU& from);
  void MergeFrom(const CPU& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CPU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CPU_Features Features;

  // accessors -------------------------------------------------------

  // string brand_string = 1;
  void clear_brand_string();
  static const int kBrandStringFieldNumber = 1;
  const ::std::string& brand_string() const;
  void set_brand_string(const ::std::string& value);
  #if LANG_CXX11
  void set_brand_string(::std::string&& value);
  #endif
  void set_brand_string(const char* value);
  void set_brand_string(const char* value, size_t size);
  ::std::string* mutable_brand_string();
  ::std::string* release_brand_string();
  void set_allocated_brand_string(::std::string* brand_string);

  // string vendor = 2;
  void clear_vendor();
  static const int kVendorFieldNumber = 2;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // .aspia.proto.CPU.Features features = 12;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 12;
  const ::aspia::proto::CPU_Features& features() const;
  ::aspia::proto::CPU_Features* release_features();
  ::aspia::proto::CPU_Features* mutable_features();
  void set_allocated_features(::aspia::proto::CPU_Features* features);

  // uint32 stepping = 3;
  void clear_stepping();
  static const int kSteppingFieldNumber = 3;
  ::google::protobuf::uint32 stepping() const;
  void set_stepping(::google::protobuf::uint32 value);

  // uint32 model = 4;
  void clear_model();
  static const int kModelFieldNumber = 4;
  ::google::protobuf::uint32 model() const;
  void set_model(::google::protobuf::uint32 value);

  // uint32 family = 5;
  void clear_family();
  static const int kFamilyFieldNumber = 5;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // uint32 extended_model = 6;
  void clear_extended_model();
  static const int kExtendedModelFieldNumber = 6;
  ::google::protobuf::uint32 extended_model() const;
  void set_extended_model(::google::protobuf::uint32 value);

  // uint32 extended_family = 7;
  void clear_extended_family();
  static const int kExtendedFamilyFieldNumber = 7;
  ::google::protobuf::uint32 extended_family() const;
  void set_extended_family(::google::protobuf::uint32 value);

  // uint32 brand_id = 8;
  void clear_brand_id();
  static const int kBrandIdFieldNumber = 8;
  ::google::protobuf::uint32 brand_id() const;
  void set_brand_id(::google::protobuf::uint32 value);

  // uint32 packages = 9;
  void clear_packages();
  static const int kPackagesFieldNumber = 9;
  ::google::protobuf::uint32 packages() const;
  void set_packages(::google::protobuf::uint32 value);

  // uint32 physical_cores = 10;
  void clear_physical_cores();
  static const int kPhysicalCoresFieldNumber = 10;
  ::google::protobuf::uint32 physical_cores() const;
  void set_physical_cores(::google::protobuf::uint32 value);

  // uint32 logical_cores = 11;
  void clear_logical_cores();
  static const int kLogicalCoresFieldNumber = 11;
  ::google::protobuf::uint32 logical_cores() const;
  void set_logical_cores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.CPU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr brand_string_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::aspia::proto::CPU_Features* features_;
  ::google::protobuf::uint32 stepping_;
  ::google::protobuf::uint32 model_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint32 extended_model_;
  ::google::protobuf::uint32 extended_family_;
  ::google::protobuf::uint32 brand_id_;
  ::google::protobuf::uint32 packages_;
  ::google::protobuf::uint32 physical_cores_;
  ::google::protobuf::uint32 logical_cores_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fcpu_2eproto::TableStruct;
  friend void ::protobuf_category_5fcpu_2eproto::InitDefaultsCPUImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPU_Features

// bool has_fpu = 1;
inline void CPU_Features::clear_has_fpu() {
  has_fpu_ = false;
}
inline bool CPU_Features::has_fpu() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_fpu)
  return has_fpu_;
}
inline void CPU_Features::set_has_fpu(bool value) {
  
  has_fpu_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_fpu)
}

// bool has_vme = 2;
inline void CPU_Features::clear_has_vme() {
  has_vme_ = false;
}
inline bool CPU_Features::has_vme() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_vme)
  return has_vme_;
}
inline void CPU_Features::set_has_vme(bool value) {
  
  has_vme_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_vme)
}

// bool has_de = 3;
inline void CPU_Features::clear_has_de() {
  has_de_ = false;
}
inline bool CPU_Features::has_de() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_de)
  return has_de_;
}
inline void CPU_Features::set_has_de(bool value) {
  
  has_de_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_de)
}

// bool has_pse = 4;
inline void CPU_Features::clear_has_pse() {
  has_pse_ = false;
}
inline bool CPU_Features::has_pse() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pse)
  return has_pse_;
}
inline void CPU_Features::set_has_pse(bool value) {
  
  has_pse_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pse)
}

// bool has_tsc = 5;
inline void CPU_Features::clear_has_tsc() {
  has_tsc_ = false;
}
inline bool CPU_Features::has_tsc() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tsc)
  return has_tsc_;
}
inline void CPU_Features::set_has_tsc(bool value) {
  
  has_tsc_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tsc)
}

// bool has_msr = 6;
inline void CPU_Features::clear_has_msr() {
  has_msr_ = false;
}
inline bool CPU_Features::has_msr() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_msr)
  return has_msr_;
}
inline void CPU_Features::set_has_msr(bool value) {
  
  has_msr_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_msr)
}

// bool has_pae = 7;
inline void CPU_Features::clear_has_pae() {
  has_pae_ = false;
}
inline bool CPU_Features::has_pae() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pae)
  return has_pae_;
}
inline void CPU_Features::set_has_pae(bool value) {
  
  has_pae_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pae)
}

// bool has_mce = 8;
inline void CPU_Features::clear_has_mce() {
  has_mce_ = false;
}
inline bool CPU_Features::has_mce() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mce)
  return has_mce_;
}
inline void CPU_Features::set_has_mce(bool value) {
  
  has_mce_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mce)
}

// bool has_cx8 = 9;
inline void CPU_Features::clear_has_cx8() {
  has_cx8_ = false;
}
inline bool CPU_Features::has_cx8() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_cx8)
  return has_cx8_;
}
inline void CPU_Features::set_has_cx8(bool value) {
  
  has_cx8_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_cx8)
}

// bool has_apic = 10;
inline void CPU_Features::clear_has_apic() {
  has_apic_ = false;
}
inline bool CPU_Features::has_apic() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_apic)
  return has_apic_;
}
inline void CPU_Features::set_has_apic(bool value) {
  
  has_apic_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_apic)
}

// bool has_sep = 11;
inline void CPU_Features::clear_has_sep() {
  has_sep_ = false;
}
inline bool CPU_Features::has_sep() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sep)
  return has_sep_;
}
inline void CPU_Features::set_has_sep(bool value) {
  
  has_sep_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sep)
}

// bool has_mtrr = 12;
inline void CPU_Features::clear_has_mtrr() {
  has_mtrr_ = false;
}
inline bool CPU_Features::has_mtrr() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mtrr)
  return has_mtrr_;
}
inline void CPU_Features::set_has_mtrr(bool value) {
  
  has_mtrr_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mtrr)
}

// bool has_pge = 13;
inline void CPU_Features::clear_has_pge() {
  has_pge_ = false;
}
inline bool CPU_Features::has_pge() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pge)
  return has_pge_;
}
inline void CPU_Features::set_has_pge(bool value) {
  
  has_pge_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pge)
}

// bool has_mca = 14;
inline void CPU_Features::clear_has_mca() {
  has_mca_ = false;
}
inline bool CPU_Features::has_mca() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mca)
  return has_mca_;
}
inline void CPU_Features::set_has_mca(bool value) {
  
  has_mca_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mca)
}

// bool has_cmov = 15;
inline void CPU_Features::clear_has_cmov() {
  has_cmov_ = false;
}
inline bool CPU_Features::has_cmov() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_cmov)
  return has_cmov_;
}
inline void CPU_Features::set_has_cmov(bool value) {
  
  has_cmov_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_cmov)
}

// bool has_pat = 16;
inline void CPU_Features::clear_has_pat() {
  has_pat_ = false;
}
inline bool CPU_Features::has_pat() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pat)
  return has_pat_;
}
inline void CPU_Features::set_has_pat(bool value) {
  
  has_pat_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pat)
}

// bool has_pse36 = 17;
inline void CPU_Features::clear_has_pse36() {
  has_pse36_ = false;
}
inline bool CPU_Features::has_pse36() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pse36)
  return has_pse36_;
}
inline void CPU_Features::set_has_pse36(bool value) {
  
  has_pse36_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pse36)
}

// bool has_psn = 18;
inline void CPU_Features::clear_has_psn() {
  has_psn_ = false;
}
inline bool CPU_Features::has_psn() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_psn)
  return has_psn_;
}
inline void CPU_Features::set_has_psn(bool value) {
  
  has_psn_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_psn)
}

// bool has_clfsh = 19;
inline void CPU_Features::clear_has_clfsh() {
  has_clfsh_ = false;
}
inline bool CPU_Features::has_clfsh() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_clfsh)
  return has_clfsh_;
}
inline void CPU_Features::set_has_clfsh(bool value) {
  
  has_clfsh_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_clfsh)
}

// bool has_ds = 20;
inline void CPU_Features::clear_has_ds() {
  has_ds_ = false;
}
inline bool CPU_Features::has_ds() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ds)
  return has_ds_;
}
inline void CPU_Features::set_has_ds(bool value) {
  
  has_ds_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ds)
}

// bool has_acpu = 21;
inline void CPU_Features::clear_has_acpu() {
  has_acpu_ = false;
}
inline bool CPU_Features::has_acpu() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_acpu)
  return has_acpu_;
}
inline void CPU_Features::set_has_acpu(bool value) {
  
  has_acpu_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_acpu)
}

// bool has_mmx = 22;
inline void CPU_Features::clear_has_mmx() {
  has_mmx_ = false;
}
inline bool CPU_Features::has_mmx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mmx)
  return has_mmx_;
}
inline void CPU_Features::set_has_mmx(bool value) {
  
  has_mmx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mmx)
}

// bool has_fxsr = 23;
inline void CPU_Features::clear_has_fxsr() {
  has_fxsr_ = false;
}
inline bool CPU_Features::has_fxsr() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_fxsr)
  return has_fxsr_;
}
inline void CPU_Features::set_has_fxsr(bool value) {
  
  has_fxsr_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_fxsr)
}

// bool has_sse = 24;
inline void CPU_Features::clear_has_sse() {
  has_sse_ = false;
}
inline bool CPU_Features::has_sse() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse)
  return has_sse_;
}
inline void CPU_Features::set_has_sse(bool value) {
  
  has_sse_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse)
}

// bool has_sse2 = 25;
inline void CPU_Features::clear_has_sse2() {
  has_sse2_ = false;
}
inline bool CPU_Features::has_sse2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse2)
  return has_sse2_;
}
inline void CPU_Features::set_has_sse2(bool value) {
  
  has_sse2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse2)
}

// bool has_ss = 26;
inline void CPU_Features::clear_has_ss() {
  has_ss_ = false;
}
inline bool CPU_Features::has_ss() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ss)
  return has_ss_;
}
inline void CPU_Features::set_has_ss(bool value) {
  
  has_ss_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ss)
}

// bool has_htt = 27;
inline void CPU_Features::clear_has_htt() {
  has_htt_ = false;
}
inline bool CPU_Features::has_htt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_htt)
  return has_htt_;
}
inline void CPU_Features::set_has_htt(bool value) {
  
  has_htt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_htt)
}

// bool has_tm = 28;
inline void CPU_Features::clear_has_tm() {
  has_tm_ = false;
}
inline bool CPU_Features::has_tm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tm)
  return has_tm_;
}
inline void CPU_Features::set_has_tm(bool value) {
  
  has_tm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tm)
}

// bool has_ia64 = 29;
inline void CPU_Features::clear_has_ia64() {
  has_ia64_ = false;
}
inline bool CPU_Features::has_ia64() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ia64)
  return has_ia64_;
}
inline void CPU_Features::set_has_ia64(bool value) {
  
  has_ia64_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ia64)
}

// bool has_pbe = 30;
inline void CPU_Features::clear_has_pbe() {
  has_pbe_ = false;
}
inline bool CPU_Features::has_pbe() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pbe)
  return has_pbe_;
}
inline void CPU_Features::set_has_pbe(bool value) {
  
  has_pbe_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pbe)
}

// bool has_sse3 = 31;
inline void CPU_Features::clear_has_sse3() {
  has_sse3_ = false;
}
inline bool CPU_Features::has_sse3() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse3)
  return has_sse3_;
}
inline void CPU_Features::set_has_sse3(bool value) {
  
  has_sse3_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse3)
}

// bool has_pclmuldq = 32;
inline void CPU_Features::clear_has_pclmuldq() {
  has_pclmuldq_ = false;
}
inline bool CPU_Features::has_pclmuldq() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pclmuldq)
  return has_pclmuldq_;
}
inline void CPU_Features::set_has_pclmuldq(bool value) {
  
  has_pclmuldq_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pclmuldq)
}

// bool has_dtes64 = 33;
inline void CPU_Features::clear_has_dtes64() {
  has_dtes64_ = false;
}
inline bool CPU_Features::has_dtes64() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_dtes64)
  return has_dtes64_;
}
inline void CPU_Features::set_has_dtes64(bool value) {
  
  has_dtes64_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_dtes64)
}

// bool has_monitor = 34;
inline void CPU_Features::clear_has_monitor() {
  has_monitor_ = false;
}
inline bool CPU_Features::has_monitor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_monitor)
  return has_monitor_;
}
inline void CPU_Features::set_has_monitor(bool value) {
  
  has_monitor_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_monitor)
}

// bool has_ds_cpl = 35;
inline void CPU_Features::clear_has_ds_cpl() {
  has_ds_cpl_ = false;
}
inline bool CPU_Features::has_ds_cpl() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ds_cpl)
  return has_ds_cpl_;
}
inline void CPU_Features::set_has_ds_cpl(bool value) {
  
  has_ds_cpl_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ds_cpl)
}

// bool has_vmx = 36;
inline void CPU_Features::clear_has_vmx() {
  has_vmx_ = false;
}
inline bool CPU_Features::has_vmx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_vmx)
  return has_vmx_;
}
inline void CPU_Features::set_has_vmx(bool value) {
  
  has_vmx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_vmx)
}

// bool has_smx = 37;
inline void CPU_Features::clear_has_smx() {
  has_smx_ = false;
}
inline bool CPU_Features::has_smx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_smx)
  return has_smx_;
}
inline void CPU_Features::set_has_smx(bool value) {
  
  has_smx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_smx)
}

// bool has_est = 38;
inline void CPU_Features::clear_has_est() {
  has_est_ = false;
}
inline bool CPU_Features::has_est() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_est)
  return has_est_;
}
inline void CPU_Features::set_has_est(bool value) {
  
  has_est_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_est)
}

// bool has_tm2 = 39;
inline void CPU_Features::clear_has_tm2() {
  has_tm2_ = false;
}
inline bool CPU_Features::has_tm2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tm2)
  return has_tm2_;
}
inline void CPU_Features::set_has_tm2(bool value) {
  
  has_tm2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tm2)
}

// bool has_ssse3 = 40;
inline void CPU_Features::clear_has_ssse3() {
  has_ssse3_ = false;
}
inline bool CPU_Features::has_ssse3() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ssse3)
  return has_ssse3_;
}
inline void CPU_Features::set_has_ssse3(bool value) {
  
  has_ssse3_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ssse3)
}

// bool has_cnxt_id = 41;
inline void CPU_Features::clear_has_cnxt_id() {
  has_cnxt_id_ = false;
}
inline bool CPU_Features::has_cnxt_id() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_cnxt_id)
  return has_cnxt_id_;
}
inline void CPU_Features::set_has_cnxt_id(bool value) {
  
  has_cnxt_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_cnxt_id)
}

// bool has_sdbg = 42;
inline void CPU_Features::clear_has_sdbg() {
  has_sdbg_ = false;
}
inline bool CPU_Features::has_sdbg() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sdbg)
  return has_sdbg_;
}
inline void CPU_Features::set_has_sdbg(bool value) {
  
  has_sdbg_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sdbg)
}

// bool has_fma = 43;
inline void CPU_Features::clear_has_fma() {
  has_fma_ = false;
}
inline bool CPU_Features::has_fma() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_fma)
  return has_fma_;
}
inline void CPU_Features::set_has_fma(bool value) {
  
  has_fma_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_fma)
}

// bool has_cx16 = 44;
inline void CPU_Features::clear_has_cx16() {
  has_cx16_ = false;
}
inline bool CPU_Features::has_cx16() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_cx16)
  return has_cx16_;
}
inline void CPU_Features::set_has_cx16(bool value) {
  
  has_cx16_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_cx16)
}

// bool has_xtpr = 45;
inline void CPU_Features::clear_has_xtpr() {
  has_xtpr_ = false;
}
inline bool CPU_Features::has_xtpr() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_xtpr)
  return has_xtpr_;
}
inline void CPU_Features::set_has_xtpr(bool value) {
  
  has_xtpr_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_xtpr)
}

// bool has_pdcm = 46;
inline void CPU_Features::clear_has_pdcm() {
  has_pdcm_ = false;
}
inline bool CPU_Features::has_pdcm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pdcm)
  return has_pdcm_;
}
inline void CPU_Features::set_has_pdcm(bool value) {
  
  has_pdcm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pdcm)
}

// bool has_pcid = 47;
inline void CPU_Features::clear_has_pcid() {
  has_pcid_ = false;
}
inline bool CPU_Features::has_pcid() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pcid)
  return has_pcid_;
}
inline void CPU_Features::set_has_pcid(bool value) {
  
  has_pcid_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pcid)
}

// bool has_dca = 48;
inline void CPU_Features::clear_has_dca() {
  has_dca_ = false;
}
inline bool CPU_Features::has_dca() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_dca)
  return has_dca_;
}
inline void CPU_Features::set_has_dca(bool value) {
  
  has_dca_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_dca)
}

// bool has_sse41 = 49;
inline void CPU_Features::clear_has_sse41() {
  has_sse41_ = false;
}
inline bool CPU_Features::has_sse41() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse41)
  return has_sse41_;
}
inline void CPU_Features::set_has_sse41(bool value) {
  
  has_sse41_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse41)
}

// bool has_sse42 = 50;
inline void CPU_Features::clear_has_sse42() {
  has_sse42_ = false;
}
inline bool CPU_Features::has_sse42() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse42)
  return has_sse42_;
}
inline void CPU_Features::set_has_sse42(bool value) {
  
  has_sse42_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse42)
}

// bool has_x2apic = 51;
inline void CPU_Features::clear_has_x2apic() {
  has_x2apic_ = false;
}
inline bool CPU_Features::has_x2apic() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_x2apic)
  return has_x2apic_;
}
inline void CPU_Features::set_has_x2apic(bool value) {
  
  has_x2apic_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_x2apic)
}

// bool has_movbe = 52;
inline void CPU_Features::clear_has_movbe() {
  has_movbe_ = false;
}
inline bool CPU_Features::has_movbe() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_movbe)
  return has_movbe_;
}
inline void CPU_Features::set_has_movbe(bool value) {
  
  has_movbe_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_movbe)
}

// bool has_popcnt = 53;
inline void CPU_Features::clear_has_popcnt() {
  has_popcnt_ = false;
}
inline bool CPU_Features::has_popcnt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_popcnt)
  return has_popcnt_;
}
inline void CPU_Features::set_has_popcnt(bool value) {
  
  has_popcnt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_popcnt)
}

// bool has_tsc_deadline = 54;
inline void CPU_Features::clear_has_tsc_deadline() {
  has_tsc_deadline_ = false;
}
inline bool CPU_Features::has_tsc_deadline() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tsc_deadline)
  return has_tsc_deadline_;
}
inline void CPU_Features::set_has_tsc_deadline(bool value) {
  
  has_tsc_deadline_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tsc_deadline)
}

// bool has_aes = 55;
inline void CPU_Features::clear_has_aes() {
  has_aes_ = false;
}
inline bool CPU_Features::has_aes() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_aes)
  return has_aes_;
}
inline void CPU_Features::set_has_aes(bool value) {
  
  has_aes_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_aes)
}

// bool has_xsave = 56;
inline void CPU_Features::clear_has_xsave() {
  has_xsave_ = false;
}
inline bool CPU_Features::has_xsave() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_xsave)
  return has_xsave_;
}
inline void CPU_Features::set_has_xsave(bool value) {
  
  has_xsave_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_xsave)
}

// bool has_osxsave = 57;
inline void CPU_Features::clear_has_osxsave() {
  has_osxsave_ = false;
}
inline bool CPU_Features::has_osxsave() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_osxsave)
  return has_osxsave_;
}
inline void CPU_Features::set_has_osxsave(bool value) {
  
  has_osxsave_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_osxsave)
}

// bool has_avx = 58;
inline void CPU_Features::clear_has_avx() {
  has_avx_ = false;
}
inline bool CPU_Features::has_avx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx)
  return has_avx_;
}
inline void CPU_Features::set_has_avx(bool value) {
  
  has_avx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx)
}

// bool has_f16c = 59;
inline void CPU_Features::clear_has_f16c() {
  has_f16c_ = false;
}
inline bool CPU_Features::has_f16c() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_f16c)
  return has_f16c_;
}
inline void CPU_Features::set_has_f16c(bool value) {
  
  has_f16c_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_f16c)
}

// bool has_rdrand = 60;
inline void CPU_Features::clear_has_rdrand() {
  has_rdrand_ = false;
}
inline bool CPU_Features::has_rdrand() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rdrand)
  return has_rdrand_;
}
inline void CPU_Features::set_has_rdrand(bool value) {
  
  has_rdrand_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rdrand)
}

// bool has_hypervisor = 61;
inline void CPU_Features::clear_has_hypervisor() {
  has_hypervisor_ = false;
}
inline bool CPU_Features::has_hypervisor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_hypervisor)
  return has_hypervisor_;
}
inline void CPU_Features::set_has_hypervisor(bool value) {
  
  has_hypervisor_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_hypervisor)
}

// bool has_syscall = 62;
inline void CPU_Features::clear_has_syscall() {
  has_syscall_ = false;
}
inline bool CPU_Features::has_syscall() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_syscall)
  return has_syscall_;
}
inline void CPU_Features::set_has_syscall(bool value) {
  
  has_syscall_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_syscall)
}

// bool has_xd_bit = 63;
inline void CPU_Features::clear_has_xd_bit() {
  has_xd_bit_ = false;
}
inline bool CPU_Features::has_xd_bit() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_xd_bit)
  return has_xd_bit_;
}
inline void CPU_Features::set_has_xd_bit(bool value) {
  
  has_xd_bit_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_xd_bit)
}

// bool has_mmxext = 64;
inline void CPU_Features::clear_has_mmxext() {
  has_mmxext_ = false;
}
inline bool CPU_Features::has_mmxext() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mmxext)
  return has_mmxext_;
}
inline void CPU_Features::set_has_mmxext(bool value) {
  
  has_mmxext_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mmxext)
}

// bool has_1gb_pages = 65;
inline void CPU_Features::clear_has_1gb_pages() {
  has_1gb_pages_ = false;
}
inline bool CPU_Features::has_1gb_pages() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_1gb_pages)
  return has_1gb_pages_;
}
inline void CPU_Features::set_has_1gb_pages(bool value) {
  
  has_1gb_pages_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_1gb_pages)
}

// bool has_rdtscp = 66;
inline void CPU_Features::clear_has_rdtscp() {
  has_rdtscp_ = false;
}
inline bool CPU_Features::has_rdtscp() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rdtscp)
  return has_rdtscp_;
}
inline void CPU_Features::set_has_rdtscp(bool value) {
  
  has_rdtscp_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rdtscp)
}

// bool has_intel64 = 67;
inline void CPU_Features::clear_has_intel64() {
  has_intel64_ = false;
}
inline bool CPU_Features::has_intel64() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_intel64)
  return has_intel64_;
}
inline void CPU_Features::set_has_intel64(bool value) {
  
  has_intel64_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_intel64)
}

// bool has_3dnowext = 68;
inline void CPU_Features::clear_has_3dnowext() {
  has_3dnowext_ = false;
}
inline bool CPU_Features::has_3dnowext() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_3dnowext)
  return has_3dnowext_;
}
inline void CPU_Features::set_has_3dnowext(bool value) {
  
  has_3dnowext_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_3dnowext)
}

// bool has_3dnow = 69;
inline void CPU_Features::clear_has_3dnow() {
  has_3dnow_ = false;
}
inline bool CPU_Features::has_3dnow() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_3dnow)
  return has_3dnow_;
}
inline void CPU_Features::set_has_3dnow(bool value) {
  
  has_3dnow_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_3dnow)
}

// bool has_lahf = 70;
inline void CPU_Features::clear_has_lahf() {
  has_lahf_ = false;
}
inline bool CPU_Features::has_lahf() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_lahf)
  return has_lahf_;
}
inline void CPU_Features::set_has_lahf(bool value) {
  
  has_lahf_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_lahf)
}

// bool has_svm = 71;
inline void CPU_Features::clear_has_svm() {
  has_svm_ = false;
}
inline bool CPU_Features::has_svm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_svm)
  return has_svm_;
}
inline void CPU_Features::set_has_svm(bool value) {
  
  has_svm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_svm)
}

// bool has_lzcnt = 72;
inline void CPU_Features::clear_has_lzcnt() {
  has_lzcnt_ = false;
}
inline bool CPU_Features::has_lzcnt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_lzcnt)
  return has_lzcnt_;
}
inline void CPU_Features::set_has_lzcnt(bool value) {
  
  has_lzcnt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_lzcnt)
}

// bool has_sse4a = 73;
inline void CPU_Features::clear_has_sse4a() {
  has_sse4a_ = false;
}
inline bool CPU_Features::has_sse4a() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sse4a)
  return has_sse4a_;
}
inline void CPU_Features::set_has_sse4a(bool value) {
  
  has_sse4a_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sse4a)
}

// bool has_misalignsse = 74;
inline void CPU_Features::clear_has_misalignsse() {
  has_misalignsse_ = false;
}
inline bool CPU_Features::has_misalignsse() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_misalignsse)
  return has_misalignsse_;
}
inline void CPU_Features::set_has_misalignsse(bool value) {
  
  has_misalignsse_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_misalignsse)
}

// bool has_3dnow_prefetch = 75;
inline void CPU_Features::clear_has_3dnow_prefetch() {
  has_3dnow_prefetch_ = false;
}
inline bool CPU_Features::has_3dnow_prefetch() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_3dnow_prefetch)
  return has_3dnow_prefetch_;
}
inline void CPU_Features::set_has_3dnow_prefetch(bool value) {
  
  has_3dnow_prefetch_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_3dnow_prefetch)
}

// bool has_xop = 76;
inline void CPU_Features::clear_has_xop() {
  has_xop_ = false;
}
inline bool CPU_Features::has_xop() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_xop)
  return has_xop_;
}
inline void CPU_Features::set_has_xop(bool value) {
  
  has_xop_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_xop)
}

// bool has_wdt = 77;
inline void CPU_Features::clear_has_wdt() {
  has_wdt_ = false;
}
inline bool CPU_Features::has_wdt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_wdt)
  return has_wdt_;
}
inline void CPU_Features::set_has_wdt(bool value) {
  
  has_wdt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_wdt)
}

// bool has_fma4 = 78;
inline void CPU_Features::clear_has_fma4() {
  has_fma4_ = false;
}
inline bool CPU_Features::has_fma4() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_fma4)
  return has_fma4_;
}
inline void CPU_Features::set_has_fma4(bool value) {
  
  has_fma4_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_fma4)
}

// bool has_fsgsbase = 79;
inline void CPU_Features::clear_has_fsgsbase() {
  has_fsgsbase_ = false;
}
inline bool CPU_Features::has_fsgsbase() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_fsgsbase)
  return has_fsgsbase_;
}
inline void CPU_Features::set_has_fsgsbase(bool value) {
  
  has_fsgsbase_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_fsgsbase)
}

// bool has_sgx = 80;
inline void CPU_Features::clear_has_sgx() {
  has_sgx_ = false;
}
inline bool CPU_Features::has_sgx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sgx)
  return has_sgx_;
}
inline void CPU_Features::set_has_sgx(bool value) {
  
  has_sgx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sgx)
}

// bool has_bmi1 = 81;
inline void CPU_Features::clear_has_bmi1() {
  has_bmi1_ = false;
}
inline bool CPU_Features::has_bmi1() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_bmi1)
  return has_bmi1_;
}
inline void CPU_Features::set_has_bmi1(bool value) {
  
  has_bmi1_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_bmi1)
}

// bool has_hle = 82;
inline void CPU_Features::clear_has_hle() {
  has_hle_ = false;
}
inline bool CPU_Features::has_hle() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_hle)
  return has_hle_;
}
inline void CPU_Features::set_has_hle(bool value) {
  
  has_hle_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_hle)
}

// bool has_avx2 = 83;
inline void CPU_Features::clear_has_avx2() {
  has_avx2_ = false;
}
inline bool CPU_Features::has_avx2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx2)
  return has_avx2_;
}
inline void CPU_Features::set_has_avx2(bool value) {
  
  has_avx2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx2)
}

// bool has_smep = 84;
inline void CPU_Features::clear_has_smep() {
  has_smep_ = false;
}
inline bool CPU_Features::has_smep() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_smep)
  return has_smep_;
}
inline void CPU_Features::set_has_smep(bool value) {
  
  has_smep_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_smep)
}

// bool has_bmi2 = 85;
inline void CPU_Features::clear_has_bmi2() {
  has_bmi2_ = false;
}
inline bool CPU_Features::has_bmi2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_bmi2)
  return has_bmi2_;
}
inline void CPU_Features::set_has_bmi2(bool value) {
  
  has_bmi2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_bmi2)
}

// bool has_erms = 86;
inline void CPU_Features::clear_has_erms() {
  has_erms_ = false;
}
inline bool CPU_Features::has_erms() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_erms)
  return has_erms_;
}
inline void CPU_Features::set_has_erms(bool value) {
  
  has_erms_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_erms)
}

// bool has_invpcid = 87;
inline void CPU_Features::clear_has_invpcid() {
  has_invpcid_ = false;
}
inline bool CPU_Features::has_invpcid() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_invpcid)
  return has_invpcid_;
}
inline void CPU_Features::set_has_invpcid(bool value) {
  
  has_invpcid_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_invpcid)
}

// bool has_rtm = 88;
inline void CPU_Features::clear_has_rtm() {
  has_rtm_ = false;
}
inline bool CPU_Features::has_rtm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rtm)
  return has_rtm_;
}
inline void CPU_Features::set_has_rtm(bool value) {
  
  has_rtm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rtm)
}

// bool has_pqm = 89;
inline void CPU_Features::clear_has_pqm() {
  has_pqm_ = false;
}
inline bool CPU_Features::has_pqm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pqm)
  return has_pqm_;
}
inline void CPU_Features::set_has_pqm(bool value) {
  
  has_pqm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pqm)
}

// bool has_mpx = 90;
inline void CPU_Features::clear_has_mpx() {
  has_mpx_ = false;
}
inline bool CPU_Features::has_mpx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mpx)
  return has_mpx_;
}
inline void CPU_Features::set_has_mpx(bool value) {
  
  has_mpx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mpx)
}

// bool has_pqe = 91;
inline void CPU_Features::clear_has_pqe() {
  has_pqe_ = false;
}
inline bool CPU_Features::has_pqe() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pqe)
  return has_pqe_;
}
inline void CPU_Features::set_has_pqe(bool value) {
  
  has_pqe_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pqe)
}

// bool has_avx512f = 92;
inline void CPU_Features::clear_has_avx512f() {
  has_avx512f_ = false;
}
inline bool CPU_Features::has_avx512f() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512f)
  return has_avx512f_;
}
inline void CPU_Features::set_has_avx512f(bool value) {
  
  has_avx512f_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512f)
}

// bool has_avx512dq = 93;
inline void CPU_Features::clear_has_avx512dq() {
  has_avx512dq_ = false;
}
inline bool CPU_Features::has_avx512dq() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512dq)
  return has_avx512dq_;
}
inline void CPU_Features::set_has_avx512dq(bool value) {
  
  has_avx512dq_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512dq)
}

// bool has_rdseed = 94;
inline void CPU_Features::clear_has_rdseed() {
  has_rdseed_ = false;
}
inline bool CPU_Features::has_rdseed() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rdseed)
  return has_rdseed_;
}
inline void CPU_Features::set_has_rdseed(bool value) {
  
  has_rdseed_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rdseed)
}

// bool has_adx = 95;
inline void CPU_Features::clear_has_adx() {
  has_adx_ = false;
}
inline bool CPU_Features::has_adx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_adx)
  return has_adx_;
}
inline void CPU_Features::set_has_adx(bool value) {
  
  has_adx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_adx)
}

// bool has_smap = 96;
inline void CPU_Features::clear_has_smap() {
  has_smap_ = false;
}
inline bool CPU_Features::has_smap() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_smap)
  return has_smap_;
}
inline void CPU_Features::set_has_smap(bool value) {
  
  has_smap_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_smap)
}

// bool has_avx512ifma = 97;
inline void CPU_Features::clear_has_avx512ifma() {
  has_avx512ifma_ = false;
}
inline bool CPU_Features::has_avx512ifma() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512ifma)
  return has_avx512ifma_;
}
inline void CPU_Features::set_has_avx512ifma(bool value) {
  
  has_avx512ifma_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512ifma)
}

// bool has_pcommit = 98;
inline void CPU_Features::clear_has_pcommit() {
  has_pcommit_ = false;
}
inline bool CPU_Features::has_pcommit() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pcommit)
  return has_pcommit_;
}
inline void CPU_Features::set_has_pcommit(bool value) {
  
  has_pcommit_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pcommit)
}

// bool has_clflushopt = 99;
inline void CPU_Features::clear_has_clflushopt() {
  has_clflushopt_ = false;
}
inline bool CPU_Features::has_clflushopt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_clflushopt)
  return has_clflushopt_;
}
inline void CPU_Features::set_has_clflushopt(bool value) {
  
  has_clflushopt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_clflushopt)
}

// bool has_clwb = 100;
inline void CPU_Features::clear_has_clwb() {
  has_clwb_ = false;
}
inline bool CPU_Features::has_clwb() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_clwb)
  return has_clwb_;
}
inline void CPU_Features::set_has_clwb(bool value) {
  
  has_clwb_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_clwb)
}

// bool has_intel_pt = 101;
inline void CPU_Features::clear_has_intel_pt() {
  has_intel_pt_ = false;
}
inline bool CPU_Features::has_intel_pt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_intel_pt)
  return has_intel_pt_;
}
inline void CPU_Features::set_has_intel_pt(bool value) {
  
  has_intel_pt_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_intel_pt)
}

// bool has_avx512pf = 102;
inline void CPU_Features::clear_has_avx512pf() {
  has_avx512pf_ = false;
}
inline bool CPU_Features::has_avx512pf() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512pf)
  return has_avx512pf_;
}
inline void CPU_Features::set_has_avx512pf(bool value) {
  
  has_avx512pf_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512pf)
}

// bool has_avx512er = 103;
inline void CPU_Features::clear_has_avx512er() {
  has_avx512er_ = false;
}
inline bool CPU_Features::has_avx512er() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512er)
  return has_avx512er_;
}
inline void CPU_Features::set_has_avx512er(bool value) {
  
  has_avx512er_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512er)
}

// bool has_avx512cd = 104;
inline void CPU_Features::clear_has_avx512cd() {
  has_avx512cd_ = false;
}
inline bool CPU_Features::has_avx512cd() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512cd)
  return has_avx512cd_;
}
inline void CPU_Features::set_has_avx512cd(bool value) {
  
  has_avx512cd_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512cd)
}

// bool has_sha = 105;
inline void CPU_Features::clear_has_sha() {
  has_sha_ = false;
}
inline bool CPU_Features::has_sha() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sha)
  return has_sha_;
}
inline void CPU_Features::set_has_sha(bool value) {
  
  has_sha_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sha)
}

// bool has_avx512bw = 106;
inline void CPU_Features::clear_has_avx512bw() {
  has_avx512bw_ = false;
}
inline bool CPU_Features::has_avx512bw() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512bw)
  return has_avx512bw_;
}
inline void CPU_Features::set_has_avx512bw(bool value) {
  
  has_avx512bw_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512bw)
}

// bool has_avx512vl = 107;
inline void CPU_Features::clear_has_avx512vl() {
  has_avx512vl_ = false;
}
inline bool CPU_Features::has_avx512vl() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512vl)
  return has_avx512vl_;
}
inline void CPU_Features::set_has_avx512vl(bool value) {
  
  has_avx512vl_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512vl)
}

// bool has_prefetchwt1 = 108;
inline void CPU_Features::clear_has_prefetchwt1() {
  has_prefetchwt1_ = false;
}
inline bool CPU_Features::has_prefetchwt1() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_prefetchwt1)
  return has_prefetchwt1_;
}
inline void CPU_Features::set_has_prefetchwt1(bool value) {
  
  has_prefetchwt1_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_prefetchwt1)
}

// bool has_avx512vbmi = 109;
inline void CPU_Features::clear_has_avx512vbmi() {
  has_avx512vbmi_ = false;
}
inline bool CPU_Features::has_avx512vbmi() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512vbmi)
  return has_avx512vbmi_;
}
inline void CPU_Features::set_has_avx512vbmi(bool value) {
  
  has_avx512vbmi_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512vbmi)
}

// bool has_umip = 110;
inline void CPU_Features::clear_has_umip() {
  has_umip_ = false;
}
inline bool CPU_Features::has_umip() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_umip)
  return has_umip_;
}
inline void CPU_Features::set_has_umip(bool value) {
  
  has_umip_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_umip)
}

// bool has_pku = 111;
inline void CPU_Features::clear_has_pku() {
  has_pku_ = false;
}
inline bool CPU_Features::has_pku() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pku)
  return has_pku_;
}
inline void CPU_Features::set_has_pku(bool value) {
  
  has_pku_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pku)
}

// bool has_ospke = 112;
inline void CPU_Features::clear_has_ospke() {
  has_ospke_ = false;
}
inline bool CPU_Features::has_ospke() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ospke)
  return has_ospke_;
}
inline void CPU_Features::set_has_ospke(bool value) {
  
  has_ospke_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ospke)
}

// bool has_avx512vbmi2 = 113;
inline void CPU_Features::clear_has_avx512vbmi2() {
  has_avx512vbmi2_ = false;
}
inline bool CPU_Features::has_avx512vbmi2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512vbmi2)
  return has_avx512vbmi2_;
}
inline void CPU_Features::set_has_avx512vbmi2(bool value) {
  
  has_avx512vbmi2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512vbmi2)
}

// bool has_gfni = 114;
inline void CPU_Features::clear_has_gfni() {
  has_gfni_ = false;
}
inline bool CPU_Features::has_gfni() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_gfni)
  return has_gfni_;
}
inline void CPU_Features::set_has_gfni(bool value) {
  
  has_gfni_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_gfni)
}

// bool has_vaes = 115;
inline void CPU_Features::clear_has_vaes() {
  has_vaes_ = false;
}
inline bool CPU_Features::has_vaes() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_vaes)
  return has_vaes_;
}
inline void CPU_Features::set_has_vaes(bool value) {
  
  has_vaes_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_vaes)
}

// bool has_vpclmulqdq = 116;
inline void CPU_Features::clear_has_vpclmulqdq() {
  has_vpclmulqdq_ = false;
}
inline bool CPU_Features::has_vpclmulqdq() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_vpclmulqdq)
  return has_vpclmulqdq_;
}
inline void CPU_Features::set_has_vpclmulqdq(bool value) {
  
  has_vpclmulqdq_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_vpclmulqdq)
}

// bool has_avx512vnni = 117;
inline void CPU_Features::clear_has_avx512vnni() {
  has_avx512vnni_ = false;
}
inline bool CPU_Features::has_avx512vnni() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512vnni)
  return has_avx512vnni_;
}
inline void CPU_Features::set_has_avx512vnni(bool value) {
  
  has_avx512vnni_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512vnni)
}

// bool has_avx512bitalg = 118;
inline void CPU_Features::clear_has_avx512bitalg() {
  has_avx512bitalg_ = false;
}
inline bool CPU_Features::has_avx512bitalg() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512bitalg)
  return has_avx512bitalg_;
}
inline void CPU_Features::set_has_avx512bitalg(bool value) {
  
  has_avx512bitalg_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512bitalg)
}

// bool has_avx512vpopcntdq = 119;
inline void CPU_Features::clear_has_avx512vpopcntdq() {
  has_avx512vpopcntdq_ = false;
}
inline bool CPU_Features::has_avx512vpopcntdq() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512vpopcntdq)
  return has_avx512vpopcntdq_;
}
inline void CPU_Features::set_has_avx512vpopcntdq(bool value) {
  
  has_avx512vpopcntdq_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512vpopcntdq)
}

// bool has_rdpid = 120;
inline void CPU_Features::clear_has_rdpid() {
  has_rdpid_ = false;
}
inline bool CPU_Features::has_rdpid() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rdpid)
  return has_rdpid_;
}
inline void CPU_Features::set_has_rdpid(bool value) {
  
  has_rdpid_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rdpid)
}

// bool has_sgx_lc = 121;
inline void CPU_Features::clear_has_sgx_lc() {
  has_sgx_lc_ = false;
}
inline bool CPU_Features::has_sgx_lc() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_sgx_lc)
  return has_sgx_lc_;
}
inline void CPU_Features::set_has_sgx_lc(bool value) {
  
  has_sgx_lc_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_sgx_lc)
}

// bool has_avx512_4vnniw = 122;
inline void CPU_Features::clear_has_avx512_4vnniw() {
  has_avx512_4vnniw_ = false;
}
inline bool CPU_Features::has_avx512_4vnniw() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512_4vnniw)
  return has_avx512_4vnniw_;
}
inline void CPU_Features::set_has_avx512_4vnniw(bool value) {
  
  has_avx512_4vnniw_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512_4vnniw)
}

// bool has_avx512_4fmaps = 123;
inline void CPU_Features::clear_has_avx512_4fmaps() {
  has_avx512_4fmaps_ = false;
}
inline bool CPU_Features::has_avx512_4fmaps() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_avx512_4fmaps)
  return has_avx512_4fmaps_;
}
inline void CPU_Features::set_has_avx512_4fmaps(bool value) {
  
  has_avx512_4fmaps_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_avx512_4fmaps)
}

// bool has_ais = 124;
inline void CPU_Features::clear_has_ais() {
  has_ais_ = false;
}
inline bool CPU_Features::has_ais() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ais)
  return has_ais_;
}
inline void CPU_Features::set_has_ais(bool value) {
  
  has_ais_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ais)
}

// bool has_ais_e = 125;
inline void CPU_Features::clear_has_ais_e() {
  has_ais_e_ = false;
}
inline bool CPU_Features::has_ais_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ais_e)
  return has_ais_e_;
}
inline void CPU_Features::set_has_ais_e(bool value) {
  
  has_ais_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ais_e)
}

// bool has_rng = 126;
inline void CPU_Features::clear_has_rng() {
  has_rng_ = false;
}
inline bool CPU_Features::has_rng() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rng)
  return has_rng_;
}
inline void CPU_Features::set_has_rng(bool value) {
  
  has_rng_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rng)
}

// bool has_rng_e = 127;
inline void CPU_Features::clear_has_rng_e() {
  has_rng_e_ = false;
}
inline bool CPU_Features::has_rng_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rng_e)
  return has_rng_e_;
}
inline void CPU_Features::set_has_rng_e(bool value) {
  
  has_rng_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rng_e)
}

// bool has_lh = 128;
inline void CPU_Features::clear_has_lh() {
  has_lh_ = false;
}
inline bool CPU_Features::has_lh() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_lh)
  return has_lh_;
}
inline void CPU_Features::set_has_lh(bool value) {
  
  has_lh_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_lh)
}

// bool has_femms = 129;
inline void CPU_Features::clear_has_femms() {
  has_femms_ = false;
}
inline bool CPU_Features::has_femms() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_femms)
  return has_femms_;
}
inline void CPU_Features::set_has_femms(bool value) {
  
  has_femms_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_femms)
}

// bool has_ace = 130;
inline void CPU_Features::clear_has_ace() {
  has_ace_ = false;
}
inline bool CPU_Features::has_ace() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ace)
  return has_ace_;
}
inline void CPU_Features::set_has_ace(bool value) {
  
  has_ace_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ace)
}

// bool has_ace_e = 131;
inline void CPU_Features::clear_has_ace_e() {
  has_ace_e_ = false;
}
inline bool CPU_Features::has_ace_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ace_e)
  return has_ace_e_;
}
inline void CPU_Features::set_has_ace_e(bool value) {
  
  has_ace_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ace_e)
}

// bool has_ace2 = 132;
inline void CPU_Features::clear_has_ace2() {
  has_ace2_ = false;
}
inline bool CPU_Features::has_ace2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ace2)
  return has_ace2_;
}
inline void CPU_Features::set_has_ace2(bool value) {
  
  has_ace2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ace2)
}

// bool has_ace2_e = 133;
inline void CPU_Features::clear_has_ace2_e() {
  has_ace2_e_ = false;
}
inline bool CPU_Features::has_ace2_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ace2_e)
  return has_ace2_e_;
}
inline void CPU_Features::set_has_ace2_e(bool value) {
  
  has_ace2_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ace2_e)
}

// bool has_phe = 134;
inline void CPU_Features::clear_has_phe() {
  has_phe_ = false;
}
inline bool CPU_Features::has_phe() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_phe)
  return has_phe_;
}
inline void CPU_Features::set_has_phe(bool value) {
  
  has_phe_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_phe)
}

// bool has_phe_e = 135;
inline void CPU_Features::clear_has_phe_e() {
  has_phe_e_ = false;
}
inline bool CPU_Features::has_phe_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_phe_e)
  return has_phe_e_;
}
inline void CPU_Features::set_has_phe_e(bool value) {
  
  has_phe_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_phe_e)
}

// bool has_pmm = 136;
inline void CPU_Features::clear_has_pmm() {
  has_pmm_ = false;
}
inline bool CPU_Features::has_pmm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pmm)
  return has_pmm_;
}
inline void CPU_Features::set_has_pmm(bool value) {
  
  has_pmm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pmm)
}

// bool has_pmm_e = 137;
inline void CPU_Features::clear_has_pmm_e() {
  has_pmm_e_ = false;
}
inline bool CPU_Features::has_pmm_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_pmm_e)
  return has_pmm_e_;
}
inline void CPU_Features::set_has_pmm_e(bool value) {
  
  has_pmm_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_pmm_e)
}

// bool has_parallax = 138;
inline void CPU_Features::clear_has_parallax() {
  has_parallax_ = false;
}
inline bool CPU_Features::has_parallax() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_parallax)
  return has_parallax_;
}
inline void CPU_Features::set_has_parallax(bool value) {
  
  has_parallax_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_parallax)
}

// bool has_parallax_e = 139;
inline void CPU_Features::clear_has_parallax_e() {
  has_parallax_e_ = false;
}
inline bool CPU_Features::has_parallax_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_parallax_e)
  return has_parallax_e_;
}
inline void CPU_Features::set_has_parallax_e(bool value) {
  
  has_parallax_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_parallax_e)
}

// bool has_overstress = 140;
inline void CPU_Features::clear_has_overstress() {
  has_overstress_ = false;
}
inline bool CPU_Features::has_overstress() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_overstress)
  return has_overstress_;
}
inline void CPU_Features::set_has_overstress(bool value) {
  
  has_overstress_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_overstress)
}

// bool has_overstress_e = 141;
inline void CPU_Features::clear_has_overstress_e() {
  has_overstress_e_ = false;
}
inline bool CPU_Features::has_overstress_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_overstress_e)
  return has_overstress_e_;
}
inline void CPU_Features::set_has_overstress_e(bool value) {
  
  has_overstress_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_overstress_e)
}

// bool has_tm3 = 142;
inline void CPU_Features::clear_has_tm3() {
  has_tm3_ = false;
}
inline bool CPU_Features::has_tm3() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tm3)
  return has_tm3_;
}
inline void CPU_Features::set_has_tm3(bool value) {
  
  has_tm3_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tm3)
}

// bool has_tm3_e = 143;
inline void CPU_Features::clear_has_tm3_e() {
  has_tm3_e_ = false;
}
inline bool CPU_Features::has_tm3_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tm3_e)
  return has_tm3_e_;
}
inline void CPU_Features::set_has_tm3_e(bool value) {
  
  has_tm3_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tm3_e)
}

// bool has_rng2 = 144;
inline void CPU_Features::clear_has_rng2() {
  has_rng2_ = false;
}
inline bool CPU_Features::has_rng2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rng2)
  return has_rng2_;
}
inline void CPU_Features::set_has_rng2(bool value) {
  
  has_rng2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rng2)
}

// bool has_rng2_e = 145;
inline void CPU_Features::clear_has_rng2_e() {
  has_rng2_e_ = false;
}
inline bool CPU_Features::has_rng2_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_rng2_e)
  return has_rng2_e_;
}
inline void CPU_Features::set_has_rng2_e(bool value) {
  
  has_rng2_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_rng2_e)
}

// bool has_phe2 = 146;
inline void CPU_Features::clear_has_phe2() {
  has_phe2_ = false;
}
inline bool CPU_Features::has_phe2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_phe2)
  return has_phe2_;
}
inline void CPU_Features::set_has_phe2(bool value) {
  
  has_phe2_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_phe2)
}

// bool has_phe2_e = 147;
inline void CPU_Features::clear_has_phe2_e() {
  has_phe2_e_ = false;
}
inline bool CPU_Features::has_phe2_e() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_phe2_e)
  return has_phe2_e_;
}
inline void CPU_Features::set_has_phe2_e(bool value) {
  
  has_phe2_e_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_phe2_e)
}

// bool has_ibs = 148;
inline void CPU_Features::clear_has_ibs() {
  has_ibs_ = false;
}
inline bool CPU_Features::has_ibs() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ibs)
  return has_ibs_;
}
inline void CPU_Features::set_has_ibs(bool value) {
  
  has_ibs_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ibs)
}

// bool has_skinit = 149;
inline void CPU_Features::clear_has_skinit() {
  has_skinit_ = false;
}
inline bool CPU_Features::has_skinit() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_skinit)
  return has_skinit_;
}
inline void CPU_Features::set_has_skinit(bool value) {
  
  has_skinit_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_skinit)
}

// bool has_lwp = 150;
inline void CPU_Features::clear_has_lwp() {
  has_lwp_ = false;
}
inline bool CPU_Features::has_lwp() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_lwp)
  return has_lwp_;
}
inline void CPU_Features::set_has_lwp(bool value) {
  
  has_lwp_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_lwp)
}

// bool has_tbm = 151;
inline void CPU_Features::clear_has_tbm() {
  has_tbm_ = false;
}
inline bool CPU_Features::has_tbm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_tbm)
  return has_tbm_;
}
inline void CPU_Features::set_has_tbm(bool value) {
  
  has_tbm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_tbm)
}

// bool has_perfctr_core = 152;
inline void CPU_Features::clear_has_perfctr_core() {
  has_perfctr_core_ = false;
}
inline bool CPU_Features::has_perfctr_core() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_perfctr_core)
  return has_perfctr_core_;
}
inline void CPU_Features::set_has_perfctr_core(bool value) {
  
  has_perfctr_core_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_perfctr_core)
}

// bool has_perfctr_nb = 153;
inline void CPU_Features::clear_has_perfctr_nb() {
  has_perfctr_nb_ = false;
}
inline bool CPU_Features::has_perfctr_nb() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_perfctr_nb)
  return has_perfctr_nb_;
}
inline void CPU_Features::set_has_perfctr_nb(bool value) {
  
  has_perfctr_nb_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_perfctr_nb)
}

// bool has_bpext = 154;
inline void CPU_Features::clear_has_bpext() {
  has_bpext_ = false;
}
inline bool CPU_Features::has_bpext() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_bpext)
  return has_bpext_;
}
inline void CPU_Features::set_has_bpext(bool value) {
  
  has_bpext_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_bpext)
}

// bool has_ptsc = 155;
inline void CPU_Features::clear_has_ptsc() {
  has_ptsc_ = false;
}
inline bool CPU_Features::has_ptsc() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_ptsc)
  return has_ptsc_;
}
inline void CPU_Features::set_has_ptsc(bool value) {
  
  has_ptsc_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_ptsc)
}

// bool has_mwaitx = 156;
inline void CPU_Features::clear_has_mwaitx() {
  has_mwaitx_ = false;
}
inline bool CPU_Features::has_mwaitx() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_mwaitx)
  return has_mwaitx_;
}
inline void CPU_Features::set_has_mwaitx(bool value) {
  
  has_mwaitx_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_mwaitx)
}

// bool has_extapic = 157;
inline void CPU_Features::clear_has_extapic() {
  has_extapic_ = false;
}
inline bool CPU_Features::has_extapic() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_extapic)
  return has_extapic_;
}
inline void CPU_Features::set_has_extapic(bool value) {
  
  has_extapic_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_extapic)
}

// bool has_longrun = 158;
inline void CPU_Features::clear_has_longrun() {
  has_longrun_ = false;
}
inline bool CPU_Features::has_longrun() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_longrun)
  return has_longrun_;
}
inline void CPU_Features::set_has_longrun(bool value) {
  
  has_longrun_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_longrun)
}

// bool has_lrti = 159;
inline void CPU_Features::clear_has_lrti() {
  has_lrti_ = false;
}
inline bool CPU_Features::has_lrti() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.Features.has_lrti)
  return has_lrti_;
}
inline void CPU_Features::set_has_lrti(bool value) {
  
  has_lrti_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.Features.has_lrti)
}

// -------------------------------------------------------------------

// CPU

// string brand_string = 1;
inline void CPU::clear_brand_string() {
  brand_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPU::brand_string() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.brand_string)
  return brand_string_.GetNoArena();
}
inline void CPU::set_brand_string(const ::std::string& value) {
  
  brand_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.brand_string)
}
#if LANG_CXX11
inline void CPU::set_brand_string(::std::string&& value) {
  
  brand_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CPU.brand_string)
}
#endif
inline void CPU::set_brand_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brand_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CPU.brand_string)
}
inline void CPU::set_brand_string(const char* value, size_t size) {
  
  brand_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CPU.brand_string)
}
inline ::std::string* CPU::mutable_brand_string() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CPU.brand_string)
  return brand_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPU::release_brand_string() {
  // @@protoc_insertion_point(field_release:aspia.proto.CPU.brand_string)
  
  return brand_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_allocated_brand_string(::std::string* brand_string) {
  if (brand_string != NULL) {
    
  } else {
    
  }
  brand_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_string);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CPU.brand_string)
}

// string vendor = 2;
inline void CPU::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPU::vendor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.vendor)
  return vendor_.GetNoArena();
}
inline void CPU::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.vendor)
}
#if LANG_CXX11
inline void CPU::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CPU.vendor)
}
#endif
inline void CPU::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CPU.vendor)
}
inline void CPU::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CPU.vendor)
}
inline ::std::string* CPU::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CPU.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPU::release_vendor() {
  // @@protoc_insertion_point(field_release:aspia.proto.CPU.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CPU.vendor)
}

// uint32 stepping = 3;
inline void CPU::clear_stepping() {
  stepping_ = 0u;
}
inline ::google::protobuf::uint32 CPU::stepping() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.stepping)
  return stepping_;
}
inline void CPU::set_stepping(::google::protobuf::uint32 value) {
  
  stepping_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.stepping)
}

// uint32 model = 4;
inline void CPU::clear_model() {
  model_ = 0u;
}
inline ::google::protobuf::uint32 CPU::model() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.model)
  return model_;
}
inline void CPU::set_model(::google::protobuf::uint32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.model)
}

// uint32 family = 5;
inline void CPU::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 CPU::family() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.family)
  return family_;
}
inline void CPU::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.family)
}

// uint32 extended_model = 6;
inline void CPU::clear_extended_model() {
  extended_model_ = 0u;
}
inline ::google::protobuf::uint32 CPU::extended_model() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.extended_model)
  return extended_model_;
}
inline void CPU::set_extended_model(::google::protobuf::uint32 value) {
  
  extended_model_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.extended_model)
}

// uint32 extended_family = 7;
inline void CPU::clear_extended_family() {
  extended_family_ = 0u;
}
inline ::google::protobuf::uint32 CPU::extended_family() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.extended_family)
  return extended_family_;
}
inline void CPU::set_extended_family(::google::protobuf::uint32 value) {
  
  extended_family_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.extended_family)
}

// uint32 brand_id = 8;
inline void CPU::clear_brand_id() {
  brand_id_ = 0u;
}
inline ::google::protobuf::uint32 CPU::brand_id() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.brand_id)
  return brand_id_;
}
inline void CPU::set_brand_id(::google::protobuf::uint32 value) {
  
  brand_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.brand_id)
}

// uint32 packages = 9;
inline void CPU::clear_packages() {
  packages_ = 0u;
}
inline ::google::protobuf::uint32 CPU::packages() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.packages)
  return packages_;
}
inline void CPU::set_packages(::google::protobuf::uint32 value) {
  
  packages_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.packages)
}

// uint32 physical_cores = 10;
inline void CPU::clear_physical_cores() {
  physical_cores_ = 0u;
}
inline ::google::protobuf::uint32 CPU::physical_cores() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.physical_cores)
  return physical_cores_;
}
inline void CPU::set_physical_cores(::google::protobuf::uint32 value) {
  
  physical_cores_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.physical_cores)
}

// uint32 logical_cores = 11;
inline void CPU::clear_logical_cores() {
  logical_cores_ = 0u;
}
inline ::google::protobuf::uint32 CPU::logical_cores() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.logical_cores)
  return logical_cores_;
}
inline void CPU::set_logical_cores(::google::protobuf::uint32 value) {
  
  logical_cores_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.CPU.logical_cores)
}

// .aspia.proto.CPU.Features features = 12;
inline bool CPU::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
inline void CPU::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) {
    delete features_;
  }
  features_ = NULL;
}
inline const ::aspia::proto::CPU_Features& CPU::features() const {
  const ::aspia::proto::CPU_Features* p = features_;
  // @@protoc_insertion_point(field_get:aspia.proto.CPU.features)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::CPU_Features*>(
      &::aspia::proto::_CPU_Features_default_instance_);
}
inline ::aspia::proto::CPU_Features* CPU::release_features() {
  // @@protoc_insertion_point(field_release:aspia.proto.CPU.features)
  
  ::aspia::proto::CPU_Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline ::aspia::proto::CPU_Features* CPU::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::aspia::proto::CPU_Features;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.CPU.features)
  return features_;
}
inline void CPU::set_allocated_features(::aspia::proto::CPU_Features* features) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete features_;
  }
  if (features) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      features = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CPU.features)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fcpu_2eproto__INCLUDED

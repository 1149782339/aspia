// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_baseboard.proto

#include "category_dmi_baseboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiBaseboard_FeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard_Features>
      _instance;
} _DmiBaseboard_Features_default_instance_;
class DmiBaseboard_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard_Item>
      _instance;
} _DmiBaseboard_Item_default_instance_;
class DmiBaseboardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard>
      _instance;
} _DmiBaseboard_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fdmi_5fbaseboard_2eproto {
void InitDefaultsDmiBaseboard_FeaturesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiBaseboard_Features_default_instance_;
    new (ptr) ::aspia::proto::DmiBaseboard_Features();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiBaseboard_Features::InitAsDefaultInstance();
}

void InitDefaultsDmiBaseboard_Features() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiBaseboard_FeaturesImpl);
}

void InitDefaultsDmiBaseboard_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Features();
  {
    void* ptr = &::aspia::proto::_DmiBaseboard_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiBaseboard_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiBaseboard_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiBaseboard_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiBaseboard_ItemImpl);
}

void InitDefaultsDmiBaseboardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Item();
  {
    void* ptr = &::aspia::proto::_DmiBaseboard_default_instance_;
    new (ptr) ::aspia::proto::DmiBaseboard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiBaseboard::InitAsDefaultInstance();
}

void InitDefaultsDmiBaseboard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiBaseboardImpl);
}

}  // namespace protobuf_category_5fdmi_5fbaseboard_2eproto
namespace aspia {
namespace proto {
bool DmiBaseboard_BoardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_UNKNOWN;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_OTHER;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_SERVER_BLADE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_CONNECTIVITY_SWITCH;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_SYSTEM_MANAGEMENT_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_PROCESSOR_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_IO_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_MEMORY_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_DAUGHTER_BOARD;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_MOTHERBOARD;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_PROCESSOR_PLUS_MEMORY_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_PROCESSOR_PLUS_IO_MODULE;
const DmiBaseboard_BoardType DmiBaseboard::BOARD_TYPE_INTERCONNECT_BOARD;
const DmiBaseboard_BoardType DmiBaseboard::BoardType_MIN;
const DmiBaseboard_BoardType DmiBaseboard::BoardType_MAX;
const int DmiBaseboard::BoardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiBaseboard_Features::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard_Features::kIsHostingBoardFieldNumber;
const int DmiBaseboard_Features::kIsRequiresAtLeastOneDaughterBoardFieldNumber;
const int DmiBaseboard_Features::kIsRemovableFieldNumber;
const int DmiBaseboard_Features::kIsReplaceableFieldNumber;
const int DmiBaseboard_Features::kIsHotSwappableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard_Features::DmiBaseboard_Features()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Features();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiBaseboard.Features)
}
DmiBaseboard_Features::DmiBaseboard_Features(const DmiBaseboard_Features& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_hosting_board_, &from.is_hosting_board_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_hot_swappable_) -
    reinterpret_cast<char*>(&is_hosting_board_)) + sizeof(is_hot_swappable_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiBaseboard.Features)
}

void DmiBaseboard_Features::SharedCtor() {
  ::memset(&is_hosting_board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_hot_swappable_) -
      reinterpret_cast<char*>(&is_hosting_board_)) + sizeof(is_hot_swappable_));
  _cached_size_ = 0;
}

DmiBaseboard_Features::~DmiBaseboard_Features() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiBaseboard.Features)
  SharedDtor();
}

void DmiBaseboard_Features::SharedDtor() {
}

void DmiBaseboard_Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard_Features& DmiBaseboard_Features::default_instance() {
  ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Features();
  return *internal_default_instance();
}

DmiBaseboard_Features* DmiBaseboard_Features::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard_Features* n = new DmiBaseboard_Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiBaseboard.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_hosting_board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_hot_swappable_) -
      reinterpret_cast<char*>(&is_hosting_board_)) + sizeof(is_hot_swappable_));
  _internal_metadata_.Clear();
}

bool DmiBaseboard_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiBaseboard.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_hosting_board = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hosting_board_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_requires_at_least_one_daughter_board = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_requires_at_least_one_daughter_board_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_removable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_removable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_replaceable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replaceable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_hot_swappable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hot_swappable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiBaseboard.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiBaseboard.Features)
  return false;
#undef DO_
}

void DmiBaseboard_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiBaseboard.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_hosting_board = 1;
  if (this->is_hosting_board() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_hosting_board(), output);
  }

  // bool is_requires_at_least_one_daughter_board = 2;
  if (this->is_requires_at_least_one_daughter_board() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_requires_at_least_one_daughter_board(), output);
  }

  // bool is_removable = 3;
  if (this->is_removable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_removable(), output);
  }

  // bool is_replaceable = 4;
  if (this->is_replaceable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_replaceable(), output);
  }

  // bool is_hot_swappable = 5;
  if (this->is_hot_swappable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_hot_swappable(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiBaseboard.Features)
}

size_t DmiBaseboard_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiBaseboard.Features)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bool is_hosting_board = 1;
  if (this->is_hosting_board() != 0) {
    total_size += 1 + 1;
  }

  // bool is_requires_at_least_one_daughter_board = 2;
  if (this->is_requires_at_least_one_daughter_board() != 0) {
    total_size += 1 + 1;
  }

  // bool is_removable = 3;
  if (this->is_removable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_replaceable = 4;
  if (this->is_replaceable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_hot_swappable = 5;
  if (this->is_hot_swappable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard_Features::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard_Features*>(&from));
}

void DmiBaseboard_Features::MergeFrom(const DmiBaseboard_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiBaseboard.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_hosting_board() != 0) {
    set_is_hosting_board(from.is_hosting_board());
  }
  if (from.is_requires_at_least_one_daughter_board() != 0) {
    set_is_requires_at_least_one_daughter_board(from.is_requires_at_least_one_daughter_board());
  }
  if (from.is_removable() != 0) {
    set_is_removable(from.is_removable());
  }
  if (from.is_replaceable() != 0) {
    set_is_replaceable(from.is_replaceable());
  }
  if (from.is_hot_swappable() != 0) {
    set_is_hot_swappable(from.is_hot_swappable());
  }
}

void DmiBaseboard_Features::CopyFrom(const DmiBaseboard_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiBaseboard.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard_Features::IsInitialized() const {
  return true;
}

void DmiBaseboard_Features::Swap(DmiBaseboard_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard_Features::InternalSwap(DmiBaseboard_Features* other) {
  using std::swap;
  swap(is_hosting_board_, other->is_hosting_board_);
  swap(is_requires_at_least_one_daughter_board_, other->is_requires_at_least_one_daughter_board_);
  swap(is_removable_, other->is_removable_);
  swap(is_replaceable_, other->is_replaceable_);
  swap(is_hot_swappable_, other->is_hot_swappable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard_Features::GetTypeName() const {
  return "aspia.proto.DmiBaseboard.Features";
}


// ===================================================================

void DmiBaseboard_Item::InitAsDefaultInstance() {
  ::aspia::proto::_DmiBaseboard_Item_default_instance_._instance.get_mutable()->features_ = const_cast< ::aspia::proto::DmiBaseboard_Features*>(
      ::aspia::proto::DmiBaseboard_Features::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard_Item::kManufacturerFieldNumber;
const int DmiBaseboard_Item::kProductNameFieldNumber;
const int DmiBaseboard_Item::kVersionFieldNumber;
const int DmiBaseboard_Item::kSerialNumberFieldNumber;
const int DmiBaseboard_Item::kAssetTagFieldNumber;
const int DmiBaseboard_Item::kFeaturesFieldNumber;
const int DmiBaseboard_Item::kLocationInChassisFieldNumber;
const int DmiBaseboard_Item::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard_Item::DmiBaseboard_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiBaseboard.Item)
}
DmiBaseboard_Item::DmiBaseboard_Item(const DmiBaseboard_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  location_in_chassis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_in_chassis().size() > 0) {
    location_in_chassis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_in_chassis_);
  }
  if (from.has_features()) {
    features_ = new ::aspia::proto::DmiBaseboard_Features(*from.features_);
  } else {
    features_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiBaseboard.Item)
}

void DmiBaseboard_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&features_)) + sizeof(type_));
  _cached_size_ = 0;
}

DmiBaseboard_Item::~DmiBaseboard_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiBaseboard.Item)
  SharedDtor();
}

void DmiBaseboard_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
}

void DmiBaseboard_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard_Item& DmiBaseboard_Item::default_instance() {
  ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard_Item();
  return *internal_default_instance();
}

DmiBaseboard_Item* DmiBaseboard_Item::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard_Item* n = new DmiBaseboard_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiBaseboard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && features_ != NULL) {
    delete features_;
  }
  features_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool DmiBaseboard_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiBaseboard.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiBaseboard.Features features = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_in_chassis = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_in_chassis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_in_chassis().data(), static_cast<int>(this->location_in_chassis().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiBaseboard.Item.location_in_chassis"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiBaseboard.BoardType type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiBaseboard_BoardType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiBaseboard.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiBaseboard.Item)
  return false;
#undef DO_
}

void DmiBaseboard_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiBaseboard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string asset_tag = 5;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->asset_tag(), output);
  }

  // .aspia.proto.DmiBaseboard.Features features = 6;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->features_, output);
  }

  // string location_in_chassis = 7;
  if (this->location_in_chassis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_in_chassis().data(), static_cast<int>(this->location_in_chassis().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiBaseboard.Item.location_in_chassis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_in_chassis(), output);
  }

  // .aspia.proto.DmiBaseboard.BoardType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiBaseboard.Item)
}

size_t DmiBaseboard_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiBaseboard.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 5;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string location_in_chassis = 7;
  if (this->location_in_chassis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_in_chassis());
  }

  // .aspia.proto.DmiBaseboard.Features features = 6;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->features_);
  }

  // .aspia.proto.DmiBaseboard.BoardType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard_Item*>(&from));
}

void DmiBaseboard_Item::MergeFrom(const DmiBaseboard_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiBaseboard.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.location_in_chassis().size() > 0) {

    location_in_chassis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_in_chassis_);
  }
  if (from.has_features()) {
    mutable_features()->::aspia::proto::DmiBaseboard_Features::MergeFrom(from.features());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DmiBaseboard_Item::CopyFrom(const DmiBaseboard_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiBaseboard.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard_Item::IsInitialized() const {
  return true;
}

void DmiBaseboard_Item::Swap(DmiBaseboard_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard_Item::InternalSwap(DmiBaseboard_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  product_name_.Swap(&other->product_name_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  location_in_chassis_.Swap(&other->location_in_chassis_);
  swap(features_, other->features_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard_Item::GetTypeName() const {
  return "aspia.proto.DmiBaseboard.Item";
}


// ===================================================================

void DmiBaseboard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard::DmiBaseboard()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiBaseboard)
}
DmiBaseboard::DmiBaseboard(const DmiBaseboard& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiBaseboard)
}

void DmiBaseboard::SharedCtor() {
  _cached_size_ = 0;
}

DmiBaseboard::~DmiBaseboard() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiBaseboard)
  SharedDtor();
}

void DmiBaseboard::SharedDtor() {
}

void DmiBaseboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard& DmiBaseboard::default_instance() {
  ::protobuf_category_5fdmi_5fbaseboard_2eproto::InitDefaultsDmiBaseboard();
  return *internal_default_instance();
}

DmiBaseboard* DmiBaseboard::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard* n = new DmiBaseboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiBaseboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiBaseboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiBaseboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiBaseboard.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiBaseboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiBaseboard)
  return false;
#undef DO_
}

void DmiBaseboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiBaseboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiBaseboard.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiBaseboard)
}

size_t DmiBaseboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiBaseboard)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiBaseboard.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard*>(&from));
}

void DmiBaseboard::MergeFrom(const DmiBaseboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiBaseboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiBaseboard::CopyFrom(const DmiBaseboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiBaseboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard::IsInitialized() const {
  return true;
}

void DmiBaseboard::Swap(DmiBaseboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard::InternalSwap(DmiBaseboard* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard::GetTypeName() const {
  return "aspia.proto.DmiBaseboard";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

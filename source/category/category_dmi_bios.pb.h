// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_bios.proto

#ifndef PROTOBUF_category_5fdmi_5fbios_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fbios_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fbios_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiBios_CharacteristicsImpl();
void InitDefaultsDmiBios_Characteristics();
void InitDefaultsDmiBiosImpl();
void InitDefaultsDmiBios();
inline void InitDefaults() {
  InitDefaultsDmiBios_Characteristics();
  InitDefaultsDmiBios();
}
}  // namespace protobuf_category_5fdmi_5fbios_2eproto
namespace aspia {
namespace proto {
class DmiBios;
class DmiBiosDefaultTypeInternal;
extern DmiBiosDefaultTypeInternal _DmiBios_default_instance_;
class DmiBios_Characteristics;
class DmiBios_CharacteristicsDefaultTypeInternal;
extern DmiBios_CharacteristicsDefaultTypeInternal _DmiBios_Characteristics_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class DmiBios_Characteristics : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiBios.Characteristics) */ {
 public:
  DmiBios_Characteristics();
  virtual ~DmiBios_Characteristics();

  DmiBios_Characteristics(const DmiBios_Characteristics& from);

  inline DmiBios_Characteristics& operator=(const DmiBios_Characteristics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiBios_Characteristics(DmiBios_Characteristics&& from) noexcept
    : DmiBios_Characteristics() {
    *this = ::std::move(from);
  }

  inline DmiBios_Characteristics& operator=(DmiBios_Characteristics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiBios_Characteristics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiBios_Characteristics* internal_default_instance() {
    return reinterpret_cast<const DmiBios_Characteristics*>(
               &_DmiBios_Characteristics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiBios_Characteristics* other);
  friend void swap(DmiBios_Characteristics& a, DmiBios_Characteristics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiBios_Characteristics* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiBios_Characteristics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiBios_Characteristics& from);
  void MergeFrom(const DmiBios_Characteristics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiBios_Characteristics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool has_isa = 1;
  void clear_has_isa();
  static const int kHasIsaFieldNumber = 1;
  bool has_isa() const;
  void set_has_isa(bool value);

  // bool has_mca = 2;
  void clear_has_mca();
  static const int kHasMcaFieldNumber = 2;
  bool has_mca() const;
  void set_has_mca(bool value);

  // bool has_eisa = 3;
  void clear_has_eisa();
  static const int kHasEisaFieldNumber = 3;
  bool has_eisa() const;
  void set_has_eisa(bool value);

  // bool has_pci = 4;
  void clear_has_pci();
  static const int kHasPciFieldNumber = 4;
  bool has_pci() const;
  void set_has_pci(bool value);

  // bool has_pc_card = 5;
  void clear_has_pc_card();
  static const int kHasPcCardFieldNumber = 5;
  bool has_pc_card() const;
  void set_has_pc_card(bool value);

  // bool has_pnp = 6;
  void clear_has_pnp();
  static const int kHasPnpFieldNumber = 6;
  bool has_pnp() const;
  void set_has_pnp(bool value);

  // bool has_apm = 7;
  void clear_has_apm();
  static const int kHasApmFieldNumber = 7;
  bool has_apm() const;
  void set_has_apm(bool value);

  // bool has_bios_upgradeable = 8;
  void clear_has_bios_upgradeable();
  static const int kHasBiosUpgradeableFieldNumber = 8;
  bool has_bios_upgradeable() const;
  void set_has_bios_upgradeable(bool value);

  // bool has_bios_shadowing = 9;
  void clear_has_bios_shadowing();
  static const int kHasBiosShadowingFieldNumber = 9;
  bool has_bios_shadowing() const;
  void set_has_bios_shadowing(bool value);

  // bool has_vlb = 10;
  void clear_has_vlb();
  static const int kHasVlbFieldNumber = 10;
  bool has_vlb() const;
  void set_has_vlb(bool value);

  // bool has_escd = 11;
  void clear_has_escd();
  static const int kHasEscdFieldNumber = 11;
  bool has_escd() const;
  void set_has_escd(bool value);

  // bool has_boot_from_cd = 12;
  void clear_has_boot_from_cd();
  static const int kHasBootFromCdFieldNumber = 12;
  bool has_boot_from_cd() const;
  void set_has_boot_from_cd(bool value);

  // bool has_selectable_boot = 13;
  void clear_has_selectable_boot();
  static const int kHasSelectableBootFieldNumber = 13;
  bool has_selectable_boot() const;
  void set_has_selectable_boot(bool value);

  // bool has_socketed_boot_rom = 14;
  void clear_has_socketed_boot_rom();
  static const int kHasSocketedBootRomFieldNumber = 14;
  bool has_socketed_boot_rom() const;
  void set_has_socketed_boot_rom(bool value);

  // bool has_boot_from_pc_card = 15;
  void clear_has_boot_from_pc_card();
  static const int kHasBootFromPcCardFieldNumber = 15;
  bool has_boot_from_pc_card() const;
  void set_has_boot_from_pc_card(bool value);

  // bool has_edd = 16;
  void clear_has_edd();
  static const int kHasEddFieldNumber = 16;
  bool has_edd() const;
  void set_has_edd(bool value);

  // bool has_japanese_floppy_for_nec9800 = 17;
  void clear_has_japanese_floppy_for_nec9800();
  static const int kHasJapaneseFloppyForNec9800FieldNumber = 17;
  bool has_japanese_floppy_for_nec9800() const;
  void set_has_japanese_floppy_for_nec9800(bool value);

  // bool has_japanece_floppy_for_toshiba = 18;
  void clear_has_japanece_floppy_for_toshiba();
  static const int kHasJapaneceFloppyForToshibaFieldNumber = 18;
  bool has_japanece_floppy_for_toshiba() const;
  void set_has_japanece_floppy_for_toshiba(bool value);

  // bool has_525_360kb_floppy = 19;
  void clear_has_525_360kb_floppy();
  static const int kHas525360KbFloppyFieldNumber = 19;
  bool has_525_360kb_floppy() const;
  void set_has_525_360kb_floppy(bool value);

  // bool has_525_12mb_floppy = 20;
  void clear_has_525_12mb_floppy();
  static const int kHas52512MbFloppyFieldNumber = 20;
  bool has_525_12mb_floppy() const;
  void set_has_525_12mb_floppy(bool value);

  // bool has_35_720kb_floppy = 21;
  void clear_has_35_720kb_floppy();
  static const int kHas35720KbFloppyFieldNumber = 21;
  bool has_35_720kb_floppy() const;
  void set_has_35_720kb_floppy(bool value);

  // bool has_35_288mb_floppy = 22;
  void clear_has_35_288mb_floppy();
  static const int kHas35288MbFloppyFieldNumber = 22;
  bool has_35_288mb_floppy() const;
  void set_has_35_288mb_floppy(bool value);

  // bool has_print_screen = 23;
  void clear_has_print_screen();
  static const int kHasPrintScreenFieldNumber = 23;
  bool has_print_screen() const;
  void set_has_print_screen(bool value);

  // bool has_8042_keyboard = 24;
  void clear_has_8042_keyboard();
  static const int kHas8042KeyboardFieldNumber = 24;
  bool has_8042_keyboard() const;
  void set_has_8042_keyboard(bool value);

  // bool has_serial = 25;
  void clear_has_serial();
  static const int kHasSerialFieldNumber = 25;
  bool has_serial() const;
  void set_has_serial(bool value);

  // bool has_printer = 26;
  void clear_has_printer();
  static const int kHasPrinterFieldNumber = 26;
  bool has_printer() const;
  void set_has_printer(bool value);

  // bool has_cga_video = 27;
  void clear_has_cga_video();
  static const int kHasCgaVideoFieldNumber = 27;
  bool has_cga_video() const;
  void set_has_cga_video(bool value);

  // bool has_nec_pc98 = 28;
  void clear_has_nec_pc98();
  static const int kHasNecPc98FieldNumber = 28;
  bool has_nec_pc98() const;
  void set_has_nec_pc98(bool value);

  // bool has_acpi = 29;
  void clear_has_acpi();
  static const int kHasAcpiFieldNumber = 29;
  bool has_acpi() const;
  void set_has_acpi(bool value);

  // bool has_usb_legacy = 30;
  void clear_has_usb_legacy();
  static const int kHasUsbLegacyFieldNumber = 30;
  bool has_usb_legacy() const;
  void set_has_usb_legacy(bool value);

  // bool has_agp = 31;
  void clear_has_agp();
  static const int kHasAgpFieldNumber = 31;
  bool has_agp() const;
  void set_has_agp(bool value);

  // bool has_i2o_boot = 32;
  void clear_has_i2o_boot();
  static const int kHasI2OBootFieldNumber = 32;
  bool has_i2o_boot() const;
  void set_has_i2o_boot(bool value);

  // bool has_ls120_boot = 33;
  void clear_has_ls120_boot();
  static const int kHasLs120BootFieldNumber = 33;
  bool has_ls120_boot() const;
  void set_has_ls120_boot(bool value);

  // bool has_atapi_zip_drive_boot = 34;
  void clear_has_atapi_zip_drive_boot();
  static const int kHasAtapiZipDriveBootFieldNumber = 34;
  bool has_atapi_zip_drive_boot() const;
  void set_has_atapi_zip_drive_boot(bool value);

  // bool has_ieee1394_boot = 35;
  void clear_has_ieee1394_boot();
  static const int kHasIeee1394BootFieldNumber = 35;
  bool has_ieee1394_boot() const;
  void set_has_ieee1394_boot(bool value);

  // bool has_smart_battery = 36;
  void clear_has_smart_battery();
  static const int kHasSmartBatteryFieldNumber = 36;
  bool has_smart_battery() const;
  void set_has_smart_battery(bool value);

  // bool has_bios_boot_specification = 37;
  void clear_has_bios_boot_specification();
  static const int kHasBiosBootSpecificationFieldNumber = 37;
  bool has_bios_boot_specification() const;
  void set_has_bios_boot_specification(bool value);

  // bool has_key_init_network_boot = 38;
  void clear_has_key_init_network_boot();
  static const int kHasKeyInitNetworkBootFieldNumber = 38;
  bool has_key_init_network_boot() const;
  void set_has_key_init_network_boot(bool value);

  // bool has_targeted_content_distrib = 39;
  void clear_has_targeted_content_distrib();
  static const int kHasTargetedContentDistribFieldNumber = 39;
  bool has_targeted_content_distrib() const;
  void set_has_targeted_content_distrib(bool value);

  // bool has_uefi = 40;
  void clear_has_uefi();
  static const int kHasUefiFieldNumber = 40;
  bool has_uefi() const;
  void set_has_uefi(bool value);

  // bool has_virtual_machine = 41;
  void clear_has_virtual_machine();
  static const int kHasVirtualMachineFieldNumber = 41;
  bool has_virtual_machine() const;
  void set_has_virtual_machine(bool value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiBios.Characteristics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool has_isa_;
  bool has_mca_;
  bool has_eisa_;
  bool has_pci_;
  bool has_pc_card_;
  bool has_pnp_;
  bool has_apm_;
  bool has_bios_upgradeable_;
  bool has_bios_shadowing_;
  bool has_vlb_;
  bool has_escd_;
  bool has_boot_from_cd_;
  bool has_selectable_boot_;
  bool has_socketed_boot_rom_;
  bool has_boot_from_pc_card_;
  bool has_edd_;
  bool has_japanese_floppy_for_nec9800_;
  bool has_japanece_floppy_for_toshiba_;
  bool has_525_360kb_floppy_;
  bool has_525_12mb_floppy_;
  bool has_35_720kb_floppy_;
  bool has_35_288mb_floppy_;
  bool has_print_screen_;
  bool has_8042_keyboard_;
  bool has_serial_;
  bool has_printer_;
  bool has_cga_video_;
  bool has_nec_pc98_;
  bool has_acpi_;
  bool has_usb_legacy_;
  bool has_agp_;
  bool has_i2o_boot_;
  bool has_ls120_boot_;
  bool has_atapi_zip_drive_boot_;
  bool has_ieee1394_boot_;
  bool has_smart_battery_;
  bool has_bios_boot_specification_;
  bool has_key_init_network_boot_;
  bool has_targeted_content_distrib_;
  bool has_uefi_;
  bool has_virtual_machine_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fbios_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fbios_2eproto::InitDefaultsDmiBios_CharacteristicsImpl();
};
// -------------------------------------------------------------------

class DmiBios : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiBios) */ {
 public:
  DmiBios();
  virtual ~DmiBios();

  DmiBios(const DmiBios& from);

  inline DmiBios& operator=(const DmiBios& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiBios(DmiBios&& from) noexcept
    : DmiBios() {
    *this = ::std::move(from);
  }

  inline DmiBios& operator=(DmiBios&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiBios& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiBios* internal_default_instance() {
    return reinterpret_cast<const DmiBios*>(
               &_DmiBios_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiBios* other);
  friend void swap(DmiBios& a, DmiBios& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiBios* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiBios* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiBios& from);
  void MergeFrom(const DmiBios& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiBios* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiBios_Characteristics Characteristics;

  // accessors -------------------------------------------------------

  // string manufacturer = 1;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 1;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string bios_revision = 5;
  void clear_bios_revision();
  static const int kBiosRevisionFieldNumber = 5;
  const ::std::string& bios_revision() const;
  void set_bios_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_bios_revision(::std::string&& value);
  #endif
  void set_bios_revision(const char* value);
  void set_bios_revision(const char* value, size_t size);
  ::std::string* mutable_bios_revision();
  ::std::string* release_bios_revision();
  void set_allocated_bios_revision(::std::string* bios_revision);

  // string firmware_revision = 6;
  void clear_firmware_revision();
  static const int kFirmwareRevisionFieldNumber = 6;
  const ::std::string& firmware_revision() const;
  void set_firmware_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_firmware_revision(::std::string&& value);
  #endif
  void set_firmware_revision(const char* value);
  void set_firmware_revision(const char* value, size_t size);
  ::std::string* mutable_firmware_revision();
  ::std::string* release_firmware_revision();
  void set_allocated_firmware_revision(::std::string* firmware_revision);

  // string address = 7;
  void clear_address();
  static const int kAddressFieldNumber = 7;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .aspia.proto.DmiBios.Characteristics characteristics = 9;
  bool has_characteristics() const;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 9;
  const ::aspia::proto::DmiBios_Characteristics& characteristics() const;
  ::aspia::proto::DmiBios_Characteristics* release_characteristics();
  ::aspia::proto::DmiBios_Characteristics* mutable_characteristics();
  void set_allocated_characteristics(::aspia::proto::DmiBios_Characteristics* characteristics);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // int32 runtime_size = 8;
  void clear_runtime_size();
  static const int kRuntimeSizeFieldNumber = 8;
  ::google::protobuf::int32 runtime_size() const;
  void set_runtime_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiBios)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr bios_revision_;
  ::google::protobuf::internal::ArenaStringPtr firmware_revision_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::aspia::proto::DmiBios_Characteristics* characteristics_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int32 runtime_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fbios_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fbios_2eproto::InitDefaultsDmiBiosImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiBios_Characteristics

// bool has_isa = 1;
inline void DmiBios_Characteristics::clear_has_isa() {
  has_isa_ = false;
}
inline bool DmiBios_Characteristics::has_isa() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_isa)
  return has_isa_;
}
inline void DmiBios_Characteristics::set_has_isa(bool value) {
  
  has_isa_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_isa)
}

// bool has_mca = 2;
inline void DmiBios_Characteristics::clear_has_mca() {
  has_mca_ = false;
}
inline bool DmiBios_Characteristics::has_mca() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_mca)
  return has_mca_;
}
inline void DmiBios_Characteristics::set_has_mca(bool value) {
  
  has_mca_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_mca)
}

// bool has_eisa = 3;
inline void DmiBios_Characteristics::clear_has_eisa() {
  has_eisa_ = false;
}
inline bool DmiBios_Characteristics::has_eisa() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_eisa)
  return has_eisa_;
}
inline void DmiBios_Characteristics::set_has_eisa(bool value) {
  
  has_eisa_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_eisa)
}

// bool has_pci = 4;
inline void DmiBios_Characteristics::clear_has_pci() {
  has_pci_ = false;
}
inline bool DmiBios_Characteristics::has_pci() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_pci)
  return has_pci_;
}
inline void DmiBios_Characteristics::set_has_pci(bool value) {
  
  has_pci_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_pci)
}

// bool has_pc_card = 5;
inline void DmiBios_Characteristics::clear_has_pc_card() {
  has_pc_card_ = false;
}
inline bool DmiBios_Characteristics::has_pc_card() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_pc_card)
  return has_pc_card_;
}
inline void DmiBios_Characteristics::set_has_pc_card(bool value) {
  
  has_pc_card_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_pc_card)
}

// bool has_pnp = 6;
inline void DmiBios_Characteristics::clear_has_pnp() {
  has_pnp_ = false;
}
inline bool DmiBios_Characteristics::has_pnp() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_pnp)
  return has_pnp_;
}
inline void DmiBios_Characteristics::set_has_pnp(bool value) {
  
  has_pnp_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_pnp)
}

// bool has_apm = 7;
inline void DmiBios_Characteristics::clear_has_apm() {
  has_apm_ = false;
}
inline bool DmiBios_Characteristics::has_apm() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_apm)
  return has_apm_;
}
inline void DmiBios_Characteristics::set_has_apm(bool value) {
  
  has_apm_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_apm)
}

// bool has_bios_upgradeable = 8;
inline void DmiBios_Characteristics::clear_has_bios_upgradeable() {
  has_bios_upgradeable_ = false;
}
inline bool DmiBios_Characteristics::has_bios_upgradeable() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_bios_upgradeable)
  return has_bios_upgradeable_;
}
inline void DmiBios_Characteristics::set_has_bios_upgradeable(bool value) {
  
  has_bios_upgradeable_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_bios_upgradeable)
}

// bool has_bios_shadowing = 9;
inline void DmiBios_Characteristics::clear_has_bios_shadowing() {
  has_bios_shadowing_ = false;
}
inline bool DmiBios_Characteristics::has_bios_shadowing() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_bios_shadowing)
  return has_bios_shadowing_;
}
inline void DmiBios_Characteristics::set_has_bios_shadowing(bool value) {
  
  has_bios_shadowing_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_bios_shadowing)
}

// bool has_vlb = 10;
inline void DmiBios_Characteristics::clear_has_vlb() {
  has_vlb_ = false;
}
inline bool DmiBios_Characteristics::has_vlb() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_vlb)
  return has_vlb_;
}
inline void DmiBios_Characteristics::set_has_vlb(bool value) {
  
  has_vlb_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_vlb)
}

// bool has_escd = 11;
inline void DmiBios_Characteristics::clear_has_escd() {
  has_escd_ = false;
}
inline bool DmiBios_Characteristics::has_escd() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_escd)
  return has_escd_;
}
inline void DmiBios_Characteristics::set_has_escd(bool value) {
  
  has_escd_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_escd)
}

// bool has_boot_from_cd = 12;
inline void DmiBios_Characteristics::clear_has_boot_from_cd() {
  has_boot_from_cd_ = false;
}
inline bool DmiBios_Characteristics::has_boot_from_cd() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_boot_from_cd)
  return has_boot_from_cd_;
}
inline void DmiBios_Characteristics::set_has_boot_from_cd(bool value) {
  
  has_boot_from_cd_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_boot_from_cd)
}

// bool has_selectable_boot = 13;
inline void DmiBios_Characteristics::clear_has_selectable_boot() {
  has_selectable_boot_ = false;
}
inline bool DmiBios_Characteristics::has_selectable_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_selectable_boot)
  return has_selectable_boot_;
}
inline void DmiBios_Characteristics::set_has_selectable_boot(bool value) {
  
  has_selectable_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_selectable_boot)
}

// bool has_socketed_boot_rom = 14;
inline void DmiBios_Characteristics::clear_has_socketed_boot_rom() {
  has_socketed_boot_rom_ = false;
}
inline bool DmiBios_Characteristics::has_socketed_boot_rom() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_socketed_boot_rom)
  return has_socketed_boot_rom_;
}
inline void DmiBios_Characteristics::set_has_socketed_boot_rom(bool value) {
  
  has_socketed_boot_rom_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_socketed_boot_rom)
}

// bool has_boot_from_pc_card = 15;
inline void DmiBios_Characteristics::clear_has_boot_from_pc_card() {
  has_boot_from_pc_card_ = false;
}
inline bool DmiBios_Characteristics::has_boot_from_pc_card() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_boot_from_pc_card)
  return has_boot_from_pc_card_;
}
inline void DmiBios_Characteristics::set_has_boot_from_pc_card(bool value) {
  
  has_boot_from_pc_card_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_boot_from_pc_card)
}

// bool has_edd = 16;
inline void DmiBios_Characteristics::clear_has_edd() {
  has_edd_ = false;
}
inline bool DmiBios_Characteristics::has_edd() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_edd)
  return has_edd_;
}
inline void DmiBios_Characteristics::set_has_edd(bool value) {
  
  has_edd_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_edd)
}

// bool has_japanese_floppy_for_nec9800 = 17;
inline void DmiBios_Characteristics::clear_has_japanese_floppy_for_nec9800() {
  has_japanese_floppy_for_nec9800_ = false;
}
inline bool DmiBios_Characteristics::has_japanese_floppy_for_nec9800() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_japanese_floppy_for_nec9800)
  return has_japanese_floppy_for_nec9800_;
}
inline void DmiBios_Characteristics::set_has_japanese_floppy_for_nec9800(bool value) {
  
  has_japanese_floppy_for_nec9800_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_japanese_floppy_for_nec9800)
}

// bool has_japanece_floppy_for_toshiba = 18;
inline void DmiBios_Characteristics::clear_has_japanece_floppy_for_toshiba() {
  has_japanece_floppy_for_toshiba_ = false;
}
inline bool DmiBios_Characteristics::has_japanece_floppy_for_toshiba() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_japanece_floppy_for_toshiba)
  return has_japanece_floppy_for_toshiba_;
}
inline void DmiBios_Characteristics::set_has_japanece_floppy_for_toshiba(bool value) {
  
  has_japanece_floppy_for_toshiba_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_japanece_floppy_for_toshiba)
}

// bool has_525_360kb_floppy = 19;
inline void DmiBios_Characteristics::clear_has_525_360kb_floppy() {
  has_525_360kb_floppy_ = false;
}
inline bool DmiBios_Characteristics::has_525_360kb_floppy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_525_360kb_floppy)
  return has_525_360kb_floppy_;
}
inline void DmiBios_Characteristics::set_has_525_360kb_floppy(bool value) {
  
  has_525_360kb_floppy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_525_360kb_floppy)
}

// bool has_525_12mb_floppy = 20;
inline void DmiBios_Characteristics::clear_has_525_12mb_floppy() {
  has_525_12mb_floppy_ = false;
}
inline bool DmiBios_Characteristics::has_525_12mb_floppy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_525_12mb_floppy)
  return has_525_12mb_floppy_;
}
inline void DmiBios_Characteristics::set_has_525_12mb_floppy(bool value) {
  
  has_525_12mb_floppy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_525_12mb_floppy)
}

// bool has_35_720kb_floppy = 21;
inline void DmiBios_Characteristics::clear_has_35_720kb_floppy() {
  has_35_720kb_floppy_ = false;
}
inline bool DmiBios_Characteristics::has_35_720kb_floppy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_35_720kb_floppy)
  return has_35_720kb_floppy_;
}
inline void DmiBios_Characteristics::set_has_35_720kb_floppy(bool value) {
  
  has_35_720kb_floppy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_35_720kb_floppy)
}

// bool has_35_288mb_floppy = 22;
inline void DmiBios_Characteristics::clear_has_35_288mb_floppy() {
  has_35_288mb_floppy_ = false;
}
inline bool DmiBios_Characteristics::has_35_288mb_floppy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_35_288mb_floppy)
  return has_35_288mb_floppy_;
}
inline void DmiBios_Characteristics::set_has_35_288mb_floppy(bool value) {
  
  has_35_288mb_floppy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_35_288mb_floppy)
}

// bool has_print_screen = 23;
inline void DmiBios_Characteristics::clear_has_print_screen() {
  has_print_screen_ = false;
}
inline bool DmiBios_Characteristics::has_print_screen() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_print_screen)
  return has_print_screen_;
}
inline void DmiBios_Characteristics::set_has_print_screen(bool value) {
  
  has_print_screen_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_print_screen)
}

// bool has_8042_keyboard = 24;
inline void DmiBios_Characteristics::clear_has_8042_keyboard() {
  has_8042_keyboard_ = false;
}
inline bool DmiBios_Characteristics::has_8042_keyboard() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_8042_keyboard)
  return has_8042_keyboard_;
}
inline void DmiBios_Characteristics::set_has_8042_keyboard(bool value) {
  
  has_8042_keyboard_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_8042_keyboard)
}

// bool has_serial = 25;
inline void DmiBios_Characteristics::clear_has_serial() {
  has_serial_ = false;
}
inline bool DmiBios_Characteristics::has_serial() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_serial)
  return has_serial_;
}
inline void DmiBios_Characteristics::set_has_serial(bool value) {
  
  has_serial_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_serial)
}

// bool has_printer = 26;
inline void DmiBios_Characteristics::clear_has_printer() {
  has_printer_ = false;
}
inline bool DmiBios_Characteristics::has_printer() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_printer)
  return has_printer_;
}
inline void DmiBios_Characteristics::set_has_printer(bool value) {
  
  has_printer_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_printer)
}

// bool has_cga_video = 27;
inline void DmiBios_Characteristics::clear_has_cga_video() {
  has_cga_video_ = false;
}
inline bool DmiBios_Characteristics::has_cga_video() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_cga_video)
  return has_cga_video_;
}
inline void DmiBios_Characteristics::set_has_cga_video(bool value) {
  
  has_cga_video_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_cga_video)
}

// bool has_nec_pc98 = 28;
inline void DmiBios_Characteristics::clear_has_nec_pc98() {
  has_nec_pc98_ = false;
}
inline bool DmiBios_Characteristics::has_nec_pc98() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_nec_pc98)
  return has_nec_pc98_;
}
inline void DmiBios_Characteristics::set_has_nec_pc98(bool value) {
  
  has_nec_pc98_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_nec_pc98)
}

// bool has_acpi = 29;
inline void DmiBios_Characteristics::clear_has_acpi() {
  has_acpi_ = false;
}
inline bool DmiBios_Characteristics::has_acpi() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_acpi)
  return has_acpi_;
}
inline void DmiBios_Characteristics::set_has_acpi(bool value) {
  
  has_acpi_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_acpi)
}

// bool has_usb_legacy = 30;
inline void DmiBios_Characteristics::clear_has_usb_legacy() {
  has_usb_legacy_ = false;
}
inline bool DmiBios_Characteristics::has_usb_legacy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_usb_legacy)
  return has_usb_legacy_;
}
inline void DmiBios_Characteristics::set_has_usb_legacy(bool value) {
  
  has_usb_legacy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_usb_legacy)
}

// bool has_agp = 31;
inline void DmiBios_Characteristics::clear_has_agp() {
  has_agp_ = false;
}
inline bool DmiBios_Characteristics::has_agp() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_agp)
  return has_agp_;
}
inline void DmiBios_Characteristics::set_has_agp(bool value) {
  
  has_agp_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_agp)
}

// bool has_i2o_boot = 32;
inline void DmiBios_Characteristics::clear_has_i2o_boot() {
  has_i2o_boot_ = false;
}
inline bool DmiBios_Characteristics::has_i2o_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_i2o_boot)
  return has_i2o_boot_;
}
inline void DmiBios_Characteristics::set_has_i2o_boot(bool value) {
  
  has_i2o_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_i2o_boot)
}

// bool has_ls120_boot = 33;
inline void DmiBios_Characteristics::clear_has_ls120_boot() {
  has_ls120_boot_ = false;
}
inline bool DmiBios_Characteristics::has_ls120_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_ls120_boot)
  return has_ls120_boot_;
}
inline void DmiBios_Characteristics::set_has_ls120_boot(bool value) {
  
  has_ls120_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_ls120_boot)
}

// bool has_atapi_zip_drive_boot = 34;
inline void DmiBios_Characteristics::clear_has_atapi_zip_drive_boot() {
  has_atapi_zip_drive_boot_ = false;
}
inline bool DmiBios_Characteristics::has_atapi_zip_drive_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_atapi_zip_drive_boot)
  return has_atapi_zip_drive_boot_;
}
inline void DmiBios_Characteristics::set_has_atapi_zip_drive_boot(bool value) {
  
  has_atapi_zip_drive_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_atapi_zip_drive_boot)
}

// bool has_ieee1394_boot = 35;
inline void DmiBios_Characteristics::clear_has_ieee1394_boot() {
  has_ieee1394_boot_ = false;
}
inline bool DmiBios_Characteristics::has_ieee1394_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_ieee1394_boot)
  return has_ieee1394_boot_;
}
inline void DmiBios_Characteristics::set_has_ieee1394_boot(bool value) {
  
  has_ieee1394_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_ieee1394_boot)
}

// bool has_smart_battery = 36;
inline void DmiBios_Characteristics::clear_has_smart_battery() {
  has_smart_battery_ = false;
}
inline bool DmiBios_Characteristics::has_smart_battery() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_smart_battery)
  return has_smart_battery_;
}
inline void DmiBios_Characteristics::set_has_smart_battery(bool value) {
  
  has_smart_battery_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_smart_battery)
}

// bool has_bios_boot_specification = 37;
inline void DmiBios_Characteristics::clear_has_bios_boot_specification() {
  has_bios_boot_specification_ = false;
}
inline bool DmiBios_Characteristics::has_bios_boot_specification() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_bios_boot_specification)
  return has_bios_boot_specification_;
}
inline void DmiBios_Characteristics::set_has_bios_boot_specification(bool value) {
  
  has_bios_boot_specification_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_bios_boot_specification)
}

// bool has_key_init_network_boot = 38;
inline void DmiBios_Characteristics::clear_has_key_init_network_boot() {
  has_key_init_network_boot_ = false;
}
inline bool DmiBios_Characteristics::has_key_init_network_boot() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_key_init_network_boot)
  return has_key_init_network_boot_;
}
inline void DmiBios_Characteristics::set_has_key_init_network_boot(bool value) {
  
  has_key_init_network_boot_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_key_init_network_boot)
}

// bool has_targeted_content_distrib = 39;
inline void DmiBios_Characteristics::clear_has_targeted_content_distrib() {
  has_targeted_content_distrib_ = false;
}
inline bool DmiBios_Characteristics::has_targeted_content_distrib() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_targeted_content_distrib)
  return has_targeted_content_distrib_;
}
inline void DmiBios_Characteristics::set_has_targeted_content_distrib(bool value) {
  
  has_targeted_content_distrib_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_targeted_content_distrib)
}

// bool has_uefi = 40;
inline void DmiBios_Characteristics::clear_has_uefi() {
  has_uefi_ = false;
}
inline bool DmiBios_Characteristics::has_uefi() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_uefi)
  return has_uefi_;
}
inline void DmiBios_Characteristics::set_has_uefi(bool value) {
  
  has_uefi_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_uefi)
}

// bool has_virtual_machine = 41;
inline void DmiBios_Characteristics::clear_has_virtual_machine() {
  has_virtual_machine_ = false;
}
inline bool DmiBios_Characteristics::has_virtual_machine() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.Characteristics.has_virtual_machine)
  return has_virtual_machine_;
}
inline void DmiBios_Characteristics::set_has_virtual_machine(bool value) {
  
  has_virtual_machine_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.Characteristics.has_virtual_machine)
}

// -------------------------------------------------------------------

// DmiBios

// string manufacturer = 1;
inline void DmiBios::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DmiBios::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.manufacturer)
}
#if LANG_CXX11
inline void DmiBios::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.manufacturer)
}
#endif
inline void DmiBios::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.manufacturer)
}
inline void DmiBios::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.manufacturer)
}
inline ::std::string* DmiBios::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.manufacturer)
}

// string version = 2;
inline void DmiBios::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.version)
  return version_.GetNoArena();
}
inline void DmiBios::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.version)
}
#if LANG_CXX11
inline void DmiBios::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.version)
}
#endif
inline void DmiBios::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.version)
}
inline void DmiBios::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.version)
}
inline ::std::string* DmiBios::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.version)
}

// string date = 3;
inline void DmiBios::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::date() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.date)
  return date_.GetNoArena();
}
inline void DmiBios::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.date)
}
#if LANG_CXX11
inline void DmiBios::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.date)
}
#endif
inline void DmiBios::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.date)
}
inline void DmiBios::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.date)
}
inline ::std::string* DmiBios::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_date() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.date)
}

// uint64 size = 4;
inline void DmiBios::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DmiBios::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.size)
  return size_;
}
inline void DmiBios::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.size)
}

// string bios_revision = 5;
inline void DmiBios::clear_bios_revision() {
  bios_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::bios_revision() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.bios_revision)
  return bios_revision_.GetNoArena();
}
inline void DmiBios::set_bios_revision(const ::std::string& value) {
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.bios_revision)
}
#if LANG_CXX11
inline void DmiBios::set_bios_revision(::std::string&& value) {
  
  bios_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.bios_revision)
}
#endif
inline void DmiBios::set_bios_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.bios_revision)
}
inline void DmiBios::set_bios_revision(const char* value, size_t size) {
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.bios_revision)
}
inline ::std::string* DmiBios::mutable_bios_revision() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.bios_revision)
  return bios_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_bios_revision() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.bios_revision)
  
  return bios_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_bios_revision(::std::string* bios_revision) {
  if (bios_revision != NULL) {
    
  } else {
    
  }
  bios_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bios_revision);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.bios_revision)
}

// string firmware_revision = 6;
inline void DmiBios::clear_firmware_revision() {
  firmware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::firmware_revision() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.firmware_revision)
  return firmware_revision_.GetNoArena();
}
inline void DmiBios::set_firmware_revision(const ::std::string& value) {
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.firmware_revision)
}
#if LANG_CXX11
inline void DmiBios::set_firmware_revision(::std::string&& value) {
  
  firmware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.firmware_revision)
}
#endif
inline void DmiBios::set_firmware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.firmware_revision)
}
inline void DmiBios::set_firmware_revision(const char* value, size_t size) {
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.firmware_revision)
}
inline ::std::string* DmiBios::mutable_firmware_revision() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.firmware_revision)
  return firmware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_firmware_revision() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.firmware_revision)
  
  return firmware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_firmware_revision(::std::string* firmware_revision) {
  if (firmware_revision != NULL) {
    
  } else {
    
  }
  firmware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_revision);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.firmware_revision)
}

// string address = 7;
inline void DmiBios::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiBios::address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.address)
  return address_.GetNoArena();
}
inline void DmiBios::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.address)
}
#if LANG_CXX11
inline void DmiBios::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiBios.address)
}
#endif
inline void DmiBios::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiBios.address)
}
inline void DmiBios::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiBios.address)
}
inline ::std::string* DmiBios::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiBios::release_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiBios::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.address)
}

// int32 runtime_size = 8;
inline void DmiBios::clear_runtime_size() {
  runtime_size_ = 0;
}
inline ::google::protobuf::int32 DmiBios::runtime_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.runtime_size)
  return runtime_size_;
}
inline void DmiBios::set_runtime_size(::google::protobuf::int32 value) {
  
  runtime_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiBios.runtime_size)
}

// .aspia.proto.DmiBios.Characteristics characteristics = 9;
inline bool DmiBios::has_characteristics() const {
  return this != internal_default_instance() && characteristics_ != NULL;
}
inline void DmiBios::clear_characteristics() {
  if (GetArenaNoVirtual() == NULL && characteristics_ != NULL) {
    delete characteristics_;
  }
  characteristics_ = NULL;
}
inline const ::aspia::proto::DmiBios_Characteristics& DmiBios::characteristics() const {
  const ::aspia::proto::DmiBios_Characteristics* p = characteristics_;
  // @@protoc_insertion_point(field_get:aspia.proto.DmiBios.characteristics)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::DmiBios_Characteristics*>(
      &::aspia::proto::_DmiBios_Characteristics_default_instance_);
}
inline ::aspia::proto::DmiBios_Characteristics* DmiBios::release_characteristics() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiBios.characteristics)
  
  ::aspia::proto::DmiBios_Characteristics* temp = characteristics_;
  characteristics_ = NULL;
  return temp;
}
inline ::aspia::proto::DmiBios_Characteristics* DmiBios::mutable_characteristics() {
  
  if (characteristics_ == NULL) {
    characteristics_ = new ::aspia::proto::DmiBios_Characteristics;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiBios.characteristics)
  return characteristics_;
}
inline void DmiBios::set_allocated_characteristics(::aspia::proto::DmiBios_Characteristics* characteristics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete characteristics_;
  }
  if (characteristics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      characteristics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, characteristics, submessage_arena);
    }
    
  } else {
    
  }
  characteristics_ = characteristics;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiBios.characteristics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fbios_2eproto__INCLUDED

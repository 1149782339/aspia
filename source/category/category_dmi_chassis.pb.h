// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_chassis.proto

#ifndef PROTOBUF_category_5fdmi_5fchassis_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fchassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fchassis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiChassis_ItemImpl();
void InitDefaultsDmiChassis_Item();
void InitDefaultsDmiChassisImpl();
void InitDefaultsDmiChassis();
inline void InitDefaults() {
  InitDefaultsDmiChassis_Item();
  InitDefaultsDmiChassis();
}
}  // namespace protobuf_category_5fdmi_5fchassis_2eproto
namespace aspia {
namespace proto {
class DmiChassis;
class DmiChassisDefaultTypeInternal;
extern DmiChassisDefaultTypeInternal _DmiChassis_default_instance_;
class DmiChassis_Item;
class DmiChassis_ItemDefaultTypeInternal;
extern DmiChassis_ItemDefaultTypeInternal _DmiChassis_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum DmiChassis_Type {
  DmiChassis_Type_TYPE_UNKNOWN = 0,
  DmiChassis_Type_TYPE_OTHER = 1,
  DmiChassis_Type_TYPE_DESKTOP = 2,
  DmiChassis_Type_TYPE_LOW_PROFILE_DESKTOP = 3,
  DmiChassis_Type_TYPE_PIZZA_BOX = 4,
  DmiChassis_Type_TYPE_MINI_TOWER = 5,
  DmiChassis_Type_TYPE_TOWER = 6,
  DmiChassis_Type_TYPE_PORTABLE = 7,
  DmiChassis_Type_TYPE_LAPTOP = 8,
  DmiChassis_Type_TYPE_NOTEBOOK = 9,
  DmiChassis_Type_TYPE_HAND_HELD = 10,
  DmiChassis_Type_TYPE_DOCKING_STATION = 11,
  DmiChassis_Type_TYPE_ALL_IN_ONE = 12,
  DmiChassis_Type_TYPE_SUB_NOTEBOOK = 13,
  DmiChassis_Type_TYPE_SPACE_SAVING = 14,
  DmiChassis_Type_TYPE_LUNCH_BOX = 15,
  DmiChassis_Type_TYPE_MAIN_SERVER_CHASSIS = 16,
  DmiChassis_Type_TYPE_EXPANSION_CHASSIS = 17,
  DmiChassis_Type_TYPE_SUB_CHASSIS = 18,
  DmiChassis_Type_TYPE_BUS_EXPANSION_CHASSIS = 19,
  DmiChassis_Type_TYPE_PERIPHERIAL_CHASSIS = 20,
  DmiChassis_Type_TYPE_RAID_CHASSIS = 21,
  DmiChassis_Type_TYPE_RACK_MOUNT_CHASSIS = 22,
  DmiChassis_Type_TYPE_SEALED_CASE_PC = 23,
  DmiChassis_Type_TYPE_MULTI_SYSTEM_CHASSIS = 24,
  DmiChassis_Type_TYPE_COMPACT_PCI = 25,
  DmiChassis_Type_TYPE_ADVANCED_TCA = 26,
  DmiChassis_Type_TYPE_BLADE = 27,
  DmiChassis_Type_TYPE_BLADE_ENCLOSURE = 28,
  DmiChassis_Type_DmiChassis_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiChassis_Type_DmiChassis_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiChassis_Type_IsValid(int value);
const DmiChassis_Type DmiChassis_Type_Type_MIN = DmiChassis_Type_TYPE_UNKNOWN;
const DmiChassis_Type DmiChassis_Type_Type_MAX = DmiChassis_Type_TYPE_BLADE_ENCLOSURE;
const int DmiChassis_Type_Type_ARRAYSIZE = DmiChassis_Type_Type_MAX + 1;

enum DmiChassis_Status {
  DmiChassis_Status_STATUS_UNKNOWN = 0,
  DmiChassis_Status_STATUS_OTHER = 1,
  DmiChassis_Status_STATUS_SAFE = 2,
  DmiChassis_Status_STATUS_WARNING = 3,
  DmiChassis_Status_STATUS_CRITICAL = 4,
  DmiChassis_Status_STATUS_NON_RECOVERABLE = 5,
  DmiChassis_Status_DmiChassis_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiChassis_Status_DmiChassis_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiChassis_Status_IsValid(int value);
const DmiChassis_Status DmiChassis_Status_Status_MIN = DmiChassis_Status_STATUS_UNKNOWN;
const DmiChassis_Status DmiChassis_Status_Status_MAX = DmiChassis_Status_STATUS_NON_RECOVERABLE;
const int DmiChassis_Status_Status_ARRAYSIZE = DmiChassis_Status_Status_MAX + 1;

enum DmiChassis_SecurityStatus {
  DmiChassis_SecurityStatus_SECURITY_STATUS_UNKNOWN = 0,
  DmiChassis_SecurityStatus_SECURITY_STATUS_OTHER = 1,
  DmiChassis_SecurityStatus_SECURITY_STATUS_NONE = 2,
  DmiChassis_SecurityStatus_SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT = 3,
  DmiChassis_SecurityStatus_SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED = 4,
  DmiChassis_SecurityStatus_DmiChassis_SecurityStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiChassis_SecurityStatus_DmiChassis_SecurityStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiChassis_SecurityStatus_IsValid(int value);
const DmiChassis_SecurityStatus DmiChassis_SecurityStatus_SecurityStatus_MIN = DmiChassis_SecurityStatus_SECURITY_STATUS_UNKNOWN;
const DmiChassis_SecurityStatus DmiChassis_SecurityStatus_SecurityStatus_MAX = DmiChassis_SecurityStatus_SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
const int DmiChassis_SecurityStatus_SecurityStatus_ARRAYSIZE = DmiChassis_SecurityStatus_SecurityStatus_MAX + 1;

// ===================================================================

class DmiChassis_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiChassis.Item) */ {
 public:
  DmiChassis_Item();
  virtual ~DmiChassis_Item();

  DmiChassis_Item(const DmiChassis_Item& from);

  inline DmiChassis_Item& operator=(const DmiChassis_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiChassis_Item(DmiChassis_Item&& from) noexcept
    : DmiChassis_Item() {
    *this = ::std::move(from);
  }

  inline DmiChassis_Item& operator=(DmiChassis_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiChassis_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiChassis_Item* internal_default_instance() {
    return reinterpret_cast<const DmiChassis_Item*>(
               &_DmiChassis_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiChassis_Item* other);
  friend void swap(DmiChassis_Item& a, DmiChassis_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiChassis_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiChassis_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiChassis_Item& from);
  void MergeFrom(const DmiChassis_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiChassis_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string manufacturer = 1;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 1;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string serial_number = 3;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 3;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string asset_tag = 4;
  void clear_asset_tag();
  static const int kAssetTagFieldNumber = 4;
  const ::std::string& asset_tag() const;
  void set_asset_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_tag(::std::string&& value);
  #endif
  void set_asset_tag(const char* value);
  void set_asset_tag(const char* value, size_t size);
  ::std::string* mutable_asset_tag();
  ::std::string* release_asset_tag();
  void set_allocated_asset_tag(::std::string* asset_tag);

  // .aspia.proto.DmiChassis.Type type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::aspia::proto::DmiChassis_Type type() const;
  void set_type(::aspia::proto::DmiChassis_Type value);

  // .aspia.proto.DmiChassis.Status os_load_status = 6;
  void clear_os_load_status();
  static const int kOsLoadStatusFieldNumber = 6;
  ::aspia::proto::DmiChassis_Status os_load_status() const;
  void set_os_load_status(::aspia::proto::DmiChassis_Status value);

  // .aspia.proto.DmiChassis.Status power_source_status = 7;
  void clear_power_source_status();
  static const int kPowerSourceStatusFieldNumber = 7;
  ::aspia::proto::DmiChassis_Status power_source_status() const;
  void set_power_source_status(::aspia::proto::DmiChassis_Status value);

  // .aspia.proto.DmiChassis.Status temparature_status = 8;
  void clear_temparature_status();
  static const int kTemparatureStatusFieldNumber = 8;
  ::aspia::proto::DmiChassis_Status temparature_status() const;
  void set_temparature_status(::aspia::proto::DmiChassis_Status value);

  // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
  void clear_security_status();
  static const int kSecurityStatusFieldNumber = 9;
  ::aspia::proto::DmiChassis_SecurityStatus security_status() const;
  void set_security_status(::aspia::proto::DmiChassis_SecurityStatus value);

  // int32 height = 10;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 number_of_power_cords = 11;
  void clear_number_of_power_cords();
  static const int kNumberOfPowerCordsFieldNumber = 11;
  ::google::protobuf::int32 number_of_power_cords() const;
  void set_number_of_power_cords(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiChassis.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr asset_tag_;
  int type_;
  int os_load_status_;
  int power_source_status_;
  int temparature_status_;
  int security_status_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 number_of_power_cords_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fchassis_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis_ItemImpl();
};
// -------------------------------------------------------------------

class DmiChassis : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiChassis) */ {
 public:
  DmiChassis();
  virtual ~DmiChassis();

  DmiChassis(const DmiChassis& from);

  inline DmiChassis& operator=(const DmiChassis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiChassis(DmiChassis&& from) noexcept
    : DmiChassis() {
    *this = ::std::move(from);
  }

  inline DmiChassis& operator=(DmiChassis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiChassis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiChassis* internal_default_instance() {
    return reinterpret_cast<const DmiChassis*>(
               &_DmiChassis_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiChassis* other);
  friend void swap(DmiChassis& a, DmiChassis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiChassis* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiChassis* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiChassis& from);
  void MergeFrom(const DmiChassis& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiChassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiChassis_Item Item;

  typedef DmiChassis_Type Type;
  static const Type TYPE_UNKNOWN =
    DmiChassis_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    DmiChassis_Type_TYPE_OTHER;
  static const Type TYPE_DESKTOP =
    DmiChassis_Type_TYPE_DESKTOP;
  static const Type TYPE_LOW_PROFILE_DESKTOP =
    DmiChassis_Type_TYPE_LOW_PROFILE_DESKTOP;
  static const Type TYPE_PIZZA_BOX =
    DmiChassis_Type_TYPE_PIZZA_BOX;
  static const Type TYPE_MINI_TOWER =
    DmiChassis_Type_TYPE_MINI_TOWER;
  static const Type TYPE_TOWER =
    DmiChassis_Type_TYPE_TOWER;
  static const Type TYPE_PORTABLE =
    DmiChassis_Type_TYPE_PORTABLE;
  static const Type TYPE_LAPTOP =
    DmiChassis_Type_TYPE_LAPTOP;
  static const Type TYPE_NOTEBOOK =
    DmiChassis_Type_TYPE_NOTEBOOK;
  static const Type TYPE_HAND_HELD =
    DmiChassis_Type_TYPE_HAND_HELD;
  static const Type TYPE_DOCKING_STATION =
    DmiChassis_Type_TYPE_DOCKING_STATION;
  static const Type TYPE_ALL_IN_ONE =
    DmiChassis_Type_TYPE_ALL_IN_ONE;
  static const Type TYPE_SUB_NOTEBOOK =
    DmiChassis_Type_TYPE_SUB_NOTEBOOK;
  static const Type TYPE_SPACE_SAVING =
    DmiChassis_Type_TYPE_SPACE_SAVING;
  static const Type TYPE_LUNCH_BOX =
    DmiChassis_Type_TYPE_LUNCH_BOX;
  static const Type TYPE_MAIN_SERVER_CHASSIS =
    DmiChassis_Type_TYPE_MAIN_SERVER_CHASSIS;
  static const Type TYPE_EXPANSION_CHASSIS =
    DmiChassis_Type_TYPE_EXPANSION_CHASSIS;
  static const Type TYPE_SUB_CHASSIS =
    DmiChassis_Type_TYPE_SUB_CHASSIS;
  static const Type TYPE_BUS_EXPANSION_CHASSIS =
    DmiChassis_Type_TYPE_BUS_EXPANSION_CHASSIS;
  static const Type TYPE_PERIPHERIAL_CHASSIS =
    DmiChassis_Type_TYPE_PERIPHERIAL_CHASSIS;
  static const Type TYPE_RAID_CHASSIS =
    DmiChassis_Type_TYPE_RAID_CHASSIS;
  static const Type TYPE_RACK_MOUNT_CHASSIS =
    DmiChassis_Type_TYPE_RACK_MOUNT_CHASSIS;
  static const Type TYPE_SEALED_CASE_PC =
    DmiChassis_Type_TYPE_SEALED_CASE_PC;
  static const Type TYPE_MULTI_SYSTEM_CHASSIS =
    DmiChassis_Type_TYPE_MULTI_SYSTEM_CHASSIS;
  static const Type TYPE_COMPACT_PCI =
    DmiChassis_Type_TYPE_COMPACT_PCI;
  static const Type TYPE_ADVANCED_TCA =
    DmiChassis_Type_TYPE_ADVANCED_TCA;
  static const Type TYPE_BLADE =
    DmiChassis_Type_TYPE_BLADE;
  static const Type TYPE_BLADE_ENCLOSURE =
    DmiChassis_Type_TYPE_BLADE_ENCLOSURE;
  static inline bool Type_IsValid(int value) {
    return DmiChassis_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DmiChassis_Type_Type_MIN;
  static const Type Type_MAX =
    DmiChassis_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DmiChassis_Type_Type_ARRAYSIZE;

  typedef DmiChassis_Status Status;
  static const Status STATUS_UNKNOWN =
    DmiChassis_Status_STATUS_UNKNOWN;
  static const Status STATUS_OTHER =
    DmiChassis_Status_STATUS_OTHER;
  static const Status STATUS_SAFE =
    DmiChassis_Status_STATUS_SAFE;
  static const Status STATUS_WARNING =
    DmiChassis_Status_STATUS_WARNING;
  static const Status STATUS_CRITICAL =
    DmiChassis_Status_STATUS_CRITICAL;
  static const Status STATUS_NON_RECOVERABLE =
    DmiChassis_Status_STATUS_NON_RECOVERABLE;
  static inline bool Status_IsValid(int value) {
    return DmiChassis_Status_IsValid(value);
  }
  static const Status Status_MIN =
    DmiChassis_Status_Status_MIN;
  static const Status Status_MAX =
    DmiChassis_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    DmiChassis_Status_Status_ARRAYSIZE;

  typedef DmiChassis_SecurityStatus SecurityStatus;
  static const SecurityStatus SECURITY_STATUS_UNKNOWN =
    DmiChassis_SecurityStatus_SECURITY_STATUS_UNKNOWN;
  static const SecurityStatus SECURITY_STATUS_OTHER =
    DmiChassis_SecurityStatus_SECURITY_STATUS_OTHER;
  static const SecurityStatus SECURITY_STATUS_NONE =
    DmiChassis_SecurityStatus_SECURITY_STATUS_NONE;
  static const SecurityStatus SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT =
    DmiChassis_SecurityStatus_SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT;
  static const SecurityStatus SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED =
    DmiChassis_SecurityStatus_SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
  static inline bool SecurityStatus_IsValid(int value) {
    return DmiChassis_SecurityStatus_IsValid(value);
  }
  static const SecurityStatus SecurityStatus_MIN =
    DmiChassis_SecurityStatus_SecurityStatus_MIN;
  static const SecurityStatus SecurityStatus_MAX =
    DmiChassis_SecurityStatus_SecurityStatus_MAX;
  static const int SecurityStatus_ARRAYSIZE =
    DmiChassis_SecurityStatus_SecurityStatus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DmiChassis.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DmiChassis_Item& item(int index) const;
  ::aspia::proto::DmiChassis_Item* mutable_item(int index);
  ::aspia::proto::DmiChassis_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiChassis_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiChassis_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiChassis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiChassis_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fchassis_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassisImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiChassis_Item

// string manufacturer = 1;
inline void DmiChassis_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiChassis_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DmiChassis_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.manufacturer)
}
#if LANG_CXX11
inline void DmiChassis_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiChassis.Item.manufacturer)
}
#endif
inline void DmiChassis_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiChassis.Item.manufacturer)
}
inline void DmiChassis_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiChassis.Item.manufacturer)
}
inline ::std::string* DmiChassis_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiChassis.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiChassis_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiChassis.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiChassis_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiChassis.Item.manufacturer)
}

// string version = 2;
inline void DmiChassis_Item::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiChassis_Item::version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.version)
  return version_.GetNoArena();
}
inline void DmiChassis_Item::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.version)
}
#if LANG_CXX11
inline void DmiChassis_Item::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiChassis.Item.version)
}
#endif
inline void DmiChassis_Item::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiChassis.Item.version)
}
inline void DmiChassis_Item::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiChassis.Item.version)
}
inline ::std::string* DmiChassis_Item::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiChassis.Item.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiChassis_Item::release_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiChassis.Item.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiChassis_Item::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiChassis.Item.version)
}

// string serial_number = 3;
inline void DmiChassis_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiChassis_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.serial_number)
  return serial_number_.GetNoArena();
}
inline void DmiChassis_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.serial_number)
}
#if LANG_CXX11
inline void DmiChassis_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiChassis.Item.serial_number)
}
#endif
inline void DmiChassis_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiChassis.Item.serial_number)
}
inline void DmiChassis_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiChassis.Item.serial_number)
}
inline ::std::string* DmiChassis_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiChassis.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiChassis_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiChassis.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiChassis_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiChassis.Item.serial_number)
}

// string asset_tag = 4;
inline void DmiChassis_Item::clear_asset_tag() {
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiChassis_Item::asset_tag() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.asset_tag)
  return asset_tag_.GetNoArena();
}
inline void DmiChassis_Item::set_asset_tag(const ::std::string& value) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.asset_tag)
}
#if LANG_CXX11
inline void DmiChassis_Item::set_asset_tag(::std::string&& value) {
  
  asset_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiChassis.Item.asset_tag)
}
#endif
inline void DmiChassis_Item::set_asset_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiChassis.Item.asset_tag)
}
inline void DmiChassis_Item::set_asset_tag(const char* value, size_t size) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiChassis.Item.asset_tag)
}
inline ::std::string* DmiChassis_Item::mutable_asset_tag() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiChassis.Item.asset_tag)
  return asset_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiChassis_Item::release_asset_tag() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiChassis.Item.asset_tag)
  
  return asset_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiChassis_Item::set_allocated_asset_tag(::std::string* asset_tag) {
  if (asset_tag != NULL) {
    
  } else {
    
  }
  asset_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_tag);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiChassis.Item.asset_tag)
}

// .aspia.proto.DmiChassis.Type type = 5;
inline void DmiChassis_Item::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DmiChassis_Type DmiChassis_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.type)
  return static_cast< ::aspia::proto::DmiChassis_Type >(type_);
}
inline void DmiChassis_Item::set_type(::aspia::proto::DmiChassis_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.type)
}

// .aspia.proto.DmiChassis.Status os_load_status = 6;
inline void DmiChassis_Item::clear_os_load_status() {
  os_load_status_ = 0;
}
inline ::aspia::proto::DmiChassis_Status DmiChassis_Item::os_load_status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.os_load_status)
  return static_cast< ::aspia::proto::DmiChassis_Status >(os_load_status_);
}
inline void DmiChassis_Item::set_os_load_status(::aspia::proto::DmiChassis_Status value) {
  
  os_load_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.os_load_status)
}

// .aspia.proto.DmiChassis.Status power_source_status = 7;
inline void DmiChassis_Item::clear_power_source_status() {
  power_source_status_ = 0;
}
inline ::aspia::proto::DmiChassis_Status DmiChassis_Item::power_source_status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.power_source_status)
  return static_cast< ::aspia::proto::DmiChassis_Status >(power_source_status_);
}
inline void DmiChassis_Item::set_power_source_status(::aspia::proto::DmiChassis_Status value) {
  
  power_source_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.power_source_status)
}

// .aspia.proto.DmiChassis.Status temparature_status = 8;
inline void DmiChassis_Item::clear_temparature_status() {
  temparature_status_ = 0;
}
inline ::aspia::proto::DmiChassis_Status DmiChassis_Item::temparature_status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.temparature_status)
  return static_cast< ::aspia::proto::DmiChassis_Status >(temparature_status_);
}
inline void DmiChassis_Item::set_temparature_status(::aspia::proto::DmiChassis_Status value) {
  
  temparature_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.temparature_status)
}

// .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
inline void DmiChassis_Item::clear_security_status() {
  security_status_ = 0;
}
inline ::aspia::proto::DmiChassis_SecurityStatus DmiChassis_Item::security_status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.security_status)
  return static_cast< ::aspia::proto::DmiChassis_SecurityStatus >(security_status_);
}
inline void DmiChassis_Item::set_security_status(::aspia::proto::DmiChassis_SecurityStatus value) {
  
  security_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.security_status)
}

// int32 height = 10;
inline void DmiChassis_Item::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 DmiChassis_Item::height() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.height)
  return height_;
}
inline void DmiChassis_Item::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.height)
}

// int32 number_of_power_cords = 11;
inline void DmiChassis_Item::clear_number_of_power_cords() {
  number_of_power_cords_ = 0;
}
inline ::google::protobuf::int32 DmiChassis_Item::number_of_power_cords() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.Item.number_of_power_cords)
  return number_of_power_cords_;
}
inline void DmiChassis_Item::set_number_of_power_cords(::google::protobuf::int32 value) {
  
  number_of_power_cords_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiChassis.Item.number_of_power_cords)
}

// -------------------------------------------------------------------

// DmiChassis

// repeated .aspia.proto.DmiChassis.Item item = 1;
inline int DmiChassis::item_size() const {
  return item_.size();
}
inline void DmiChassis::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DmiChassis_Item& DmiChassis::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiChassis.item)
  return item_.Get(index);
}
inline ::aspia::proto::DmiChassis_Item* DmiChassis::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiChassis.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DmiChassis_Item* DmiChassis::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DmiChassis.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiChassis_Item >*
DmiChassis::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DmiChassis.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiChassis_Item >&
DmiChassis::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DmiChassis.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DmiChassis_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiChassis_Status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiChassis_SecurityStatus> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fchassis_2eproto__INCLUDED

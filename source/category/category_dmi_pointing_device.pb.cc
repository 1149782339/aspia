// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_pointing_device.proto

#include "category_dmi_pointing_device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiPointingDevice_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPointingDevice_Item>
      _instance;
} _DmiPointingDevice_Item_default_instance_;
class DmiPointingDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPointingDevice>
      _instance;
} _DmiPointingDevice_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fdmi_5fpointing_5fdevice_2eproto {
void InitDefaultsDmiPointingDevice_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiPointingDevice_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiPointingDevice_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPointingDevice_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiPointingDevice_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPointingDevice_ItemImpl);
}

void InitDefaultsDmiPointingDeviceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice_Item();
  {
    void* ptr = &::aspia::proto::_DmiPointingDevice_default_instance_;
    new (ptr) ::aspia::proto::DmiPointingDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPointingDevice::InitAsDefaultInstance();
}

void InitDefaultsDmiPointingDevice() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPointingDeviceImpl);
}

}  // namespace protobuf_category_5fdmi_5fpointing_5fdevice_2eproto
namespace aspia {
namespace proto {
bool DmiPointingDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPointingDevice_Type DmiPointingDevice::TYPE_UNKNOWN;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_OTHER;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_MOUSE;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_TRACK_BALL;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_TRACK_POINT;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_GLIDE_POINT;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_TOUCH_PAD;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_TOUCH_SCREEN;
const DmiPointingDevice_Type DmiPointingDevice::TYPE_OPTICAL_SENSOR;
const DmiPointingDevice_Type DmiPointingDevice::Type_MIN;
const DmiPointingDevice_Type DmiPointingDevice::Type_MAX;
const int DmiPointingDevice::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPointingDevice_Interface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_UNKNOWN;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_OTHER;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_SERIAL;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_PS_2;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_INFRARED;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_HP_HIL;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_BUS_MOUSE;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_ADB;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_BUS_MOUSE_DB_9;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_BUS_MOUSE_MICRO_DIN;
const DmiPointingDevice_Interface DmiPointingDevice::INTERFACE_USB;
const DmiPointingDevice_Interface DmiPointingDevice::Interface_MIN;
const DmiPointingDevice_Interface DmiPointingDevice::Interface_MAX;
const int DmiPointingDevice::Interface_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiPointingDevice_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPointingDevice_Item::kDeviceTypeFieldNumber;
const int DmiPointingDevice_Item::kDeviceInterfaceFieldNumber;
const int DmiPointingDevice_Item::kButtonCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPointingDevice_Item::DmiPointingDevice_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPointingDevice.Item)
}
DmiPointingDevice_Item::DmiPointingDevice_Item(const DmiPointingDevice_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_count_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPointingDevice.Item)
}

void DmiPointingDevice_Item::SharedCtor() {
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  _cached_size_ = 0;
}

DmiPointingDevice_Item::~DmiPointingDevice_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPointingDevice.Item)
  SharedDtor();
}

void DmiPointingDevice_Item::SharedDtor() {
}

void DmiPointingDevice_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPointingDevice_Item& DmiPointingDevice_Item::default_instance() {
  ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice_Item();
  return *internal_default_instance();
}

DmiPointingDevice_Item* DmiPointingDevice_Item::New(::google::protobuf::Arena* arena) const {
  DmiPointingDevice_Item* n = new DmiPointingDevice_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPointingDevice_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPointingDevice.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  _internal_metadata_.Clear();
}

bool DmiPointingDevice_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPointingDevice.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DmiPointingDevice.Type device_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::aspia::proto::DmiPointingDevice_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPointingDevice.Interface device_interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_interface(static_cast< ::aspia::proto::DmiPointingDevice_Interface >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 button_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &button_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPointingDevice.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPointingDevice.Item)
  return false;
#undef DO_
}

void DmiPointingDevice_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPointingDevice.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DmiPointingDevice.Type device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // .aspia.proto.DmiPointingDevice.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_interface(), output);
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->button_count(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPointingDevice.Item)
}

size_t DmiPointingDevice_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPointingDevice.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.DmiPointingDevice.Type device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // .aspia.proto.DmiPointingDevice.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_interface());
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->button_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPointingDevice_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPointingDevice_Item*>(&from));
}

void DmiPointingDevice_Item::MergeFrom(const DmiPointingDevice_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPointingDevice.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_interface() != 0) {
    set_device_interface(from.device_interface());
  }
  if (from.button_count() != 0) {
    set_button_count(from.button_count());
  }
}

void DmiPointingDevice_Item::CopyFrom(const DmiPointingDevice_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPointingDevice.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPointingDevice_Item::IsInitialized() const {
  return true;
}

void DmiPointingDevice_Item::Swap(DmiPointingDevice_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPointingDevice_Item::InternalSwap(DmiPointingDevice_Item* other) {
  using std::swap;
  swap(device_type_, other->device_type_);
  swap(device_interface_, other->device_interface_);
  swap(button_count_, other->button_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPointingDevice_Item::GetTypeName() const {
  return "aspia.proto.DmiPointingDevice.Item";
}


// ===================================================================

void DmiPointingDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPointingDevice::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPointingDevice::DmiPointingDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPointingDevice)
}
DmiPointingDevice::DmiPointingDevice(const DmiPointingDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPointingDevice)
}

void DmiPointingDevice::SharedCtor() {
  _cached_size_ = 0;
}

DmiPointingDevice::~DmiPointingDevice() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPointingDevice)
  SharedDtor();
}

void DmiPointingDevice::SharedDtor() {
}

void DmiPointingDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPointingDevice& DmiPointingDevice::default_instance() {
  ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice();
  return *internal_default_instance();
}

DmiPointingDevice* DmiPointingDevice::New(::google::protobuf::Arena* arena) const {
  DmiPointingDevice* n = new DmiPointingDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPointingDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPointingDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPointingDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPointingDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiPointingDevice.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPointingDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPointingDevice)
  return false;
#undef DO_
}

void DmiPointingDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPointingDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiPointingDevice.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPointingDevice)
}

size_t DmiPointingDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPointingDevice)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiPointingDevice.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPointingDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPointingDevice*>(&from));
}

void DmiPointingDevice::MergeFrom(const DmiPointingDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPointingDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPointingDevice::CopyFrom(const DmiPointingDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPointingDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPointingDevice::IsInitialized() const {
  return true;
}

void DmiPointingDevice::Swap(DmiPointingDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPointingDevice::InternalSwap(DmiPointingDevice* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPointingDevice::GetTypeName() const {
  return "aspia.proto.DmiPointingDevice";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

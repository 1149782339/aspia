// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_pointing_device.proto

#ifndef PROTOBUF_category_5fdmi_5fpointing_5fdevice_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fpointing_5fdevice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fpointing_5fdevice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiPointingDevice_ItemImpl();
void InitDefaultsDmiPointingDevice_Item();
void InitDefaultsDmiPointingDeviceImpl();
void InitDefaultsDmiPointingDevice();
inline void InitDefaults() {
  InitDefaultsDmiPointingDevice_Item();
  InitDefaultsDmiPointingDevice();
}
}  // namespace protobuf_category_5fdmi_5fpointing_5fdevice_2eproto
namespace aspia {
namespace proto {
class DmiPointingDevice;
class DmiPointingDeviceDefaultTypeInternal;
extern DmiPointingDeviceDefaultTypeInternal _DmiPointingDevice_default_instance_;
class DmiPointingDevice_Item;
class DmiPointingDevice_ItemDefaultTypeInternal;
extern DmiPointingDevice_ItemDefaultTypeInternal _DmiPointingDevice_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum DmiPointingDevice_Type {
  DmiPointingDevice_Type_TYPE_UNKNOWN = 0,
  DmiPointingDevice_Type_TYPE_OTHER = 1,
  DmiPointingDevice_Type_TYPE_MOUSE = 2,
  DmiPointingDevice_Type_TYPE_TRACK_BALL = 3,
  DmiPointingDevice_Type_TYPE_TRACK_POINT = 4,
  DmiPointingDevice_Type_TYPE_GLIDE_POINT = 5,
  DmiPointingDevice_Type_TYPE_TOUCH_PAD = 6,
  DmiPointingDevice_Type_TYPE_TOUCH_SCREEN = 7,
  DmiPointingDevice_Type_TYPE_OPTICAL_SENSOR = 8,
  DmiPointingDevice_Type_DmiPointingDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiPointingDevice_Type_DmiPointingDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiPointingDevice_Type_IsValid(int value);
const DmiPointingDevice_Type DmiPointingDevice_Type_Type_MIN = DmiPointingDevice_Type_TYPE_UNKNOWN;
const DmiPointingDevice_Type DmiPointingDevice_Type_Type_MAX = DmiPointingDevice_Type_TYPE_OPTICAL_SENSOR;
const int DmiPointingDevice_Type_Type_ARRAYSIZE = DmiPointingDevice_Type_Type_MAX + 1;

enum DmiPointingDevice_Interface {
  DmiPointingDevice_Interface_INTERFACE_UNKNOWN = 0,
  DmiPointingDevice_Interface_INTERFACE_OTHER = 1,
  DmiPointingDevice_Interface_INTERFACE_SERIAL = 2,
  DmiPointingDevice_Interface_INTERFACE_PS_2 = 3,
  DmiPointingDevice_Interface_INTERFACE_INFRARED = 4,
  DmiPointingDevice_Interface_INTERFACE_HP_HIL = 5,
  DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE = 6,
  DmiPointingDevice_Interface_INTERFACE_ADB = 7,
  DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE_DB_9 = 8,
  DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE_MICRO_DIN = 9,
  DmiPointingDevice_Interface_INTERFACE_USB = 10,
  DmiPointingDevice_Interface_DmiPointingDevice_Interface_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiPointingDevice_Interface_DmiPointingDevice_Interface_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiPointingDevice_Interface_IsValid(int value);
const DmiPointingDevice_Interface DmiPointingDevice_Interface_Interface_MIN = DmiPointingDevice_Interface_INTERFACE_UNKNOWN;
const DmiPointingDevice_Interface DmiPointingDevice_Interface_Interface_MAX = DmiPointingDevice_Interface_INTERFACE_USB;
const int DmiPointingDevice_Interface_Interface_ARRAYSIZE = DmiPointingDevice_Interface_Interface_MAX + 1;

// ===================================================================

class DmiPointingDevice_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiPointingDevice.Item) */ {
 public:
  DmiPointingDevice_Item();
  virtual ~DmiPointingDevice_Item();

  DmiPointingDevice_Item(const DmiPointingDevice_Item& from);

  inline DmiPointingDevice_Item& operator=(const DmiPointingDevice_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiPointingDevice_Item(DmiPointingDevice_Item&& from) noexcept
    : DmiPointingDevice_Item() {
    *this = ::std::move(from);
  }

  inline DmiPointingDevice_Item& operator=(DmiPointingDevice_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiPointingDevice_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiPointingDevice_Item* internal_default_instance() {
    return reinterpret_cast<const DmiPointingDevice_Item*>(
               &_DmiPointingDevice_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiPointingDevice_Item* other);
  friend void swap(DmiPointingDevice_Item& a, DmiPointingDevice_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiPointingDevice_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiPointingDevice_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiPointingDevice_Item& from);
  void MergeFrom(const DmiPointingDevice_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiPointingDevice_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.DmiPointingDevice.Type device_type = 1;
  void clear_device_type();
  static const int kDeviceTypeFieldNumber = 1;
  ::aspia::proto::DmiPointingDevice_Type device_type() const;
  void set_device_type(::aspia::proto::DmiPointingDevice_Type value);

  // .aspia.proto.DmiPointingDevice.Interface device_interface = 2;
  void clear_device_interface();
  static const int kDeviceInterfaceFieldNumber = 2;
  ::aspia::proto::DmiPointingDevice_Interface device_interface() const;
  void set_device_interface(::aspia::proto::DmiPointingDevice_Interface value);

  // int32 button_count = 3;
  void clear_button_count();
  static const int kButtonCountFieldNumber = 3;
  ::google::protobuf::int32 button_count() const;
  void set_button_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiPointingDevice.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int device_type_;
  int device_interface_;
  ::google::protobuf::int32 button_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDevice_ItemImpl();
};
// -------------------------------------------------------------------

class DmiPointingDevice : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiPointingDevice) */ {
 public:
  DmiPointingDevice();
  virtual ~DmiPointingDevice();

  DmiPointingDevice(const DmiPointingDevice& from);

  inline DmiPointingDevice& operator=(const DmiPointingDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiPointingDevice(DmiPointingDevice&& from) noexcept
    : DmiPointingDevice() {
    *this = ::std::move(from);
  }

  inline DmiPointingDevice& operator=(DmiPointingDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiPointingDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiPointingDevice* internal_default_instance() {
    return reinterpret_cast<const DmiPointingDevice*>(
               &_DmiPointingDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiPointingDevice* other);
  friend void swap(DmiPointingDevice& a, DmiPointingDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiPointingDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiPointingDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiPointingDevice& from);
  void MergeFrom(const DmiPointingDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiPointingDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiPointingDevice_Item Item;

  typedef DmiPointingDevice_Type Type;
  static const Type TYPE_UNKNOWN =
    DmiPointingDevice_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    DmiPointingDevice_Type_TYPE_OTHER;
  static const Type TYPE_MOUSE =
    DmiPointingDevice_Type_TYPE_MOUSE;
  static const Type TYPE_TRACK_BALL =
    DmiPointingDevice_Type_TYPE_TRACK_BALL;
  static const Type TYPE_TRACK_POINT =
    DmiPointingDevice_Type_TYPE_TRACK_POINT;
  static const Type TYPE_GLIDE_POINT =
    DmiPointingDevice_Type_TYPE_GLIDE_POINT;
  static const Type TYPE_TOUCH_PAD =
    DmiPointingDevice_Type_TYPE_TOUCH_PAD;
  static const Type TYPE_TOUCH_SCREEN =
    DmiPointingDevice_Type_TYPE_TOUCH_SCREEN;
  static const Type TYPE_OPTICAL_SENSOR =
    DmiPointingDevice_Type_TYPE_OPTICAL_SENSOR;
  static inline bool Type_IsValid(int value) {
    return DmiPointingDevice_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DmiPointingDevice_Type_Type_MIN;
  static const Type Type_MAX =
    DmiPointingDevice_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DmiPointingDevice_Type_Type_ARRAYSIZE;

  typedef DmiPointingDevice_Interface Interface;
  static const Interface INTERFACE_UNKNOWN =
    DmiPointingDevice_Interface_INTERFACE_UNKNOWN;
  static const Interface INTERFACE_OTHER =
    DmiPointingDevice_Interface_INTERFACE_OTHER;
  static const Interface INTERFACE_SERIAL =
    DmiPointingDevice_Interface_INTERFACE_SERIAL;
  static const Interface INTERFACE_PS_2 =
    DmiPointingDevice_Interface_INTERFACE_PS_2;
  static const Interface INTERFACE_INFRARED =
    DmiPointingDevice_Interface_INTERFACE_INFRARED;
  static const Interface INTERFACE_HP_HIL =
    DmiPointingDevice_Interface_INTERFACE_HP_HIL;
  static const Interface INTERFACE_BUS_MOUSE =
    DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE;
  static const Interface INTERFACE_ADB =
    DmiPointingDevice_Interface_INTERFACE_ADB;
  static const Interface INTERFACE_BUS_MOUSE_DB_9 =
    DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE_DB_9;
  static const Interface INTERFACE_BUS_MOUSE_MICRO_DIN =
    DmiPointingDevice_Interface_INTERFACE_BUS_MOUSE_MICRO_DIN;
  static const Interface INTERFACE_USB =
    DmiPointingDevice_Interface_INTERFACE_USB;
  static inline bool Interface_IsValid(int value) {
    return DmiPointingDevice_Interface_IsValid(value);
  }
  static const Interface Interface_MIN =
    DmiPointingDevice_Interface_Interface_MIN;
  static const Interface Interface_MAX =
    DmiPointingDevice_Interface_Interface_MAX;
  static const int Interface_ARRAYSIZE =
    DmiPointingDevice_Interface_Interface_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DmiPointingDevice.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DmiPointingDevice_Item& item(int index) const;
  ::aspia::proto::DmiPointingDevice_Item* mutable_item(int index);
  ::aspia::proto::DmiPointingDevice_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiPointingDevice_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiPointingDevice_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiPointingDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiPointingDevice_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fpointing_5fdevice_2eproto::InitDefaultsDmiPointingDeviceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiPointingDevice_Item

// .aspia.proto.DmiPointingDevice.Type device_type = 1;
inline void DmiPointingDevice_Item::clear_device_type() {
  device_type_ = 0;
}
inline ::aspia::proto::DmiPointingDevice_Type DmiPointingDevice_Item::device_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiPointingDevice.Item.device_type)
  return static_cast< ::aspia::proto::DmiPointingDevice_Type >(device_type_);
}
inline void DmiPointingDevice_Item::set_device_type(::aspia::proto::DmiPointingDevice_Type value) {
  
  device_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiPointingDevice.Item.device_type)
}

// .aspia.proto.DmiPointingDevice.Interface device_interface = 2;
inline void DmiPointingDevice_Item::clear_device_interface() {
  device_interface_ = 0;
}
inline ::aspia::proto::DmiPointingDevice_Interface DmiPointingDevice_Item::device_interface() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiPointingDevice.Item.device_interface)
  return static_cast< ::aspia::proto::DmiPointingDevice_Interface >(device_interface_);
}
inline void DmiPointingDevice_Item::set_device_interface(::aspia::proto::DmiPointingDevice_Interface value) {
  
  device_interface_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiPointingDevice.Item.device_interface)
}

// int32 button_count = 3;
inline void DmiPointingDevice_Item::clear_button_count() {
  button_count_ = 0;
}
inline ::google::protobuf::int32 DmiPointingDevice_Item::button_count() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiPointingDevice.Item.button_count)
  return button_count_;
}
inline void DmiPointingDevice_Item::set_button_count(::google::protobuf::int32 value) {
  
  button_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiPointingDevice.Item.button_count)
}

// -------------------------------------------------------------------

// DmiPointingDevice

// repeated .aspia.proto.DmiPointingDevice.Item item = 1;
inline int DmiPointingDevice::item_size() const {
  return item_.size();
}
inline void DmiPointingDevice::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DmiPointingDevice_Item& DmiPointingDevice::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiPointingDevice.item)
  return item_.Get(index);
}
inline ::aspia::proto::DmiPointingDevice_Item* DmiPointingDevice::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiPointingDevice.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DmiPointingDevice_Item* DmiPointingDevice::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DmiPointingDevice.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiPointingDevice_Item >*
DmiPointingDevice::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DmiPointingDevice.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiPointingDevice_Item >&
DmiPointingDevice::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DmiPointingDevice.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DmiPointingDevice_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiPointingDevice_Interface> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fpointing_5fdevice_2eproto__INCLUDED

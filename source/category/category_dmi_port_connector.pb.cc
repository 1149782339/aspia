// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_port_connector.proto

#include "category_dmi_port_connector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiPortConnector_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnector_Item>
      _instance;
} _DmiPortConnector_Item_default_instance_;
class DmiPortConnectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnector>
      _instance;
} _DmiPortConnector_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fdmi_5fport_5fconnector_2eproto {
void InitDefaultsDmiPortConnector_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiPortConnector_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiPortConnector_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortConnector_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiPortConnector_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortConnector_ItemImpl);
}

void InitDefaultsDmiPortConnectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fport_5fconnector_2eproto::InitDefaultsDmiPortConnector_Item();
  {
    void* ptr = &::aspia::proto::_DmiPortConnector_default_instance_;
    new (ptr) ::aspia::proto::DmiPortConnector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortConnector::InitAsDefaultInstance();
}

void InitDefaultsDmiPortConnector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortConnectorImpl);
}

}  // namespace protobuf_category_5fdmi_5fport_5fconnector_2eproto
namespace aspia {
namespace proto {
bool DmiPortConnector_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPortConnector_Type DmiPortConnector::TYPE_UNKNOWN;
const DmiPortConnector_Type DmiPortConnector::TYPE_NONE;
const DmiPortConnector_Type DmiPortConnector::TYPE_PARALLEL_PORT_XT_AT_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_PARALLEL_PORT_PS_2;
const DmiPortConnector_Type DmiPortConnector::TYPE_PARALLEL_PORT_ECP;
const DmiPortConnector_Type DmiPortConnector::TYPE_PARALLEL_PORT_EPP;
const DmiPortConnector_Type DmiPortConnector::TYPE_PARALLEL_PORT_ECP_EPP;
const DmiPortConnector_Type DmiPortConnector::TYPE_SERIAL_PORT_XT_AT_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_SERIAL_PORT_16450_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_SERIAL_PORT_16550_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_SERIAL_PORT_16550A_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_SCSI_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_MIDI_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_JOYSTICK_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_KEYBOARD_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_MOUSE_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_SSA_SCSI;
const DmiPortConnector_Type DmiPortConnector::TYPE_USB;
const DmiPortConnector_Type DmiPortConnector::TYPE_FIREWIRE;
const DmiPortConnector_Type DmiPortConnector::TYPE_PCMCIA_TYPE_I;
const DmiPortConnector_Type DmiPortConnector::TYPE_PCMCIA_TYPE_II;
const DmiPortConnector_Type DmiPortConnector::TYPE_PCMCIA_TYPE_III;
const DmiPortConnector_Type DmiPortConnector::TYPE_CARDBUS;
const DmiPortConnector_Type DmiPortConnector::TYPE_ACCESS_BUS_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_SCSI_II;
const DmiPortConnector_Type DmiPortConnector::TYPE_SCSI_WIDE;
const DmiPortConnector_Type DmiPortConnector::TYPE_PC_98;
const DmiPortConnector_Type DmiPortConnector::TYPE_PC_98_HIRESO;
const DmiPortConnector_Type DmiPortConnector::TYPE_PC_H98;
const DmiPortConnector_Type DmiPortConnector::TYPE_VIDEO_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_AUDIO_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_MODEM_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_NETWORK_PORT;
const DmiPortConnector_Type DmiPortConnector::TYPE_SATA;
const DmiPortConnector_Type DmiPortConnector::TYPE_SAS;
const DmiPortConnector_Type DmiPortConnector::TYPE_8251_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::TYPE_8251_FIFO_COMPATIBLE;
const DmiPortConnector_Type DmiPortConnector::Type_MIN;
const DmiPortConnector_Type DmiPortConnector::Type_MAX;
const int DmiPortConnector::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPortConnector_ConnectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_UNKNOWN;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_NONE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_OTHER;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_CENTRONICS;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MINI_CENTRONICS;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PROPRIETARY;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_25_MALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_25_FEMALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_15_MALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_15_FEMALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_9_MALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_DB_9_FEMALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_RJ_11;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_RJ_45;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_50_PIN_MINISCSI;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MINI_DIN;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MICRO_DIN;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PS_2;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_INFRARED;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_HP_HIL;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_ACCESS_BUS_USB;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_SSA_SCSI;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_CIRCULAR_DIN_8_MALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_CIRCULAR_DIN_8_FEMALE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_ONBOARD_IDE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_ONBOARD_FLOPPY;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_9_PIN_DUAL_INLINE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_25_PIN_DUAL_INLINE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_50_PIN_DUAL_INLINE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_68_PIN_DUAL_INLINE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_ONBOARD_SOUND_INPUT_FROM_CDROM;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_14;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_26;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_MINI_JACK;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_BNC;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_IEEE_1394;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_SAS_SATE_PLUG_RECEPTACLE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PC_98;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PC_98_HIRESO;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PC_H98;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PC_98_NOTE;
const DmiPortConnector_ConnectorType DmiPortConnector::CONNECTOR_TYPE_PC_98_FULL;
const DmiPortConnector_ConnectorType DmiPortConnector::ConnectorType_MIN;
const DmiPortConnector_ConnectorType DmiPortConnector::ConnectorType_MAX;
const int DmiPortConnector::ConnectorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiPortConnector_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnector_Item::kInternalDesignationFieldNumber;
const int DmiPortConnector_Item::kExternalDesignationFieldNumber;
const int DmiPortConnector_Item::kTypeFieldNumber;
const int DmiPortConnector_Item::kInternalConnectorTypeFieldNumber;
const int DmiPortConnector_Item::kExternalConnectorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnector_Item::DmiPortConnector_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fport_5fconnector_2eproto::InitDefaultsDmiPortConnector_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortConnector.Item)
}
DmiPortConnector_Item::DmiPortConnector_Item(const DmiPortConnector_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_designation().size() > 0) {
    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_designation().size() > 0) {
    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_connector_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortConnector.Item)
}

void DmiPortConnector_Item::SharedCtor() {
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_connector_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  _cached_size_ = 0;
}

DmiPortConnector_Item::~DmiPortConnector_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortConnector.Item)
  SharedDtor();
}

void DmiPortConnector_Item::SharedDtor() {
  internal_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiPortConnector_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnector_Item& DmiPortConnector_Item::default_instance() {
  ::protobuf_category_5fdmi_5fport_5fconnector_2eproto::InitDefaultsDmiPortConnector_Item();
  return *internal_default_instance();
}

DmiPortConnector_Item* DmiPortConnector_Item::New(::google::protobuf::Arena* arena) const {
  DmiPortConnector_Item* n = new DmiPortConnector_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnector_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortConnector.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_connector_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  _internal_metadata_.Clear();
}

bool DmiPortConnector_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortConnector.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string internal_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortConnector.Item.internal_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_designation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_designation().data(), static_cast<int>(this->external_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortConnector.Item.external_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnector.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiPortConnector_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnector.ConnectorType internal_connector_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_internal_connector_type(static_cast< ::aspia::proto::DmiPortConnector_ConnectorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnector.ConnectorType external_connector_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_external_connector_type(static_cast< ::aspia::proto::DmiPortConnector_ConnectorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortConnector.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortConnector.Item)
  return false;
#undef DO_
}

void DmiPortConnector_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortConnector.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortConnector.Item.internal_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->internal_designation(), output);
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_designation().data(), static_cast<int>(this->external_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortConnector.Item.external_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_designation(), output);
  }

  // .aspia.proto.DmiPortConnector.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .aspia.proto.DmiPortConnector.ConnectorType internal_connector_type = 4;
  if (this->internal_connector_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->internal_connector_type(), output);
  }

  // .aspia.proto.DmiPortConnector.ConnectorType external_connector_type = 5;
  if (this->external_connector_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->external_connector_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortConnector.Item)
}

size_t DmiPortConnector_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortConnector.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_designation());
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_designation());
  }

  // .aspia.proto.DmiPortConnector.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiPortConnector.ConnectorType internal_connector_type = 4;
  if (this->internal_connector_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->internal_connector_type());
  }

  // .aspia.proto.DmiPortConnector.ConnectorType external_connector_type = 5;
  if (this->external_connector_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->external_connector_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnector_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnector_Item*>(&from));
}

void DmiPortConnector_Item::MergeFrom(const DmiPortConnector_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortConnector.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_designation().size() > 0) {

    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  if (from.external_designation().size() > 0) {

    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.internal_connector_type() != 0) {
    set_internal_connector_type(from.internal_connector_type());
  }
  if (from.external_connector_type() != 0) {
    set_external_connector_type(from.external_connector_type());
  }
}

void DmiPortConnector_Item::CopyFrom(const DmiPortConnector_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortConnector.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnector_Item::IsInitialized() const {
  return true;
}

void DmiPortConnector_Item::Swap(DmiPortConnector_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnector_Item::InternalSwap(DmiPortConnector_Item* other) {
  using std::swap;
  internal_designation_.Swap(&other->internal_designation_);
  external_designation_.Swap(&other->external_designation_);
  swap(type_, other->type_);
  swap(internal_connector_type_, other->internal_connector_type_);
  swap(external_connector_type_, other->external_connector_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnector_Item::GetTypeName() const {
  return "aspia.proto.DmiPortConnector.Item";
}


// ===================================================================

void DmiPortConnector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnector::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnector::DmiPortConnector()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fport_5fconnector_2eproto::InitDefaultsDmiPortConnector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortConnector)
}
DmiPortConnector::DmiPortConnector(const DmiPortConnector& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortConnector)
}

void DmiPortConnector::SharedCtor() {
  _cached_size_ = 0;
}

DmiPortConnector::~DmiPortConnector() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortConnector)
  SharedDtor();
}

void DmiPortConnector::SharedDtor() {
}

void DmiPortConnector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnector& DmiPortConnector::default_instance() {
  ::protobuf_category_5fdmi_5fport_5fconnector_2eproto::InitDefaultsDmiPortConnector();
  return *internal_default_instance();
}

DmiPortConnector* DmiPortConnector::New(::google::protobuf::Arena* arena) const {
  DmiPortConnector* n = new DmiPortConnector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnector::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPortConnector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortConnector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiPortConnector.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortConnector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortConnector)
  return false;
#undef DO_
}

void DmiPortConnector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiPortConnector.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortConnector)
}

size_t DmiPortConnector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortConnector)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiPortConnector.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnector*>(&from));
}

void DmiPortConnector::MergeFrom(const DmiPortConnector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortConnector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPortConnector::CopyFrom(const DmiPortConnector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortConnector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnector::IsInitialized() const {
  return true;
}

void DmiPortConnector::Swap(DmiPortConnector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnector::InternalSwap(DmiPortConnector* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnector::GetTypeName() const {
  return "aspia.proto.DmiPortConnector";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

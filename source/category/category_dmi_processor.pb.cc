// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_processor.proto

#include "category_dmi_processor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiProcessor_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessor_Item>
      _instance;
} _DmiProcessor_Item_default_instance_;
class DmiProcessorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessor>
      _instance;
} _DmiProcessor_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fdmi_5fprocessor_2eproto {
void InitDefaultsDmiProcessor_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiProcessor_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiProcessor_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiProcessor_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiProcessor_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiProcessor_ItemImpl);
}

void InitDefaultsDmiProcessorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessor_Item();
  {
    void* ptr = &::aspia::proto::_DmiProcessor_default_instance_;
    new (ptr) ::aspia::proto::DmiProcessor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiProcessor::InitAsDefaultInstance();
}

void InitDefaultsDmiProcessor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiProcessorImpl);
}

}  // namespace protobuf_category_5fdmi_5fprocessor_2eproto
namespace aspia {
namespace proto {
bool DmiProcessor_Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessor_Family DmiProcessor::FAMILY_UNKNOWN;
const DmiProcessor_Family DmiProcessor::FAMILY_OTHER;
const DmiProcessor_Family DmiProcessor::FAMILY_8086;
const DmiProcessor_Family DmiProcessor::FAMILY_80286;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_386_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_486_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_8087;
const DmiProcessor_Family DmiProcessor::FAMILY_80287;
const DmiProcessor_Family DmiProcessor::FAMILY_80387;
const DmiProcessor_Family DmiProcessor::FAMILY_80487;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_PRO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_2_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_PENTIUM_PROCESSOR_WITH_MMX;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CELERON_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_2_XEON_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_3_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_M1_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_M2_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CELEROM_M_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_DURON_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K5_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K6_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K6_2;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K6_3;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_29000_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K6_2_PLUS;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_601;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_603;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_603_PLUS;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_604;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_620;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_X704;
const DmiProcessor_Family DmiProcessor::FAMILY_POWER_PC_750;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_DUO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_ATOM_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_M_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_M3_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_M5_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_M7_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21064;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21066;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21164;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21164PC;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21164A;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21264;
const DmiProcessor_Family DmiProcessor::FAMILY_ALPHA_21364;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_2_ULTRA_DUAL_CORE_MOBILE_M_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_2_DUAL_CORE_MOBILE_M_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_2_DUAL_CORE_M_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_FX_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_R4000;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_R4200;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_R4400;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_R4600;
const DmiProcessor_Family DmiProcessor::FAMILY_MIPS_R10000;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_C_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_E_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_A_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_G_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_Z_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_R_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_FIREPRO_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_SPARC_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_SUPER_SPARC;
const DmiProcessor_Family DmiProcessor::FAMILY_MICRO_SPARC_2;
const DmiProcessor_Family DmiProcessor::FAMILY_MICRO_SPARC_2EP;
const DmiProcessor_Family DmiProcessor::FAMILY_ULTRA_SPARC;
const DmiProcessor_Family DmiProcessor::FAMILY_ULTRA_SPARC_2;
const DmiProcessor_Family DmiProcessor::FAMILY_ULTRA_SPARC_2I;
const DmiProcessor_Family DmiProcessor::FAMILY_ULTRA_SPARC_3;
const DmiProcessor_Family DmiProcessor::FAMILY_ULTRA_SPARC_3I;
const DmiProcessor_Family DmiProcessor::FAMILY_68040_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_68XXX;
const DmiProcessor_Family DmiProcessor::FAMILY_68000;
const DmiProcessor_Family DmiProcessor::FAMILY_68010;
const DmiProcessor_Family DmiProcessor::FAMILY_68020;
const DmiProcessor_Family DmiProcessor::FAMILY_68030;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_X2000_SERIES_APU;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_X3000_SERIES_APU;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ZEN_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_HOBBIT_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_CRUSOE_TM5000_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_CRUSOE_TM3000_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_EFFICEON_TM8000_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_WEITEK;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_ITANIUM_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_THIRD_GEN_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_8500;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_8000;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_7300LC;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_7200;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_7100LC;
const DmiProcessor_Family DmiProcessor::FAMILY_PA_RISC_7100;
const DmiProcessor_Family DmiProcessor::FAMILY_V30_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_3200_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_3000_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_5300_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_5100_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_5000_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_LV_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_ULV_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_7100_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_5400_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_5200_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_7200_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_7300_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_7400_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_MULTI_CORE_7400_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_3_XEON_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_3_PROCESSOR_WITH_SPEED_STEP;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_4_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AS400_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_MP_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_ITANIUM_2_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_M_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CELERON_D_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_D_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_SOLO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_DUO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_SOLO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_QUAD_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_I7_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CELERON_DUAL_CORE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_IBM390_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_G4;
const DmiProcessor_Family DmiProcessor::FAMILY_G5;
const DmiProcessor_Family DmiProcessor::FAMILY_ESA_390_G6;
const DmiProcessor_Family DmiProcessor::FAMILY_Z_ARCHITECTURE_BASE;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_I5_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_I3_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_VIA_C7_M_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_VIA_C7_D_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_VIA_C7_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_VIA_EDEN_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_MULTI_CORE_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_3XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_3XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_VIA_NANO_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_5XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_5XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_DUAL_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_QUAD_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_MULTI_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_XEON_MULTI_CORE_3400_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_3000_PROCESSOR_SERIES;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_SEMPRON_II_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_QUAD_CORE_EMBEDDED_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_PHENOM_2_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_ATHLON_2_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_OPTERON_SIX_CORE_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_I860;
const DmiProcessor_Family DmiProcessor::FAMILY_I960;
const DmiProcessor_Family DmiProcessor::FAMILY_ARM_V7;
const DmiProcessor_Family DmiProcessor::FAMILY_ARM_V8;
const DmiProcessor_Family DmiProcessor::FAMILY_SH_3;
const DmiProcessor_Family DmiProcessor::FAMILY_SH_4;
const DmiProcessor_Family DmiProcessor::FAMILY_ARM;
const DmiProcessor_Family DmiProcessor::FAMILY_STRONG_ARM;
const DmiProcessor_Family DmiProcessor::FAMILY_6X86;
const DmiProcessor_Family DmiProcessor::FAMILY_MEDIA_GX;
const DmiProcessor_Family DmiProcessor::FAMILY_MII;
const DmiProcessor_Family DmiProcessor::FAMILY_WIN_CHIP;
const DmiProcessor_Family DmiProcessor::FAMILY_DSP;
const DmiProcessor_Family DmiProcessor::FAMILY_VIDEO_PROCESSOR;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_AMD_K7_FAMILY;
const DmiProcessor_Family DmiProcessor::FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY;
const DmiProcessor_Family DmiProcessor::Family_MIN;
const DmiProcessor_Family DmiProcessor::Family_MAX;
const int DmiProcessor::Family_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessor_Type DmiProcessor::TYPE_UNKNOWN;
const DmiProcessor_Type DmiProcessor::TYPE_OTHER;
const DmiProcessor_Type DmiProcessor::TYPE_CENTRAL_PROCESSOR;
const DmiProcessor_Type DmiProcessor::TYPE_MATH_PROCESSOR;
const DmiProcessor_Type DmiProcessor::TYPE_DSP_PROCESSOR;
const DmiProcessor_Type DmiProcessor::TYPE_VIDEO_PROCESSOR;
const DmiProcessor_Type DmiProcessor::Type_MIN;
const DmiProcessor_Type DmiProcessor::Type_MAX;
const int DmiProcessor::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessor_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessor_Status DmiProcessor::STATUS_UNKNOWN;
const DmiProcessor_Status DmiProcessor::STATUS_ENABLED;
const DmiProcessor_Status DmiProcessor::STATUS_DISABLED_BY_USER;
const DmiProcessor_Status DmiProcessor::STATUS_DISABLED_BY_BIOS;
const DmiProcessor_Status DmiProcessor::STATUS_IDLE;
const DmiProcessor_Status DmiProcessor::STATUS_OTHER;
const DmiProcessor_Status DmiProcessor::Status_MIN;
const DmiProcessor_Status DmiProcessor::Status_MAX;
const int DmiProcessor::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessor_Upgrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_UNKNOWN;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_OTHER;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_DAUGHTER_BOARD;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_ZIF_SOCKET;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_REPLACEABLE_PIGGY_BACK;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_NONE;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_LIF_SOCKET;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SLOT_1;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SLOT_2;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_370_PIN_SOCKET;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SLOT_A;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SLOT_M;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_423;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_462;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_478;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_754;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_940;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_939;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_MPGA604;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA771;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA775;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_S1;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_AM2;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_F;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1366;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_G34;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_AM3;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_C32;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1156;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1567;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_PGA988A;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1288;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_RPGA988B;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1023;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1224;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1155;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1356;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA2011;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_FS1;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_FS2;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_FM1;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_FM2;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA2011_3;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1356_3;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1150;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1168;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1234;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1364;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_AM4;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA1151;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1356;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1440;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_BGA1515;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_LGA3647_1;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_SP3;
const DmiProcessor_Upgrade DmiProcessor::UPGRADE_SOCKET_SP3_R2;
const DmiProcessor_Upgrade DmiProcessor::Upgrade_MIN;
const DmiProcessor_Upgrade DmiProcessor::Upgrade_MAX;
const int DmiProcessor::Upgrade_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessor_Characteristics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_NONE;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_64BIT_CAPABLE;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_MULTI_CORE;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_HARDWARE_THREAD;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_EXECUTE_PROTECTION;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_ENHANCED_VIRTUALIZATION;
const DmiProcessor_Characteristics DmiProcessor::CHARACTERISTIC_POWER_CONTROL;
const DmiProcessor_Characteristics DmiProcessor::Characteristics_MIN;
const DmiProcessor_Characteristics DmiProcessor::Characteristics_MAX;
const int DmiProcessor::Characteristics_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiProcessor_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessor_Item::kManufacturerFieldNumber;
const int DmiProcessor_Item::kVersionFieldNumber;
const int DmiProcessor_Item::kFamilyFieldNumber;
const int DmiProcessor_Item::kTypeFieldNumber;
const int DmiProcessor_Item::kStatusFieldNumber;
const int DmiProcessor_Item::kSocketFieldNumber;
const int DmiProcessor_Item::kUpgradeFieldNumber;
const int DmiProcessor_Item::kExternalClockFieldNumber;
const int DmiProcessor_Item::kCurrentSpeedFieldNumber;
const int DmiProcessor_Item::kMaximumSpeedFieldNumber;
const int DmiProcessor_Item::kVoltageFieldNumber;
const int DmiProcessor_Item::kSerialNumberFieldNumber;
const int DmiProcessor_Item::kAssetTagFieldNumber;
const int DmiProcessor_Item::kPartNumberFieldNumber;
const int DmiProcessor_Item::kCoreCountFieldNumber;
const int DmiProcessor_Item::kCoreEnabledFieldNumber;
const int DmiProcessor_Item::kThreadCountFieldNumber;
const int DmiProcessor_Item::kCharacteristicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessor_Item::DmiProcessor_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessor_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiProcessor.Item)
}
DmiProcessor_Item::DmiProcessor_Item(const DmiProcessor_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket().size() > 0) {
    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  ::memcpy(&family_, &from.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&characteristics_) -
    reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiProcessor.Item)
}

void DmiProcessor_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  _cached_size_ = 0;
}

DmiProcessor_Item::~DmiProcessor_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiProcessor.Item)
  SharedDtor();
}

void DmiProcessor_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiProcessor_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessor_Item& DmiProcessor_Item::default_instance() {
  ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessor_Item();
  return *internal_default_instance();
}

DmiProcessor_Item* DmiProcessor_Item::New(::google::protobuf::Arena* arena) const {
  DmiProcessor_Item* n = new DmiProcessor_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessor_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiProcessor.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  _internal_metadata_.Clear();
}

bool DmiProcessor_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiProcessor.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessor.Family family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_family(static_cast< ::aspia::proto::DmiProcessor_Family >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessor.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiProcessor_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessor.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::DmiProcessor_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string socket = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket().data(), static_cast<int>(this->socket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.socket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessor.Upgrade upgrade = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_upgrade(static_cast< ::aspia::proto::DmiProcessor_Upgrade >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 external_clock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessor.Item.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thread_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 characteristics = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characteristics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiProcessor.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiProcessor.Item)
  return false;
#undef DO_
}

void DmiProcessor_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiProcessor.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .aspia.proto.DmiProcessor.Family family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->family(), output);
  }

  // .aspia.proto.DmiProcessor.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .aspia.proto.DmiProcessor.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket().data(), static_cast<int>(this->socket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.socket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket(), output);
  }

  // .aspia.proto.DmiProcessor.Upgrade upgrade = 7;
  if (this->upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->upgrade(), output);
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->external_clock(), output);
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->current_speed(), output);
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maximum_speed(), output);
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voltage(), output);
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->serial_number(), output);
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->asset_tag(), output);
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessor.Item.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->part_number(), output);
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->core_count(), output);
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->core_enabled(), output);
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->thread_count(), output);
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->characteristics(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiProcessor.Item)
}

size_t DmiProcessor_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiProcessor.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket());
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // .aspia.proto.DmiProcessor.Family family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->family());
  }

  // .aspia.proto.DmiProcessor.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiProcessor.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.proto.DmiProcessor.Upgrade upgrade = 7;
  if (this->upgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->upgrade());
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->external_clock());
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_speed());
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    total_size += 1 + 8;
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_speed());
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_count());
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_enabled());
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_count());
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->characteristics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessor_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessor_Item*>(&from));
}

void DmiProcessor_Item::MergeFrom(const DmiProcessor_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiProcessor.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.socket().size() > 0) {

    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.upgrade() != 0) {
    set_upgrade(from.upgrade());
  }
  if (from.external_clock() != 0) {
    set_external_clock(from.external_clock());
  }
  if (from.current_speed() != 0) {
    set_current_speed(from.current_speed());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.maximum_speed() != 0) {
    set_maximum_speed(from.maximum_speed());
  }
  if (from.core_count() != 0) {
    set_core_count(from.core_count());
  }
  if (from.core_enabled() != 0) {
    set_core_enabled(from.core_enabled());
  }
  if (from.thread_count() != 0) {
    set_thread_count(from.thread_count());
  }
  if (from.characteristics() != 0) {
    set_characteristics(from.characteristics());
  }
}

void DmiProcessor_Item::CopyFrom(const DmiProcessor_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiProcessor.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessor_Item::IsInitialized() const {
  return true;
}

void DmiProcessor_Item::Swap(DmiProcessor_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessor_Item::InternalSwap(DmiProcessor_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  socket_.Swap(&other->socket_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  part_number_.Swap(&other->part_number_);
  swap(family_, other->family_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(upgrade_, other->upgrade_);
  swap(external_clock_, other->external_clock_);
  swap(current_speed_, other->current_speed_);
  swap(voltage_, other->voltage_);
  swap(maximum_speed_, other->maximum_speed_);
  swap(core_count_, other->core_count_);
  swap(core_enabled_, other->core_enabled_);
  swap(thread_count_, other->thread_count_);
  swap(characteristics_, other->characteristics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessor_Item::GetTypeName() const {
  return "aspia.proto.DmiProcessor.Item";
}


// ===================================================================

void DmiProcessor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessor::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessor::DmiProcessor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiProcessor)
}
DmiProcessor::DmiProcessor(const DmiProcessor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiProcessor)
}

void DmiProcessor::SharedCtor() {
  _cached_size_ = 0;
}

DmiProcessor::~DmiProcessor() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiProcessor)
  SharedDtor();
}

void DmiProcessor::SharedDtor() {
}

void DmiProcessor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessor& DmiProcessor::default_instance() {
  ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessor();
  return *internal_default_instance();
}

DmiProcessor* DmiProcessor::New(::google::protobuf::Arena* arena) const {
  DmiProcessor* n = new DmiProcessor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessor::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiProcessor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiProcessor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiProcessor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiProcessor.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiProcessor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiProcessor)
  return false;
#undef DO_
}

void DmiProcessor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiProcessor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiProcessor.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiProcessor)
}

size_t DmiProcessor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiProcessor)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiProcessor.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessor*>(&from));
}

void DmiProcessor::MergeFrom(const DmiProcessor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiProcessor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiProcessor::CopyFrom(const DmiProcessor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiProcessor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessor::IsInitialized() const {
  return true;
}

void DmiProcessor::Swap(DmiProcessor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessor::InternalSwap(DmiProcessor* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessor::GetTypeName() const {
  return "aspia.proto.DmiProcessor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

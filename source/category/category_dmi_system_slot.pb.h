// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_system_slot.proto

#ifndef PROTOBUF_category_5fdmi_5fsystem_5fslot_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fsystem_5fslot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fsystem_5fslot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiSystemSlot_ItemImpl();
void InitDefaultsDmiSystemSlot_Item();
void InitDefaultsDmiSystemSlotImpl();
void InitDefaultsDmiSystemSlot();
inline void InitDefaults() {
  InitDefaultsDmiSystemSlot_Item();
  InitDefaultsDmiSystemSlot();
}
}  // namespace protobuf_category_5fdmi_5fsystem_5fslot_2eproto
namespace aspia {
namespace proto {
class DmiSystemSlot;
class DmiSystemSlotDefaultTypeInternal;
extern DmiSystemSlotDefaultTypeInternal _DmiSystemSlot_default_instance_;
class DmiSystemSlot_Item;
class DmiSystemSlot_ItemDefaultTypeInternal;
extern DmiSystemSlot_ItemDefaultTypeInternal _DmiSystemSlot_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum DmiSystemSlot_Type {
  DmiSystemSlot_Type_TYPE_UNKNOWN = 0,
  DmiSystemSlot_Type_TYPE_OTHER = 1,
  DmiSystemSlot_Type_TYPE_ISA = 2,
  DmiSystemSlot_Type_TYPE_MCA = 3,
  DmiSystemSlot_Type_TYPE_EISA = 4,
  DmiSystemSlot_Type_TYPE_PCI = 5,
  DmiSystemSlot_Type_TYPE_PC_CARD = 6,
  DmiSystemSlot_Type_TYPE_VLB = 7,
  DmiSystemSlot_Type_TYPE_PROPRIETARY = 8,
  DmiSystemSlot_Type_TYPE_PROCESSOR_CARD = 9,
  DmiSystemSlot_Type_TYPE_PROPRIETARY_MEMORY_CARD = 10,
  DmiSystemSlot_Type_TYPE_IO_RISER_CARD = 11,
  DmiSystemSlot_Type_TYPE_NUBUS = 12,
  DmiSystemSlot_Type_TYPE_PCI_66 = 13,
  DmiSystemSlot_Type_TYPE_AGP = 14,
  DmiSystemSlot_Type_TYPE_AGP_2X = 15,
  DmiSystemSlot_Type_TYPE_AGP_4X = 16,
  DmiSystemSlot_Type_TYPE_PCI_X = 17,
  DmiSystemSlot_Type_TYPE_AGP_8X = 18,
  DmiSystemSlot_Type_TYPE_M2_SOCKET_1DP = 19,
  DmiSystemSlot_Type_TYPE_M2_SOCKET_1SD = 20,
  DmiSystemSlot_Type_TYPE_M2_SOCKET_2 = 21,
  DmiSystemSlot_Type_TYPE_M2_SOCKET_3 = 22,
  DmiSystemSlot_Type_TYPE_MXM_TYPE_I = 23,
  DmiSystemSlot_Type_TYPE_MXM_TYPE_II = 24,
  DmiSystemSlot_Type_TYPE_MXM_TYPE_III = 25,
  DmiSystemSlot_Type_TYPE_MXM_TYPE_III_HE = 26,
  DmiSystemSlot_Type_TYPE_MXM_TYPE_IV = 27,
  DmiSystemSlot_Type_TYPE_MXM_30_TYPE_A = 28,
  DmiSystemSlot_Type_TYPE_MXM_30_TYPE_B = 29,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_SFF_8639 = 30,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_SFF_8639 = 31,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_52PIN_WITH_BOTTOM_SIDE = 32,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_52PIN = 33,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_76PIN = 34,
  DmiSystemSlot_Type_TYPE_PC98_C20 = 35,
  DmiSystemSlot_Type_TYPE_PC98_C24 = 36,
  DmiSystemSlot_Type_TYPE_PC98_E = 37,
  DmiSystemSlot_Type_TYPE_PC98_LOCAL_BUS = 38,
  DmiSystemSlot_Type_TYPE_PC98_CARD = 39,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS = 40,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X1 = 41,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X2 = 42,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X4 = 43,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X8 = 44,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X16 = 45,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2 = 46,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X1 = 47,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X2 = 48,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X4 = 49,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X8 = 50,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X16 = 51,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3 = 52,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X1 = 53,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X2 = 54,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X4 = 55,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X8 = 56,
  DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X16 = 57,
  DmiSystemSlot_Type_DmiSystemSlot_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiSystemSlot_Type_DmiSystemSlot_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiSystemSlot_Type_IsValid(int value);
const DmiSystemSlot_Type DmiSystemSlot_Type_Type_MIN = DmiSystemSlot_Type_TYPE_UNKNOWN;
const DmiSystemSlot_Type DmiSystemSlot_Type_Type_MAX = DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X16;
const int DmiSystemSlot_Type_Type_ARRAYSIZE = DmiSystemSlot_Type_Type_MAX + 1;

enum DmiSystemSlot_Usage {
  DmiSystemSlot_Usage_USAGE_UNKNOWN = 0,
  DmiSystemSlot_Usage_USAGE_OTHER = 1,
  DmiSystemSlot_Usage_USAGE_AVAILABLE = 2,
  DmiSystemSlot_Usage_USAGE_IN_USE = 3,
  DmiSystemSlot_Usage_DmiSystemSlot_Usage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiSystemSlot_Usage_DmiSystemSlot_Usage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiSystemSlot_Usage_IsValid(int value);
const DmiSystemSlot_Usage DmiSystemSlot_Usage_Usage_MIN = DmiSystemSlot_Usage_USAGE_UNKNOWN;
const DmiSystemSlot_Usage DmiSystemSlot_Usage_Usage_MAX = DmiSystemSlot_Usage_USAGE_IN_USE;
const int DmiSystemSlot_Usage_Usage_ARRAYSIZE = DmiSystemSlot_Usage_Usage_MAX + 1;

enum DmiSystemSlot_BusWidth {
  DmiSystemSlot_BusWidth_BUS_WIDTH_UNKNOWN = 0,
  DmiSystemSlot_BusWidth_BUS_WIDTH_OTHER = 1,
  DmiSystemSlot_BusWidth_BUS_WIDTH_8_BIT = 2,
  DmiSystemSlot_BusWidth_BUS_WIDTH_16_BIT = 3,
  DmiSystemSlot_BusWidth_BUS_WIDTH_32_BIT = 4,
  DmiSystemSlot_BusWidth_BUS_WIDTH_64_BIT = 5,
  DmiSystemSlot_BusWidth_BUS_WIDTH_128_BIT = 6,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X1 = 7,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X2 = 8,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X4 = 9,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X8 = 10,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X12 = 11,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X16 = 12,
  DmiSystemSlot_BusWidth_BUS_WIDTH_X32 = 13,
  DmiSystemSlot_BusWidth_DmiSystemSlot_BusWidth_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiSystemSlot_BusWidth_DmiSystemSlot_BusWidth_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiSystemSlot_BusWidth_IsValid(int value);
const DmiSystemSlot_BusWidth DmiSystemSlot_BusWidth_BusWidth_MIN = DmiSystemSlot_BusWidth_BUS_WIDTH_UNKNOWN;
const DmiSystemSlot_BusWidth DmiSystemSlot_BusWidth_BusWidth_MAX = DmiSystemSlot_BusWidth_BUS_WIDTH_X32;
const int DmiSystemSlot_BusWidth_BusWidth_ARRAYSIZE = DmiSystemSlot_BusWidth_BusWidth_MAX + 1;

enum DmiSystemSlot_Length {
  DmiSystemSlot_Length_LENGTH_UNKNOWN = 0,
  DmiSystemSlot_Length_LENGTH_OTHER = 1,
  DmiSystemSlot_Length_LENGTH_SHORT = 2,
  DmiSystemSlot_Length_LENGTH_LONG = 3,
  DmiSystemSlot_Length_DmiSystemSlot_Length_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiSystemSlot_Length_DmiSystemSlot_Length_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiSystemSlot_Length_IsValid(int value);
const DmiSystemSlot_Length DmiSystemSlot_Length_Length_MIN = DmiSystemSlot_Length_LENGTH_UNKNOWN;
const DmiSystemSlot_Length DmiSystemSlot_Length_Length_MAX = DmiSystemSlot_Length_LENGTH_LONG;
const int DmiSystemSlot_Length_Length_ARRAYSIZE = DmiSystemSlot_Length_Length_MAX + 1;

// ===================================================================

class DmiSystemSlot_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiSystemSlot.Item) */ {
 public:
  DmiSystemSlot_Item();
  virtual ~DmiSystemSlot_Item();

  DmiSystemSlot_Item(const DmiSystemSlot_Item& from);

  inline DmiSystemSlot_Item& operator=(const DmiSystemSlot_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiSystemSlot_Item(DmiSystemSlot_Item&& from) noexcept
    : DmiSystemSlot_Item() {
    *this = ::std::move(from);
  }

  inline DmiSystemSlot_Item& operator=(DmiSystemSlot_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiSystemSlot_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiSystemSlot_Item* internal_default_instance() {
    return reinterpret_cast<const DmiSystemSlot_Item*>(
               &_DmiSystemSlot_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiSystemSlot_Item* other);
  friend void swap(DmiSystemSlot_Item& a, DmiSystemSlot_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiSystemSlot_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiSystemSlot_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiSystemSlot_Item& from);
  void MergeFrom(const DmiSystemSlot_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiSystemSlot_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string slot_designation = 1;
  void clear_slot_designation();
  static const int kSlotDesignationFieldNumber = 1;
  const ::std::string& slot_designation() const;
  void set_slot_designation(const ::std::string& value);
  #if LANG_CXX11
  void set_slot_designation(::std::string&& value);
  #endif
  void set_slot_designation(const char* value);
  void set_slot_designation(const char* value, size_t size);
  ::std::string* mutable_slot_designation();
  ::std::string* release_slot_designation();
  void set_allocated_slot_designation(::std::string* slot_designation);

  // .aspia.proto.DmiSystemSlot.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::aspia::proto::DmiSystemSlot_Type type() const;
  void set_type(::aspia::proto::DmiSystemSlot_Type value);

  // .aspia.proto.DmiSystemSlot.Usage usage = 3;
  void clear_usage();
  static const int kUsageFieldNumber = 3;
  ::aspia::proto::DmiSystemSlot_Usage usage() const;
  void set_usage(::aspia::proto::DmiSystemSlot_Usage value);

  // .aspia.proto.DmiSystemSlot.BusWidth bus_width = 4;
  void clear_bus_width();
  static const int kBusWidthFieldNumber = 4;
  ::aspia::proto::DmiSystemSlot_BusWidth bus_width() const;
  void set_bus_width(::aspia::proto::DmiSystemSlot_BusWidth value);

  // .aspia.proto.DmiSystemSlot.Length length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  ::aspia::proto::DmiSystemSlot_Length length() const;
  void set_length(::aspia::proto::DmiSystemSlot_Length value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiSystemSlot.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr slot_designation_;
  int type_;
  int usage_;
  int bus_width_;
  int length_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fsystem_5fslot_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fsystem_5fslot_2eproto::InitDefaultsDmiSystemSlot_ItemImpl();
};
// -------------------------------------------------------------------

class DmiSystemSlot : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiSystemSlot) */ {
 public:
  DmiSystemSlot();
  virtual ~DmiSystemSlot();

  DmiSystemSlot(const DmiSystemSlot& from);

  inline DmiSystemSlot& operator=(const DmiSystemSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiSystemSlot(DmiSystemSlot&& from) noexcept
    : DmiSystemSlot() {
    *this = ::std::move(from);
  }

  inline DmiSystemSlot& operator=(DmiSystemSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiSystemSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiSystemSlot* internal_default_instance() {
    return reinterpret_cast<const DmiSystemSlot*>(
               &_DmiSystemSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiSystemSlot* other);
  friend void swap(DmiSystemSlot& a, DmiSystemSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiSystemSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiSystemSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiSystemSlot& from);
  void MergeFrom(const DmiSystemSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiSystemSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiSystemSlot_Item Item;

  typedef DmiSystemSlot_Type Type;
  static const Type TYPE_UNKNOWN =
    DmiSystemSlot_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    DmiSystemSlot_Type_TYPE_OTHER;
  static const Type TYPE_ISA =
    DmiSystemSlot_Type_TYPE_ISA;
  static const Type TYPE_MCA =
    DmiSystemSlot_Type_TYPE_MCA;
  static const Type TYPE_EISA =
    DmiSystemSlot_Type_TYPE_EISA;
  static const Type TYPE_PCI =
    DmiSystemSlot_Type_TYPE_PCI;
  static const Type TYPE_PC_CARD =
    DmiSystemSlot_Type_TYPE_PC_CARD;
  static const Type TYPE_VLB =
    DmiSystemSlot_Type_TYPE_VLB;
  static const Type TYPE_PROPRIETARY =
    DmiSystemSlot_Type_TYPE_PROPRIETARY;
  static const Type TYPE_PROCESSOR_CARD =
    DmiSystemSlot_Type_TYPE_PROCESSOR_CARD;
  static const Type TYPE_PROPRIETARY_MEMORY_CARD =
    DmiSystemSlot_Type_TYPE_PROPRIETARY_MEMORY_CARD;
  static const Type TYPE_IO_RISER_CARD =
    DmiSystemSlot_Type_TYPE_IO_RISER_CARD;
  static const Type TYPE_NUBUS =
    DmiSystemSlot_Type_TYPE_NUBUS;
  static const Type TYPE_PCI_66 =
    DmiSystemSlot_Type_TYPE_PCI_66;
  static const Type TYPE_AGP =
    DmiSystemSlot_Type_TYPE_AGP;
  static const Type TYPE_AGP_2X =
    DmiSystemSlot_Type_TYPE_AGP_2X;
  static const Type TYPE_AGP_4X =
    DmiSystemSlot_Type_TYPE_AGP_4X;
  static const Type TYPE_PCI_X =
    DmiSystemSlot_Type_TYPE_PCI_X;
  static const Type TYPE_AGP_8X =
    DmiSystemSlot_Type_TYPE_AGP_8X;
  static const Type TYPE_M2_SOCKET_1DP =
    DmiSystemSlot_Type_TYPE_M2_SOCKET_1DP;
  static const Type TYPE_M2_SOCKET_1SD =
    DmiSystemSlot_Type_TYPE_M2_SOCKET_1SD;
  static const Type TYPE_M2_SOCKET_2 =
    DmiSystemSlot_Type_TYPE_M2_SOCKET_2;
  static const Type TYPE_M2_SOCKET_3 =
    DmiSystemSlot_Type_TYPE_M2_SOCKET_3;
  static const Type TYPE_MXM_TYPE_I =
    DmiSystemSlot_Type_TYPE_MXM_TYPE_I;
  static const Type TYPE_MXM_TYPE_II =
    DmiSystemSlot_Type_TYPE_MXM_TYPE_II;
  static const Type TYPE_MXM_TYPE_III =
    DmiSystemSlot_Type_TYPE_MXM_TYPE_III;
  static const Type TYPE_MXM_TYPE_III_HE =
    DmiSystemSlot_Type_TYPE_MXM_TYPE_III_HE;
  static const Type TYPE_MXM_TYPE_IV =
    DmiSystemSlot_Type_TYPE_MXM_TYPE_IV;
  static const Type TYPE_MXM_30_TYPE_A =
    DmiSystemSlot_Type_TYPE_MXM_30_TYPE_A;
  static const Type TYPE_MXM_30_TYPE_B =
    DmiSystemSlot_Type_TYPE_MXM_30_TYPE_B;
  static const Type TYPE_PCI_EXPRESS_2_SFF_8639 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_SFF_8639;
  static const Type TYPE_PCI_EXPRESS_3_SFF_8639 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_SFF_8639;
  static const Type TYPE_PCI_EXPRESS_MINI_52PIN_WITH_BOTTOM_SIDE =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_52PIN_WITH_BOTTOM_SIDE;
  static const Type TYPE_PCI_EXPRESS_MINI_52PIN =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_52PIN;
  static const Type TYPE_PCI_EXPRESS_MINI_76PIN =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_MINI_76PIN;
  static const Type TYPE_PC98_C20 =
    DmiSystemSlot_Type_TYPE_PC98_C20;
  static const Type TYPE_PC98_C24 =
    DmiSystemSlot_Type_TYPE_PC98_C24;
  static const Type TYPE_PC98_E =
    DmiSystemSlot_Type_TYPE_PC98_E;
  static const Type TYPE_PC98_LOCAL_BUS =
    DmiSystemSlot_Type_TYPE_PC98_LOCAL_BUS;
  static const Type TYPE_PC98_CARD =
    DmiSystemSlot_Type_TYPE_PC98_CARD;
  static const Type TYPE_PCI_EXPRESS =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS;
  static const Type TYPE_PCI_EXPRESS_X1 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X1;
  static const Type TYPE_PCI_EXPRESS_X2 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X2;
  static const Type TYPE_PCI_EXPRESS_X4 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X4;
  static const Type TYPE_PCI_EXPRESS_X8 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X8;
  static const Type TYPE_PCI_EXPRESS_X16 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_X16;
  static const Type TYPE_PCI_EXPRESS_2 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2;
  static const Type TYPE_PCI_EXPRESS_2_X1 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X1;
  static const Type TYPE_PCI_EXPRESS_2_X2 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X2;
  static const Type TYPE_PCI_EXPRESS_2_X4 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X4;
  static const Type TYPE_PCI_EXPRESS_2_X8 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X8;
  static const Type TYPE_PCI_EXPRESS_2_X16 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_2_X16;
  static const Type TYPE_PCI_EXPRESS_3 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3;
  static const Type TYPE_PCI_EXPRESS_3_X1 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X1;
  static const Type TYPE_PCI_EXPRESS_3_X2 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X2;
  static const Type TYPE_PCI_EXPRESS_3_X4 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X4;
  static const Type TYPE_PCI_EXPRESS_3_X8 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X8;
  static const Type TYPE_PCI_EXPRESS_3_X16 =
    DmiSystemSlot_Type_TYPE_PCI_EXPRESS_3_X16;
  static inline bool Type_IsValid(int value) {
    return DmiSystemSlot_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DmiSystemSlot_Type_Type_MIN;
  static const Type Type_MAX =
    DmiSystemSlot_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DmiSystemSlot_Type_Type_ARRAYSIZE;

  typedef DmiSystemSlot_Usage Usage;
  static const Usage USAGE_UNKNOWN =
    DmiSystemSlot_Usage_USAGE_UNKNOWN;
  static const Usage USAGE_OTHER =
    DmiSystemSlot_Usage_USAGE_OTHER;
  static const Usage USAGE_AVAILABLE =
    DmiSystemSlot_Usage_USAGE_AVAILABLE;
  static const Usage USAGE_IN_USE =
    DmiSystemSlot_Usage_USAGE_IN_USE;
  static inline bool Usage_IsValid(int value) {
    return DmiSystemSlot_Usage_IsValid(value);
  }
  static const Usage Usage_MIN =
    DmiSystemSlot_Usage_Usage_MIN;
  static const Usage Usage_MAX =
    DmiSystemSlot_Usage_Usage_MAX;
  static const int Usage_ARRAYSIZE =
    DmiSystemSlot_Usage_Usage_ARRAYSIZE;

  typedef DmiSystemSlot_BusWidth BusWidth;
  static const BusWidth BUS_WIDTH_UNKNOWN =
    DmiSystemSlot_BusWidth_BUS_WIDTH_UNKNOWN;
  static const BusWidth BUS_WIDTH_OTHER =
    DmiSystemSlot_BusWidth_BUS_WIDTH_OTHER;
  static const BusWidth BUS_WIDTH_8_BIT =
    DmiSystemSlot_BusWidth_BUS_WIDTH_8_BIT;
  static const BusWidth BUS_WIDTH_16_BIT =
    DmiSystemSlot_BusWidth_BUS_WIDTH_16_BIT;
  static const BusWidth BUS_WIDTH_32_BIT =
    DmiSystemSlot_BusWidth_BUS_WIDTH_32_BIT;
  static const BusWidth BUS_WIDTH_64_BIT =
    DmiSystemSlot_BusWidth_BUS_WIDTH_64_BIT;
  static const BusWidth BUS_WIDTH_128_BIT =
    DmiSystemSlot_BusWidth_BUS_WIDTH_128_BIT;
  static const BusWidth BUS_WIDTH_X1 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X1;
  static const BusWidth BUS_WIDTH_X2 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X2;
  static const BusWidth BUS_WIDTH_X4 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X4;
  static const BusWidth BUS_WIDTH_X8 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X8;
  static const BusWidth BUS_WIDTH_X12 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X12;
  static const BusWidth BUS_WIDTH_X16 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X16;
  static const BusWidth BUS_WIDTH_X32 =
    DmiSystemSlot_BusWidth_BUS_WIDTH_X32;
  static inline bool BusWidth_IsValid(int value) {
    return DmiSystemSlot_BusWidth_IsValid(value);
  }
  static const BusWidth BusWidth_MIN =
    DmiSystemSlot_BusWidth_BusWidth_MIN;
  static const BusWidth BusWidth_MAX =
    DmiSystemSlot_BusWidth_BusWidth_MAX;
  static const int BusWidth_ARRAYSIZE =
    DmiSystemSlot_BusWidth_BusWidth_ARRAYSIZE;

  typedef DmiSystemSlot_Length Length;
  static const Length LENGTH_UNKNOWN =
    DmiSystemSlot_Length_LENGTH_UNKNOWN;
  static const Length LENGTH_OTHER =
    DmiSystemSlot_Length_LENGTH_OTHER;
  static const Length LENGTH_SHORT =
    DmiSystemSlot_Length_LENGTH_SHORT;
  static const Length LENGTH_LONG =
    DmiSystemSlot_Length_LENGTH_LONG;
  static inline bool Length_IsValid(int value) {
    return DmiSystemSlot_Length_IsValid(value);
  }
  static const Length Length_MIN =
    DmiSystemSlot_Length_Length_MIN;
  static const Length Length_MAX =
    DmiSystemSlot_Length_Length_MAX;
  static const int Length_ARRAYSIZE =
    DmiSystemSlot_Length_Length_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DmiSystemSlot.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DmiSystemSlot_Item& item(int index) const;
  ::aspia::proto::DmiSystemSlot_Item* mutable_item(int index);
  ::aspia::proto::DmiSystemSlot_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiSystemSlot_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiSystemSlot_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiSystemSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiSystemSlot_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fsystem_5fslot_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fsystem_5fslot_2eproto::InitDefaultsDmiSystemSlotImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiSystemSlot_Item

// string slot_designation = 1;
inline void DmiSystemSlot_Item::clear_slot_designation() {
  slot_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiSystemSlot_Item::slot_designation() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.Item.slot_designation)
  return slot_designation_.GetNoArena();
}
inline void DmiSystemSlot_Item::set_slot_designation(const ::std::string& value) {
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiSystemSlot.Item.slot_designation)
}
#if LANG_CXX11
inline void DmiSystemSlot_Item::set_slot_designation(::std::string&& value) {
  
  slot_designation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiSystemSlot.Item.slot_designation)
}
#endif
inline void DmiSystemSlot_Item::set_slot_designation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiSystemSlot.Item.slot_designation)
}
inline void DmiSystemSlot_Item::set_slot_designation(const char* value, size_t size) {
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiSystemSlot.Item.slot_designation)
}
inline ::std::string* DmiSystemSlot_Item::mutable_slot_designation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiSystemSlot.Item.slot_designation)
  return slot_designation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiSystemSlot_Item::release_slot_designation() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiSystemSlot.Item.slot_designation)
  
  return slot_designation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiSystemSlot_Item::set_allocated_slot_designation(::std::string* slot_designation) {
  if (slot_designation != NULL) {
    
  } else {
    
  }
  slot_designation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_designation);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiSystemSlot.Item.slot_designation)
}

// .aspia.proto.DmiSystemSlot.Type type = 2;
inline void DmiSystemSlot_Item::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DmiSystemSlot_Type DmiSystemSlot_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.Item.type)
  return static_cast< ::aspia::proto::DmiSystemSlot_Type >(type_);
}
inline void DmiSystemSlot_Item::set_type(::aspia::proto::DmiSystemSlot_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiSystemSlot.Item.type)
}

// .aspia.proto.DmiSystemSlot.Usage usage = 3;
inline void DmiSystemSlot_Item::clear_usage() {
  usage_ = 0;
}
inline ::aspia::proto::DmiSystemSlot_Usage DmiSystemSlot_Item::usage() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.Item.usage)
  return static_cast< ::aspia::proto::DmiSystemSlot_Usage >(usage_);
}
inline void DmiSystemSlot_Item::set_usage(::aspia::proto::DmiSystemSlot_Usage value) {
  
  usage_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiSystemSlot.Item.usage)
}

// .aspia.proto.DmiSystemSlot.BusWidth bus_width = 4;
inline void DmiSystemSlot_Item::clear_bus_width() {
  bus_width_ = 0;
}
inline ::aspia::proto::DmiSystemSlot_BusWidth DmiSystemSlot_Item::bus_width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.Item.bus_width)
  return static_cast< ::aspia::proto::DmiSystemSlot_BusWidth >(bus_width_);
}
inline void DmiSystemSlot_Item::set_bus_width(::aspia::proto::DmiSystemSlot_BusWidth value) {
  
  bus_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiSystemSlot.Item.bus_width)
}

// .aspia.proto.DmiSystemSlot.Length length = 5;
inline void DmiSystemSlot_Item::clear_length() {
  length_ = 0;
}
inline ::aspia::proto::DmiSystemSlot_Length DmiSystemSlot_Item::length() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.Item.length)
  return static_cast< ::aspia::proto::DmiSystemSlot_Length >(length_);
}
inline void DmiSystemSlot_Item::set_length(::aspia::proto::DmiSystemSlot_Length value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiSystemSlot.Item.length)
}

// -------------------------------------------------------------------

// DmiSystemSlot

// repeated .aspia.proto.DmiSystemSlot.Item item = 1;
inline int DmiSystemSlot::item_size() const {
  return item_.size();
}
inline void DmiSystemSlot::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DmiSystemSlot_Item& DmiSystemSlot::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiSystemSlot.item)
  return item_.Get(index);
}
inline ::aspia::proto::DmiSystemSlot_Item* DmiSystemSlot::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiSystemSlot.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DmiSystemSlot_Item* DmiSystemSlot::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DmiSystemSlot.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiSystemSlot_Item >*
DmiSystemSlot::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DmiSystemSlot.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiSystemSlot_Item >&
DmiSystemSlot::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DmiSystemSlot.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DmiSystemSlot_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiSystemSlot_Usage> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiSystemSlot_BusWidth> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiSystemSlot_Length> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fsystem_5fslot_2eproto__INCLUDED

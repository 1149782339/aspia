// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_driver.proto

#ifndef PROTOBUF_category_5fdriver_2eproto__INCLUDED
#define PROTOBUF_category_5fdriver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdriver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDriver_ItemImpl();
void InitDefaultsDriver_Item();
void InitDefaultsDriverImpl();
void InitDefaultsDriver();
inline void InitDefaults() {
  InitDefaultsDriver_Item();
  InitDefaultsDriver();
}
}  // namespace protobuf_category_5fdriver_2eproto
namespace aspia {
namespace proto {
class Driver;
class DriverDefaultTypeInternal;
extern DriverDefaultTypeInternal _Driver_default_instance_;
class Driver_Item;
class Driver_ItemDefaultTypeInternal;
extern Driver_ItemDefaultTypeInternal _Driver_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum Driver_Status {
  Driver_Status_STATUS_UNKNOWN = 0,
  Driver_Status_STATUS_CONTINUE_PENDING = 1,
  Driver_Status_STATUS_PAUSE_PENDING = 2,
  Driver_Status_STATUS_PAUSED = 3,
  Driver_Status_STATUS_RUNNING = 4,
  Driver_Status_STATUS_START_PENDING = 5,
  Driver_Status_STATUS_STOP_PENDING = 6,
  Driver_Status_STATUS_STOPPED = 7,
  Driver_Status_Driver_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Driver_Status_Driver_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Driver_Status_IsValid(int value);
const Driver_Status Driver_Status_Status_MIN = Driver_Status_STATUS_UNKNOWN;
const Driver_Status Driver_Status_Status_MAX = Driver_Status_STATUS_STOPPED;
const int Driver_Status_Status_ARRAYSIZE = Driver_Status_Status_MAX + 1;

enum Driver_StartupType {
  Driver_StartupType_STARTUP_TYPE_UNKNOWN = 0,
  Driver_StartupType_STARTUP_TYPE_AUTO_START = 1,
  Driver_StartupType_STARTUP_TYPE_DEMAND_START = 2,
  Driver_StartupType_STARTUP_TYPE_DISABLED = 3,
  Driver_StartupType_STARTUP_TYPE_BOOT_START = 4,
  Driver_StartupType_STARTUP_TYPE_SYSTEM_START = 5,
  Driver_StartupType_Driver_StartupType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Driver_StartupType_Driver_StartupType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Driver_StartupType_IsValid(int value);
const Driver_StartupType Driver_StartupType_StartupType_MIN = Driver_StartupType_STARTUP_TYPE_UNKNOWN;
const Driver_StartupType Driver_StartupType_StartupType_MAX = Driver_StartupType_STARTUP_TYPE_SYSTEM_START;
const int Driver_StartupType_StartupType_ARRAYSIZE = Driver_StartupType_StartupType_MAX + 1;

// ===================================================================

class Driver_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Driver.Item) */ {
 public:
  Driver_Item();
  virtual ~Driver_Item();

  Driver_Item(const Driver_Item& from);

  inline Driver_Item& operator=(const Driver_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Driver_Item(Driver_Item&& from) noexcept
    : Driver_Item() {
    *this = ::std::move(from);
  }

  inline Driver_Item& operator=(Driver_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Driver_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Driver_Item* internal_default_instance() {
    return reinterpret_cast<const Driver_Item*>(
               &_Driver_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Driver_Item* other);
  friend void swap(Driver_Item& a, Driver_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Driver_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Driver_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Driver_Item& from);
  void MergeFrom(const Driver_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Driver_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string binary_path = 6;
  void clear_binary_path();
  static const int kBinaryPathFieldNumber = 6;
  const ::std::string& binary_path() const;
  void set_binary_path(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_path(::std::string&& value);
  #endif
  void set_binary_path(const char* value);
  void set_binary_path(const char* value, size_t size);
  ::std::string* mutable_binary_path();
  ::std::string* release_binary_path();
  void set_allocated_binary_path(::std::string* binary_path);

  // .aspia.proto.Driver.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::aspia::proto::Driver_Status status() const;
  void set_status(::aspia::proto::Driver_Status value);

  // .aspia.proto.Driver.StartupType startup_type = 5;
  void clear_startup_type();
  static const int kStartupTypeFieldNumber = 5;
  ::aspia::proto::Driver_StartupType startup_type() const;
  void set_startup_type(::aspia::proto::Driver_StartupType value);

  // @@protoc_insertion_point(class_scope:aspia.proto.Driver.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr binary_path_;
  int status_;
  int startup_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdriver_2eproto::TableStruct;
  friend void ::protobuf_category_5fdriver_2eproto::InitDefaultsDriver_ItemImpl();
};
// -------------------------------------------------------------------

class Driver : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Driver) */ {
 public:
  Driver();
  virtual ~Driver();

  Driver(const Driver& from);

  inline Driver& operator=(const Driver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Driver(Driver&& from) noexcept
    : Driver() {
    *this = ::std::move(from);
  }

  inline Driver& operator=(Driver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Driver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Driver* internal_default_instance() {
    return reinterpret_cast<const Driver*>(
               &_Driver_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Driver* other);
  friend void swap(Driver& a, Driver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Driver* New() const PROTOBUF_FINAL { return New(NULL); }

  Driver* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Driver& from);
  void MergeFrom(const Driver& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Driver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Driver_Item Item;

  typedef Driver_Status Status;
  static const Status STATUS_UNKNOWN =
    Driver_Status_STATUS_UNKNOWN;
  static const Status STATUS_CONTINUE_PENDING =
    Driver_Status_STATUS_CONTINUE_PENDING;
  static const Status STATUS_PAUSE_PENDING =
    Driver_Status_STATUS_PAUSE_PENDING;
  static const Status STATUS_PAUSED =
    Driver_Status_STATUS_PAUSED;
  static const Status STATUS_RUNNING =
    Driver_Status_STATUS_RUNNING;
  static const Status STATUS_START_PENDING =
    Driver_Status_STATUS_START_PENDING;
  static const Status STATUS_STOP_PENDING =
    Driver_Status_STATUS_STOP_PENDING;
  static const Status STATUS_STOPPED =
    Driver_Status_STATUS_STOPPED;
  static inline bool Status_IsValid(int value) {
    return Driver_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Driver_Status_Status_MIN;
  static const Status Status_MAX =
    Driver_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Driver_Status_Status_ARRAYSIZE;

  typedef Driver_StartupType StartupType;
  static const StartupType STARTUP_TYPE_UNKNOWN =
    Driver_StartupType_STARTUP_TYPE_UNKNOWN;
  static const StartupType STARTUP_TYPE_AUTO_START =
    Driver_StartupType_STARTUP_TYPE_AUTO_START;
  static const StartupType STARTUP_TYPE_DEMAND_START =
    Driver_StartupType_STARTUP_TYPE_DEMAND_START;
  static const StartupType STARTUP_TYPE_DISABLED =
    Driver_StartupType_STARTUP_TYPE_DISABLED;
  static const StartupType STARTUP_TYPE_BOOT_START =
    Driver_StartupType_STARTUP_TYPE_BOOT_START;
  static const StartupType STARTUP_TYPE_SYSTEM_START =
    Driver_StartupType_STARTUP_TYPE_SYSTEM_START;
  static inline bool StartupType_IsValid(int value) {
    return Driver_StartupType_IsValid(value);
  }
  static const StartupType StartupType_MIN =
    Driver_StartupType_StartupType_MIN;
  static const StartupType StartupType_MAX =
    Driver_StartupType_StartupType_MAX;
  static const int StartupType_ARRAYSIZE =
    Driver_StartupType_StartupType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.Driver.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::Driver_Item& item(int index) const;
  ::aspia::proto::Driver_Item* mutable_item(int index);
  ::aspia::proto::Driver_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Driver_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Driver_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.Driver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Driver_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdriver_2eproto::TableStruct;
  friend void ::protobuf_category_5fdriver_2eproto::InitDefaultsDriverImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Driver_Item

// string name = 1;
inline void Driver_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Driver_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.name)
  return name_.GetNoArena();
}
inline void Driver_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.name)
}
#if LANG_CXX11
inline void Driver_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Driver.Item.name)
}
#endif
inline void Driver_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Driver.Item.name)
}
inline void Driver_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Driver.Item.name)
}
inline ::std::string* Driver_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Driver.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Driver_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Driver.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Driver_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Driver.Item.name)
}

// string display_name = 2;
inline void Driver_Item::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Driver_Item::display_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.display_name)
  return display_name_.GetNoArena();
}
inline void Driver_Item::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.display_name)
}
#if LANG_CXX11
inline void Driver_Item::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Driver.Item.display_name)
}
#endif
inline void Driver_Item::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Driver.Item.display_name)
}
inline void Driver_Item::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Driver.Item.display_name)
}
inline ::std::string* Driver_Item::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Driver.Item.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Driver_Item::release_display_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Driver.Item.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Driver_Item::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Driver.Item.display_name)
}

// string description = 3;
inline void Driver_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Driver_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.description)
  return description_.GetNoArena();
}
inline void Driver_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.description)
}
#if LANG_CXX11
inline void Driver_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Driver.Item.description)
}
#endif
inline void Driver_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Driver.Item.description)
}
inline void Driver_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Driver.Item.description)
}
inline ::std::string* Driver_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Driver.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Driver_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.proto.Driver.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Driver_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Driver.Item.description)
}

// .aspia.proto.Driver.Status status = 4;
inline void Driver_Item::clear_status() {
  status_ = 0;
}
inline ::aspia::proto::Driver_Status Driver_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.status)
  return static_cast< ::aspia::proto::Driver_Status >(status_);
}
inline void Driver_Item::set_status(::aspia::proto::Driver_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.status)
}

// .aspia.proto.Driver.StartupType startup_type = 5;
inline void Driver_Item::clear_startup_type() {
  startup_type_ = 0;
}
inline ::aspia::proto::Driver_StartupType Driver_Item::startup_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.startup_type)
  return static_cast< ::aspia::proto::Driver_StartupType >(startup_type_);
}
inline void Driver_Item::set_startup_type(::aspia::proto::Driver_StartupType value) {
  
  startup_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.startup_type)
}

// string binary_path = 6;
inline void Driver_Item::clear_binary_path() {
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Driver_Item::binary_path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.Item.binary_path)
  return binary_path_.GetNoArena();
}
inline void Driver_Item::set_binary_path(const ::std::string& value) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Driver.Item.binary_path)
}
#if LANG_CXX11
inline void Driver_Item::set_binary_path(::std::string&& value) {
  
  binary_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Driver.Item.binary_path)
}
#endif
inline void Driver_Item::set_binary_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Driver.Item.binary_path)
}
inline void Driver_Item::set_binary_path(const char* value, size_t size) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Driver.Item.binary_path)
}
inline ::std::string* Driver_Item::mutable_binary_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Driver.Item.binary_path)
  return binary_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Driver_Item::release_binary_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.Driver.Item.binary_path)
  
  return binary_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Driver_Item::set_allocated_binary_path(::std::string* binary_path) {
  if (binary_path != NULL) {
    
  } else {
    
  }
  binary_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Driver.Item.binary_path)
}

// -------------------------------------------------------------------

// Driver

// repeated .aspia.proto.Driver.Item item = 1;
inline int Driver::item_size() const {
  return item_.size();
}
inline void Driver::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::Driver_Item& Driver::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.Driver.item)
  return item_.Get(index);
}
inline ::aspia::proto::Driver_Item* Driver::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.Driver.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::Driver_Item* Driver::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.Driver.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::Driver_Item >*
Driver::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.Driver.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Driver_Item >&
Driver::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.Driver.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::Driver_Status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::Driver_StartupType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdriver_2eproto__INCLUDED

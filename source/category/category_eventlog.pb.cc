// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_eventlog.proto

#include "category_eventlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class EventLog_Log_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventLog_Log_Item>
      _instance;
} _EventLog_Log_Item_default_instance_;
class EventLog_LogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventLog_Log>
      _instance;
} _EventLog_Log_default_instance_;
class EventLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventLog>
      _instance;
} _EventLog_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5feventlog_2eproto {
void InitDefaultsEventLog_Log_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_EventLog_Log_Item_default_instance_;
    new (ptr) ::aspia::proto::EventLog_Log_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::EventLog_Log_Item::InitAsDefaultInstance();
}

void InitDefaultsEventLog_Log_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventLog_Log_ItemImpl);
}

void InitDefaultsEventLog_LogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log_Item();
  {
    void* ptr = &::aspia::proto::_EventLog_Log_default_instance_;
    new (ptr) ::aspia::proto::EventLog_Log();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::EventLog_Log::InitAsDefaultInstance();
}

void InitDefaultsEventLog_Log() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventLog_LogImpl);
}

void InitDefaultsEventLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log();
  {
    void* ptr = &::aspia::proto::_EventLog_default_instance_;
    new (ptr) ::aspia::proto::EventLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::EventLog::InitAsDefaultInstance();
}

void InitDefaultsEventLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEventLogImpl);
}

}  // namespace protobuf_category_5feventlog_2eproto
namespace aspia {
namespace proto {
bool EventLog_Log_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventLog_Log_Type EventLog_Log::TYPE_UNKNOWN;
const EventLog_Log_Type EventLog_Log::TYPE_APPLICATION;
const EventLog_Log_Type EventLog_Log::TYPE_SECURITY;
const EventLog_Log_Type EventLog_Log::TYPE_SYSTEM;
const EventLog_Log_Type EventLog_Log::Type_MIN;
const EventLog_Log_Type EventLog_Log::Type_MAX;
const int EventLog_Log::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool EventLog_Log_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventLog_Log_Level EventLog_Log::LEVEL_UNKNOWN;
const EventLog_Log_Level EventLog_Log::LEVEL_SUCCESS;
const EventLog_Log_Level EventLog_Log::LEVEL_INFORMATION;
const EventLog_Log_Level EventLog_Log::LEVEL_WARNING;
const EventLog_Log_Level EventLog_Log::LEVEL_ERROR;
const EventLog_Log_Level EventLog_Log::LEVEL_AUDIT_SUCCESS;
const EventLog_Log_Level EventLog_Log::LEVEL_AUDIT_FAILURE;
const EventLog_Log_Level EventLog_Log::Level_MIN;
const EventLog_Log_Level EventLog_Log::Level_MAX;
const int EventLog_Log::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EventLog_Log_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventLog_Log_Item::kLevelFieldNumber;
const int EventLog_Log_Item::kTimeFieldNumber;
const int EventLog_Log_Item::kCategoryFieldNumber;
const int EventLog_Log_Item::kEventIdFieldNumber;
const int EventLog_Log_Item::kSourceFieldNumber;
const int EventLog_Log_Item::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventLog_Log_Item::EventLog_Log_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.EventLog.Log.Item)
}
EventLog_Log_Item::EventLog_Log_Item(const EventLog_Log_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.EventLog.Log.Item)
}

void EventLog_Log_Item::SharedCtor() {
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(event_id_));
  _cached_size_ = 0;
}

EventLog_Log_Item::~EventLog_Log_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.EventLog.Log.Item)
  SharedDtor();
}

void EventLog_Log_Item::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventLog_Log_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventLog_Log_Item& EventLog_Log_Item::default_instance() {
  ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log_Item();
  return *internal_default_instance();
}

EventLog_Log_Item* EventLog_Log_Item::New(::google::protobuf::Arena* arena) const {
  EventLog_Log_Item* n = new EventLog_Log_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventLog_Log_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.EventLog.Log.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(event_id_));
  _internal_metadata_.Clear();
}

bool EventLog_Log_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.EventLog.Log.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.EventLog.Log.Level level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::aspia::proto::EventLog_Log_Level >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 category = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 event_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.EventLog.Log.Item.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.EventLog.Log.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.EventLog.Log.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.EventLog.Log.Item)
  return false;
#undef DO_
}

void EventLog_Log_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.EventLog.Log.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.EventLog.Log.Level level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // uint32 category = 3;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->category(), output);
  }

  // uint32 event_id = 4;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_id(), output);
  }

  // string source = 5;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.EventLog.Log.Item.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.EventLog.Log.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.EventLog.Log.Item)
}

size_t EventLog_Log_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.EventLog.Log.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string source = 5;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // .aspia.proto.EventLog.Log.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // uint32 category = 3;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->category());
  }

  // uint32 event_id = 4;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLog_Log_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventLog_Log_Item*>(&from));
}

void EventLog_Log_Item::MergeFrom(const EventLog_Log_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.EventLog.Log.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
}

void EventLog_Log_Item::CopyFrom(const EventLog_Log_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.EventLog.Log.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLog_Log_Item::IsInitialized() const {
  return true;
}

void EventLog_Log_Item::Swap(EventLog_Log_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventLog_Log_Item::InternalSwap(EventLog_Log_Item* other) {
  using std::swap;
  source_.Swap(&other->source_);
  description_.Swap(&other->description_);
  swap(time_, other->time_);
  swap(level_, other->level_);
  swap(category_, other->category_);
  swap(event_id_, other->event_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string EventLog_Log_Item::GetTypeName() const {
  return "aspia.proto.EventLog.Log.Item";
}


// ===================================================================

void EventLog_Log::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventLog_Log::kTypeFieldNumber;
const int EventLog_Log::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventLog_Log::EventLog_Log()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.EventLog.Log)
}
EventLog_Log::EventLog_Log(const EventLog_Log& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.EventLog.Log)
}

void EventLog_Log::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

EventLog_Log::~EventLog_Log() {
  // @@protoc_insertion_point(destructor:aspia.proto.EventLog.Log)
  SharedDtor();
}

void EventLog_Log::SharedDtor() {
}

void EventLog_Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventLog_Log& EventLog_Log::default_instance() {
  ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog_Log();
  return *internal_default_instance();
}

EventLog_Log* EventLog_Log::New(::google::protobuf::Arena* arena) const {
  EventLog_Log* n = new EventLog_Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventLog_Log::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.EventLog.Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

bool EventLog_Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.EventLog.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.EventLog.Log.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::EventLog_Log_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.EventLog.Log.Item item = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.EventLog.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.EventLog.Log)
  return false;
#undef DO_
}

void EventLog_Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.EventLog.Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.EventLog.Log.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .aspia.proto.EventLog.Log.Item item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.EventLog.Log)
}

size_t EventLog_Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.EventLog.Log)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.EventLog.Log.Item item = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  // .aspia.proto.EventLog.Log.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLog_Log::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventLog_Log*>(&from));
}

void EventLog_Log::MergeFrom(const EventLog_Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.EventLog.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EventLog_Log::CopyFrom(const EventLog_Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.EventLog.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLog_Log::IsInitialized() const {
  return true;
}

void EventLog_Log::Swap(EventLog_Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventLog_Log::InternalSwap(EventLog_Log* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string EventLog_Log::GetTypeName() const {
  return "aspia.proto.EventLog.Log";
}


// ===================================================================

void EventLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventLog::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventLog::EventLog()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.EventLog)
}
EventLog::EventLog(const EventLog& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      log_(from.log_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.EventLog)
}

void EventLog::SharedCtor() {
  _cached_size_ = 0;
}

EventLog::~EventLog() {
  // @@protoc_insertion_point(destructor:aspia.proto.EventLog)
  SharedDtor();
}

void EventLog::SharedDtor() {
}

void EventLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventLog& EventLog::default_instance() {
  ::protobuf_category_5feventlog_2eproto::InitDefaultsEventLog();
  return *internal_default_instance();
}

EventLog* EventLog::New(::google::protobuf::Arena* arena) const {
  EventLog* n = new EventLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventLog::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.EventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  _internal_metadata_.Clear();
}

bool EventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.EventLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.EventLog.Log log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.EventLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.EventLog)
  return false;
#undef DO_
}

void EventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.EventLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.EventLog.Log log = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->log(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.EventLog)
}

size_t EventLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.EventLog)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.EventLog.Log log = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->log(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventLog*>(&from));
}

void EventLog::MergeFrom(const EventLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.EventLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
}

void EventLog::CopyFrom(const EventLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.EventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLog::IsInitialized() const {
  return true;
}

void EventLog::Swap(EventLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventLog::InternalSwap(EventLog* other) {
  using std::swap;
  log_.InternalSwap(&other->log_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string EventLog::GetTypeName() const {
  return "aspia.proto.EventLog";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

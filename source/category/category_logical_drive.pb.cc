// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_logical_drive.proto

#include "category_logical_drive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class LogicalDrive_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalDrive_Item>
      _instance;
} _LogicalDrive_Item_default_instance_;
class LogicalDriveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalDrive>
      _instance;
} _LogicalDrive_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5flogical_5fdrive_2eproto {
void InitDefaultsLogicalDrive_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_LogicalDrive_Item_default_instance_;
    new (ptr) ::aspia::proto::LogicalDrive_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::LogicalDrive_Item::InitAsDefaultInstance();
}

void InitDefaultsLogicalDrive_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogicalDrive_ItemImpl);
}

void InitDefaultsLogicalDriveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5flogical_5fdrive_2eproto::InitDefaultsLogicalDrive_Item();
  {
    void* ptr = &::aspia::proto::_LogicalDrive_default_instance_;
    new (ptr) ::aspia::proto::LogicalDrive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::LogicalDrive::InitAsDefaultInstance();
}

void InitDefaultsLogicalDrive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogicalDriveImpl);
}

}  // namespace protobuf_category_5flogical_5fdrive_2eproto
namespace aspia {
namespace proto {
bool LogicalDrive_DriveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_UNKNOWN;
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_LOCAL;
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_REMOVABLE;
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_REMOTE;
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_CDROM;
const LogicalDrive_DriveType LogicalDrive::DRIVE_TYPE_RAM;
const LogicalDrive_DriveType LogicalDrive::DriveType_MIN;
const LogicalDrive_DriveType LogicalDrive::DriveType_MAX;
const int LogicalDrive::DriveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LogicalDrive_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalDrive_Item::kDriveLetterFieldNumber;
const int LogicalDrive_Item::kDriveLabelFieldNumber;
const int LogicalDrive_Item::kDriveTypeFieldNumber;
const int LogicalDrive_Item::kFileSystemFieldNumber;
const int LogicalDrive_Item::kTotalSizeFieldNumber;
const int LogicalDrive_Item::kFreeSpaceFieldNumber;
const int LogicalDrive_Item::kVolumeSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalDrive_Item::LogicalDrive_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5flogical_5fdrive_2eproto::InitDefaultsLogicalDrive_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.LogicalDrive.Item)
}
LogicalDrive_Item::LogicalDrive_Item(const LogicalDrive_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drive_letter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.drive_letter().size() > 0) {
    drive_letter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drive_letter_);
  }
  drive_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.drive_label().size() > 0) {
    drive_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drive_label_);
  }
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_system().size() > 0) {
    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  volume_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.volume_serial().size() > 0) {
    volume_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_serial_);
  }
  ::memcpy(&total_size_, &from.total_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&drive_type_) -
    reinterpret_cast<char*>(&total_size_)) + sizeof(drive_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.LogicalDrive.Item)
}

void LogicalDrive_Item::SharedCtor() {
  drive_letter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drive_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_type_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(drive_type_));
  _cached_size_ = 0;
}

LogicalDrive_Item::~LogicalDrive_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.LogicalDrive.Item)
  SharedDtor();
}

void LogicalDrive_Item::SharedDtor() {
  drive_letter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drive_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogicalDrive_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogicalDrive_Item& LogicalDrive_Item::default_instance() {
  ::protobuf_category_5flogical_5fdrive_2eproto::InitDefaultsLogicalDrive_Item();
  return *internal_default_instance();
}

LogicalDrive_Item* LogicalDrive_Item::New(::google::protobuf::Arena* arena) const {
  LogicalDrive_Item* n = new LogicalDrive_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicalDrive_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.LogicalDrive.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drive_letter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drive_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_type_) -
      reinterpret_cast<char*>(&total_size_)) + sizeof(drive_type_));
  _internal_metadata_.Clear();
}

bool LogicalDrive_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.LogicalDrive.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string drive_letter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drive_letter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drive_letter().data(), static_cast<int>(this->drive_letter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.LogicalDrive.Item.drive_letter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string drive_label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drive_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drive_label().data(), static_cast<int>(this->drive_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.LogicalDrive.Item.drive_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.LogicalDrive.DriveType drive_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drive_type(static_cast< ::aspia::proto::LogicalDrive_DriveType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_system = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_system().data(), static_cast<int>(this->file_system().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.LogicalDrive.Item.file_system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_space = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string volume_serial = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volume_serial().data(), static_cast<int>(this->volume_serial().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.LogicalDrive.Item.volume_serial"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.LogicalDrive.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.LogicalDrive.Item)
  return false;
#undef DO_
}

void LogicalDrive_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.LogicalDrive.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string drive_letter = 1;
  if (this->drive_letter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drive_letter().data(), static_cast<int>(this->drive_letter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.LogicalDrive.Item.drive_letter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->drive_letter(), output);
  }

  // string drive_label = 2;
  if (this->drive_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drive_label().data(), static_cast<int>(this->drive_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.LogicalDrive.Item.drive_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->drive_label(), output);
  }

  // .aspia.proto.LogicalDrive.DriveType drive_type = 3;
  if (this->drive_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drive_type(), output);
  }

  // string file_system = 4;
  if (this->file_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_system().data(), static_cast<int>(this->file_system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.LogicalDrive.Item.file_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_system(), output);
  }

  // uint64 total_size = 5;
  if (this->total_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_size(), output);
  }

  // uint64 free_space = 6;
  if (this->free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->free_space(), output);
  }

  // string volume_serial = 7;
  if (this->volume_serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volume_serial().data(), static_cast<int>(this->volume_serial().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.LogicalDrive.Item.volume_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->volume_serial(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.LogicalDrive.Item)
}

size_t LogicalDrive_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.LogicalDrive.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string drive_letter = 1;
  if (this->drive_letter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drive_letter());
  }

  // string drive_label = 2;
  if (this->drive_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drive_label());
  }

  // string file_system = 4;
  if (this->file_system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_system());
  }

  // string volume_serial = 7;
  if (this->volume_serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volume_serial());
  }

  // uint64 total_size = 5;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_size());
  }

  // uint64 free_space = 6;
  if (this->free_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_space());
  }

  // .aspia.proto.LogicalDrive.DriveType drive_type = 3;
  if (this->drive_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drive_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalDrive_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogicalDrive_Item*>(&from));
}

void LogicalDrive_Item::MergeFrom(const LogicalDrive_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.LogicalDrive.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.drive_letter().size() > 0) {

    drive_letter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drive_letter_);
  }
  if (from.drive_label().size() > 0) {

    drive_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drive_label_);
  }
  if (from.file_system().size() > 0) {

    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  if (from.volume_serial().size() > 0) {

    volume_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_serial_);
  }
  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
  if (from.free_space() != 0) {
    set_free_space(from.free_space());
  }
  if (from.drive_type() != 0) {
    set_drive_type(from.drive_type());
  }
}

void LogicalDrive_Item::CopyFrom(const LogicalDrive_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.LogicalDrive.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDrive_Item::IsInitialized() const {
  return true;
}

void LogicalDrive_Item::Swap(LogicalDrive_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalDrive_Item::InternalSwap(LogicalDrive_Item* other) {
  using std::swap;
  drive_letter_.Swap(&other->drive_letter_);
  drive_label_.Swap(&other->drive_label_);
  file_system_.Swap(&other->file_system_);
  volume_serial_.Swap(&other->volume_serial_);
  swap(total_size_, other->total_size_);
  swap(free_space_, other->free_space_);
  swap(drive_type_, other->drive_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string LogicalDrive_Item::GetTypeName() const {
  return "aspia.proto.LogicalDrive.Item";
}


// ===================================================================

void LogicalDrive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalDrive::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalDrive::LogicalDrive()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5flogical_5fdrive_2eproto::InitDefaultsLogicalDrive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.LogicalDrive)
}
LogicalDrive::LogicalDrive(const LogicalDrive& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.LogicalDrive)
}

void LogicalDrive::SharedCtor() {
  _cached_size_ = 0;
}

LogicalDrive::~LogicalDrive() {
  // @@protoc_insertion_point(destructor:aspia.proto.LogicalDrive)
  SharedDtor();
}

void LogicalDrive::SharedDtor() {
}

void LogicalDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogicalDrive& LogicalDrive::default_instance() {
  ::protobuf_category_5flogical_5fdrive_2eproto::InitDefaultsLogicalDrive();
  return *internal_default_instance();
}

LogicalDrive* LogicalDrive::New(::google::protobuf::Arena* arena) const {
  LogicalDrive* n = new LogicalDrive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicalDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.LogicalDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool LogicalDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.LogicalDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.LogicalDrive.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.LogicalDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.LogicalDrive)
  return false;
#undef DO_
}

void LogicalDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.LogicalDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.LogicalDrive.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.LogicalDrive)
}

size_t LogicalDrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.LogicalDrive)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.LogicalDrive.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalDrive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogicalDrive*>(&from));
}

void LogicalDrive::MergeFrom(const LogicalDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.LogicalDrive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void LogicalDrive::CopyFrom(const LogicalDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.LogicalDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDrive::IsInitialized() const {
  return true;
}

void LogicalDrive::Swap(LogicalDrive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalDrive::InternalSwap(LogicalDrive* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string LogicalDrive::GetTypeName() const {
  return "aspia.proto.LogicalDrive";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

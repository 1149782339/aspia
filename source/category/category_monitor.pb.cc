// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_monitor.proto

#include "category_monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class Monitors_TimingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Monitors_Timing>
      _instance;
} _Monitors_Timing_default_instance_;
class Monitors_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Monitors_Item>
      _instance;
} _Monitors_Item_default_instance_;
class MonitorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Monitors>
      _instance;
} _Monitors_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fmonitor_2eproto {
void InitDefaultsMonitors_TimingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Monitors_Timing_default_instance_;
    new (ptr) ::aspia::proto::Monitors_Timing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Monitors_Timing::InitAsDefaultInstance();
}

void InitDefaultsMonitors_Timing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMonitors_TimingImpl);
}

void InitDefaultsMonitors_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Timing();
  {
    void* ptr = &::aspia::proto::_Monitors_Item_default_instance_;
    new (ptr) ::aspia::proto::Monitors_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Monitors_Item::InitAsDefaultInstance();
}

void InitDefaultsMonitors_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMonitors_ItemImpl);
}

void InitDefaultsMonitorsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Item();
  {
    void* ptr = &::aspia::proto::_Monitors_default_instance_;
    new (ptr) ::aspia::proto::Monitors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Monitors::InitAsDefaultInstance();
}

void InitDefaultsMonitors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMonitorsImpl);
}

}  // namespace protobuf_category_5fmonitor_2eproto
namespace aspia {
namespace proto {
bool Monitors_InputSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Monitors_InputSignalType Monitors::INPUT_SIGNAL_TYPE_UNKNOWN;
const Monitors_InputSignalType Monitors::INPUT_SIGNAL_TYPE_ANALOG;
const Monitors_InputSignalType Monitors::INPUT_SIGNAL_TYPE_DIGITAL;
const Monitors_InputSignalType Monitors::InputSignalType_MIN;
const Monitors_InputSignalType Monitors::InputSignalType_MAX;
const int Monitors::InputSignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Monitors_Timing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors_Timing::kWidthFieldNumber;
const int Monitors_Timing::kHeightFieldNumber;
const int Monitors_Timing::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors_Timing::Monitors_Timing()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Timing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Monitors.Timing)
}
Monitors_Timing::Monitors_Timing(const Monitors_Timing& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Monitors.Timing)
}

void Monitors_Timing::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  _cached_size_ = 0;
}

Monitors_Timing::~Monitors_Timing() {
  // @@protoc_insertion_point(destructor:aspia.proto.Monitors.Timing)
  SharedDtor();
}

void Monitors_Timing::SharedDtor() {
}

void Monitors_Timing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors_Timing& Monitors_Timing::default_instance() {
  ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Timing();
  return *internal_default_instance();
}

Monitors_Timing* Monitors_Timing::New(::google::protobuf::Arena* arena) const {
  Monitors_Timing* n = new Monitors_Timing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors_Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Monitors.Timing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  _internal_metadata_.Clear();
}

bool Monitors_Timing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Monitors.Timing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Monitors.Timing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Monitors.Timing)
  return false;
#undef DO_
}

void Monitors_Timing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Monitors.Timing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frequency(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Monitors.Timing)
}

size_t Monitors_Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Monitors.Timing)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors_Timing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors_Timing*>(&from));
}

void Monitors_Timing::MergeFrom(const Monitors_Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Monitors.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void Monitors_Timing::CopyFrom(const Monitors_Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Monitors.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors_Timing::IsInitialized() const {
  return true;
}

void Monitors_Timing::Swap(Monitors_Timing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors_Timing::InternalSwap(Monitors_Timing* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors_Timing::GetTypeName() const {
  return "aspia.proto.Monitors.Timing";
}


// ===================================================================

void Monitors_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors_Item::kSystemNameFieldNumber;
const int Monitors_Item::kMonitorNameFieldNumber;
const int Monitors_Item::kManufacturerNameFieldNumber;
const int Monitors_Item::kMonitorIdFieldNumber;
const int Monitors_Item::kSerialNumberFieldNumber;
const int Monitors_Item::kEdidVersionFieldNumber;
const int Monitors_Item::kEdidRevisionFieldNumber;
const int Monitors_Item::kWeekOfManufactureFieldNumber;
const int Monitors_Item::kYearOfManufactureFieldNumber;
const int Monitors_Item::kMaxHorizontalImageSizeFieldNumber;
const int Monitors_Item::kMaxVerticalImageSizeFieldNumber;
const int Monitors_Item::kHorizontalResolutionFieldNumber;
const int Monitors_Item::kVerticalResoulutionFieldNumber;
const int Monitors_Item::kGammaFieldNumber;
const int Monitors_Item::kMinHorizontalRateFieldNumber;
const int Monitors_Item::kMaxHorizontalRateFieldNumber;
const int Monitors_Item::kMinVerticalRateFieldNumber;
const int Monitors_Item::kMaxVerticalRateFieldNumber;
const int Monitors_Item::kPixelClockFieldNumber;
const int Monitors_Item::kMaxPixelClockFieldNumber;
const int Monitors_Item::kInputSignalTypeFieldNumber;
const int Monitors_Item::kDefaultGtfSupportedFieldNumber;
const int Monitors_Item::kSuspendSupportedFieldNumber;
const int Monitors_Item::kStandbySupportedFieldNumber;
const int Monitors_Item::kActiveOffSupportedFieldNumber;
const int Monitors_Item::kPreferredTimingModeSupportedFieldNumber;
const int Monitors_Item::kSrgbSupportedFieldNumber;
const int Monitors_Item::kTimingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors_Item::Monitors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Monitors.Item)
}
Monitors_Item::Monitors_Item(const Monitors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      timings_(from.timings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_name().size() > 0) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitor_name().size() > 0) {
    monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
  }
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer_name().size() > 0) {
    manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
  }
  monitor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitor_id().size() > 0) {
    monitor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_id_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&edid_version_, &from.edid_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&srgb_supported_) -
    reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Monitors.Item)
}

void Monitors_Item::SharedCtor() {
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&edid_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srgb_supported_) -
      reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  _cached_size_ = 0;
}

Monitors_Item::~Monitors_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Monitors.Item)
  SharedDtor();
}

void Monitors_Item::SharedDtor() {
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Monitors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors_Item& Monitors_Item::default_instance() {
  ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors_Item();
  return *internal_default_instance();
}

Monitors_Item* Monitors_Item::New(::google::protobuf::Arena* arena) const {
  Monitors_Item* n = new Monitors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Monitors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timings_.Clear();
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&edid_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srgb_supported_) -
      reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  _internal_metadata_.Clear();
}

bool Monitors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Monitors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string system_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Monitors.Item.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitor_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Monitors.Item.monitor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer_name().data(), static_cast<int>(this->manufacturer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Monitors.Item.manufacturer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitor_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitor_id().data(), static_cast<int>(this->monitor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Monitors.Item.monitor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Monitors.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edid_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edid_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edid_revision = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edid_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week_of_manufacture = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_of_manufacture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 year_of_manufacture = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_of_manufacture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_horizontal_image_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_horizontal_image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertical_image_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertical_image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 horizontal_resolution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vertical_resoulution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_resoulution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gamma = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_horizontal_rate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_horizontal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_horizontal_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_horizontal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_vertical_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_vertical_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertical_rate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertical_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pixel_clock = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixel_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_pixel_clock = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pixel_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Monitors.InputSignalType input_signal_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_signal_type(static_cast< ::aspia::proto::Monitors_InputSignalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool default_gtf_supported = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_gtf_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool suspend_supported = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspend_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool standby_supported = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standby_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active_off_supported = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_off_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preferred_timing_mode_supported = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preferred_timing_mode_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool srgb_supported = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &srgb_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.Monitors.Timing timings = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_timings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Monitors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Monitors.Item)
  return false;
#undef DO_
}

void Monitors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Monitors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_name = 1;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Monitors.Item.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_name(), output);
  }

  // string monitor_name = 2;
  if (this->monitor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Monitors.Item.monitor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monitor_name(), output);
  }

  // string manufacturer_name = 3;
  if (this->manufacturer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer_name().data(), static_cast<int>(this->manufacturer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Monitors.Item.manufacturer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer_name(), output);
  }

  // string monitor_id = 4;
  if (this->monitor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitor_id().data(), static_cast<int>(this->monitor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Monitors.Item.monitor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->monitor_id(), output);
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Monitors.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // int32 edid_version = 6;
  if (this->edid_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->edid_version(), output);
  }

  // int32 edid_revision = 7;
  if (this->edid_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->edid_revision(), output);
  }

  // int32 week_of_manufacture = 8;
  if (this->week_of_manufacture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->week_of_manufacture(), output);
  }

  // int32 year_of_manufacture = 9;
  if (this->year_of_manufacture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->year_of_manufacture(), output);
  }

  // int32 max_horizontal_image_size = 10;
  if (this->max_horizontal_image_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_horizontal_image_size(), output);
  }

  // int32 max_vertical_image_size = 11;
  if (this->max_vertical_image_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_vertical_image_size(), output);
  }

  // int32 horizontal_resolution = 12;
  if (this->horizontal_resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->horizontal_resolution(), output);
  }

  // int32 vertical_resoulution = 13;
  if (this->vertical_resoulution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vertical_resoulution(), output);
  }

  // double gamma = 14;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->gamma(), output);
  }

  // int32 min_horizontal_rate = 15;
  if (this->min_horizontal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->min_horizontal_rate(), output);
  }

  // int32 max_horizontal_rate = 16;
  if (this->max_horizontal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_horizontal_rate(), output);
  }

  // int32 min_vertical_rate = 17;
  if (this->min_vertical_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->min_vertical_rate(), output);
  }

  // int32 max_vertical_rate = 18;
  if (this->max_vertical_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_vertical_rate(), output);
  }

  // double pixel_clock = 19;
  if (this->pixel_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pixel_clock(), output);
  }

  // int32 max_pixel_clock = 20;
  if (this->max_pixel_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_pixel_clock(), output);
  }

  // .aspia.proto.Monitors.InputSignalType input_signal_type = 21;
  if (this->input_signal_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->input_signal_type(), output);
  }

  // bool default_gtf_supported = 22;
  if (this->default_gtf_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->default_gtf_supported(), output);
  }

  // bool suspend_supported = 23;
  if (this->suspend_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->suspend_supported(), output);
  }

  // bool standby_supported = 24;
  if (this->standby_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->standby_supported(), output);
  }

  // bool active_off_supported = 25;
  if (this->active_off_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->active_off_supported(), output);
  }

  // bool preferred_timing_mode_supported = 26;
  if (this->preferred_timing_mode_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->preferred_timing_mode_supported(), output);
  }

  // bool srgb_supported = 27;
  if (this->srgb_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->srgb_supported(), output);
  }

  // repeated .aspia.proto.Monitors.Timing timings = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->timings(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Monitors.Item)
}

size_t Monitors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Monitors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Monitors.Timing timings = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->timings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timings(static_cast<int>(i)));
    }
  }

  // string system_name = 1;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  // string monitor_name = 2;
  if (this->monitor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitor_name());
  }

  // string manufacturer_name = 3;
  if (this->manufacturer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer_name());
  }

  // string monitor_id = 4;
  if (this->monitor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitor_id());
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // int32 edid_version = 6;
  if (this->edid_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edid_version());
  }

  // int32 edid_revision = 7;
  if (this->edid_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edid_revision());
  }

  // int32 week_of_manufacture = 8;
  if (this->week_of_manufacture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week_of_manufacture());
  }

  // int32 year_of_manufacture = 9;
  if (this->year_of_manufacture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year_of_manufacture());
  }

  // int32 max_horizontal_image_size = 10;
  if (this->max_horizontal_image_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_horizontal_image_size());
  }

  // int32 max_vertical_image_size = 11;
  if (this->max_vertical_image_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vertical_image_size());
  }

  // int32 horizontal_resolution = 12;
  if (this->horizontal_resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_resolution());
  }

  // int32 vertical_resoulution = 13;
  if (this->vertical_resoulution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_resoulution());
  }

  // double gamma = 14;
  if (this->gamma() != 0) {
    total_size += 1 + 8;
  }

  // int32 min_horizontal_rate = 15;
  if (this->min_horizontal_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_horizontal_rate());
  }

  // int32 max_horizontal_rate = 16;
  if (this->max_horizontal_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_horizontal_rate());
  }

  // int32 min_vertical_rate = 17;
  if (this->min_vertical_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_vertical_rate());
  }

  // int32 max_vertical_rate = 18;
  if (this->max_vertical_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vertical_rate());
  }

  // double pixel_clock = 19;
  if (this->pixel_clock() != 0) {
    total_size += 2 + 8;
  }

  // int32 max_pixel_clock = 20;
  if (this->max_pixel_clock() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_pixel_clock());
  }

  // .aspia.proto.Monitors.InputSignalType input_signal_type = 21;
  if (this->input_signal_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_signal_type());
  }

  // bool default_gtf_supported = 22;
  if (this->default_gtf_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool suspend_supported = 23;
  if (this->suspend_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool standby_supported = 24;
  if (this->standby_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool active_off_supported = 25;
  if (this->active_off_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool preferred_timing_mode_supported = 26;
  if (this->preferred_timing_mode_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool srgb_supported = 27;
  if (this->srgb_supported() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors_Item*>(&from));
}

void Monitors_Item::MergeFrom(const Monitors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Monitors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timings_.MergeFrom(from.timings_);
  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  if (from.monitor_name().size() > 0) {

    monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
  }
  if (from.manufacturer_name().size() > 0) {

    manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
  }
  if (from.monitor_id().size() > 0) {

    monitor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_id_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.edid_version() != 0) {
    set_edid_version(from.edid_version());
  }
  if (from.edid_revision() != 0) {
    set_edid_revision(from.edid_revision());
  }
  if (from.week_of_manufacture() != 0) {
    set_week_of_manufacture(from.week_of_manufacture());
  }
  if (from.year_of_manufacture() != 0) {
    set_year_of_manufacture(from.year_of_manufacture());
  }
  if (from.max_horizontal_image_size() != 0) {
    set_max_horizontal_image_size(from.max_horizontal_image_size());
  }
  if (from.max_vertical_image_size() != 0) {
    set_max_vertical_image_size(from.max_vertical_image_size());
  }
  if (from.horizontal_resolution() != 0) {
    set_horizontal_resolution(from.horizontal_resolution());
  }
  if (from.vertical_resoulution() != 0) {
    set_vertical_resoulution(from.vertical_resoulution());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.min_horizontal_rate() != 0) {
    set_min_horizontal_rate(from.min_horizontal_rate());
  }
  if (from.max_horizontal_rate() != 0) {
    set_max_horizontal_rate(from.max_horizontal_rate());
  }
  if (from.min_vertical_rate() != 0) {
    set_min_vertical_rate(from.min_vertical_rate());
  }
  if (from.max_vertical_rate() != 0) {
    set_max_vertical_rate(from.max_vertical_rate());
  }
  if (from.pixel_clock() != 0) {
    set_pixel_clock(from.pixel_clock());
  }
  if (from.max_pixel_clock() != 0) {
    set_max_pixel_clock(from.max_pixel_clock());
  }
  if (from.input_signal_type() != 0) {
    set_input_signal_type(from.input_signal_type());
  }
  if (from.default_gtf_supported() != 0) {
    set_default_gtf_supported(from.default_gtf_supported());
  }
  if (from.suspend_supported() != 0) {
    set_suspend_supported(from.suspend_supported());
  }
  if (from.standby_supported() != 0) {
    set_standby_supported(from.standby_supported());
  }
  if (from.active_off_supported() != 0) {
    set_active_off_supported(from.active_off_supported());
  }
  if (from.preferred_timing_mode_supported() != 0) {
    set_preferred_timing_mode_supported(from.preferred_timing_mode_supported());
  }
  if (from.srgb_supported() != 0) {
    set_srgb_supported(from.srgb_supported());
  }
}

void Monitors_Item::CopyFrom(const Monitors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Monitors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors_Item::IsInitialized() const {
  return true;
}

void Monitors_Item::Swap(Monitors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors_Item::InternalSwap(Monitors_Item* other) {
  using std::swap;
  timings_.InternalSwap(&other->timings_);
  system_name_.Swap(&other->system_name_);
  monitor_name_.Swap(&other->monitor_name_);
  manufacturer_name_.Swap(&other->manufacturer_name_);
  monitor_id_.Swap(&other->monitor_id_);
  serial_number_.Swap(&other->serial_number_);
  swap(edid_version_, other->edid_version_);
  swap(edid_revision_, other->edid_revision_);
  swap(week_of_manufacture_, other->week_of_manufacture_);
  swap(year_of_manufacture_, other->year_of_manufacture_);
  swap(max_horizontal_image_size_, other->max_horizontal_image_size_);
  swap(max_vertical_image_size_, other->max_vertical_image_size_);
  swap(horizontal_resolution_, other->horizontal_resolution_);
  swap(vertical_resoulution_, other->vertical_resoulution_);
  swap(gamma_, other->gamma_);
  swap(min_horizontal_rate_, other->min_horizontal_rate_);
  swap(max_horizontal_rate_, other->max_horizontal_rate_);
  swap(min_vertical_rate_, other->min_vertical_rate_);
  swap(max_vertical_rate_, other->max_vertical_rate_);
  swap(pixel_clock_, other->pixel_clock_);
  swap(max_pixel_clock_, other->max_pixel_clock_);
  swap(input_signal_type_, other->input_signal_type_);
  swap(default_gtf_supported_, other->default_gtf_supported_);
  swap(suspend_supported_, other->suspend_supported_);
  swap(standby_supported_, other->standby_supported_);
  swap(active_off_supported_, other->active_off_supported_);
  swap(preferred_timing_mode_supported_, other->preferred_timing_mode_supported_);
  swap(srgb_supported_, other->srgb_supported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors_Item::GetTypeName() const {
  return "aspia.proto.Monitors.Item";
}


// ===================================================================

void Monitors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors::Monitors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Monitors)
}
Monitors::Monitors(const Monitors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Monitors)
}

void Monitors::SharedCtor() {
  _cached_size_ = 0;
}

Monitors::~Monitors() {
  // @@protoc_insertion_point(destructor:aspia.proto.Monitors)
  SharedDtor();
}

void Monitors::SharedDtor() {
}

void Monitors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors& Monitors::default_instance() {
  ::protobuf_category_5fmonitor_2eproto::InitDefaultsMonitors();
  return *internal_default_instance();
}

Monitors* Monitors::New(::google::protobuf::Arena* arena) const {
  Monitors* n = new Monitors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Monitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Monitors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Monitors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Monitors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Monitors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Monitors)
  return false;
#undef DO_
}

void Monitors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Monitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Monitors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Monitors)
}

size_t Monitors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Monitors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Monitors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors*>(&from));
}

void Monitors::MergeFrom(const Monitors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Monitors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Monitors::CopyFrom(const Monitors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Monitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors::IsInitialized() const {
  return true;
}

void Monitors::Swap(Monitors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors::InternalSwap(Monitors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors::GetTypeName() const {
  return "aspia.proto.Monitors";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

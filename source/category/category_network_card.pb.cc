// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_network_card.proto

#include "category_network_card.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class NetworkCard_Item_IpAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCard_Item_IpAddress>
      _instance;
} _NetworkCard_Item_IpAddress_default_instance_;
class NetworkCard_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCard_Item>
      _instance;
} _NetworkCard_Item_default_instance_;
class NetworkCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCard>
      _instance;
} _NetworkCard_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fnetwork_5fcard_2eproto {
void InitDefaultsNetworkCard_Item_IpAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_NetworkCard_Item_IpAddress_default_instance_;
    new (ptr) ::aspia::proto::NetworkCard_Item_IpAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCard_Item_IpAddress::InitAsDefaultInstance();
}

void InitDefaultsNetworkCard_Item_IpAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCard_Item_IpAddressImpl);
}

void InitDefaultsNetworkCard_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item_IpAddress();
  {
    void* ptr = &::aspia::proto::_NetworkCard_Item_default_instance_;
    new (ptr) ::aspia::proto::NetworkCard_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCard_Item::InitAsDefaultInstance();
}

void InitDefaultsNetworkCard_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCard_ItemImpl);
}

void InitDefaultsNetworkCardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item();
  {
    void* ptr = &::aspia::proto::_NetworkCard_default_instance_;
    new (ptr) ::aspia::proto::NetworkCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCard::InitAsDefaultInstance();
}

void InitDefaultsNetworkCard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCardImpl);
}

}  // namespace protobuf_category_5fnetwork_5fcard_2eproto
namespace aspia {
namespace proto {

// ===================================================================

void NetworkCard_Item_IpAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCard_Item_IpAddress::kAddressFieldNumber;
const int NetworkCard_Item_IpAddress::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCard_Item_IpAddress::NetworkCard_Item_IpAddress()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item_IpAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCard.Item.IpAddress)
}
NetworkCard_Item_IpAddress::NetworkCard_Item_IpAddress(const NetworkCard_Item_IpAddress& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCard.Item.IpAddress)
}

void NetworkCard_Item_IpAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkCard_Item_IpAddress::~NetworkCard_Item_IpAddress() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCard.Item.IpAddress)
  SharedDtor();
}

void NetworkCard_Item_IpAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCard_Item_IpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCard_Item_IpAddress& NetworkCard_Item_IpAddress::default_instance() {
  ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item_IpAddress();
  return *internal_default_instance();
}

NetworkCard_Item_IpAddress* NetworkCard_Item_IpAddress::New(::google::protobuf::Arena* arena) const {
  NetworkCard_Item_IpAddress* n = new NetworkCard_Item_IpAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCard_Item_IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCard.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NetworkCard_Item_IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCard.Item.IpAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.IpAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.IpAddress.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCard.Item.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCard.Item.IpAddress)
  return false;
#undef DO_
}

void NetworkCard_Item_IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCard.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.IpAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.IpAddress.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCard.Item.IpAddress)
}

size_t NetworkCard_Item_IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCard.Item.IpAddress)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCard_Item_IpAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCard_Item_IpAddress*>(&from));
}

void NetworkCard_Item_IpAddress::MergeFrom(const NetworkCard_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCard.Item.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void NetworkCard_Item_IpAddress::CopyFrom(const NetworkCard_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCard.Item.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCard_Item_IpAddress::IsInitialized() const {
  return true;
}

void NetworkCard_Item_IpAddress::Swap(NetworkCard_Item_IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCard_Item_IpAddress::InternalSwap(NetworkCard_Item_IpAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  mask_.Swap(&other->mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCard_Item_IpAddress::GetTypeName() const {
  return "aspia.proto.NetworkCard.Item.IpAddress";
}


// ===================================================================

void NetworkCard_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCard_Item::kAdapterNameFieldNumber;
const int NetworkCard_Item::kConnectionNameFieldNumber;
const int NetworkCard_Item::kInterfaceTypeFieldNumber;
const int NetworkCard_Item::kMtuFieldNumber;
const int NetworkCard_Item::kSpeedFieldNumber;
const int NetworkCard_Item::kMacAddressFieldNumber;
const int NetworkCard_Item::kIsWinsEnabledFieldNumber;
const int NetworkCard_Item::kPrimaryWinsServerFieldNumber;
const int NetworkCard_Item::kSecondaryWinsServerFieldNumber;
const int NetworkCard_Item::kIsDhcpEnabledFieldNumber;
const int NetworkCard_Item::kIpAddressFieldNumber;
const int NetworkCard_Item::kGatewayAddressFieldNumber;
const int NetworkCard_Item::kDhcpServerAddressFieldNumber;
const int NetworkCard_Item::kDnsServerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCard_Item::NetworkCard_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCard.Item)
}
NetworkCard_Item::NetworkCard_Item(const NetworkCard_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ip_address_(from.ip_address_),
      gateway_address_(from.gateway_address_),
      dhcp_server_address_(from.dhcp_server_address_),
      dns_server_address_(from.dns_server_address_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter_name().size() > 0) {
    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_name().size() > 0) {
    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_address().size() > 0) {
    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_wins_server().size() > 0) {
    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_wins_server().size() > 0) {
    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  ::memcpy(&mtu_, &from.mtu_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dhcp_enabled_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCard.Item)
}

void NetworkCard_Item::SharedCtor() {
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _cached_size_ = 0;
}

NetworkCard_Item::~NetworkCard_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCard.Item)
  SharedDtor();
}

void NetworkCard_Item::SharedDtor() {
  adapter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCard_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCard_Item& NetworkCard_Item::default_instance() {
  ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item();
  return *internal_default_instance();
}

NetworkCard_Item* NetworkCard_Item::New(::google::protobuf::Arena* arena) const {
  NetworkCard_Item* n = new NetworkCard_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCard_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.Clear();
  gateway_address_.Clear();
  dhcp_server_address_.Clear();
  dns_server_address_.Clear();
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _internal_metadata_.Clear();
}

bool NetworkCard_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCard.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adapter_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.adapter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_name().data(), static_cast<int>(this->connection_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.connection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), static_cast<int>(this->mac_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.mac_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wins_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wins_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_wins_server = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.primary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_wins_server = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.secondary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.NetworkCard.Item.IpAddress ip_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateway_address = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateway_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_address(this->gateway_address_size() - 1).data(),
            static_cast<int>(this->gateway_address(this->gateway_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.gateway_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dhcp_server_address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dhcp_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dhcp_server_address(this->dhcp_server_address_size() - 1).data(),
            static_cast<int>(this->dhcp_server_address(this->dhcp_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.dhcp_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dns_server_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns_server_address(this->dns_server_address_size() - 1).data(),
            static_cast<int>(this->dns_server_address(this->dns_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCard.Item.dns_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCard.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCard.Item)
  return false;
#undef DO_
}

void NetworkCard_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.adapter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adapter_name(), output);
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.connection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interface_type(), output);
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mtu(), output);
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), static_cast<int>(this->mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mac_address(), output);
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wins_enabled(), output);
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.primary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->primary_wins_server(), output);
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.secondary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->secondary_wins_server(), output);
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dhcp_enabled(), output);
  }

  // repeated .aspia.proto.NetworkCard.Item.IpAddress ip_address = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->ip_address(static_cast<int>(i)), output);
  }

  // repeated string gateway_address = 12;
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_address(i).data(), static_cast<int>(this->gateway_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.gateway_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gateway_address(i), output);
  }

  // repeated string dhcp_server_address = 13;
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dhcp_server_address(i).data(), static_cast<int>(this->dhcp_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.dhcp_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->dhcp_server_address(i), output);
  }

  // repeated string dns_server_address = 14;
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns_server_address(i).data(), static_cast<int>(this->dns_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCard.Item.dns_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->dns_server_address(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCard.Item)
}

size_t NetworkCard_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCard.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.NetworkCard.Item.IpAddress ip_address = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ip_address(static_cast<int>(i)));
    }
  }

  // repeated string gateway_address = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateway_address_size());
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateway_address(i));
  }

  // repeated string dhcp_server_address = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dhcp_server_address_size());
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dhcp_server_address(i));
  }

  // repeated string dns_server_address = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dns_server_address_size());
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_server_address(i));
  }

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter_name());
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_wins_server());
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_wins_server());
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtu());
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCard_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCard_Item*>(&from));
}

void NetworkCard_Item::MergeFrom(const NetworkCard_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCard.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_address_.MergeFrom(from.ip_address_);
  gateway_address_.MergeFrom(from.gateway_address_);
  dhcp_server_address_.MergeFrom(from.dhcp_server_address_);
  dns_server_address_.MergeFrom(from.dns_server_address_);
  if (from.adapter_name().size() > 0) {

    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  if (from.connection_name().size() > 0) {

    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.primary_wins_server().size() > 0) {

    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  if (from.secondary_wins_server().size() > 0) {

    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_wins_enabled() != 0) {
    set_is_wins_enabled(from.is_wins_enabled());
  }
  if (from.is_dhcp_enabled() != 0) {
    set_is_dhcp_enabled(from.is_dhcp_enabled());
  }
}

void NetworkCard_Item::CopyFrom(const NetworkCard_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCard.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCard_Item::IsInitialized() const {
  return true;
}

void NetworkCard_Item::Swap(NetworkCard_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCard_Item::InternalSwap(NetworkCard_Item* other) {
  using std::swap;
  ip_address_.InternalSwap(&other->ip_address_);
  gateway_address_.InternalSwap(&other->gateway_address_);
  dhcp_server_address_.InternalSwap(&other->dhcp_server_address_);
  dns_server_address_.InternalSwap(&other->dns_server_address_);
  adapter_name_.Swap(&other->adapter_name_);
  connection_name_.Swap(&other->connection_name_);
  interface_type_.Swap(&other->interface_type_);
  mac_address_.Swap(&other->mac_address_);
  primary_wins_server_.Swap(&other->primary_wins_server_);
  secondary_wins_server_.Swap(&other->secondary_wins_server_);
  swap(mtu_, other->mtu_);
  swap(speed_, other->speed_);
  swap(is_wins_enabled_, other->is_wins_enabled_);
  swap(is_dhcp_enabled_, other->is_dhcp_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCard_Item::GetTypeName() const {
  return "aspia.proto.NetworkCard.Item";
}


// ===================================================================

void NetworkCard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCard::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCard::NetworkCard()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCard)
}
NetworkCard::NetworkCard(const NetworkCard& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCard)
}

void NetworkCard::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCard::~NetworkCard() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCard)
  SharedDtor();
}

void NetworkCard::SharedDtor() {
}

void NetworkCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCard& NetworkCard::default_instance() {
  ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard();
  return *internal_default_instance();
}

NetworkCard* NetworkCard::New(::google::protobuf::Arena* arena) const {
  NetworkCard* n = new NetworkCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCard::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.NetworkCard.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCard)
  return false;
#undef DO_
}

void NetworkCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.NetworkCard.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCard)
}

size_t NetworkCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCard)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.NetworkCard.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCard*>(&from));
}

void NetworkCard::MergeFrom(const NetworkCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void NetworkCard::CopyFrom(const NetworkCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCard::IsInitialized() const {
  return true;
}

void NetworkCard::Swap(NetworkCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCard::InternalSwap(NetworkCard* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCard::GetTypeName() const {
  return "aspia.proto.NetworkCard";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

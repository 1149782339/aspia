// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_network_card.proto

#ifndef PROTOBUF_category_5fnetwork_5fcard_2eproto__INCLUDED
#define PROTOBUF_category_5fnetwork_5fcard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fnetwork_5fcard_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsNetworkCard_Item_IpAddressImpl();
void InitDefaultsNetworkCard_Item_IpAddress();
void InitDefaultsNetworkCard_ItemImpl();
void InitDefaultsNetworkCard_Item();
void InitDefaultsNetworkCardImpl();
void InitDefaultsNetworkCard();
inline void InitDefaults() {
  InitDefaultsNetworkCard_Item_IpAddress();
  InitDefaultsNetworkCard_Item();
  InitDefaultsNetworkCard();
}
}  // namespace protobuf_category_5fnetwork_5fcard_2eproto
namespace aspia {
namespace proto {
class NetworkCard;
class NetworkCardDefaultTypeInternal;
extern NetworkCardDefaultTypeInternal _NetworkCard_default_instance_;
class NetworkCard_Item;
class NetworkCard_ItemDefaultTypeInternal;
extern NetworkCard_ItemDefaultTypeInternal _NetworkCard_Item_default_instance_;
class NetworkCard_Item_IpAddress;
class NetworkCard_Item_IpAddressDefaultTypeInternal;
extern NetworkCard_Item_IpAddressDefaultTypeInternal _NetworkCard_Item_IpAddress_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class NetworkCard_Item_IpAddress : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.NetworkCard.Item.IpAddress) */ {
 public:
  NetworkCard_Item_IpAddress();
  virtual ~NetworkCard_Item_IpAddress();

  NetworkCard_Item_IpAddress(const NetworkCard_Item_IpAddress& from);

  inline NetworkCard_Item_IpAddress& operator=(const NetworkCard_Item_IpAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkCard_Item_IpAddress(NetworkCard_Item_IpAddress&& from) noexcept
    : NetworkCard_Item_IpAddress() {
    *this = ::std::move(from);
  }

  inline NetworkCard_Item_IpAddress& operator=(NetworkCard_Item_IpAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NetworkCard_Item_IpAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkCard_Item_IpAddress* internal_default_instance() {
    return reinterpret_cast<const NetworkCard_Item_IpAddress*>(
               &_NetworkCard_Item_IpAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetworkCard_Item_IpAddress* other);
  friend void swap(NetworkCard_Item_IpAddress& a, NetworkCard_Item_IpAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkCard_Item_IpAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkCard_Item_IpAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkCard_Item_IpAddress& from);
  void MergeFrom(const NetworkCard_Item_IpAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkCard_Item_IpAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string mask = 2;
  void clear_mask();
  static const int kMaskFieldNumber = 2;
  const ::std::string& mask() const;
  void set_mask(const ::std::string& value);
  #if LANG_CXX11
  void set_mask(::std::string&& value);
  #endif
  void set_mask(const char* value);
  void set_mask(const char* value, size_t size);
  ::std::string* mutable_mask();
  ::std::string* release_mask();
  void set_allocated_mask(::std::string* mask);

  // @@protoc_insertion_point(class_scope:aspia.proto.NetworkCard.Item.IpAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fnetwork_5fcard_2eproto::TableStruct;
  friend void ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_Item_IpAddressImpl();
};
// -------------------------------------------------------------------

class NetworkCard_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.NetworkCard.Item) */ {
 public:
  NetworkCard_Item();
  virtual ~NetworkCard_Item();

  NetworkCard_Item(const NetworkCard_Item& from);

  inline NetworkCard_Item& operator=(const NetworkCard_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkCard_Item(NetworkCard_Item&& from) noexcept
    : NetworkCard_Item() {
    *this = ::std::move(from);
  }

  inline NetworkCard_Item& operator=(NetworkCard_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NetworkCard_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkCard_Item* internal_default_instance() {
    return reinterpret_cast<const NetworkCard_Item*>(
               &_NetworkCard_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NetworkCard_Item* other);
  friend void swap(NetworkCard_Item& a, NetworkCard_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkCard_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkCard_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkCard_Item& from);
  void MergeFrom(const NetworkCard_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkCard_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetworkCard_Item_IpAddress IpAddress;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.NetworkCard.Item.IpAddress ip_address = 11;
  int ip_address_size() const;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 11;
  const ::aspia::proto::NetworkCard_Item_IpAddress& ip_address(int index) const;
  ::aspia::proto::NetworkCard_Item_IpAddress* mutable_ip_address(int index);
  ::aspia::proto::NetworkCard_Item_IpAddress* add_ip_address();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item_IpAddress >*
      mutable_ip_address();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item_IpAddress >&
      ip_address() const;

  // repeated string gateway_address = 12;
  int gateway_address_size() const;
  void clear_gateway_address();
  static const int kGatewayAddressFieldNumber = 12;
  const ::std::string& gateway_address(int index) const;
  ::std::string* mutable_gateway_address(int index);
  void set_gateway_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_address(int index, ::std::string&& value);
  #endif
  void set_gateway_address(int index, const char* value);
  void set_gateway_address(int index, const char* value, size_t size);
  ::std::string* add_gateway_address();
  void add_gateway_address(const ::std::string& value);
  #if LANG_CXX11
  void add_gateway_address(::std::string&& value);
  #endif
  void add_gateway_address(const char* value);
  void add_gateway_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateway_address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateway_address();

  // repeated string dhcp_server_address = 13;
  int dhcp_server_address_size() const;
  void clear_dhcp_server_address();
  static const int kDhcpServerAddressFieldNumber = 13;
  const ::std::string& dhcp_server_address(int index) const;
  ::std::string* mutable_dhcp_server_address(int index);
  void set_dhcp_server_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dhcp_server_address(int index, ::std::string&& value);
  #endif
  void set_dhcp_server_address(int index, const char* value);
  void set_dhcp_server_address(int index, const char* value, size_t size);
  ::std::string* add_dhcp_server_address();
  void add_dhcp_server_address(const ::std::string& value);
  #if LANG_CXX11
  void add_dhcp_server_address(::std::string&& value);
  #endif
  void add_dhcp_server_address(const char* value);
  void add_dhcp_server_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dhcp_server_address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dhcp_server_address();

  // repeated string dns_server_address = 14;
  int dns_server_address_size() const;
  void clear_dns_server_address();
  static const int kDnsServerAddressFieldNumber = 14;
  const ::std::string& dns_server_address(int index) const;
  ::std::string* mutable_dns_server_address(int index);
  void set_dns_server_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dns_server_address(int index, ::std::string&& value);
  #endif
  void set_dns_server_address(int index, const char* value);
  void set_dns_server_address(int index, const char* value, size_t size);
  ::std::string* add_dns_server_address();
  void add_dns_server_address(const ::std::string& value);
  #if LANG_CXX11
  void add_dns_server_address(::std::string&& value);
  #endif
  void add_dns_server_address(const char* value);
  void add_dns_server_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dns_server_address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dns_server_address();

  // string adapter_name = 1;
  void clear_adapter_name();
  static const int kAdapterNameFieldNumber = 1;
  const ::std::string& adapter_name() const;
  void set_adapter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_adapter_name(::std::string&& value);
  #endif
  void set_adapter_name(const char* value);
  void set_adapter_name(const char* value, size_t size);
  ::std::string* mutable_adapter_name();
  ::std::string* release_adapter_name();
  void set_allocated_adapter_name(::std::string* adapter_name);

  // string connection_name = 2;
  void clear_connection_name();
  static const int kConnectionNameFieldNumber = 2;
  const ::std::string& connection_name() const;
  void set_connection_name(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_name(::std::string&& value);
  #endif
  void set_connection_name(const char* value);
  void set_connection_name(const char* value, size_t size);
  ::std::string* mutable_connection_name();
  ::std::string* release_connection_name();
  void set_allocated_connection_name(::std::string* connection_name);

  // string interface_type = 3;
  void clear_interface_type();
  static const int kInterfaceTypeFieldNumber = 3;
  const ::std::string& interface_type() const;
  void set_interface_type(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_type(::std::string&& value);
  #endif
  void set_interface_type(const char* value);
  void set_interface_type(const char* value, size_t size);
  ::std::string* mutable_interface_type();
  ::std::string* release_interface_type();
  void set_allocated_interface_type(::std::string* interface_type);

  // string mac_address = 6;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 6;
  const ::std::string& mac_address() const;
  void set_mac_address(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_address(::std::string&& value);
  #endif
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  ::std::string* mutable_mac_address();
  ::std::string* release_mac_address();
  void set_allocated_mac_address(::std::string* mac_address);

  // string primary_wins_server = 8;
  void clear_primary_wins_server();
  static const int kPrimaryWinsServerFieldNumber = 8;
  const ::std::string& primary_wins_server() const;
  void set_primary_wins_server(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_wins_server(::std::string&& value);
  #endif
  void set_primary_wins_server(const char* value);
  void set_primary_wins_server(const char* value, size_t size);
  ::std::string* mutable_primary_wins_server();
  ::std::string* release_primary_wins_server();
  void set_allocated_primary_wins_server(::std::string* primary_wins_server);

  // string secondary_wins_server = 9;
  void clear_secondary_wins_server();
  static const int kSecondaryWinsServerFieldNumber = 9;
  const ::std::string& secondary_wins_server() const;
  void set_secondary_wins_server(const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_wins_server(::std::string&& value);
  #endif
  void set_secondary_wins_server(const char* value);
  void set_secondary_wins_server(const char* value, size_t size);
  ::std::string* mutable_secondary_wins_server();
  ::std::string* release_secondary_wins_server();
  void set_allocated_secondary_wins_server(::std::string* secondary_wins_server);

  // uint32 mtu = 4;
  void clear_mtu();
  static const int kMtuFieldNumber = 4;
  ::google::protobuf::uint32 mtu() const;
  void set_mtu(::google::protobuf::uint32 value);

  // uint32 speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // bool is_wins_enabled = 7;
  void clear_is_wins_enabled();
  static const int kIsWinsEnabledFieldNumber = 7;
  bool is_wins_enabled() const;
  void set_is_wins_enabled(bool value);

  // bool is_dhcp_enabled = 10;
  void clear_is_dhcp_enabled();
  static const int kIsDhcpEnabledFieldNumber = 10;
  bool is_dhcp_enabled() const;
  void set_is_dhcp_enabled(bool value);

  // @@protoc_insertion_point(class_scope:aspia.proto.NetworkCard.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item_IpAddress > ip_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateway_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dhcp_server_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dns_server_address_;
  ::google::protobuf::internal::ArenaStringPtr adapter_name_;
  ::google::protobuf::internal::ArenaStringPtr connection_name_;
  ::google::protobuf::internal::ArenaStringPtr interface_type_;
  ::google::protobuf::internal::ArenaStringPtr mac_address_;
  ::google::protobuf::internal::ArenaStringPtr primary_wins_server_;
  ::google::protobuf::internal::ArenaStringPtr secondary_wins_server_;
  ::google::protobuf::uint32 mtu_;
  ::google::protobuf::uint32 speed_;
  bool is_wins_enabled_;
  bool is_dhcp_enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fnetwork_5fcard_2eproto::TableStruct;
  friend void ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCard_ItemImpl();
};
// -------------------------------------------------------------------

class NetworkCard : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.NetworkCard) */ {
 public:
  NetworkCard();
  virtual ~NetworkCard();

  NetworkCard(const NetworkCard& from);

  inline NetworkCard& operator=(const NetworkCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkCard(NetworkCard&& from) noexcept
    : NetworkCard() {
    *this = ::std::move(from);
  }

  inline NetworkCard& operator=(NetworkCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NetworkCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkCard* internal_default_instance() {
    return reinterpret_cast<const NetworkCard*>(
               &_NetworkCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NetworkCard* other);
  friend void swap(NetworkCard& a, NetworkCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkCard* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkCard& from);
  void MergeFrom(const NetworkCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetworkCard_Item Item;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.NetworkCard.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::NetworkCard_Item& item(int index) const;
  ::aspia::proto::NetworkCard_Item* mutable_item(int index);
  ::aspia::proto::NetworkCard_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.NetworkCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fnetwork_5fcard_2eproto::TableStruct;
  friend void ::protobuf_category_5fnetwork_5fcard_2eproto::InitDefaultsNetworkCardImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkCard_Item_IpAddress

// string address = 1;
inline void NetworkCard_Item_IpAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item_IpAddress::address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.IpAddress.address)
  return address_.GetNoArena();
}
inline void NetworkCard_Item_IpAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.IpAddress.address)
}
#if LANG_CXX11
inline void NetworkCard_Item_IpAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.IpAddress.address)
}
#endif
inline void NetworkCard_Item_IpAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.IpAddress.address)
}
inline void NetworkCard_Item_IpAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.IpAddress.address)
}
inline ::std::string* NetworkCard_Item_IpAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.IpAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item_IpAddress::release_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.IpAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item_IpAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.IpAddress.address)
}

// string mask = 2;
inline void NetworkCard_Item_IpAddress::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item_IpAddress::mask() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.IpAddress.mask)
  return mask_.GetNoArena();
}
inline void NetworkCard_Item_IpAddress::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.IpAddress.mask)
}
#if LANG_CXX11
inline void NetworkCard_Item_IpAddress::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.IpAddress.mask)
}
#endif
inline void NetworkCard_Item_IpAddress::set_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.IpAddress.mask)
}
inline void NetworkCard_Item_IpAddress::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.IpAddress.mask)
}
inline ::std::string* NetworkCard_Item_IpAddress::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.IpAddress.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item_IpAddress::release_mask() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.IpAddress.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item_IpAddress::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.IpAddress.mask)
}

// -------------------------------------------------------------------

// NetworkCard_Item

// string adapter_name = 1;
inline void NetworkCard_Item::clear_adapter_name() {
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::adapter_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.adapter_name)
  return adapter_name_.GetNoArena();
}
inline void NetworkCard_Item::set_adapter_name(const ::std::string& value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.adapter_name)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_adapter_name(::std::string&& value) {
  
  adapter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.adapter_name)
}
#endif
inline void NetworkCard_Item::set_adapter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.adapter_name)
}
inline void NetworkCard_Item::set_adapter_name(const char* value, size_t size) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.adapter_name)
}
inline ::std::string* NetworkCard_Item::mutable_adapter_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.adapter_name)
  return adapter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_adapter_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.adapter_name)
  
  return adapter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_adapter_name(::std::string* adapter_name) {
  if (adapter_name != NULL) {
    
  } else {
    
  }
  adapter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.adapter_name)
}

// string connection_name = 2;
inline void NetworkCard_Item::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::connection_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.connection_name)
  return connection_name_.GetNoArena();
}
inline void NetworkCard_Item::set_connection_name(const ::std::string& value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.connection_name)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_connection_name(::std::string&& value) {
  
  connection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.connection_name)
}
#endif
inline void NetworkCard_Item::set_connection_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.connection_name)
}
inline void NetworkCard_Item::set_connection_name(const char* value, size_t size) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.connection_name)
}
inline ::std::string* NetworkCard_Item::mutable_connection_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.connection_name)
  return connection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_connection_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.connection_name)
  
  return connection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_connection_name(::std::string* connection_name) {
  if (connection_name != NULL) {
    
  } else {
    
  }
  connection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.connection_name)
}

// string interface_type = 3;
inline void NetworkCard_Item::clear_interface_type() {
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::interface_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.interface_type)
  return interface_type_.GetNoArena();
}
inline void NetworkCard_Item::set_interface_type(const ::std::string& value) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.interface_type)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_interface_type(::std::string&& value) {
  
  interface_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.interface_type)
}
#endif
inline void NetworkCard_Item::set_interface_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.interface_type)
}
inline void NetworkCard_Item::set_interface_type(const char* value, size_t size) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.interface_type)
}
inline ::std::string* NetworkCard_Item::mutable_interface_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.interface_type)
  return interface_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_interface_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.interface_type)
  
  return interface_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_interface_type(::std::string* interface_type) {
  if (interface_type != NULL) {
    
  } else {
    
  }
  interface_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.interface_type)
}

// uint32 mtu = 4;
inline void NetworkCard_Item::clear_mtu() {
  mtu_ = 0u;
}
inline ::google::protobuf::uint32 NetworkCard_Item::mtu() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.mtu)
  return mtu_;
}
inline void NetworkCard_Item::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.mtu)
}

// uint32 speed = 5;
inline void NetworkCard_Item::clear_speed() {
  speed_ = 0u;
}
inline ::google::protobuf::uint32 NetworkCard_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.speed)
  return speed_;
}
inline void NetworkCard_Item::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.speed)
}

// string mac_address = 6;
inline void NetworkCard_Item::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::mac_address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.mac_address)
  return mac_address_.GetNoArena();
}
inline void NetworkCard_Item::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.mac_address)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_mac_address(::std::string&& value) {
  
  mac_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.mac_address)
}
#endif
inline void NetworkCard_Item::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.mac_address)
}
inline void NetworkCard_Item::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.mac_address)
}
inline ::std::string* NetworkCard_Item::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_mac_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.mac_address)
}

// bool is_wins_enabled = 7;
inline void NetworkCard_Item::clear_is_wins_enabled() {
  is_wins_enabled_ = false;
}
inline bool NetworkCard_Item::is_wins_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.is_wins_enabled)
  return is_wins_enabled_;
}
inline void NetworkCard_Item::set_is_wins_enabled(bool value) {
  
  is_wins_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.is_wins_enabled)
}

// string primary_wins_server = 8;
inline void NetworkCard_Item::clear_primary_wins_server() {
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::primary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.primary_wins_server)
  return primary_wins_server_.GetNoArena();
}
inline void NetworkCard_Item::set_primary_wins_server(const ::std::string& value) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.primary_wins_server)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_primary_wins_server(::std::string&& value) {
  
  primary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.primary_wins_server)
}
#endif
inline void NetworkCard_Item::set_primary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.primary_wins_server)
}
inline void NetworkCard_Item::set_primary_wins_server(const char* value, size_t size) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.primary_wins_server)
}
inline ::std::string* NetworkCard_Item::mutable_primary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.primary_wins_server)
  return primary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_primary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.primary_wins_server)
  
  return primary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_primary_wins_server(::std::string* primary_wins_server) {
  if (primary_wins_server != NULL) {
    
  } else {
    
  }
  primary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.primary_wins_server)
}

// string secondary_wins_server = 9;
inline void NetworkCard_Item::clear_secondary_wins_server() {
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkCard_Item::secondary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.secondary_wins_server)
  return secondary_wins_server_.GetNoArena();
}
inline void NetworkCard_Item::set_secondary_wins_server(const ::std::string& value) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.secondary_wins_server)
}
#if LANG_CXX11
inline void NetworkCard_Item::set_secondary_wins_server(::std::string&& value) {
  
  secondary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.NetworkCard.Item.secondary_wins_server)
}
#endif
inline void NetworkCard_Item::set_secondary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.secondary_wins_server)
}
inline void NetworkCard_Item::set_secondary_wins_server(const char* value, size_t size) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.secondary_wins_server)
}
inline ::std::string* NetworkCard_Item::mutable_secondary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.secondary_wins_server)
  return secondary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkCard_Item::release_secondary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.proto.NetworkCard.Item.secondary_wins_server)
  
  return secondary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkCard_Item::set_allocated_secondary_wins_server(::std::string* secondary_wins_server) {
  if (secondary_wins_server != NULL) {
    
  } else {
    
  }
  secondary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.NetworkCard.Item.secondary_wins_server)
}

// bool is_dhcp_enabled = 10;
inline void NetworkCard_Item::clear_is_dhcp_enabled() {
  is_dhcp_enabled_ = false;
}
inline bool NetworkCard_Item::is_dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.is_dhcp_enabled)
  return is_dhcp_enabled_;
}
inline void NetworkCard_Item::set_is_dhcp_enabled(bool value) {
  
  is_dhcp_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.is_dhcp_enabled)
}

// repeated .aspia.proto.NetworkCard.Item.IpAddress ip_address = 11;
inline int NetworkCard_Item::ip_address_size() const {
  return ip_address_.size();
}
inline void NetworkCard_Item::clear_ip_address() {
  ip_address_.Clear();
}
inline const ::aspia::proto::NetworkCard_Item_IpAddress& NetworkCard_Item::ip_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.ip_address)
  return ip_address_.Get(index);
}
inline ::aspia::proto::NetworkCard_Item_IpAddress* NetworkCard_Item::mutable_ip_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.ip_address)
  return ip_address_.Mutable(index);
}
inline ::aspia::proto::NetworkCard_Item_IpAddress* NetworkCard_Item::add_ip_address() {
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.ip_address)
  return ip_address_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item_IpAddress >*
NetworkCard_Item::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.NetworkCard.Item.ip_address)
  return &ip_address_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item_IpAddress >&
NetworkCard_Item::ip_address() const {
  // @@protoc_insertion_point(field_list:aspia.proto.NetworkCard.Item.ip_address)
  return ip_address_;
}

// repeated string gateway_address = 12;
inline int NetworkCard_Item::gateway_address_size() const {
  return gateway_address_.size();
}
inline void NetworkCard_Item::clear_gateway_address() {
  gateway_address_.Clear();
}
inline const ::std::string& NetworkCard_Item::gateway_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.gateway_address)
  return gateway_address_.Get(index);
}
inline ::std::string* NetworkCard_Item::mutable_gateway_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.gateway_address)
  return gateway_address_.Mutable(index);
}
inline void NetworkCard_Item::set_gateway_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetworkCard_Item::set_gateway_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetworkCard_Item::set_gateway_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.gateway_address)
}
inline void NetworkCard_Item::set_gateway_address(int index, const char* value, size_t size) {
  gateway_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.gateway_address)
}
inline ::std::string* NetworkCard_Item::add_gateway_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.proto.NetworkCard.Item.gateway_address)
  return gateway_address_.Add();
}
inline void NetworkCard_Item::add_gateway_address(const ::std::string& value) {
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.gateway_address)
}
#if LANG_CXX11
inline void NetworkCard_Item::add_gateway_address(::std::string&& value) {
  gateway_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.gateway_address)
}
#endif
inline void NetworkCard_Item::add_gateway_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.proto.NetworkCard.Item.gateway_address)
}
inline void NetworkCard_Item::add_gateway_address(const char* value, size_t size) {
  gateway_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.proto.NetworkCard.Item.gateway_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCard_Item::gateway_address() const {
  // @@protoc_insertion_point(field_list:aspia.proto.NetworkCard.Item.gateway_address)
  return gateway_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCard_Item::mutable_gateway_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.NetworkCard.Item.gateway_address)
  return &gateway_address_;
}

// repeated string dhcp_server_address = 13;
inline int NetworkCard_Item::dhcp_server_address_size() const {
  return dhcp_server_address_.size();
}
inline void NetworkCard_Item::clear_dhcp_server_address() {
  dhcp_server_address_.Clear();
}
inline const ::std::string& NetworkCard_Item::dhcp_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.dhcp_server_address)
  return dhcp_server_address_.Get(index);
}
inline ::std::string* NetworkCard_Item::mutable_dhcp_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.dhcp_server_address)
  return dhcp_server_address_.Mutable(index);
}
inline void NetworkCard_Item::set_dhcp_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetworkCard_Item::set_dhcp_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetworkCard_Item::set_dhcp_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
inline void NetworkCard_Item::set_dhcp_server_address(int index, const char* value, size_t size) {
  dhcp_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
inline ::std::string* NetworkCard_Item::add_dhcp_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.proto.NetworkCard.Item.dhcp_server_address)
  return dhcp_server_address_.Add();
}
inline void NetworkCard_Item::add_dhcp_server_address(const ::std::string& value) {
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
#if LANG_CXX11
inline void NetworkCard_Item::add_dhcp_server_address(::std::string&& value) {
  dhcp_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
#endif
inline void NetworkCard_Item::add_dhcp_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
inline void NetworkCard_Item::add_dhcp_server_address(const char* value, size_t size) {
  dhcp_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.proto.NetworkCard.Item.dhcp_server_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCard_Item::dhcp_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.proto.NetworkCard.Item.dhcp_server_address)
  return dhcp_server_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCard_Item::mutable_dhcp_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.NetworkCard.Item.dhcp_server_address)
  return &dhcp_server_address_;
}

// repeated string dns_server_address = 14;
inline int NetworkCard_Item::dns_server_address_size() const {
  return dns_server_address_.size();
}
inline void NetworkCard_Item::clear_dns_server_address() {
  dns_server_address_.Clear();
}
inline const ::std::string& NetworkCard_Item::dns_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.Item.dns_server_address)
  return dns_server_address_.Get(index);
}
inline ::std::string* NetworkCard_Item::mutable_dns_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.Item.dns_server_address)
  return dns_server_address_.Mutable(index);
}
inline void NetworkCard_Item::set_dns_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetworkCard_Item::set_dns_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.NetworkCard.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetworkCard_Item::set_dns_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.proto.NetworkCard.Item.dns_server_address)
}
inline void NetworkCard_Item::set_dns_server_address(int index, const char* value, size_t size) {
  dns_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.NetworkCard.Item.dns_server_address)
}
inline ::std::string* NetworkCard_Item::add_dns_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.proto.NetworkCard.Item.dns_server_address)
  return dns_server_address_.Add();
}
inline void NetworkCard_Item::add_dns_server_address(const ::std::string& value) {
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.dns_server_address)
}
#if LANG_CXX11
inline void NetworkCard_Item::add_dns_server_address(::std::string&& value) {
  dns_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.Item.dns_server_address)
}
#endif
inline void NetworkCard_Item::add_dns_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.proto.NetworkCard.Item.dns_server_address)
}
inline void NetworkCard_Item::add_dns_server_address(const char* value, size_t size) {
  dns_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.proto.NetworkCard.Item.dns_server_address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCard_Item::dns_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.proto.NetworkCard.Item.dns_server_address)
  return dns_server_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCard_Item::mutable_dns_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.NetworkCard.Item.dns_server_address)
  return &dns_server_address_;
}

// -------------------------------------------------------------------

// NetworkCard

// repeated .aspia.proto.NetworkCard.Item item = 1;
inline int NetworkCard::item_size() const {
  return item_.size();
}
inline void NetworkCard::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::NetworkCard_Item& NetworkCard::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.NetworkCard.item)
  return item_.Get(index);
}
inline ::aspia::proto::NetworkCard_Item* NetworkCard::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.NetworkCard.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::NetworkCard_Item* NetworkCard::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.NetworkCard.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item >*
NetworkCard::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.NetworkCard.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::NetworkCard_Item >&
NetworkCard::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.NetworkCard.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fnetwork_5fcard_2eproto__INCLUDED

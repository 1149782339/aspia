// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_optical_drive.proto

#include "category_optical_drive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class OpticalDrive_FeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalDrive_Features>
      _instance;
} _OpticalDrive_Features_default_instance_;
class OpticalDrive_MediaTypes_MediaTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalDrive_MediaTypes_MediaType>
      _instance;
} _OpticalDrive_MediaTypes_MediaType_default_instance_;
class OpticalDrive_MediaTypesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalDrive_MediaTypes>
      _instance;
} _OpticalDrive_MediaTypes_default_instance_;
class OpticalDrive_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalDrive_Item>
      _instance;
} _OpticalDrive_Item_default_instance_;
class OpticalDriveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalDrive>
      _instance;
} _OpticalDrive_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5foptical_5fdrive_2eproto {
void InitDefaultsOpticalDrive_FeaturesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_OpticalDrive_Features_default_instance_;
    new (ptr) ::aspia::proto::OpticalDrive_Features();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpticalDrive_Features::InitAsDefaultInstance();
}

void InitDefaultsOpticalDrive_Features() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalDrive_FeaturesImpl);
}

void InitDefaultsOpticalDrive_MediaTypes_MediaTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_OpticalDrive_MediaTypes_MediaType_default_instance_;
    new (ptr) ::aspia::proto::OpticalDrive_MediaTypes_MediaType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpticalDrive_MediaTypes_MediaType::InitAsDefaultInstance();
}

void InitDefaultsOpticalDrive_MediaTypes_MediaType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalDrive_MediaTypes_MediaTypeImpl);
}

void InitDefaultsOpticalDrive_MediaTypesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes_MediaType();
  {
    void* ptr = &::aspia::proto::_OpticalDrive_MediaTypes_default_instance_;
    new (ptr) ::aspia::proto::OpticalDrive_MediaTypes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpticalDrive_MediaTypes::InitAsDefaultInstance();
}

void InitDefaultsOpticalDrive_MediaTypes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalDrive_MediaTypesImpl);
}

void InitDefaultsOpticalDrive_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Features();
  protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes();
  {
    void* ptr = &::aspia::proto::_OpticalDrive_Item_default_instance_;
    new (ptr) ::aspia::proto::OpticalDrive_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpticalDrive_Item::InitAsDefaultInstance();
}

void InitDefaultsOpticalDrive_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalDrive_ItemImpl);
}

void InitDefaultsOpticalDriveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Item();
  {
    void* ptr = &::aspia::proto::_OpticalDrive_default_instance_;
    new (ptr) ::aspia::proto::OpticalDrive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpticalDrive::InitAsDefaultInstance();
}

void InitDefaultsOpticalDrive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalDriveImpl);
}

}  // namespace protobuf_category_5foptical_5fdrive_2eproto
namespace aspia {
namespace proto {
bool OpticalDrive_Interface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpticalDrive_Interface OpticalDrive::INTERFACE_UNKNOWN;
const OpticalDrive_Interface OpticalDrive::INTERFACE_UNSPECIFIED;
const OpticalDrive_Interface OpticalDrive::INTERFACE_SCSI;
const OpticalDrive_Interface OpticalDrive::INTERFACE_ATAPI;
const OpticalDrive_Interface OpticalDrive::INTERFACE_IEEE1394_1995;
const OpticalDrive_Interface OpticalDrive::INTERFACE_IEEE1394A;
const OpticalDrive_Interface OpticalDrive::INTERFACE_FIBRE_CHANNEL;
const OpticalDrive_Interface OpticalDrive::INTERFACE_IEEE1394B;
const OpticalDrive_Interface OpticalDrive::INTERFACE_SERIAL_ATAPI;
const OpticalDrive_Interface OpticalDrive::INTERFACE_USB;
const OpticalDrive_Interface OpticalDrive::Interface_MIN;
const OpticalDrive_Interface OpticalDrive::Interface_MAX;
const int OpticalDrive::Interface_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OpticalDrive_Features::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalDrive_Features::kHasSmartFieldNumber;
const int OpticalDrive_Features::kHasPowerManagementFieldNumber;
const int OpticalDrive_Features::kHasCdTextFieldNumber;
const int OpticalDrive_Features::kHasCssFieldNumber;
const int OpticalDrive_Features::kHasCprmFieldNumber;
const int OpticalDrive_Features::kHasAacsFieldNumber;
const int OpticalDrive_Features::kHasVcpsFieldNumber;
const int OpticalDrive_Features::kHasC2ErrorPointersFieldNumber;
const int OpticalDrive_Features::kHasHybridDiskFieldNumber;
const int OpticalDrive_Features::kHasDvdDownloadDiskRecordingFieldNumber;
const int OpticalDrive_Features::kHasLayerJumpRecordingFieldNumber;
const int OpticalDrive_Features::kHasMountRainierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalDrive_Features::OpticalDrive_Features()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Features();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpticalDrive.Features)
}
OpticalDrive_Features::OpticalDrive_Features(const OpticalDrive_Features& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_smart_, &from.has_smart_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_mount_rainier_) -
    reinterpret_cast<char*>(&has_smart_)) + sizeof(has_mount_rainier_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpticalDrive.Features)
}

void OpticalDrive_Features::SharedCtor() {
  ::memset(&has_smart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_mount_rainier_) -
      reinterpret_cast<char*>(&has_smart_)) + sizeof(has_mount_rainier_));
  _cached_size_ = 0;
}

OpticalDrive_Features::~OpticalDrive_Features() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpticalDrive.Features)
  SharedDtor();
}

void OpticalDrive_Features::SharedDtor() {
}

void OpticalDrive_Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpticalDrive_Features& OpticalDrive_Features::default_instance() {
  ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Features();
  return *internal_default_instance();
}

OpticalDrive_Features* OpticalDrive_Features::New(::google::protobuf::Arena* arena) const {
  OpticalDrive_Features* n = new OpticalDrive_Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalDrive_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpticalDrive.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&has_smart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_mount_rainier_) -
      reinterpret_cast<char*>(&has_smart_)) + sizeof(has_mount_rainier_));
  _internal_metadata_.Clear();
}

bool OpticalDrive_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpticalDrive.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool has_smart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_smart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_power_management = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_power_management_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_cd_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_cd_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_css = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_css_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_cprm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_cprm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_aacs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_aacs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_vcps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_vcps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_c2_error_pointers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_c2_error_pointers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_hybrid_disk = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_hybrid_disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_dvd_download_disk_recording = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_dvd_download_disk_recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_layer_jump_recording = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_layer_jump_recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_mount_rainier = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_mount_rainier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpticalDrive.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpticalDrive.Features)
  return false;
#undef DO_
}

void OpticalDrive_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpticalDrive.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_smart = 1;
  if (this->has_smart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_smart(), output);
  }

  // bool has_power_management = 2;
  if (this->has_power_management() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_power_management(), output);
  }

  // bool has_cd_text = 3;
  if (this->has_cd_text() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_cd_text(), output);
  }

  // bool has_css = 4;
  if (this->has_css() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_css(), output);
  }

  // bool has_cprm = 5;
  if (this->has_cprm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_cprm(), output);
  }

  // bool has_aacs = 6;
  if (this->has_aacs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_aacs(), output);
  }

  // bool has_vcps = 7;
  if (this->has_vcps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_vcps(), output);
  }

  // bool has_c2_error_pointers = 8;
  if (this->has_c2_error_pointers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_c2_error_pointers(), output);
  }

  // bool has_hybrid_disk = 9;
  if (this->has_hybrid_disk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_hybrid_disk(), output);
  }

  // bool has_dvd_download_disk_recording = 10;
  if (this->has_dvd_download_disk_recording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_dvd_download_disk_recording(), output);
  }

  // bool has_layer_jump_recording = 11;
  if (this->has_layer_jump_recording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_layer_jump_recording(), output);
  }

  // bool has_mount_rainier = 12;
  if (this->has_mount_rainier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_mount_rainier(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpticalDrive.Features)
}

size_t OpticalDrive_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpticalDrive.Features)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bool has_smart = 1;
  if (this->has_smart() != 0) {
    total_size += 1 + 1;
  }

  // bool has_power_management = 2;
  if (this->has_power_management() != 0) {
    total_size += 1 + 1;
  }

  // bool has_cd_text = 3;
  if (this->has_cd_text() != 0) {
    total_size += 1 + 1;
  }

  // bool has_css = 4;
  if (this->has_css() != 0) {
    total_size += 1 + 1;
  }

  // bool has_cprm = 5;
  if (this->has_cprm() != 0) {
    total_size += 1 + 1;
  }

  // bool has_aacs = 6;
  if (this->has_aacs() != 0) {
    total_size += 1 + 1;
  }

  // bool has_vcps = 7;
  if (this->has_vcps() != 0) {
    total_size += 1 + 1;
  }

  // bool has_c2_error_pointers = 8;
  if (this->has_c2_error_pointers() != 0) {
    total_size += 1 + 1;
  }

  // bool has_hybrid_disk = 9;
  if (this->has_hybrid_disk() != 0) {
    total_size += 1 + 1;
  }

  // bool has_dvd_download_disk_recording = 10;
  if (this->has_dvd_download_disk_recording() != 0) {
    total_size += 1 + 1;
  }

  // bool has_layer_jump_recording = 11;
  if (this->has_layer_jump_recording() != 0) {
    total_size += 1 + 1;
  }

  // bool has_mount_rainier = 12;
  if (this->has_mount_rainier() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalDrive_Features::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpticalDrive_Features*>(&from));
}

void OpticalDrive_Features::MergeFrom(const OpticalDrive_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpticalDrive.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_smart() != 0) {
    set_has_smart(from.has_smart());
  }
  if (from.has_power_management() != 0) {
    set_has_power_management(from.has_power_management());
  }
  if (from.has_cd_text() != 0) {
    set_has_cd_text(from.has_cd_text());
  }
  if (from.has_css() != 0) {
    set_has_css(from.has_css());
  }
  if (from.has_cprm() != 0) {
    set_has_cprm(from.has_cprm());
  }
  if (from.has_aacs() != 0) {
    set_has_aacs(from.has_aacs());
  }
  if (from.has_vcps() != 0) {
    set_has_vcps(from.has_vcps());
  }
  if (from.has_c2_error_pointers() != 0) {
    set_has_c2_error_pointers(from.has_c2_error_pointers());
  }
  if (from.has_hybrid_disk() != 0) {
    set_has_hybrid_disk(from.has_hybrid_disk());
  }
  if (from.has_dvd_download_disk_recording() != 0) {
    set_has_dvd_download_disk_recording(from.has_dvd_download_disk_recording());
  }
  if (from.has_layer_jump_recording() != 0) {
    set_has_layer_jump_recording(from.has_layer_jump_recording());
  }
  if (from.has_mount_rainier() != 0) {
    set_has_mount_rainier(from.has_mount_rainier());
  }
}

void OpticalDrive_Features::CopyFrom(const OpticalDrive_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpticalDrive.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalDrive_Features::IsInitialized() const {
  return true;
}

void OpticalDrive_Features::Swap(OpticalDrive_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalDrive_Features::InternalSwap(OpticalDrive_Features* other) {
  using std::swap;
  swap(has_smart_, other->has_smart_);
  swap(has_power_management_, other->has_power_management_);
  swap(has_cd_text_, other->has_cd_text_);
  swap(has_css_, other->has_css_);
  swap(has_cprm_, other->has_cprm_);
  swap(has_aacs_, other->has_aacs_);
  swap(has_vcps_, other->has_vcps_);
  swap(has_c2_error_pointers_, other->has_c2_error_pointers_);
  swap(has_hybrid_disk_, other->has_hybrid_disk_);
  swap(has_dvd_download_disk_recording_, other->has_dvd_download_disk_recording_);
  swap(has_layer_jump_recording_, other->has_layer_jump_recording_);
  swap(has_mount_rainier_, other->has_mount_rainier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpticalDrive_Features::GetTypeName() const {
  return "aspia.proto.OpticalDrive.Features";
}


// ===================================================================

void OpticalDrive_MediaTypes_MediaType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalDrive_MediaTypes_MediaType::kReadFieldNumber;
const int OpticalDrive_MediaTypes_MediaType::kWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalDrive_MediaTypes_MediaType::OpticalDrive_MediaTypes_MediaType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes_MediaType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpticalDrive.MediaTypes.MediaType)
}
OpticalDrive_MediaTypes_MediaType::OpticalDrive_MediaTypes_MediaType(const OpticalDrive_MediaTypes_MediaType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&read_, &from.read_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_) -
    reinterpret_cast<char*>(&read_)) + sizeof(write_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpticalDrive.MediaTypes.MediaType)
}

void OpticalDrive_MediaTypes_MediaType::SharedCtor() {
  ::memset(&read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_) -
      reinterpret_cast<char*>(&read_)) + sizeof(write_));
  _cached_size_ = 0;
}

OpticalDrive_MediaTypes_MediaType::~OpticalDrive_MediaTypes_MediaType() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  SharedDtor();
}

void OpticalDrive_MediaTypes_MediaType::SharedDtor() {
}

void OpticalDrive_MediaTypes_MediaType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpticalDrive_MediaTypes_MediaType& OpticalDrive_MediaTypes_MediaType::default_instance() {
  ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes_MediaType();
  return *internal_default_instance();
}

OpticalDrive_MediaTypes_MediaType* OpticalDrive_MediaTypes_MediaType::New(::google::protobuf::Arena* arena) const {
  OpticalDrive_MediaTypes_MediaType* n = new OpticalDrive_MediaTypes_MediaType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalDrive_MediaTypes_MediaType::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_) -
      reinterpret_cast<char*>(&read_)) + sizeof(write_));
  _internal_metadata_.Clear();
}

bool OpticalDrive_MediaTypes_MediaType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool read = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool write = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  return false;
#undef DO_
}

void OpticalDrive_MediaTypes_MediaType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool read = 1;
  if (this->read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->read(), output);
  }

  // bool write = 2;
  if (this->write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->write(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpticalDrive.MediaTypes.MediaType)
}

size_t OpticalDrive_MediaTypes_MediaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bool read = 1;
  if (this->read() != 0) {
    total_size += 1 + 1;
  }

  // bool write = 2;
  if (this->write() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalDrive_MediaTypes_MediaType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpticalDrive_MediaTypes_MediaType*>(&from));
}

void OpticalDrive_MediaTypes_MediaType::MergeFrom(const OpticalDrive_MediaTypes_MediaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read() != 0) {
    set_read(from.read());
  }
  if (from.write() != 0) {
    set_write(from.write());
  }
}

void OpticalDrive_MediaTypes_MediaType::CopyFrom(const OpticalDrive_MediaTypes_MediaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpticalDrive.MediaTypes.MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalDrive_MediaTypes_MediaType::IsInitialized() const {
  return true;
}

void OpticalDrive_MediaTypes_MediaType::Swap(OpticalDrive_MediaTypes_MediaType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalDrive_MediaTypes_MediaType::InternalSwap(OpticalDrive_MediaTypes_MediaType* other) {
  using std::swap;
  swap(read_, other->read_);
  swap(write_, other->write_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpticalDrive_MediaTypes_MediaType::GetTypeName() const {
  return "aspia.proto.OpticalDrive.MediaTypes.MediaType";
}


// ===================================================================

void OpticalDrive_MediaTypes::InitAsDefaultInstance() {
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->bd_rom_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->bd_r_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->bd_re_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->hd_dvd_rom_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->hd_dvd_r_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->hd_dvd_ram_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_rom_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_plus_r_dl_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_plus_rw_dl_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_plus_r_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_plus_rw_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_r_dl_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_rw_dl_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_r_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_rw_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->dvd_ram_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->cd_rom_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->cd_r_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
  ::aspia::proto::_OpticalDrive_MediaTypes_default_instance_._instance.get_mutable()->cd_rw_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes_MediaType*>(
      ::aspia::proto::OpticalDrive_MediaTypes_MediaType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalDrive_MediaTypes::kBdRomFieldNumber;
const int OpticalDrive_MediaTypes::kBdRFieldNumber;
const int OpticalDrive_MediaTypes::kBdReFieldNumber;
const int OpticalDrive_MediaTypes::kHdDvdRomFieldNumber;
const int OpticalDrive_MediaTypes::kHdDvdRFieldNumber;
const int OpticalDrive_MediaTypes::kHdDvdRamFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRomFieldNumber;
const int OpticalDrive_MediaTypes::kDvdPlusRDlFieldNumber;
const int OpticalDrive_MediaTypes::kDvdPlusRwDlFieldNumber;
const int OpticalDrive_MediaTypes::kDvdPlusRFieldNumber;
const int OpticalDrive_MediaTypes::kDvdPlusRwFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRDlFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRwDlFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRwFieldNumber;
const int OpticalDrive_MediaTypes::kDvdRamFieldNumber;
const int OpticalDrive_MediaTypes::kCdRomFieldNumber;
const int OpticalDrive_MediaTypes::kCdRFieldNumber;
const int OpticalDrive_MediaTypes::kCdRwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalDrive_MediaTypes::OpticalDrive_MediaTypes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpticalDrive.MediaTypes)
}
OpticalDrive_MediaTypes::OpticalDrive_MediaTypes(const OpticalDrive_MediaTypes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bd_rom()) {
    bd_rom_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.bd_rom_);
  } else {
    bd_rom_ = NULL;
  }
  if (from.has_bd_r()) {
    bd_r_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.bd_r_);
  } else {
    bd_r_ = NULL;
  }
  if (from.has_bd_re()) {
    bd_re_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.bd_re_);
  } else {
    bd_re_ = NULL;
  }
  if (from.has_hd_dvd_rom()) {
    hd_dvd_rom_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.hd_dvd_rom_);
  } else {
    hd_dvd_rom_ = NULL;
  }
  if (from.has_hd_dvd_r()) {
    hd_dvd_r_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.hd_dvd_r_);
  } else {
    hd_dvd_r_ = NULL;
  }
  if (from.has_hd_dvd_ram()) {
    hd_dvd_ram_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.hd_dvd_ram_);
  } else {
    hd_dvd_ram_ = NULL;
  }
  if (from.has_dvd_rom()) {
    dvd_rom_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_rom_);
  } else {
    dvd_rom_ = NULL;
  }
  if (from.has_dvd_plus_r_dl()) {
    dvd_plus_r_dl_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_plus_r_dl_);
  } else {
    dvd_plus_r_dl_ = NULL;
  }
  if (from.has_dvd_plus_rw_dl()) {
    dvd_plus_rw_dl_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_plus_rw_dl_);
  } else {
    dvd_plus_rw_dl_ = NULL;
  }
  if (from.has_dvd_plus_r()) {
    dvd_plus_r_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_plus_r_);
  } else {
    dvd_plus_r_ = NULL;
  }
  if (from.has_dvd_plus_rw()) {
    dvd_plus_rw_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_plus_rw_);
  } else {
    dvd_plus_rw_ = NULL;
  }
  if (from.has_dvd_r_dl()) {
    dvd_r_dl_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_r_dl_);
  } else {
    dvd_r_dl_ = NULL;
  }
  if (from.has_dvd_rw_dl()) {
    dvd_rw_dl_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_rw_dl_);
  } else {
    dvd_rw_dl_ = NULL;
  }
  if (from.has_dvd_r()) {
    dvd_r_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_r_);
  } else {
    dvd_r_ = NULL;
  }
  if (from.has_dvd_rw()) {
    dvd_rw_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_rw_);
  } else {
    dvd_rw_ = NULL;
  }
  if (from.has_dvd_ram()) {
    dvd_ram_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.dvd_ram_);
  } else {
    dvd_ram_ = NULL;
  }
  if (from.has_cd_rom()) {
    cd_rom_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.cd_rom_);
  } else {
    cd_rom_ = NULL;
  }
  if (from.has_cd_r()) {
    cd_r_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.cd_r_);
  } else {
    cd_r_ = NULL;
  }
  if (from.has_cd_rw()) {
    cd_rw_ = new ::aspia::proto::OpticalDrive_MediaTypes_MediaType(*from.cd_rw_);
  } else {
    cd_rw_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpticalDrive.MediaTypes)
}

void OpticalDrive_MediaTypes::SharedCtor() {
  ::memset(&bd_rom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cd_rw_) -
      reinterpret_cast<char*>(&bd_rom_)) + sizeof(cd_rw_));
  _cached_size_ = 0;
}

OpticalDrive_MediaTypes::~OpticalDrive_MediaTypes() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpticalDrive.MediaTypes)
  SharedDtor();
}

void OpticalDrive_MediaTypes::SharedDtor() {
  if (this != internal_default_instance()) delete bd_rom_;
  if (this != internal_default_instance()) delete bd_r_;
  if (this != internal_default_instance()) delete bd_re_;
  if (this != internal_default_instance()) delete hd_dvd_rom_;
  if (this != internal_default_instance()) delete hd_dvd_r_;
  if (this != internal_default_instance()) delete hd_dvd_ram_;
  if (this != internal_default_instance()) delete dvd_rom_;
  if (this != internal_default_instance()) delete dvd_plus_r_dl_;
  if (this != internal_default_instance()) delete dvd_plus_rw_dl_;
  if (this != internal_default_instance()) delete dvd_plus_r_;
  if (this != internal_default_instance()) delete dvd_plus_rw_;
  if (this != internal_default_instance()) delete dvd_r_dl_;
  if (this != internal_default_instance()) delete dvd_rw_dl_;
  if (this != internal_default_instance()) delete dvd_r_;
  if (this != internal_default_instance()) delete dvd_rw_;
  if (this != internal_default_instance()) delete dvd_ram_;
  if (this != internal_default_instance()) delete cd_rom_;
  if (this != internal_default_instance()) delete cd_r_;
  if (this != internal_default_instance()) delete cd_rw_;
}

void OpticalDrive_MediaTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpticalDrive_MediaTypes& OpticalDrive_MediaTypes::default_instance() {
  ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_MediaTypes();
  return *internal_default_instance();
}

OpticalDrive_MediaTypes* OpticalDrive_MediaTypes::New(::google::protobuf::Arena* arena) const {
  OpticalDrive_MediaTypes* n = new OpticalDrive_MediaTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalDrive_MediaTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpticalDrive.MediaTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bd_rom_ != NULL) {
    delete bd_rom_;
  }
  bd_rom_ = NULL;
  if (GetArenaNoVirtual() == NULL && bd_r_ != NULL) {
    delete bd_r_;
  }
  bd_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && bd_re_ != NULL) {
    delete bd_re_;
  }
  bd_re_ = NULL;
  if (GetArenaNoVirtual() == NULL && hd_dvd_rom_ != NULL) {
    delete hd_dvd_rom_;
  }
  hd_dvd_rom_ = NULL;
  if (GetArenaNoVirtual() == NULL && hd_dvd_r_ != NULL) {
    delete hd_dvd_r_;
  }
  hd_dvd_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && hd_dvd_ram_ != NULL) {
    delete hd_dvd_ram_;
  }
  hd_dvd_ram_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_rom_ != NULL) {
    delete dvd_rom_;
  }
  dvd_rom_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_plus_r_dl_ != NULL) {
    delete dvd_plus_r_dl_;
  }
  dvd_plus_r_dl_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_plus_rw_dl_ != NULL) {
    delete dvd_plus_rw_dl_;
  }
  dvd_plus_rw_dl_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_plus_r_ != NULL) {
    delete dvd_plus_r_;
  }
  dvd_plus_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_plus_rw_ != NULL) {
    delete dvd_plus_rw_;
  }
  dvd_plus_rw_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_r_dl_ != NULL) {
    delete dvd_r_dl_;
  }
  dvd_r_dl_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_rw_dl_ != NULL) {
    delete dvd_rw_dl_;
  }
  dvd_rw_dl_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_r_ != NULL) {
    delete dvd_r_;
  }
  dvd_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_rw_ != NULL) {
    delete dvd_rw_;
  }
  dvd_rw_ = NULL;
  if (GetArenaNoVirtual() == NULL && dvd_ram_ != NULL) {
    delete dvd_ram_;
  }
  dvd_ram_ = NULL;
  if (GetArenaNoVirtual() == NULL && cd_rom_ != NULL) {
    delete cd_rom_;
  }
  cd_rom_ = NULL;
  if (GetArenaNoVirtual() == NULL && cd_r_ != NULL) {
    delete cd_r_;
  }
  cd_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && cd_rw_ != NULL) {
    delete cd_rw_;
  }
  cd_rw_ = NULL;
  _internal_metadata_.Clear();
}

bool OpticalDrive_MediaTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpticalDrive.MediaTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_rom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bd_rom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_r = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bd_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_re = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bd_re()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_rom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hd_dvd_rom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_r = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hd_dvd_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_ram = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hd_dvd_ram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_rom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r_dl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_plus_r_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw_dl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_plus_rw_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_plus_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_plus_rw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r_dl = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_r_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw_dl = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_rw_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_rw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_ram = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dvd_ram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rom = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cd_rom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_r = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cd_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rw = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cd_rw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpticalDrive.MediaTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpticalDrive.MediaTypes)
  return false;
#undef DO_
}

void OpticalDrive_MediaTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpticalDrive.MediaTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_rom = 1;
  if (this->has_bd_rom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->bd_rom_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_r = 2;
  if (this->has_bd_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bd_r_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_re = 3;
  if (this->has_bd_re()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->bd_re_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_rom = 4;
  if (this->has_hd_dvd_rom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->hd_dvd_rom_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_r = 5;
  if (this->has_hd_dvd_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->hd_dvd_r_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_ram = 6;
  if (this->has_hd_dvd_ram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->hd_dvd_ram_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rom = 7;
  if (this->has_dvd_rom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->dvd_rom_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r_dl = 8;
  if (this->has_dvd_plus_r_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->dvd_plus_r_dl_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw_dl = 9;
  if (this->has_dvd_plus_rw_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->dvd_plus_rw_dl_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r = 10;
  if (this->has_dvd_plus_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->dvd_plus_r_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw = 11;
  if (this->has_dvd_plus_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->dvd_plus_rw_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r_dl = 12;
  if (this->has_dvd_r_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->dvd_r_dl_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw_dl = 13;
  if (this->has_dvd_rw_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->dvd_rw_dl_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r = 14;
  if (this->has_dvd_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->dvd_r_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw = 15;
  if (this->has_dvd_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->dvd_rw_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_ram = 16;
  if (this->has_dvd_ram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->dvd_ram_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rom = 17;
  if (this->has_cd_rom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->cd_rom_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_r = 18;
  if (this->has_cd_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->cd_r_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rw = 19;
  if (this->has_cd_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, *this->cd_rw_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpticalDrive.MediaTypes)
}

size_t OpticalDrive_MediaTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpticalDrive.MediaTypes)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_rom = 1;
  if (this->has_bd_rom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bd_rom_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_r = 2;
  if (this->has_bd_r()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bd_r_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType bd_re = 3;
  if (this->has_bd_re()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bd_re_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_rom = 4;
  if (this->has_hd_dvd_rom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hd_dvd_rom_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_r = 5;
  if (this->has_hd_dvd_r()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hd_dvd_r_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType hd_dvd_ram = 6;
  if (this->has_hd_dvd_ram()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hd_dvd_ram_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rom = 7;
  if (this->has_dvd_rom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_rom_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r_dl = 8;
  if (this->has_dvd_plus_r_dl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_plus_r_dl_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw_dl = 9;
  if (this->has_dvd_plus_rw_dl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_plus_rw_dl_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_r = 10;
  if (this->has_dvd_plus_r()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_plus_r_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_plus_rw = 11;
  if (this->has_dvd_plus_rw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_plus_rw_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r_dl = 12;
  if (this->has_dvd_r_dl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_r_dl_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw_dl = 13;
  if (this->has_dvd_rw_dl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_rw_dl_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_r = 14;
  if (this->has_dvd_r()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_r_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_rw = 15;
  if (this->has_dvd_rw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_rw_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType dvd_ram = 16;
  if (this->has_dvd_ram()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dvd_ram_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rom = 17;
  if (this->has_cd_rom()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cd_rom_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_r = 18;
  if (this->has_cd_r()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cd_r_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes.MediaType cd_rw = 19;
  if (this->has_cd_rw()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cd_rw_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalDrive_MediaTypes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpticalDrive_MediaTypes*>(&from));
}

void OpticalDrive_MediaTypes::MergeFrom(const OpticalDrive_MediaTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpticalDrive.MediaTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bd_rom()) {
    mutable_bd_rom()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.bd_rom());
  }
  if (from.has_bd_r()) {
    mutable_bd_r()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.bd_r());
  }
  if (from.has_bd_re()) {
    mutable_bd_re()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.bd_re());
  }
  if (from.has_hd_dvd_rom()) {
    mutable_hd_dvd_rom()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.hd_dvd_rom());
  }
  if (from.has_hd_dvd_r()) {
    mutable_hd_dvd_r()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.hd_dvd_r());
  }
  if (from.has_hd_dvd_ram()) {
    mutable_hd_dvd_ram()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.hd_dvd_ram());
  }
  if (from.has_dvd_rom()) {
    mutable_dvd_rom()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_rom());
  }
  if (from.has_dvd_plus_r_dl()) {
    mutable_dvd_plus_r_dl()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_plus_r_dl());
  }
  if (from.has_dvd_plus_rw_dl()) {
    mutable_dvd_plus_rw_dl()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_plus_rw_dl());
  }
  if (from.has_dvd_plus_r()) {
    mutable_dvd_plus_r()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_plus_r());
  }
  if (from.has_dvd_plus_rw()) {
    mutable_dvd_plus_rw()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_plus_rw());
  }
  if (from.has_dvd_r_dl()) {
    mutable_dvd_r_dl()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_r_dl());
  }
  if (from.has_dvd_rw_dl()) {
    mutable_dvd_rw_dl()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_rw_dl());
  }
  if (from.has_dvd_r()) {
    mutable_dvd_r()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_r());
  }
  if (from.has_dvd_rw()) {
    mutable_dvd_rw()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_rw());
  }
  if (from.has_dvd_ram()) {
    mutable_dvd_ram()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.dvd_ram());
  }
  if (from.has_cd_rom()) {
    mutable_cd_rom()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.cd_rom());
  }
  if (from.has_cd_r()) {
    mutable_cd_r()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.cd_r());
  }
  if (from.has_cd_rw()) {
    mutable_cd_rw()->::aspia::proto::OpticalDrive_MediaTypes_MediaType::MergeFrom(from.cd_rw());
  }
}

void OpticalDrive_MediaTypes::CopyFrom(const OpticalDrive_MediaTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpticalDrive.MediaTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalDrive_MediaTypes::IsInitialized() const {
  return true;
}

void OpticalDrive_MediaTypes::Swap(OpticalDrive_MediaTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalDrive_MediaTypes::InternalSwap(OpticalDrive_MediaTypes* other) {
  using std::swap;
  swap(bd_rom_, other->bd_rom_);
  swap(bd_r_, other->bd_r_);
  swap(bd_re_, other->bd_re_);
  swap(hd_dvd_rom_, other->hd_dvd_rom_);
  swap(hd_dvd_r_, other->hd_dvd_r_);
  swap(hd_dvd_ram_, other->hd_dvd_ram_);
  swap(dvd_rom_, other->dvd_rom_);
  swap(dvd_plus_r_dl_, other->dvd_plus_r_dl_);
  swap(dvd_plus_rw_dl_, other->dvd_plus_rw_dl_);
  swap(dvd_plus_r_, other->dvd_plus_r_);
  swap(dvd_plus_rw_, other->dvd_plus_rw_);
  swap(dvd_r_dl_, other->dvd_r_dl_);
  swap(dvd_rw_dl_, other->dvd_rw_dl_);
  swap(dvd_r_, other->dvd_r_);
  swap(dvd_rw_, other->dvd_rw_);
  swap(dvd_ram_, other->dvd_ram_);
  swap(cd_rom_, other->cd_rom_);
  swap(cd_r_, other->cd_r_);
  swap(cd_rw_, other->cd_rw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpticalDrive_MediaTypes::GetTypeName() const {
  return "aspia.proto.OpticalDrive.MediaTypes";
}


// ===================================================================

void OpticalDrive_Item::InitAsDefaultInstance() {
  ::aspia::proto::_OpticalDrive_Item_default_instance_._instance.get_mutable()->features_ = const_cast< ::aspia::proto::OpticalDrive_Features*>(
      ::aspia::proto::OpticalDrive_Features::internal_default_instance());
  ::aspia::proto::_OpticalDrive_Item_default_instance_._instance.get_mutable()->media_types_ = const_cast< ::aspia::proto::OpticalDrive_MediaTypes*>(
      ::aspia::proto::OpticalDrive_MediaTypes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalDrive_Item::kDeviceNameFieldNumber;
const int OpticalDrive_Item::kVendorCodeFieldNumber;
const int OpticalDrive_Item::kFirmwareVersionFieldNumber;
const int OpticalDrive_Item::kInterfaceFieldNumber;
const int OpticalDrive_Item::kBufferSizeFieldNumber;
const int OpticalDrive_Item::kRegionCodeFieldNumber;
const int OpticalDrive_Item::kRegionCodeVendorChangesFieldNumber;
const int OpticalDrive_Item::kRegionCodeUserChangesFieldNumber;
const int OpticalDrive_Item::kFeaturesFieldNumber;
const int OpticalDrive_Item::kMediaTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalDrive_Item::OpticalDrive_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpticalDrive.Item)
}
OpticalDrive_Item::OpticalDrive_Item(const OpticalDrive_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  vendor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendor_code().size() > 0) {
    vendor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_code_);
  }
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_version().size() > 0) {
    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  if (from.has_features()) {
    features_ = new ::aspia::proto::OpticalDrive_Features(*from.features_);
  } else {
    features_ = NULL;
  }
  if (from.has_media_types()) {
    media_types_ = new ::aspia::proto::OpticalDrive_MediaTypes(*from.media_types_);
  } else {
    media_types_ = NULL;
  }
  ::memcpy(&buffer_size_, &from.buffer_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_code_user_changes_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(region_code_user_changes_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpticalDrive.Item)
}

void OpticalDrive_Item::SharedCtor() {
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_code_user_changes_) -
      reinterpret_cast<char*>(&features_)) + sizeof(region_code_user_changes_));
  _cached_size_ = 0;
}

OpticalDrive_Item::~OpticalDrive_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpticalDrive.Item)
  SharedDtor();
}

void OpticalDrive_Item::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
  if (this != internal_default_instance()) delete media_types_;
}

void OpticalDrive_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpticalDrive_Item& OpticalDrive_Item::default_instance() {
  ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive_Item();
  return *internal_default_instance();
}

OpticalDrive_Item* OpticalDrive_Item::New(::google::protobuf::Arena* arena) const {
  OpticalDrive_Item* n = new OpticalDrive_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalDrive_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpticalDrive.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && features_ != NULL) {
    delete features_;
  }
  features_ = NULL;
  if (GetArenaNoVirtual() == NULL && media_types_ != NULL) {
    delete media_types_;
  }
  media_types_ = NULL;
  ::memset(&buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_code_user_changes_) -
      reinterpret_cast<char*>(&buffer_size_)) + sizeof(region_code_user_changes_));
  _internal_metadata_.Clear();
}

bool OpticalDrive_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpticalDrive.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpticalDrive.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vendor_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor_code().data(), static_cast<int>(this->vendor_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpticalDrive.Item.vendor_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_version().data(), static_cast<int>(this->firmware_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpticalDrive.Item.firmware_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.Interface interface = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interface(static_cast< ::aspia::proto::OpticalDrive_Interface >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 buffer_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 region_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 region_code_vendor_changes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_code_vendor_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 region_code_user_changes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_code_user_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.Features features = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpticalDrive.MediaTypes media_types = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpticalDrive.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpticalDrive.Item)
  return false;
#undef DO_
}

void OpticalDrive_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpticalDrive.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpticalDrive.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // string vendor_code = 2;
  if (this->vendor_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor_code().data(), static_cast<int>(this->vendor_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpticalDrive.Item.vendor_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vendor_code(), output);
  }

  // string firmware_version = 3;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), static_cast<int>(this->firmware_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpticalDrive.Item.firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmware_version(), output);
  }

  // .aspia.proto.OpticalDrive.Interface interface = 4;
  if (this->interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->interface(), output);
  }

  // uint64 buffer_size = 5;
  if (this->buffer_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->buffer_size(), output);
  }

  // uint32 region_code = 6;
  if (this->region_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->region_code(), output);
  }

  // uint32 region_code_vendor_changes = 7;
  if (this->region_code_vendor_changes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->region_code_vendor_changes(), output);
  }

  // uint32 region_code_user_changes = 8;
  if (this->region_code_user_changes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->region_code_user_changes(), output);
  }

  // .aspia.proto.OpticalDrive.Features features = 9;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->features_, output);
  }

  // .aspia.proto.OpticalDrive.MediaTypes media_types = 10;
  if (this->has_media_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->media_types_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpticalDrive.Item)
}

size_t OpticalDrive_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpticalDrive.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string vendor_code = 2;
  if (this->vendor_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor_code());
  }

  // string firmware_version = 3;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_version());
  }

  // .aspia.proto.OpticalDrive.Features features = 9;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->features_);
  }

  // .aspia.proto.OpticalDrive.MediaTypes media_types = 10;
  if (this->has_media_types()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->media_types_);
  }

  // uint64 buffer_size = 5;
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer_size());
  }

  // .aspia.proto.OpticalDrive.Interface interface = 4;
  if (this->interface() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interface());
  }

  // uint32 region_code = 6;
  if (this->region_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_code());
  }

  // uint32 region_code_vendor_changes = 7;
  if (this->region_code_vendor_changes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_code_vendor_changes());
  }

  // uint32 region_code_user_changes = 8;
  if (this->region_code_user_changes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_code_user_changes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalDrive_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpticalDrive_Item*>(&from));
}

void OpticalDrive_Item::MergeFrom(const OpticalDrive_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpticalDrive.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.vendor_code().size() > 0) {

    vendor_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_code_);
  }
  if (from.firmware_version().size() > 0) {

    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  if (from.has_features()) {
    mutable_features()->::aspia::proto::OpticalDrive_Features::MergeFrom(from.features());
  }
  if (from.has_media_types()) {
    mutable_media_types()->::aspia::proto::OpticalDrive_MediaTypes::MergeFrom(from.media_types());
  }
  if (from.buffer_size() != 0) {
    set_buffer_size(from.buffer_size());
  }
  if (from.interface() != 0) {
    set_interface(from.interface());
  }
  if (from.region_code() != 0) {
    set_region_code(from.region_code());
  }
  if (from.region_code_vendor_changes() != 0) {
    set_region_code_vendor_changes(from.region_code_vendor_changes());
  }
  if (from.region_code_user_changes() != 0) {
    set_region_code_user_changes(from.region_code_user_changes());
  }
}

void OpticalDrive_Item::CopyFrom(const OpticalDrive_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpticalDrive.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalDrive_Item::IsInitialized() const {
  return true;
}

void OpticalDrive_Item::Swap(OpticalDrive_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalDrive_Item::InternalSwap(OpticalDrive_Item* other) {
  using std::swap;
  device_name_.Swap(&other->device_name_);
  vendor_code_.Swap(&other->vendor_code_);
  firmware_version_.Swap(&other->firmware_version_);
  swap(features_, other->features_);
  swap(media_types_, other->media_types_);
  swap(buffer_size_, other->buffer_size_);
  swap(interface_, other->interface_);
  swap(region_code_, other->region_code_);
  swap(region_code_vendor_changes_, other->region_code_vendor_changes_);
  swap(region_code_user_changes_, other->region_code_user_changes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpticalDrive_Item::GetTypeName() const {
  return "aspia.proto.OpticalDrive.Item";
}


// ===================================================================

void OpticalDrive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalDrive::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalDrive::OpticalDrive()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpticalDrive)
}
OpticalDrive::OpticalDrive(const OpticalDrive& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpticalDrive)
}

void OpticalDrive::SharedCtor() {
  _cached_size_ = 0;
}

OpticalDrive::~OpticalDrive() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpticalDrive)
  SharedDtor();
}

void OpticalDrive::SharedDtor() {
}

void OpticalDrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpticalDrive& OpticalDrive::default_instance() {
  ::protobuf_category_5foptical_5fdrive_2eproto::InitDefaultsOpticalDrive();
  return *internal_default_instance();
}

OpticalDrive* OpticalDrive::New(::google::protobuf::Arena* arena) const {
  OpticalDrive* n = new OpticalDrive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpticalDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool OpticalDrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpticalDrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.OpticalDrive.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpticalDrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpticalDrive)
  return false;
#undef DO_
}

void OpticalDrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpticalDrive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.OpticalDrive.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpticalDrive)
}

size_t OpticalDrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpticalDrive)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.OpticalDrive.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalDrive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpticalDrive*>(&from));
}

void OpticalDrive::MergeFrom(const OpticalDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpticalDrive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void OpticalDrive::CopyFrom(const OpticalDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpticalDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalDrive::IsInitialized() const {
  return true;
}

void OpticalDrive::Swap(OpticalDrive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalDrive::InternalSwap(OpticalDrive* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpticalDrive::GetTypeName() const {
  return "aspia.proto.OpticalDrive";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

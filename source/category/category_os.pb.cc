// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_os.proto

#include "category_os.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class OSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OS>
      _instance;
} _OS_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fos_2eproto {
void InitDefaultsOSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_OS_default_instance_;
    new (ptr) ::aspia::proto::OS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OS::InitAsDefaultInstance();
}

void InitDefaultsOS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOSImpl);
}

}  // namespace protobuf_category_5fos_2eproto
namespace aspia {
namespace proto {
bool OS_Architecture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OS_Architecture OS::ARCHITECTURE_UNKNOWN;
const OS_Architecture OS::ARCHITECTURE_X86;
const OS_Architecture OS::ARCHITECTURE_X86_64;
const OS_Architecture OS::Architecture_MIN;
const OS_Architecture OS::Architecture_MAX;
const int OS::Architecture_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OS::kOsNameFieldNumber;
const int OS::kOsVersionFieldNumber;
const int OS::kOsArchitectureFieldNumber;
const int OS::kCpuArchitectureFieldNumber;
const int OS::kInstallDateFieldNumber;
const int OS::kSystemRootFieldNumber;
const int OS::kUptimeFieldNumber;
const int OS::kComputerNameFieldNumber;
const int OS::kLocalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OS::OS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fos_2eproto::InitDefaultsOS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OS)
}
OS::OS(const OS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_name().size() > 0) {
    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_version().size() > 0) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  system_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_root().size() > 0) {
    system_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_root_);
  }
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.computer_name().size() > 0) {
    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  ::memcpy(&os_architecture_, &from.os_architecture_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_time_) -
    reinterpret_cast<char*>(&os_architecture_)) + sizeof(local_time_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OS)
}

void OS::SharedCtor() {
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_architecture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_time_) -
      reinterpret_cast<char*>(&os_architecture_)) + sizeof(local_time_));
  _cached_size_ = 0;
}

OS::~OS() {
  // @@protoc_insertion_point(destructor:aspia.proto.OS)
  SharedDtor();
}

void OS::SharedDtor() {
  os_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OS& OS::default_instance() {
  ::protobuf_category_5fos_2eproto::InitDefaultsOS();
  return *internal_default_instance();
}

OS* OS::New(::google::protobuf::Arena* arena) const {
  OS* n = new OS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OS::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_architecture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_time_) -
      reinterpret_cast<char*>(&os_architecture_)) + sizeof(local_time_));
  _internal_metadata_.Clear();
}

bool OS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string os_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_name().data(), static_cast<int>(this->os_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OS.os_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_version().data(), static_cast<int>(this->os_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OS.os_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OS.Architecture os_architecture = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_architecture(static_cast< ::aspia::proto::OS_Architecture >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OS.Architecture cpu_architecture = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cpu_architecture(static_cast< ::aspia::proto::OS_Architecture >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 install_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &install_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_root = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_root()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_root().data(), static_cast<int>(this->system_root().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OS.system_root"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uptime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string computer_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_computer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->computer_name().data(), static_cast<int>(this->computer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OS.computer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 local_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OS)
  return false;
#undef DO_
}

void OS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string os_name = 1;
  if (this->os_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_name().data(), static_cast<int>(this->os_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OS.os_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os_name(), output);
  }

  // string os_version = 2;
  if (this->os_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OS.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_version(), output);
  }

  // .aspia.proto.OS.Architecture os_architecture = 3;
  if (this->os_architecture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->os_architecture(), output);
  }

  // .aspia.proto.OS.Architecture cpu_architecture = 4;
  if (this->cpu_architecture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cpu_architecture(), output);
  }

  // int64 install_date = 5;
  if (this->install_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->install_date(), output);
  }

  // string system_root = 6;
  if (this->system_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_root().data(), static_cast<int>(this->system_root().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OS.system_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->system_root(), output);
  }

  // uint64 uptime = 7;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->uptime(), output);
  }

  // string computer_name = 8;
  if (this->computer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->computer_name().data(), static_cast<int>(this->computer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OS.computer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->computer_name(), output);
  }

  // int64 local_time = 9;
  if (this->local_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->local_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OS)
}

size_t OS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OS)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string os_name = 1;
  if (this->os_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());
  }

  // string os_version = 2;
  if (this->os_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_version());
  }

  // string system_root = 6;
  if (this->system_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_root());
  }

  // string computer_name = 8;
  if (this->computer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->computer_name());
  }

  // .aspia.proto.OS.Architecture os_architecture = 3;
  if (this->os_architecture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_architecture());
  }

  // .aspia.proto.OS.Architecture cpu_architecture = 4;
  if (this->cpu_architecture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cpu_architecture());
  }

  // int64 install_date = 5;
  if (this->install_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->install_date());
  }

  // uint64 uptime = 7;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  // int64 local_time = 9;
  if (this->local_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->local_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OS*>(&from));
}

void OS::MergeFrom(const OS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.os_name().size() > 0) {

    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  if (from.os_version().size() > 0) {

    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  if (from.system_root().size() > 0) {

    system_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_root_);
  }
  if (from.computer_name().size() > 0) {

    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.os_architecture() != 0) {
    set_os_architecture(from.os_architecture());
  }
  if (from.cpu_architecture() != 0) {
    set_cpu_architecture(from.cpu_architecture());
  }
  if (from.install_date() != 0) {
    set_install_date(from.install_date());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.local_time() != 0) {
    set_local_time(from.local_time());
  }
}

void OS::CopyFrom(const OS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OS::IsInitialized() const {
  return true;
}

void OS::Swap(OS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OS::InternalSwap(OS* other) {
  using std::swap;
  os_name_.Swap(&other->os_name_);
  os_version_.Swap(&other->os_version_);
  system_root_.Swap(&other->system_root_);
  computer_name_.Swap(&other->computer_name_);
  swap(os_architecture_, other->os_architecture_);
  swap(cpu_architecture_, other->cpu_architecture_);
  swap(install_date_, other->install_date_);
  swap(uptime_, other->uptime_);
  swap(local_time_, other->local_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OS::GetTypeName() const {
  return "aspia.proto.OS";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

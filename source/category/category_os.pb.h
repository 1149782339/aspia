// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_os.proto

#ifndef PROTOBUF_category_5fos_2eproto__INCLUDED
#define PROTOBUF_category_5fos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fos_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsOSImpl();
void InitDefaultsOS();
inline void InitDefaults() {
  InitDefaultsOS();
}
}  // namespace protobuf_category_5fos_2eproto
namespace aspia {
namespace proto {
class OS;
class OSDefaultTypeInternal;
extern OSDefaultTypeInternal _OS_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum OS_Architecture {
  OS_Architecture_ARCHITECTURE_UNKNOWN = 0,
  OS_Architecture_ARCHITECTURE_X86 = 1,
  OS_Architecture_ARCHITECTURE_X86_64 = 2,
  OS_Architecture_OS_Architecture_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OS_Architecture_OS_Architecture_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OS_Architecture_IsValid(int value);
const OS_Architecture OS_Architecture_Architecture_MIN = OS_Architecture_ARCHITECTURE_UNKNOWN;
const OS_Architecture OS_Architecture_Architecture_MAX = OS_Architecture_ARCHITECTURE_X86_64;
const int OS_Architecture_Architecture_ARRAYSIZE = OS_Architecture_Architecture_MAX + 1;

// ===================================================================

class OS : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.OS) */ {
 public:
  OS();
  virtual ~OS();

  OS(const OS& from);

  inline OS& operator=(const OS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OS(OS&& from) noexcept
    : OS() {
    *this = ::std::move(from);
  }

  inline OS& operator=(OS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OS* internal_default_instance() {
    return reinterpret_cast<const OS*>(
               &_OS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OS* other);
  friend void swap(OS& a, OS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OS* New() const PROTOBUF_FINAL { return New(NULL); }

  OS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const OS& from);
  void MergeFrom(const OS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef OS_Architecture Architecture;
  static const Architecture ARCHITECTURE_UNKNOWN =
    OS_Architecture_ARCHITECTURE_UNKNOWN;
  static const Architecture ARCHITECTURE_X86 =
    OS_Architecture_ARCHITECTURE_X86;
  static const Architecture ARCHITECTURE_X86_64 =
    OS_Architecture_ARCHITECTURE_X86_64;
  static inline bool Architecture_IsValid(int value) {
    return OS_Architecture_IsValid(value);
  }
  static const Architecture Architecture_MIN =
    OS_Architecture_Architecture_MIN;
  static const Architecture Architecture_MAX =
    OS_Architecture_Architecture_MAX;
  static const int Architecture_ARRAYSIZE =
    OS_Architecture_Architecture_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string os_name = 1;
  void clear_os_name();
  static const int kOsNameFieldNumber = 1;
  const ::std::string& os_name() const;
  void set_os_name(const ::std::string& value);
  #if LANG_CXX11
  void set_os_name(::std::string&& value);
  #endif
  void set_os_name(const char* value);
  void set_os_name(const char* value, size_t size);
  ::std::string* mutable_os_name();
  ::std::string* release_os_name();
  void set_allocated_os_name(::std::string* os_name);

  // string os_version = 2;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 2;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // string system_root = 6;
  void clear_system_root();
  static const int kSystemRootFieldNumber = 6;
  const ::std::string& system_root() const;
  void set_system_root(const ::std::string& value);
  #if LANG_CXX11
  void set_system_root(::std::string&& value);
  #endif
  void set_system_root(const char* value);
  void set_system_root(const char* value, size_t size);
  ::std::string* mutable_system_root();
  ::std::string* release_system_root();
  void set_allocated_system_root(::std::string* system_root);

  // string computer_name = 8;
  void clear_computer_name();
  static const int kComputerNameFieldNumber = 8;
  const ::std::string& computer_name() const;
  void set_computer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_computer_name(::std::string&& value);
  #endif
  void set_computer_name(const char* value);
  void set_computer_name(const char* value, size_t size);
  ::std::string* mutable_computer_name();
  ::std::string* release_computer_name();
  void set_allocated_computer_name(::std::string* computer_name);

  // .aspia.proto.OS.Architecture os_architecture = 3;
  void clear_os_architecture();
  static const int kOsArchitectureFieldNumber = 3;
  ::aspia::proto::OS_Architecture os_architecture() const;
  void set_os_architecture(::aspia::proto::OS_Architecture value);

  // .aspia.proto.OS.Architecture cpu_architecture = 4;
  void clear_cpu_architecture();
  static const int kCpuArchitectureFieldNumber = 4;
  ::aspia::proto::OS_Architecture cpu_architecture() const;
  void set_cpu_architecture(::aspia::proto::OS_Architecture value);

  // int64 install_date = 5;
  void clear_install_date();
  static const int kInstallDateFieldNumber = 5;
  ::google::protobuf::int64 install_date() const;
  void set_install_date(::google::protobuf::int64 value);

  // uint64 uptime = 7;
  void clear_uptime();
  static const int kUptimeFieldNumber = 7;
  ::google::protobuf::uint64 uptime() const;
  void set_uptime(::google::protobuf::uint64 value);

  // int64 local_time = 9;
  void clear_local_time();
  static const int kLocalTimeFieldNumber = 9;
  ::google::protobuf::int64 local_time() const;
  void set_local_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.OS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr os_name_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr system_root_;
  ::google::protobuf::internal::ArenaStringPtr computer_name_;
  int os_architecture_;
  int cpu_architecture_;
  ::google::protobuf::int64 install_date_;
  ::google::protobuf::uint64 uptime_;
  ::google::protobuf::int64 local_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fos_2eproto::TableStruct;
  friend void ::protobuf_category_5fos_2eproto::InitDefaultsOSImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OS

// string os_name = 1;
inline void OS::clear_os_name() {
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OS::os_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.os_name)
  return os_name_.GetNoArena();
}
inline void OS::set_os_name(const ::std::string& value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.OS.os_name)
}
#if LANG_CXX11
inline void OS::set_os_name(::std::string&& value) {
  
  os_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.OS.os_name)
}
#endif
inline void OS::set_os_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.OS.os_name)
}
inline void OS::set_os_name(const char* value, size_t size) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.OS.os_name)
}
inline ::std::string* OS::mutable_os_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.OS.os_name)
  return os_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OS::release_os_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.OS.os_name)
  
  return os_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OS::set_allocated_os_name(::std::string* os_name) {
  if (os_name != NULL) {
    
  } else {
    
  }
  os_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.OS.os_name)
}

// string os_version = 2;
inline void OS::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OS::os_version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.os_version)
  return os_version_.GetNoArena();
}
inline void OS::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.OS.os_version)
}
#if LANG_CXX11
inline void OS::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.OS.os_version)
}
#endif
inline void OS::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.OS.os_version)
}
inline void OS::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.OS.os_version)
}
inline ::std::string* OS::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.OS.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OS::release_os_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.OS.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OS::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.OS.os_version)
}

// .aspia.proto.OS.Architecture os_architecture = 3;
inline void OS::clear_os_architecture() {
  os_architecture_ = 0;
}
inline ::aspia::proto::OS_Architecture OS::os_architecture() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.os_architecture)
  return static_cast< ::aspia::proto::OS_Architecture >(os_architecture_);
}
inline void OS::set_os_architecture(::aspia::proto::OS_Architecture value) {
  
  os_architecture_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.OS.os_architecture)
}

// .aspia.proto.OS.Architecture cpu_architecture = 4;
inline void OS::clear_cpu_architecture() {
  cpu_architecture_ = 0;
}
inline ::aspia::proto::OS_Architecture OS::cpu_architecture() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.cpu_architecture)
  return static_cast< ::aspia::proto::OS_Architecture >(cpu_architecture_);
}
inline void OS::set_cpu_architecture(::aspia::proto::OS_Architecture value) {
  
  cpu_architecture_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.OS.cpu_architecture)
}

// int64 install_date = 5;
inline void OS::clear_install_date() {
  install_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OS::install_date() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.install_date)
  return install_date_;
}
inline void OS::set_install_date(::google::protobuf::int64 value) {
  
  install_date_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.OS.install_date)
}

// string system_root = 6;
inline void OS::clear_system_root() {
  system_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OS::system_root() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.system_root)
  return system_root_.GetNoArena();
}
inline void OS::set_system_root(const ::std::string& value) {
  
  system_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.OS.system_root)
}
#if LANG_CXX11
inline void OS::set_system_root(::std::string&& value) {
  
  system_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.OS.system_root)
}
#endif
inline void OS::set_system_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.OS.system_root)
}
inline void OS::set_system_root(const char* value, size_t size) {
  
  system_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.OS.system_root)
}
inline ::std::string* OS::mutable_system_root() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.OS.system_root)
  return system_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OS::release_system_root() {
  // @@protoc_insertion_point(field_release:aspia.proto.OS.system_root)
  
  return system_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OS::set_allocated_system_root(::std::string* system_root) {
  if (system_root != NULL) {
    
  } else {
    
  }
  system_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_root);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.OS.system_root)
}

// uint64 uptime = 7;
inline void OS::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OS::uptime() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.uptime)
  return uptime_;
}
inline void OS::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.OS.uptime)
}

// string computer_name = 8;
inline void OS::clear_computer_name() {
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OS::computer_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.computer_name)
  return computer_name_.GetNoArena();
}
inline void OS::set_computer_name(const ::std::string& value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.OS.computer_name)
}
#if LANG_CXX11
inline void OS::set_computer_name(::std::string&& value) {
  
  computer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.OS.computer_name)
}
#endif
inline void OS::set_computer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.OS.computer_name)
}
inline void OS::set_computer_name(const char* value, size_t size) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.OS.computer_name)
}
inline ::std::string* OS::mutable_computer_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.OS.computer_name)
  return computer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OS::release_computer_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.OS.computer_name)
  
  return computer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OS::set_allocated_computer_name(::std::string* computer_name) {
  if (computer_name != NULL) {
    
  } else {
    
  }
  computer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), computer_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.OS.computer_name)
}

// int64 local_time = 9;
inline void OS::clear_local_time() {
  local_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OS::local_time() const {
  // @@protoc_insertion_point(field_get:aspia.proto.OS.local_time)
  return local_time_;
}
inline void OS::set_local_time(::google::protobuf::int64 value) {
  
  local_time_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.OS.local_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::OS_Architecture> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fos_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_session.proto

#ifndef PROTOBUF_category_5fsession_2eproto__INCLUDED
#define PROTOBUF_category_5fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsSession_ItemImpl();
void InitDefaultsSession_Item();
void InitDefaultsSessionImpl();
void InitDefaultsSession();
inline void InitDefaults() {
  InitDefaultsSession_Item();
  InitDefaultsSession();
}
}  // namespace protobuf_category_5fsession_2eproto
namespace aspia {
namespace proto {
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class Session_Item;
class Session_ItemDefaultTypeInternal;
extern Session_ItemDefaultTypeInternal _Session_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum Session_ConnectState {
  Session_ConnectState_CONNECT_STATE_UNKNOWN = 0,
  Session_ConnectState_CONNECT_STATE_ACTIVE = 1,
  Session_ConnectState_CONNECT_STATE_CONNECTED = 2,
  Session_ConnectState_CONNECT_STATE_CONNECT_QUERY = 3,
  Session_ConnectState_CONNECT_STATE_SHADOW = 4,
  Session_ConnectState_CONNECT_STATE_DISCONNECTED = 5,
  Session_ConnectState_CONNECT_STATE_IDLE = 6,
  Session_ConnectState_CONNECT_STATE_LISTEN = 7,
  Session_ConnectState_CONNECT_STATE_RESET = 8,
  Session_ConnectState_CONNECT_STATE_DOWN = 9,
  Session_ConnectState_CONNECT_STATE_INIT = 10,
  Session_ConnectState_Session_ConnectState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Session_ConnectState_Session_ConnectState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Session_ConnectState_IsValid(int value);
const Session_ConnectState Session_ConnectState_ConnectState_MIN = Session_ConnectState_CONNECT_STATE_UNKNOWN;
const Session_ConnectState Session_ConnectState_ConnectState_MAX = Session_ConnectState_CONNECT_STATE_INIT;
const int Session_ConnectState_ConnectState_ARRAYSIZE = Session_ConnectState_ConnectState_MAX + 1;

// ===================================================================

class Session_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Session.Item) */ {
 public:
  Session_Item();
  virtual ~Session_Item();

  Session_Item(const Session_Item& from);

  inline Session_Item& operator=(const Session_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session_Item(Session_Item&& from) noexcept
    : Session_Item() {
    *this = ::std::move(from);
  }

  inline Session_Item& operator=(Session_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Session_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session_Item* internal_default_instance() {
    return reinterpret_cast<const Session_Item*>(
               &_Session_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Session_Item* other);
  friend void swap(Session_Item& a, Session_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Session_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Session_Item& from);
  void MergeFrom(const Session_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Session_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string domain_name = 2;
  void clear_domain_name();
  static const int kDomainNameFieldNumber = 2;
  const ::std::string& domain_name() const;
  void set_domain_name(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_name(::std::string&& value);
  #endif
  void set_domain_name(const char* value);
  void set_domain_name(const char* value, size_t size);
  ::std::string* mutable_domain_name();
  ::std::string* release_domain_name();
  void set_allocated_domain_name(::std::string* domain_name);

  // string client_name = 5;
  void clear_client_name();
  static const int kClientNameFieldNumber = 5;
  const ::std::string& client_name() const;
  void set_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name(::std::string&& value);
  #endif
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  ::std::string* mutable_client_name();
  ::std::string* release_client_name();
  void set_allocated_client_name(::std::string* client_name);

  // string winstation_name = 6;
  void clear_winstation_name();
  static const int kWinstationNameFieldNumber = 6;
  const ::std::string& winstation_name() const;
  void set_winstation_name(const ::std::string& value);
  #if LANG_CXX11
  void set_winstation_name(::std::string&& value);
  #endif
  void set_winstation_name(const char* value);
  void set_winstation_name(const char* value, size_t size);
  ::std::string* mutable_winstation_name();
  ::std::string* release_winstation_name();
  void set_allocated_winstation_name(::std::string* winstation_name);

  // uint32 session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::google::protobuf::uint32 session_id() const;
  void set_session_id(::google::protobuf::uint32 value);

  // .aspia.proto.Session.ConnectState connect_state = 4;
  void clear_connect_state();
  static const int kConnectStateFieldNumber = 4;
  ::aspia::proto::Session_ConnectState connect_state() const;
  void set_connect_state(::aspia::proto::Session_ConnectState value);

  // @@protoc_insertion_point(class_scope:aspia.proto.Session.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr domain_name_;
  ::google::protobuf::internal::ArenaStringPtr client_name_;
  ::google::protobuf::internal::ArenaStringPtr winstation_name_;
  ::google::protobuf::uint32 session_id_;
  int connect_state_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fsession_2eproto::TableStruct;
  friend void ::protobuf_category_5fsession_2eproto::InitDefaultsSession_ItemImpl();
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const PROTOBUF_FINAL { return New(NULL); }

  Session* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Session_Item Item;

  typedef Session_ConnectState ConnectState;
  static const ConnectState CONNECT_STATE_UNKNOWN =
    Session_ConnectState_CONNECT_STATE_UNKNOWN;
  static const ConnectState CONNECT_STATE_ACTIVE =
    Session_ConnectState_CONNECT_STATE_ACTIVE;
  static const ConnectState CONNECT_STATE_CONNECTED =
    Session_ConnectState_CONNECT_STATE_CONNECTED;
  static const ConnectState CONNECT_STATE_CONNECT_QUERY =
    Session_ConnectState_CONNECT_STATE_CONNECT_QUERY;
  static const ConnectState CONNECT_STATE_SHADOW =
    Session_ConnectState_CONNECT_STATE_SHADOW;
  static const ConnectState CONNECT_STATE_DISCONNECTED =
    Session_ConnectState_CONNECT_STATE_DISCONNECTED;
  static const ConnectState CONNECT_STATE_IDLE =
    Session_ConnectState_CONNECT_STATE_IDLE;
  static const ConnectState CONNECT_STATE_LISTEN =
    Session_ConnectState_CONNECT_STATE_LISTEN;
  static const ConnectState CONNECT_STATE_RESET =
    Session_ConnectState_CONNECT_STATE_RESET;
  static const ConnectState CONNECT_STATE_DOWN =
    Session_ConnectState_CONNECT_STATE_DOWN;
  static const ConnectState CONNECT_STATE_INIT =
    Session_ConnectState_CONNECT_STATE_INIT;
  static inline bool ConnectState_IsValid(int value) {
    return Session_ConnectState_IsValid(value);
  }
  static const ConnectState ConnectState_MIN =
    Session_ConnectState_ConnectState_MIN;
  static const ConnectState ConnectState_MAX =
    Session_ConnectState_ConnectState_MAX;
  static const int ConnectState_ARRAYSIZE =
    Session_ConnectState_ConnectState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.Session.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::Session_Item& item(int index) const;
  ::aspia::proto::Session_Item* mutable_item(int index);
  ::aspia::proto::Session_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Session_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Session_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Session_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fsession_2eproto::TableStruct;
  friend void ::protobuf_category_5fsession_2eproto::InitDefaultsSessionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session_Item

// string user_name = 1;
inline void Session_Item::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_Item::user_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.user_name)
  return user_name_.GetNoArena();
}
inline void Session_Item::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.user_name)
}
#if LANG_CXX11
inline void Session_Item::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Session.Item.user_name)
}
#endif
inline void Session_Item::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Session.Item.user_name)
}
inline void Session_Item::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Session.Item.user_name)
}
inline ::std::string* Session_Item::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Session.Item.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_Item::release_user_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Session.Item.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_Item::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Session.Item.user_name)
}

// string domain_name = 2;
inline void Session_Item::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_Item::domain_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.domain_name)
  return domain_name_.GetNoArena();
}
inline void Session_Item::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.domain_name)
}
#if LANG_CXX11
inline void Session_Item::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Session.Item.domain_name)
}
#endif
inline void Session_Item::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Session.Item.domain_name)
}
inline void Session_Item::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Session.Item.domain_name)
}
inline ::std::string* Session_Item::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Session.Item.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_Item::release_domain_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Session.Item.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_Item::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Session.Item.domain_name)
}

// uint32 session_id = 3;
inline void Session_Item::clear_session_id() {
  session_id_ = 0u;
}
inline ::google::protobuf::uint32 Session_Item::session_id() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.session_id)
  return session_id_;
}
inline void Session_Item::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.session_id)
}

// .aspia.proto.Session.ConnectState connect_state = 4;
inline void Session_Item::clear_connect_state() {
  connect_state_ = 0;
}
inline ::aspia::proto::Session_ConnectState Session_Item::connect_state() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.connect_state)
  return static_cast< ::aspia::proto::Session_ConnectState >(connect_state_);
}
inline void Session_Item::set_connect_state(::aspia::proto::Session_ConnectState value) {
  
  connect_state_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.connect_state)
}

// string client_name = 5;
inline void Session_Item::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_Item::client_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.client_name)
  return client_name_.GetNoArena();
}
inline void Session_Item::set_client_name(const ::std::string& value) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.client_name)
}
#if LANG_CXX11
inline void Session_Item::set_client_name(::std::string&& value) {
  
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Session.Item.client_name)
}
#endif
inline void Session_Item::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Session.Item.client_name)
}
inline void Session_Item::set_client_name(const char* value, size_t size) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Session.Item.client_name)
}
inline ::std::string* Session_Item::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Session.Item.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_Item::release_client_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Session.Item.client_name)
  
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_Item::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Session.Item.client_name)
}

// string winstation_name = 6;
inline void Session_Item::clear_winstation_name() {
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_Item::winstation_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.Item.winstation_name)
  return winstation_name_.GetNoArena();
}
inline void Session_Item::set_winstation_name(const ::std::string& value) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Session.Item.winstation_name)
}
#if LANG_CXX11
inline void Session_Item::set_winstation_name(::std::string&& value) {
  
  winstation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Session.Item.winstation_name)
}
#endif
inline void Session_Item::set_winstation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Session.Item.winstation_name)
}
inline void Session_Item::set_winstation_name(const char* value, size_t size) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Session.Item.winstation_name)
}
inline ::std::string* Session_Item::mutable_winstation_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Session.Item.winstation_name)
  return winstation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_Item::release_winstation_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Session.Item.winstation_name)
  
  return winstation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_Item::set_allocated_winstation_name(::std::string* winstation_name) {
  if (winstation_name != NULL) {
    
  } else {
    
  }
  winstation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winstation_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Session.Item.winstation_name)
}

// -------------------------------------------------------------------

// Session

// repeated .aspia.proto.Session.Item item = 1;
inline int Session::item_size() const {
  return item_.size();
}
inline void Session::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::Session_Item& Session::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.Session.item)
  return item_.Get(index);
}
inline ::aspia::proto::Session_Item* Session::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.Session.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::Session_Item* Session::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.Session.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::Session_Item >*
Session::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.Session.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Session_Item >&
Session::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.Session.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::Session_ConnectState> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fsession_2eproto__INCLUDED

//
// PROJECT:         Aspia
// FILE:            category/category_task_scheduler.proto
// LICENSE:         Mozilla Public License Version 2.0
// PROGRAMMERS:     Dmitry Chapyshev (dmitry@aspia.ru)
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.proto;

message TaskScheduler
{
    message Action
    {
        string path              = 1;
        string arguments         = 2;
        string working_directory = 3;
    }

    message Trigger
    {
        enum Type
        {
            TYPE_UNKNOWN              = 0;
            TYPE_EVENT                = 1;
            TYPE_TIME                 = 2;
            TYPE_DAILY                = 3;
            TYPE_WEEKLY               = 4;
            TYPE_MONTHLY              = 5;
            TYPE_MONTHLYDOW           = 6;
            TYPE_IDLE                 = 7;
            TYPE_REGISTRATION         = 8;
            TYPE_BOOT                 = 9;
            TYPE_LOGON                = 10;
            TYPE_SESSION_STATE_CHANGE = 11;
        }

        enum DayOfWeek
        {
            DAY_OF_WEEK_UNKNOWN   = 0;
            DAY_OF_WEEK_SUNDAY    = 1;
            DAY_OF_WEEK_MONDAY    = 2;
            DAY_OF_WEEK_TUESDAY   = 4;
            DAY_OF_WEEK_WEDNESDAY = 8;
            DAY_OF_WEEK_THURSDAY  = 16;
            DAY_OF_WEEK_FRIDAY    = 32;
            DAY_OF_WEEK_SATURDAY  = 64;
        }

        enum DayOfMonth
        {
            DAY_OF_MONTH_UNKNOWN = 0;
            DAY_OF_MONTH_1       = 1;
            DAY_OF_MONTH_2       = 2;
            DAY_OF_MONTH_3       = 4;
            DAY_OF_MONTH_4       = 8;
            DAY_OF_MONTH_5       = 16;
            DAY_OF_MONTH_6       = 32;
            DAY_OF_MONTH_7       = 64;
            DAY_OF_MONTH_8       = 128;
            DAY_OF_MONTH_9       = 256;
            DAY_OF_MONTH_10      = 512;
            DAY_OF_MONTH_11      = 1024;
            DAY_OF_MONTH_12      = 2048;
            DAY_OF_MONTH_13      = 4096;
            DAY_OF_MONTH_14      = 8192;
            DAY_OF_MONTH_15      = 16384;
            DAY_OF_MONTH_16      = 32768;
            DAY_OF_MONTH_17      = 65536;
            DAY_OF_MONTH_18      = 131072;
            DAY_OF_MONTH_19      = 262144;
            DAY_OF_MONTH_20      = 524288;
            DAY_OF_MONTH_21      = 1048576;
            DAY_OF_MONTH_22      = 2097152;
            DAY_OF_MONTH_23      = 4194304;
            DAY_OF_MONTH_24      = 8388608;
            DAY_OF_MONTH_25      = 16777216;
            DAY_OF_MONTH_26      = 33554432;
            DAY_OF_MONTH_27      = 67108864;
            DAY_OF_MONTH_28      = 134217728;
            DAY_OF_MONTH_29      = 268435456;
            DAY_OF_MONTH_30      = 536870912;
            DAY_OF_MONTH_31      = 1073741824;
        }

        enum Month
        {
            MONTH_UNKNOWN   = 0;
            MONTH_JANUARY   = 1;
            MONTH_FEBRUARY  = 2;
            MONTH_MARCH     = 4;
            MONTH_APRIL     = 8;
            MONTH_MAY       = 16;
            MONTH_JUNE      = 32;
            MONTH_JULY      = 64;
            MONTH_AUGUST    = 128;
            MONTH_SEPTEMBER = 256;
            MONTH_OCTOBER   = 512;
            MONTH_NOVEMBER  = 1024;
            MONTH_DECEMBER  = 2048;
        }

        enum WeekOfMonth
        {
            WEEK_OF_MONTH_UNKNOWN = 0;
            WEEK_OF_MONTH_FIRST   = 1;
            WEEK_OF_MONTH_SECOND  = 2;
            WEEK_OF_MONTH_THIRD   = 3;
            WEEK_OF_MONTH_FOURTH  = 4;
        }

        message Event
        {
            message NamedValue
            {
                string name  = 1;
                string value = 2;
            }

            string delay                    = 1;
            repeated NamedValue named_value = 2;
        }

        message Daily
        {
            int32 days_interval = 1;
        }

        message Weekly
        {
            int32 weeks_interval = 1;
            uint32 days_of_week  = 2;
        }

        message Monthly
        {
            uint32 days_of_month  = 1;
            uint32 months_of_year = 2;
            bool last_day         = 3;
        }

        message MonthlyDow
        {
            uint32 days_of_week   = 1;
            uint32 months_of_year = 2;
            bool last_week        = 3;
            uint32 weeks_of_month = 4;
        }

        message Registration
        {
            string delay = 1;
        }

        message Boot
        {
            string delay = 1;
        }

        message Logon
        {
            string user_id = 1;
            string delay   = 2;
        }

        message SessionStateChange
        {
            enum ChangeType
            {
                CHANGE_TYPE_UNKNOWN            = 0;
                CHANGE_TYPE_CONSOLE_CONNECT    = 1;
                CHANGE_TYPE_CONSOLE_DISCONNECT = 2;
                CHANGE_TYPE_REMOTE_CONNECT     = 3;
                CHANGE_TYPE_REMOTE_DISCONNECT  = 4;
                CHANGE_TYPE_SESSION_LOCK       = 5;
                CHANGE_TYPE_SESSION_UNLOCK     = 6;
            }

            ChangeType change_type = 1;
            string user_id         = 2;
            string delay           = 3;
        }

        message Repetition
        {
            string duration           = 1;
            string interval           = 2;
            bool stop_at_duration_end = 3;
        }

        bool enabled                = 1;
        Type type                   = 2;
        string start_time           = 3;
        string end_time             = 4;
        string execution_time_limit = 5;
        Repetition repetition       = 6;

        oneof TypeUnion
        {
            Event event                             = 7;
            Daily daily                             = 8;
            Weekly weekly                           = 9;
            Monthly monthly                         = 10;
            MonthlyDow monthly_dow                  = 11;
            Registration registration               = 12;
            Boot boot                               = 13;
            Logon logon                             = 14;
            SessionStateChange session_state_change = 15;
        }
    }

    message Task
    {
        enum Status
        {
            STATUS_UNKNOWN  = 0;
            STATUS_DISABLED = 1;
            STATUS_QUEUED   = 2;
            STATUS_READY    = 3;
            STATUS_RUNNING  = 4;
        }

        string task_name              = 1;
        Status status                 = 2;
        string comment                = 3;
        string account_name           = 4;
        string creator                = 5;
        int64 last_run                = 6;
        int64 next_run                = 7;
        uint32 number_of_missed_runs  = 8;
        uint32 last_task_result       = 9;
        repeated Action action        = 10;
        repeated Trigger trigger      = 11;
    }

    repeated Task task = 1;
}

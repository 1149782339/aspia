// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_video_adapter.proto

#ifndef PROTOBUF_category_5fvideo_5fadapter_2eproto__INCLUDED
#define PROTOBUF_category_5fvideo_5fadapter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fvideo_5fadapter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsVideoAdapter_ItemImpl();
void InitDefaultsVideoAdapter_Item();
void InitDefaultsVideoAdapterImpl();
void InitDefaultsVideoAdapter();
inline void InitDefaults() {
  InitDefaultsVideoAdapter_Item();
  InitDefaultsVideoAdapter();
}
}  // namespace protobuf_category_5fvideo_5fadapter_2eproto
namespace aspia {
namespace proto {
class VideoAdapter;
class VideoAdapterDefaultTypeInternal;
extern VideoAdapterDefaultTypeInternal _VideoAdapter_default_instance_;
class VideoAdapter_Item;
class VideoAdapter_ItemDefaultTypeInternal;
extern VideoAdapter_ItemDefaultTypeInternal _VideoAdapter_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class VideoAdapter_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoAdapter.Item) */ {
 public:
  VideoAdapter_Item();
  virtual ~VideoAdapter_Item();

  VideoAdapter_Item(const VideoAdapter_Item& from);

  inline VideoAdapter_Item& operator=(const VideoAdapter_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoAdapter_Item(VideoAdapter_Item&& from) noexcept
    : VideoAdapter_Item() {
    *this = ::std::move(from);
  }

  inline VideoAdapter_Item& operator=(VideoAdapter_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VideoAdapter_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoAdapter_Item* internal_default_instance() {
    return reinterpret_cast<const VideoAdapter_Item*>(
               &_VideoAdapter_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VideoAdapter_Item* other);
  friend void swap(VideoAdapter_Item& a, VideoAdapter_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoAdapter_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoAdapter_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoAdapter_Item& from);
  void MergeFrom(const VideoAdapter_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoAdapter_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string adapter_string = 2;
  void clear_adapter_string();
  static const int kAdapterStringFieldNumber = 2;
  const ::std::string& adapter_string() const;
  void set_adapter_string(const ::std::string& value);
  #if LANG_CXX11
  void set_adapter_string(::std::string&& value);
  #endif
  void set_adapter_string(const char* value);
  void set_adapter_string(const char* value, size_t size);
  ::std::string* mutable_adapter_string();
  ::std::string* release_adapter_string();
  void set_allocated_adapter_string(::std::string* adapter_string);

  // string bios_string = 3;
  void clear_bios_string();
  static const int kBiosStringFieldNumber = 3;
  const ::std::string& bios_string() const;
  void set_bios_string(const ::std::string& value);
  #if LANG_CXX11
  void set_bios_string(::std::string&& value);
  #endif
  void set_bios_string(const char* value);
  void set_bios_string(const char* value, size_t size);
  ::std::string* mutable_bios_string();
  ::std::string* release_bios_string();
  void set_allocated_bios_string(::std::string* bios_string);

  // string chip_type = 4;
  void clear_chip_type();
  static const int kChipTypeFieldNumber = 4;
  const ::std::string& chip_type() const;
  void set_chip_type(const ::std::string& value);
  #if LANG_CXX11
  void set_chip_type(::std::string&& value);
  #endif
  void set_chip_type(const char* value);
  void set_chip_type(const char* value, size_t size);
  ::std::string* mutable_chip_type();
  ::std::string* release_chip_type();
  void set_allocated_chip_type(::std::string* chip_type);

  // string dac_type = 5;
  void clear_dac_type();
  static const int kDacTypeFieldNumber = 5;
  const ::std::string& dac_type() const;
  void set_dac_type(const ::std::string& value);
  #if LANG_CXX11
  void set_dac_type(::std::string&& value);
  #endif
  void set_dac_type(const char* value);
  void set_dac_type(const char* value, size_t size);
  ::std::string* mutable_dac_type();
  ::std::string* release_dac_type();
  void set_allocated_dac_type(::std::string* dac_type);

  // string driver_date = 6;
  void clear_driver_date();
  static const int kDriverDateFieldNumber = 6;
  const ::std::string& driver_date() const;
  void set_driver_date(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_date(::std::string&& value);
  #endif
  void set_driver_date(const char* value);
  void set_driver_date(const char* value, size_t size);
  ::std::string* mutable_driver_date();
  ::std::string* release_driver_date();
  void set_allocated_driver_date(::std::string* driver_date);

  // string driver_version = 7;
  void clear_driver_version();
  static const int kDriverVersionFieldNumber = 7;
  const ::std::string& driver_version() const;
  void set_driver_version(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_version(::std::string&& value);
  #endif
  void set_driver_version(const char* value);
  void set_driver_version(const char* value, size_t size);
  ::std::string* mutable_driver_version();
  ::std::string* release_driver_version();
  void set_allocated_driver_version(::std::string* driver_version);

  // string driver_provider = 8;
  void clear_driver_provider();
  static const int kDriverProviderFieldNumber = 8;
  const ::std::string& driver_provider() const;
  void set_driver_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_provider(::std::string&& value);
  #endif
  void set_driver_provider(const char* value);
  void set_driver_provider(const char* value, size_t size);
  ::std::string* mutable_driver_provider();
  ::std::string* release_driver_provider();
  void set_allocated_driver_provider(::std::string* driver_provider);

  // uint64 memory_size = 9;
  void clear_memory_size();
  static const int kMemorySizeFieldNumber = 9;
  ::google::protobuf::uint64 memory_size() const;
  void set_memory_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoAdapter.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr adapter_string_;
  ::google::protobuf::internal::ArenaStringPtr bios_string_;
  ::google::protobuf::internal::ArenaStringPtr chip_type_;
  ::google::protobuf::internal::ArenaStringPtr dac_type_;
  ::google::protobuf::internal::ArenaStringPtr driver_date_;
  ::google::protobuf::internal::ArenaStringPtr driver_version_;
  ::google::protobuf::internal::ArenaStringPtr driver_provider_;
  ::google::protobuf::uint64 memory_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fvideo_5fadapter_2eproto::TableStruct;
  friend void ::protobuf_category_5fvideo_5fadapter_2eproto::InitDefaultsVideoAdapter_ItemImpl();
};
// -------------------------------------------------------------------

class VideoAdapter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.VideoAdapter) */ {
 public:
  VideoAdapter();
  virtual ~VideoAdapter();

  VideoAdapter(const VideoAdapter& from);

  inline VideoAdapter& operator=(const VideoAdapter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoAdapter(VideoAdapter&& from) noexcept
    : VideoAdapter() {
    *this = ::std::move(from);
  }

  inline VideoAdapter& operator=(VideoAdapter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VideoAdapter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoAdapter* internal_default_instance() {
    return reinterpret_cast<const VideoAdapter*>(
               &_VideoAdapter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VideoAdapter* other);
  friend void swap(VideoAdapter& a, VideoAdapter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoAdapter* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoAdapter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoAdapter& from);
  void MergeFrom(const VideoAdapter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoAdapter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VideoAdapter_Item Item;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.VideoAdapter.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::VideoAdapter_Item& item(int index) const;
  ::aspia::proto::VideoAdapter_Item* mutable_item(int index);
  ::aspia::proto::VideoAdapter_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoAdapter_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoAdapter_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.VideoAdapter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoAdapter_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fvideo_5fadapter_2eproto::TableStruct;
  friend void ::protobuf_category_5fvideo_5fadapter_2eproto::InitDefaultsVideoAdapterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoAdapter_Item

// string description = 1;
inline void VideoAdapter_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.description)
  return description_.GetNoArena();
}
inline void VideoAdapter_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.description)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.description)
}
#endif
inline void VideoAdapter_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.description)
}
inline void VideoAdapter_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.description)
}
inline ::std::string* VideoAdapter_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.description)
}

// string adapter_string = 2;
inline void VideoAdapter_Item::clear_adapter_string() {
  adapter_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::adapter_string() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.adapter_string)
  return adapter_string_.GetNoArena();
}
inline void VideoAdapter_Item::set_adapter_string(const ::std::string& value) {
  
  adapter_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.adapter_string)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_adapter_string(::std::string&& value) {
  
  adapter_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.adapter_string)
}
#endif
inline void VideoAdapter_Item::set_adapter_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adapter_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.adapter_string)
}
inline void VideoAdapter_Item::set_adapter_string(const char* value, size_t size) {
  
  adapter_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.adapter_string)
}
inline ::std::string* VideoAdapter_Item::mutable_adapter_string() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.adapter_string)
  return adapter_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_adapter_string() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.adapter_string)
  
  return adapter_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_adapter_string(::std::string* adapter_string) {
  if (adapter_string != NULL) {
    
  } else {
    
  }
  adapter_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_string);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.adapter_string)
}

// string bios_string = 3;
inline void VideoAdapter_Item::clear_bios_string() {
  bios_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::bios_string() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.bios_string)
  return bios_string_.GetNoArena();
}
inline void VideoAdapter_Item::set_bios_string(const ::std::string& value) {
  
  bios_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.bios_string)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_bios_string(::std::string&& value) {
  
  bios_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.bios_string)
}
#endif
inline void VideoAdapter_Item::set_bios_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bios_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.bios_string)
}
inline void VideoAdapter_Item::set_bios_string(const char* value, size_t size) {
  
  bios_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.bios_string)
}
inline ::std::string* VideoAdapter_Item::mutable_bios_string() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.bios_string)
  return bios_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_bios_string() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.bios_string)
  
  return bios_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_bios_string(::std::string* bios_string) {
  if (bios_string != NULL) {
    
  } else {
    
  }
  bios_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bios_string);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.bios_string)
}

// string chip_type = 4;
inline void VideoAdapter_Item::clear_chip_type() {
  chip_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::chip_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.chip_type)
  return chip_type_.GetNoArena();
}
inline void VideoAdapter_Item::set_chip_type(const ::std::string& value) {
  
  chip_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.chip_type)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_chip_type(::std::string&& value) {
  
  chip_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.chip_type)
}
#endif
inline void VideoAdapter_Item::set_chip_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chip_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.chip_type)
}
inline void VideoAdapter_Item::set_chip_type(const char* value, size_t size) {
  
  chip_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.chip_type)
}
inline ::std::string* VideoAdapter_Item::mutable_chip_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.chip_type)
  return chip_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_chip_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.chip_type)
  
  return chip_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_chip_type(::std::string* chip_type) {
  if (chip_type != NULL) {
    
  } else {
    
  }
  chip_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chip_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.chip_type)
}

// string dac_type = 5;
inline void VideoAdapter_Item::clear_dac_type() {
  dac_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::dac_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.dac_type)
  return dac_type_.GetNoArena();
}
inline void VideoAdapter_Item::set_dac_type(const ::std::string& value) {
  
  dac_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.dac_type)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_dac_type(::std::string&& value) {
  
  dac_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.dac_type)
}
#endif
inline void VideoAdapter_Item::set_dac_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dac_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.dac_type)
}
inline void VideoAdapter_Item::set_dac_type(const char* value, size_t size) {
  
  dac_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.dac_type)
}
inline ::std::string* VideoAdapter_Item::mutable_dac_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.dac_type)
  return dac_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_dac_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.dac_type)
  
  return dac_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_dac_type(::std::string* dac_type) {
  if (dac_type != NULL) {
    
  } else {
    
  }
  dac_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dac_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.dac_type)
}

// string driver_date = 6;
inline void VideoAdapter_Item::clear_driver_date() {
  driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::driver_date() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.driver_date)
  return driver_date_.GetNoArena();
}
inline void VideoAdapter_Item::set_driver_date(const ::std::string& value) {
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.driver_date)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_driver_date(::std::string&& value) {
  
  driver_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.driver_date)
}
#endif
inline void VideoAdapter_Item::set_driver_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.driver_date)
}
inline void VideoAdapter_Item::set_driver_date(const char* value, size_t size) {
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.driver_date)
}
inline ::std::string* VideoAdapter_Item::mutable_driver_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.driver_date)
  return driver_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_driver_date() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.driver_date)
  
  return driver_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_driver_date(::std::string* driver_date) {
  if (driver_date != NULL) {
    
  } else {
    
  }
  driver_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_date);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.driver_date)
}

// string driver_version = 7;
inline void VideoAdapter_Item::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::driver_version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.driver_version)
  return driver_version_.GetNoArena();
}
inline void VideoAdapter_Item::set_driver_version(const ::std::string& value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.driver_version)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_driver_version(::std::string&& value) {
  
  driver_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.driver_version)
}
#endif
inline void VideoAdapter_Item::set_driver_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.driver_version)
}
inline void VideoAdapter_Item::set_driver_version(const char* value, size_t size) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.driver_version)
}
inline ::std::string* VideoAdapter_Item::mutable_driver_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.driver_version)
  return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_driver_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.driver_version)
  
  return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_driver_version(::std::string* driver_version) {
  if (driver_version != NULL) {
    
  } else {
    
  }
  driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.driver_version)
}

// string driver_provider = 8;
inline void VideoAdapter_Item::clear_driver_provider() {
  driver_provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAdapter_Item::driver_provider() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.driver_provider)
  return driver_provider_.GetNoArena();
}
inline void VideoAdapter_Item::set_driver_provider(const ::std::string& value) {
  
  driver_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.driver_provider)
}
#if LANG_CXX11
inline void VideoAdapter_Item::set_driver_provider(::std::string&& value) {
  
  driver_provider_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.VideoAdapter.Item.driver_provider)
}
#endif
inline void VideoAdapter_Item::set_driver_provider(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.VideoAdapter.Item.driver_provider)
}
inline void VideoAdapter_Item::set_driver_provider(const char* value, size_t size) {
  
  driver_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.VideoAdapter.Item.driver_provider)
}
inline ::std::string* VideoAdapter_Item::mutable_driver_provider() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.Item.driver_provider)
  return driver_provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAdapter_Item::release_driver_provider() {
  // @@protoc_insertion_point(field_release:aspia.proto.VideoAdapter.Item.driver_provider)
  
  return driver_provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAdapter_Item::set_allocated_driver_provider(::std::string* driver_provider) {
  if (driver_provider != NULL) {
    
  } else {
    
  }
  driver_provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_provider);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.VideoAdapter.Item.driver_provider)
}

// uint64 memory_size = 9;
inline void VideoAdapter_Item::clear_memory_size() {
  memory_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VideoAdapter_Item::memory_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.Item.memory_size)
  return memory_size_;
}
inline void VideoAdapter_Item::set_memory_size(::google::protobuf::uint64 value) {
  
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.VideoAdapter.Item.memory_size)
}

// -------------------------------------------------------------------

// VideoAdapter

// repeated .aspia.proto.VideoAdapter.Item item = 1;
inline int VideoAdapter::item_size() const {
  return item_.size();
}
inline void VideoAdapter::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::VideoAdapter_Item& VideoAdapter::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.VideoAdapter.item)
  return item_.Get(index);
}
inline ::aspia::proto::VideoAdapter_Item* VideoAdapter::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.VideoAdapter.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::VideoAdapter_Item* VideoAdapter::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.VideoAdapter.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoAdapter_Item >*
VideoAdapter::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.VideoAdapter.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::VideoAdapter_Item >&
VideoAdapter::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.VideoAdapter.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fvideo_5fadapter_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_windows_device.proto

#ifndef PROTOBUF_category_5fwindows_5fdevice_2eproto__INCLUDED
#define PROTOBUF_category_5fwindows_5fdevice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fwindows_5fdevice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsWindowsDevice_ItemImpl();
void InitDefaultsWindowsDevice_Item();
void InitDefaultsWindowsDeviceImpl();
void InitDefaultsWindowsDevice();
inline void InitDefaults() {
  InitDefaultsWindowsDevice_Item();
  InitDefaultsWindowsDevice();
}
}  // namespace protobuf_category_5fwindows_5fdevice_2eproto
namespace aspia {
namespace proto {
class WindowsDevice;
class WindowsDeviceDefaultTypeInternal;
extern WindowsDeviceDefaultTypeInternal _WindowsDevice_default_instance_;
class WindowsDevice_Item;
class WindowsDevice_ItemDefaultTypeInternal;
extern WindowsDevice_ItemDefaultTypeInternal _WindowsDevice_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class WindowsDevice_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.WindowsDevice.Item) */ {
 public:
  WindowsDevice_Item();
  virtual ~WindowsDevice_Item();

  WindowsDevice_Item(const WindowsDevice_Item& from);

  inline WindowsDevice_Item& operator=(const WindowsDevice_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindowsDevice_Item(WindowsDevice_Item&& from) noexcept
    : WindowsDevice_Item() {
    *this = ::std::move(from);
  }

  inline WindowsDevice_Item& operator=(WindowsDevice_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const WindowsDevice_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowsDevice_Item* internal_default_instance() {
    return reinterpret_cast<const WindowsDevice_Item*>(
               &_WindowsDevice_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WindowsDevice_Item* other);
  friend void swap(WindowsDevice_Item& a, WindowsDevice_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindowsDevice_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowsDevice_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WindowsDevice_Item& from);
  void MergeFrom(const WindowsDevice_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowsDevice_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string friendly_name = 1;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 1;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string driver_version = 3;
  void clear_driver_version();
  static const int kDriverVersionFieldNumber = 3;
  const ::std::string& driver_version() const;
  void set_driver_version(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_version(::std::string&& value);
  #endif
  void set_driver_version(const char* value);
  void set_driver_version(const char* value, size_t size);
  ::std::string* mutable_driver_version();
  ::std::string* release_driver_version();
  void set_allocated_driver_version(::std::string* driver_version);

  // string driver_date = 4;
  void clear_driver_date();
  static const int kDriverDateFieldNumber = 4;
  const ::std::string& driver_date() const;
  void set_driver_date(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_date(::std::string&& value);
  #endif
  void set_driver_date(const char* value);
  void set_driver_date(const char* value, size_t size);
  ::std::string* mutable_driver_date();
  ::std::string* release_driver_date();
  void set_allocated_driver_date(::std::string* driver_date);

  // string driver_vendor = 5;
  void clear_driver_vendor();
  static const int kDriverVendorFieldNumber = 5;
  const ::std::string& driver_vendor() const;
  void set_driver_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_vendor(::std::string&& value);
  #endif
  void set_driver_vendor(const char* value);
  void set_driver_vendor(const char* value, size_t size);
  ::std::string* mutable_driver_vendor();
  ::std::string* release_driver_vendor();
  void set_allocated_driver_vendor(::std::string* driver_vendor);

  // string device_id = 6;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 6;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:aspia.proto.WindowsDevice.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr driver_version_;
  ::google::protobuf::internal::ArenaStringPtr driver_date_;
  ::google::protobuf::internal::ArenaStringPtr driver_vendor_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fwindows_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fwindows_5fdevice_2eproto::InitDefaultsWindowsDevice_ItemImpl();
};
// -------------------------------------------------------------------

class WindowsDevice : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.WindowsDevice) */ {
 public:
  WindowsDevice();
  virtual ~WindowsDevice();

  WindowsDevice(const WindowsDevice& from);

  inline WindowsDevice& operator=(const WindowsDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindowsDevice(WindowsDevice&& from) noexcept
    : WindowsDevice() {
    *this = ::std::move(from);
  }

  inline WindowsDevice& operator=(WindowsDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const WindowsDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowsDevice* internal_default_instance() {
    return reinterpret_cast<const WindowsDevice*>(
               &_WindowsDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WindowsDevice* other);
  friend void swap(WindowsDevice& a, WindowsDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindowsDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowsDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WindowsDevice& from);
  void MergeFrom(const WindowsDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowsDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WindowsDevice_Item Item;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.WindowsDevice.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::WindowsDevice_Item& item(int index) const;
  ::aspia::proto::WindowsDevice_Item* mutable_item(int index);
  ::aspia::proto::WindowsDevice_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::WindowsDevice_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::WindowsDevice_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.WindowsDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::WindowsDevice_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fwindows_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fwindows_5fdevice_2eproto::InitDefaultsWindowsDeviceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WindowsDevice_Item

// string friendly_name = 1;
inline void WindowsDevice_Item::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::friendly_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void WindowsDevice_Item::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.friendly_name)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.friendly_name)
}
#endif
inline void WindowsDevice_Item::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.friendly_name)
}
inline void WindowsDevice_Item::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.friendly_name)
}
inline ::std::string* WindowsDevice_Item::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_friendly_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.friendly_name)
}

// string description = 2;
inline void WindowsDevice_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.description)
  return description_.GetNoArena();
}
inline void WindowsDevice_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.description)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.description)
}
#endif
inline void WindowsDevice_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.description)
}
inline void WindowsDevice_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.description)
}
inline ::std::string* WindowsDevice_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.description)
}

// string driver_version = 3;
inline void WindowsDevice_Item::clear_driver_version() {
  driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::driver_version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.driver_version)
  return driver_version_.GetNoArena();
}
inline void WindowsDevice_Item::set_driver_version(const ::std::string& value) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.driver_version)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_driver_version(::std::string&& value) {
  
  driver_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.driver_version)
}
#endif
inline void WindowsDevice_Item::set_driver_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.driver_version)
}
inline void WindowsDevice_Item::set_driver_version(const char* value, size_t size) {
  
  driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.driver_version)
}
inline ::std::string* WindowsDevice_Item::mutable_driver_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.driver_version)
  return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_driver_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.driver_version)
  
  return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_driver_version(::std::string* driver_version) {
  if (driver_version != NULL) {
    
  } else {
    
  }
  driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.driver_version)
}

// string driver_date = 4;
inline void WindowsDevice_Item::clear_driver_date() {
  driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::driver_date() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.driver_date)
  return driver_date_.GetNoArena();
}
inline void WindowsDevice_Item::set_driver_date(const ::std::string& value) {
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.driver_date)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_driver_date(::std::string&& value) {
  
  driver_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.driver_date)
}
#endif
inline void WindowsDevice_Item::set_driver_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.driver_date)
}
inline void WindowsDevice_Item::set_driver_date(const char* value, size_t size) {
  
  driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.driver_date)
}
inline ::std::string* WindowsDevice_Item::mutable_driver_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.driver_date)
  return driver_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_driver_date() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.driver_date)
  
  return driver_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_driver_date(::std::string* driver_date) {
  if (driver_date != NULL) {
    
  } else {
    
  }
  driver_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_date);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.driver_date)
}

// string driver_vendor = 5;
inline void WindowsDevice_Item::clear_driver_vendor() {
  driver_vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::driver_vendor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.driver_vendor)
  return driver_vendor_.GetNoArena();
}
inline void WindowsDevice_Item::set_driver_vendor(const ::std::string& value) {
  
  driver_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.driver_vendor)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_driver_vendor(::std::string&& value) {
  
  driver_vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.driver_vendor)
}
#endif
inline void WindowsDevice_Item::set_driver_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.driver_vendor)
}
inline void WindowsDevice_Item::set_driver_vendor(const char* value, size_t size) {
  
  driver_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.driver_vendor)
}
inline ::std::string* WindowsDevice_Item::mutable_driver_vendor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.driver_vendor)
  return driver_vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_driver_vendor() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.driver_vendor)
  
  return driver_vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_driver_vendor(::std::string* driver_vendor) {
  if (driver_vendor != NULL) {
    
  } else {
    
  }
  driver_vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_vendor);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.driver_vendor)
}

// string device_id = 6;
inline void WindowsDevice_Item::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WindowsDevice_Item::device_id() const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.Item.device_id)
  return device_id_.GetNoArena();
}
inline void WindowsDevice_Item::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.WindowsDevice.Item.device_id)
}
#if LANG_CXX11
inline void WindowsDevice_Item::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.WindowsDevice.Item.device_id)
}
#endif
inline void WindowsDevice_Item::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.WindowsDevice.Item.device_id)
}
inline void WindowsDevice_Item::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.WindowsDevice.Item.device_id)
}
inline ::std::string* WindowsDevice_Item::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.Item.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowsDevice_Item::release_device_id() {
  // @@protoc_insertion_point(field_release:aspia.proto.WindowsDevice.Item.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowsDevice_Item::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.WindowsDevice.Item.device_id)
}

// -------------------------------------------------------------------

// WindowsDevice

// repeated .aspia.proto.WindowsDevice.Item item = 1;
inline int WindowsDevice::item_size() const {
  return item_.size();
}
inline void WindowsDevice::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::WindowsDevice_Item& WindowsDevice::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.WindowsDevice.item)
  return item_.Get(index);
}
inline ::aspia::proto::WindowsDevice_Item* WindowsDevice::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.WindowsDevice.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::WindowsDevice_Item* WindowsDevice::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.WindowsDevice.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::WindowsDevice_Item >*
WindowsDevice::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.WindowsDevice.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::WindowsDevice_Item >&
WindowsDevice::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.WindowsDevice.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fwindows_5fdevice_2eproto__INCLUDED

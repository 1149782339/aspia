// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth_session.proto

#include "auth_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace proto {
namespace auth {
class AllowMethodsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllowMethods>
      _instance;
} _AllowMethods_default_instance_;
class SelectMethodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelectMethod>
      _instance;
} _SelectMethod_default_instance_;
class BasicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicRequest>
      _instance;
} _BasicRequest_default_instance_;
class BasicResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicResponse>
      _instance;
} _BasicResponse_default_instance_;
class BasicResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicResult>
      _instance;
} _BasicResult_default_instance_;
}  // namespace auth
}  // namespace proto
namespace protobuf_auth_5fsession_2eproto {
void InitDefaultsAllowMethodsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::auth::_AllowMethods_default_instance_;
    new (ptr) ::proto::auth::AllowMethods();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::auth::AllowMethods::InitAsDefaultInstance();
}

void InitDefaultsAllowMethods() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAllowMethodsImpl);
}

void InitDefaultsSelectMethodImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::auth::_SelectMethod_default_instance_;
    new (ptr) ::proto::auth::SelectMethod();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::auth::SelectMethod::InitAsDefaultInstance();
}

void InitDefaultsSelectMethod() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSelectMethodImpl);
}

void InitDefaultsBasicRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::auth::_BasicRequest_default_instance_;
    new (ptr) ::proto::auth::BasicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::auth::BasicRequest::InitAsDefaultInstance();
}

void InitDefaultsBasicRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBasicRequestImpl);
}

void InitDefaultsBasicResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::auth::_BasicResponse_default_instance_;
    new (ptr) ::proto::auth::BasicResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::auth::BasicResponse::InitAsDefaultInstance();
}

void InitDefaultsBasicResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBasicResponseImpl);
}

void InitDefaultsBasicResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto::auth::_BasicResult_default_instance_;
    new (ptr) ::proto::auth::BasicResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::auth::BasicResult::InitAsDefaultInstance();
}

void InitDefaultsBasicResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBasicResultImpl);
}

}  // namespace protobuf_auth_5fsession_2eproto
namespace proto {
namespace auth {
bool Method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AllowMethods::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllowMethods::kMethodsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllowMethods::AllowMethods()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_auth_5fsession_2eproto::InitDefaultsAllowMethods();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.auth.AllowMethods)
}
AllowMethods::AllowMethods(const AllowMethods& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  methods_ = from.methods_;
  // @@protoc_insertion_point(copy_constructor:proto.auth.AllowMethods)
}

void AllowMethods::SharedCtor() {
  methods_ = 0u;
  _cached_size_ = 0;
}

AllowMethods::~AllowMethods() {
  // @@protoc_insertion_point(destructor:proto.auth.AllowMethods)
  SharedDtor();
}

void AllowMethods::SharedDtor() {
}

void AllowMethods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AllowMethods& AllowMethods::default_instance() {
  ::protobuf_auth_5fsession_2eproto::InitDefaultsAllowMethods();
  return *internal_default_instance();
}

AllowMethods* AllowMethods::New(::google::protobuf::Arena* arena) const {
  AllowMethods* n = new AllowMethods;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllowMethods::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.auth.AllowMethods)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  methods_ = 0u;
  _internal_metadata_.Clear();
}

bool AllowMethods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:proto.auth.AllowMethods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 methods = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &methods_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.auth.AllowMethods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.auth.AllowMethods)
  return false;
#undef DO_
}

void AllowMethods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.auth.AllowMethods)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 methods = 1;
  if (this->methods() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->methods(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:proto.auth.AllowMethods)
}

size_t AllowMethods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.auth.AllowMethods)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 methods = 1;
  if (this->methods() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->methods());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllowMethods::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllowMethods*>(&from));
}

void AllowMethods::MergeFrom(const AllowMethods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.auth.AllowMethods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.methods() != 0) {
    set_methods(from.methods());
  }
}

void AllowMethods::CopyFrom(const AllowMethods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.auth.AllowMethods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowMethods::IsInitialized() const {
  return true;
}

void AllowMethods::Swap(AllowMethods* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllowMethods::InternalSwap(AllowMethods* other) {
  using std::swap;
  swap(methods_, other->methods_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AllowMethods::GetTypeName() const {
  return "proto.auth.AllowMethods";
}


// ===================================================================

void SelectMethod::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectMethod::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectMethod::SelectMethod()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_auth_5fsession_2eproto::InitDefaultsSelectMethod();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.auth.SelectMethod)
}
SelectMethod::SelectMethod(const SelectMethod& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:proto.auth.SelectMethod)
}

void SelectMethod::SharedCtor() {
  method_ = 0;
  _cached_size_ = 0;
}

SelectMethod::~SelectMethod() {
  // @@protoc_insertion_point(destructor:proto.auth.SelectMethod)
  SharedDtor();
}

void SelectMethod::SharedDtor() {
}

void SelectMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SelectMethod& SelectMethod::default_instance() {
  ::protobuf_auth_5fsession_2eproto::InitDefaultsSelectMethod();
  return *internal_default_instance();
}

SelectMethod* SelectMethod::New(::google::protobuf::Arena* arena) const {
  SelectMethod* n = new SelectMethod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.auth.SelectMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_ = 0;
  _internal_metadata_.Clear();
}

bool SelectMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:proto.auth.SelectMethod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.auth.Method method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::proto::auth::Method >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.auth.SelectMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.auth.SelectMethod)
  return false;
#undef DO_
}

void SelectMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.auth.SelectMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.auth.Method method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:proto.auth.SelectMethod)
}

size_t SelectMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.auth.SelectMethod)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .proto.auth.Method method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectMethod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SelectMethod*>(&from));
}

void SelectMethod::MergeFrom(const SelectMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.auth.SelectMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method() != 0) {
    set_method(from.method());
  }
}

void SelectMethod::CopyFrom(const SelectMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.auth.SelectMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectMethod::IsInitialized() const {
  return true;
}

void SelectMethod::Swap(SelectMethod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectMethod::InternalSwap(SelectMethod* other) {
  using std::swap;
  swap(method_, other->method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SelectMethod::GetTypeName() const {
  return "proto.auth.SelectMethod";
}


// ===================================================================

void BasicRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicRequest::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicRequest::BasicRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.auth.BasicRequest)
}
BasicRequest::BasicRequest(const BasicRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.auth.BasicRequest)
}

void BasicRequest::SharedCtor() {
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BasicRequest::~BasicRequest() {
  // @@protoc_insertion_point(destructor:proto.auth.BasicRequest)
  SharedDtor();
}

void BasicRequest::SharedDtor() {
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicRequest& BasicRequest::default_instance() {
  ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicRequest();
  return *internal_default_instance();
}

BasicRequest* BasicRequest::New(::google::protobuf::Arena* arena) const {
  BasicRequest* n = new BasicRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.auth.BasicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:proto.auth.BasicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.auth.BasicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.auth.BasicRequest)
  return false;
#undef DO_
}

void BasicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.auth.BasicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nonce(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:proto.auth.BasicRequest)
}

size_t BasicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.auth.BasicRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nonce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicRequest*>(&from));
}

void BasicRequest::MergeFrom(const BasicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.auth.BasicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
}

void BasicRequest::CopyFrom(const BasicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.auth.BasicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicRequest::IsInitialized() const {
  return true;
}

void BasicRequest::Swap(BasicRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicRequest::InternalSwap(BasicRequest* other) {
  using std::swap;
  nonce_.Swap(&other->nonce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string BasicRequest::GetTypeName() const {
  return "proto.auth.BasicRequest";
}


// ===================================================================

void BasicResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicResponse::kSessionTypeFieldNumber;
const int BasicResponse::kUsernameFieldNumber;
const int BasicResponse::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicResponse::BasicResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.auth.BasicResponse)
}
BasicResponse::BasicResponse(const BasicResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  session_type_ = from.session_type_;
  // @@protoc_insertion_point(copy_constructor:proto.auth.BasicResponse)
}

void BasicResponse::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_type_ = 0;
  _cached_size_ = 0;
}

BasicResponse::~BasicResponse() {
  // @@protoc_insertion_point(destructor:proto.auth.BasicResponse)
  SharedDtor();
}

void BasicResponse::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicResponse& BasicResponse::default_instance() {
  ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicResponse();
  return *internal_default_instance();
}

BasicResponse* BasicResponse::New(::google::protobuf::Arena* arena) const {
  BasicResponse* n = new BasicResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.auth.BasicResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_type_ = 0;
  _internal_metadata_.Clear();
}

bool BasicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:proto.auth.BasicResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.auth.SessionType session_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::proto::auth::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.auth.BasicResponse.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.auth.BasicResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.auth.BasicResponse)
  return false;
#undef DO_
}

void BasicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.auth.BasicResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.auth.SessionType session_type = 1;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->session_type(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.auth.BasicResponse.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:proto.auth.BasicResponse)
}

size_t BasicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.auth.BasicResponse)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .proto.auth.SessionType session_type = 1;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicResponse*>(&from));
}

void BasicResponse::MergeFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.auth.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
}

void BasicResponse::CopyFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.auth.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResponse::IsInitialized() const {
  return true;
}

void BasicResponse::Swap(BasicResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicResponse::InternalSwap(BasicResponse* other) {
  using std::swap;
  username_.Swap(&other->username_);
  key_.Swap(&other->key_);
  swap(session_type_, other->session_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string BasicResponse::GetTypeName() const {
  return "proto.auth.BasicResponse";
}


// ===================================================================

void BasicResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicResult::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicResult::BasicResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.auth.BasicResult)
}
BasicResult::BasicResult(const BasicResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:proto.auth.BasicResult)
}

void BasicResult::SharedCtor() {
  status_ = 0;
  _cached_size_ = 0;
}

BasicResult::~BasicResult() {
  // @@protoc_insertion_point(destructor:proto.auth.BasicResult)
  SharedDtor();
}

void BasicResult::SharedDtor() {
}

void BasicResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicResult& BasicResult::default_instance() {
  ::protobuf_auth_5fsession_2eproto::InitDefaultsBasicResult();
  return *internal_default_instance();
}

BasicResult* BasicResult::New(::google::protobuf::Arena* arena) const {
  BasicResult* n = new BasicResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.auth.BasicResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool BasicResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:proto.auth.BasicResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.auth.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::proto::auth::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.auth.BasicResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.auth.BasicResult)
  return false;
#undef DO_
}

void BasicResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.auth.BasicResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.auth.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:proto.auth.BasicResult)
}

size_t BasicResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.auth.BasicResult)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .proto.auth.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicResult*>(&from));
}

void BasicResult::MergeFrom(const BasicResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.auth.BasicResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void BasicResult::CopyFrom(const BasicResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.auth.BasicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResult::IsInitialized() const {
  return true;
}

void BasicResult::Swap(BasicResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicResult::InternalSwap(BasicResult* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string BasicResult::GetTypeName() const {
  return "proto.auth.BasicResult";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace proto

// @@protoc_insertion_point(global_scope)

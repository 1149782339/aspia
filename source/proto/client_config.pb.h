// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_config.proto

#ifndef PROTOBUF_client_5fconfig_2eproto__INCLUDED
#define PROTOBUF_client_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "auth_session.pb.h"
#include "desktop_session.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_client_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsClientConfigImpl();
void InitDefaultsClientConfig();
inline void InitDefaults() {
  InitDefaultsClientConfig();
}
}  // namespace protobuf_client_5fconfig_2eproto
namespace aspia {
namespace proto {
class ClientConfig;
class ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class ClientConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.ClientConfig) */ {
 public:
  ClientConfig();
  virtual ~ClientConfig();

  ClientConfig(const ClientConfig& from);

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientConfig* other);
  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientConfig& from);
  void MergeFrom(const ClientConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .aspia.proto.desktop.Config desktop_session = 5;
  bool has_desktop_session() const;
  void clear_desktop_session();
  static const int kDesktopSessionFieldNumber = 5;
  const ::aspia::proto::desktop::Config& desktop_session() const;
  ::aspia::proto::desktop::Config* release_desktop_session();
  ::aspia::proto::desktop::Config* mutable_desktop_session();
  void set_allocated_desktop_session(::aspia::proto::desktop::Config* desktop_session);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // .aspia.proto.auth.SessionType session_type = 4;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  ::aspia::proto::auth::SessionType session_type() const;
  void set_session_type(::aspia::proto::auth::SessionType value);

  // @@protoc_insertion_point(class_scope:aspia.proto.ClientConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::aspia::proto::desktop::Config* desktop_session_;
  ::google::protobuf::uint32 port_;
  int session_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_client_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_client_5fconfig_2eproto::InitDefaultsClientConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConfig

// string address = 1;
inline void ClientConfig::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConfig::address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClientConfig.address)
  return address_.GetNoArena();
}
inline void ClientConfig::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClientConfig.address)
}
#if LANG_CXX11
inline void ClientConfig::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClientConfig.address)
}
#endif
inline void ClientConfig::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClientConfig.address)
}
inline void ClientConfig::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClientConfig.address)
}
inline ::std::string* ClientConfig::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClientConfig.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConfig::release_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClientConfig.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConfig::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClientConfig.address)
}

// uint32 port = 2;
inline void ClientConfig::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ClientConfig::port() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClientConfig.port)
  return port_;
}
inline void ClientConfig::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.ClientConfig.port)
}

// string username = 3;
inline void ClientConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConfig::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClientConfig.username)
  return username_.GetNoArena();
}
inline void ClientConfig::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.ClientConfig.username)
}
#if LANG_CXX11
inline void ClientConfig::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.ClientConfig.username)
}
#endif
inline void ClientConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.ClientConfig.username)
}
inline void ClientConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.ClientConfig.username)
}
inline ::std::string* ClientConfig::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClientConfig.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConfig::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClientConfig.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConfig::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClientConfig.username)
}

// .aspia.proto.auth.SessionType session_type = 4;
inline void ClientConfig::clear_session_type() {
  session_type_ = 0;
}
inline ::aspia::proto::auth::SessionType ClientConfig::session_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClientConfig.session_type)
  return static_cast< ::aspia::proto::auth::SessionType >(session_type_);
}
inline void ClientConfig::set_session_type(::aspia::proto::auth::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.ClientConfig.session_type)
}

// .aspia.proto.desktop.Config desktop_session = 5;
inline bool ClientConfig::has_desktop_session() const {
  return this != internal_default_instance() && desktop_session_ != NULL;
}
inline const ::aspia::proto::desktop::Config& ClientConfig::desktop_session() const {
  const ::aspia::proto::desktop::Config* p = desktop_session_;
  // @@protoc_insertion_point(field_get:aspia.proto.ClientConfig.desktop_session)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::desktop::Config*>(
      &::aspia::proto::desktop::_Config_default_instance_);
}
inline ::aspia::proto::desktop::Config* ClientConfig::release_desktop_session() {
  // @@protoc_insertion_point(field_release:aspia.proto.ClientConfig.desktop_session)
  
  ::aspia::proto::desktop::Config* temp = desktop_session_;
  desktop_session_ = NULL;
  return temp;
}
inline ::aspia::proto::desktop::Config* ClientConfig::mutable_desktop_session() {
  
  if (desktop_session_ == NULL) {
    desktop_session_ = new ::aspia::proto::desktop::Config;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.ClientConfig.desktop_session)
  return desktop_session_;
}
inline void ClientConfig::set_allocated_desktop_session(::aspia::proto::desktop::Config* desktop_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(desktop_session_);
  }
  if (desktop_session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desktop_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desktop_session, submessage_arena);
    }
    
  } else {
    
  }
  desktop_session_ = desktop_session;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.ClientConfig.desktop_session)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fconfig_2eproto__INCLUDED

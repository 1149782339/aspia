// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_session.proto

#include "desktop_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
namespace desktop {
class HostToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HostToClient>
      _instance;
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost>
      _instance;
} _ClientToHost_default_instance_;
}  // namespace desktop
}  // namespace proto
}  // namespace aspia
namespace protobuf_desktop_5fsession_2eproto {
void InitDefaultsHostToClientImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsVideoPacket();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsAudioPacket();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsCursorShape();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsClipboardEvent();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsDesktopSessionConfigRequest();
  {
    void* ptr = &::aspia::proto::desktop::_HostToClient_default_instance_;
    new (ptr) ::aspia::proto::desktop::HostToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::HostToClient::InitAsDefaultInstance();
}

void InitDefaultsHostToClient() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHostToClientImpl);
}

void InitDefaultsClientToHostImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsPointerEvent();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsKeyEvent();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsClipboardEvent();
  protobuf_desktop_5fsession_5fmessage_2eproto::InitDefaultsDesktopSessionConfig();
  {
    void* ptr = &::aspia::proto::desktop::_ClientToHost_default_instance_;
    new (ptr) ::aspia::proto::desktop::ClientToHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::ClientToHost::InitAsDefaultInstance();
}

void InitDefaultsClientToHost() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientToHostImpl);
}

}  // namespace protobuf_desktop_5fsession_2eproto
namespace aspia {
namespace proto {
namespace desktop {

// ===================================================================

void HostToClient::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->video_packet_ = const_cast< ::aspia::proto::VideoPacket*>(
      ::aspia::proto::VideoPacket::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->audio_packet_ = const_cast< ::aspia::proto::AudioPacket*>(
      ::aspia::proto::AudioPacket::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->cursor_shape_ = const_cast< ::aspia::proto::CursorShape*>(
      ::aspia::proto::CursorShape::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->clipboard_event_ = const_cast< ::aspia::proto::ClipboardEvent*>(
      ::aspia::proto::ClipboardEvent::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->config_request_ = const_cast< ::aspia::proto::DesktopSessionConfigRequest*>(
      ::aspia::proto::DesktopSessionConfigRequest::internal_default_instance());
}
void HostToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) {
    delete video_packet_;
  }
  video_packet_ = NULL;
}
void HostToClient::clear_audio_packet() {
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) {
    delete audio_packet_;
  }
  audio_packet_ = NULL;
}
void HostToClient::clear_cursor_shape() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) {
    delete cursor_shape_;
  }
  cursor_shape_ = NULL;
}
void HostToClient::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
}
void HostToClient::clear_config_request() {
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) {
    delete config_request_;
  }
  config_request_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kVideoPacketFieldNumber;
const int HostToClient::kAudioPacketFieldNumber;
const int HostToClient::kCursorShapeFieldNumber;
const int HostToClient::kClipboardEventFieldNumber;
const int HostToClient::kConfigRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_desktop_5fsession_2eproto::InitDefaultsHostToClient();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_packet()) {
    video_packet_ = new ::aspia::proto::VideoPacket(*from.video_packet_);
  } else {
    video_packet_ = NULL;
  }
  if (from.has_audio_packet()) {
    audio_packet_ = new ::aspia::proto::AudioPacket(*from.audio_packet_);
  } else {
    audio_packet_ = NULL;
  }
  if (from.has_cursor_shape()) {
    cursor_shape_ = new ::aspia::proto::CursorShape(*from.cursor_shape_);
  } else {
    cursor_shape_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::aspia::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_config_request()) {
    config_request_ = new ::aspia::proto::DesktopSessionConfigRequest(*from.config_request_);
  } else {
    config_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.HostToClient)
}

void HostToClient::SharedCtor() {
  ::memset(&video_packet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_request_) -
      reinterpret_cast<char*>(&video_packet_)) + sizeof(config_request_));
  _cached_size_ = 0;
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) delete video_packet_;
  if (this != internal_default_instance()) delete audio_packet_;
  if (this != internal_default_instance()) delete cursor_shape_;
  if (this != internal_default_instance()) delete clipboard_event_;
  if (this != internal_default_instance()) delete config_request_;
}

void HostToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostToClient& HostToClient::default_instance() {
  ::protobuf_desktop_5fsession_2eproto::InitDefaultsHostToClient();
  return *internal_default_instance();
}

HostToClient* HostToClient::New(::google::protobuf::Arena* arena) const {
  HostToClient* n = new HostToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) {
    delete video_packet_;
  }
  video_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) {
    delete audio_packet_;
  }
  audio_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) {
    delete cursor_shape_;
  }
  cursor_shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) {
    delete config_request_;
  }
  config_request_ = NULL;
  _internal_metadata_.Clear();
}

bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.HostToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.VideoPacket video_packet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_video_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.AudioPacket audio_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.CursorShape cursor_shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cursor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.ClipboardEvent clipboard_event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DesktopSessionConfigRequest config_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.HostToClient)
  return false;
#undef DO_
}

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->video_packet_, output);
  }

  // .aspia.proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->audio_packet_, output);
  }

  // .aspia.proto.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cursor_shape_, output);
  }

  // .aspia.proto.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipboard_event_, output);
  }

  // .aspia.proto.DesktopSessionConfigRequest config_request = 5;
  if (this->has_config_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->config_request_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.HostToClient)
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.HostToClient)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->video_packet_);
  }

  // .aspia.proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->audio_packet_);
  }

  // .aspia.proto.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cursor_shape_);
  }

  // .aspia.proto.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->clipboard_event_);
  }

  // .aspia.proto.DesktopSessionConfigRequest config_request = 5;
  if (this->has_config_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostToClient*>(&from));
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_packet()) {
    mutable_video_packet()->::aspia::proto::VideoPacket::MergeFrom(from.video_packet());
  }
  if (from.has_audio_packet()) {
    mutable_audio_packet()->::aspia::proto::AudioPacket::MergeFrom(from.audio_packet());
  }
  if (from.has_cursor_shape()) {
    mutable_cursor_shape()->::aspia::proto::CursorShape::MergeFrom(from.cursor_shape());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::aspia::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_config_request()) {
    mutable_config_request()->::aspia::proto::DesktopSessionConfigRequest::MergeFrom(from.config_request());
  }
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  using std::swap;
  swap(video_packet_, other->video_packet_);
  swap(audio_packet_, other->audio_packet_);
  swap(cursor_shape_, other->cursor_shape_);
  swap(clipboard_event_, other->clipboard_event_);
  swap(config_request_, other->config_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string HostToClient::GetTypeName() const {
  return "aspia.proto.desktop.HostToClient";
}


// ===================================================================

void ClientToHost::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->pointer_event_ = const_cast< ::aspia::proto::PointerEvent*>(
      ::aspia::proto::PointerEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->key_event_ = const_cast< ::aspia::proto::KeyEvent*>(
      ::aspia::proto::KeyEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->clipboard_event_ = const_cast< ::aspia::proto::ClipboardEvent*>(
      ::aspia::proto::ClipboardEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->config_ = const_cast< ::aspia::proto::DesktopSessionConfig*>(
      ::aspia::proto::DesktopSessionConfig::internal_default_instance());
}
void ClientToHost::clear_pointer_event() {
  if (GetArenaNoVirtual() == NULL && pointer_event_ != NULL) {
    delete pointer_event_;
  }
  pointer_event_ = NULL;
}
void ClientToHost::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) {
    delete key_event_;
  }
  key_event_ = NULL;
}
void ClientToHost::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
}
void ClientToHost::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kPointerEventFieldNumber;
const int ClientToHost::kKeyEventFieldNumber;
const int ClientToHost::kClipboardEventFieldNumber;
const int ClientToHost::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_desktop_5fsession_2eproto::InitDefaultsClientToHost();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pointer_event()) {
    pointer_event_ = new ::aspia::proto::PointerEvent(*from.pointer_event_);
  } else {
    pointer_event_ = NULL;
  }
  if (from.has_key_event()) {
    key_event_ = new ::aspia::proto::KeyEvent(*from.key_event_);
  } else {
    key_event_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::aspia::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::aspia::proto::DesktopSessionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::memset(&pointer_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&pointer_event_)) + sizeof(config_));
  _cached_size_ = 0;
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) delete pointer_event_;
  if (this != internal_default_instance()) delete key_event_;
  if (this != internal_default_instance()) delete clipboard_event_;
  if (this != internal_default_instance()) delete config_;
}

void ClientToHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToHost& ClientToHost::default_instance() {
  ::protobuf_desktop_5fsession_2eproto::InitDefaultsClientToHost();
  return *internal_default_instance();
}

ClientToHost* ClientToHost::New(::google::protobuf::Arena* arena) const {
  ClientToHost* n = new ClientToHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pointer_event_ != NULL) {
    delete pointer_event_;
  }
  pointer_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) {
    delete key_event_;
  }
  key_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.ClientToHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.PointerEvent pointer_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pointer_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.KeyEvent key_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.ClipboardEvent clipboard_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DesktopSessionConfig config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.ClientToHost)
  return false;
#undef DO_
}

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.PointerEvent pointer_event = 1;
  if (this->has_pointer_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->pointer_event_, output);
  }

  // .aspia.proto.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->key_event_, output);
  }

  // .aspia.proto.ClipboardEvent clipboard_event = 3;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->clipboard_event_, output);
  }

  // .aspia.proto.DesktopSessionConfig config = 4;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->config_, output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.ClientToHost)
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.ClientToHost)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.PointerEvent pointer_event = 1;
  if (this->has_pointer_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pointer_event_);
  }

  // .aspia.proto.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->key_event_);
  }

  // .aspia.proto.ClipboardEvent clipboard_event = 3;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->clipboard_event_);
  }

  // .aspia.proto.DesktopSessionConfig config = 4;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToHost*>(&from));
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pointer_event()) {
    mutable_pointer_event()->::aspia::proto::PointerEvent::MergeFrom(from.pointer_event());
  }
  if (from.has_key_event()) {
    mutable_key_event()->::aspia::proto::KeyEvent::MergeFrom(from.key_event());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::aspia::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_config()) {
    mutable_config()->::aspia::proto::DesktopSessionConfig::MergeFrom(from.config());
  }
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  using std::swap;
  swap(pointer_event_, other->pointer_event_);
  swap(key_event_, other->key_event_);
  swap(clipboard_event_, other->clipboard_event_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToHost::GetTypeName() const {
  return "aspia.proto.desktop.ClientToHost";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace desktop
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

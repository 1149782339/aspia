// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
namespace file_transfer {
class HostToClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostToClient> {
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost> {
} _ClientToHost_default_instance_;

namespace protobuf_file_5ftransfer_5fsession_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HostToClient_default_instance_.Shutdown();
  _ClientToHost_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::aspia::proto::protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  _HostToClient_default_instance_.DefaultConstruct();
  _ClientToHost_default_instance_.DefaultConstruct();
  _HostToClient_default_instance_.get_mutable()->drive_list_ = const_cast< ::aspia::proto::DriveList*>(
      ::aspia::proto::DriveList::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->file_list_ = const_cast< ::aspia::proto::FileList*>(
      ::aspia::proto::FileList::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->directory_size_ = const_cast< ::aspia::proto::DirectorySize*>(
      ::aspia::proto::DirectorySize::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->file_packet_ = const_cast< ::aspia::proto::FilePacket*>(
      ::aspia::proto::FilePacket::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_list_request_ = const_cast< ::aspia::proto::FileListRequest*>(
      ::aspia::proto::FileListRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->directory_size_request_ = const_cast< ::aspia::proto::DirectorySizeRequest*>(
      ::aspia::proto::DirectorySizeRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->create_directory_request_ = const_cast< ::aspia::proto::CreateDirectoryRequest*>(
      ::aspia::proto::CreateDirectoryRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->rename_request_ = const_cast< ::aspia::proto::RenameRequest*>(
      ::aspia::proto::RenameRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->remove_request_ = const_cast< ::aspia::proto::RemoveRequest*>(
      ::aspia::proto::RemoveRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_download_request_ = const_cast< ::aspia::proto::FileDownloadRequest*>(
      ::aspia::proto::FileDownloadRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_upload_request_ = const_cast< ::aspia::proto::FileUploadRequest*>(
      ::aspia::proto::FileUploadRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->file_packet_ = const_cast< ::aspia::proto::FilePacket*>(
      ::aspia::proto::FilePacket::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::aspia::proto::protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_5fsession_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kTypeFieldNumber;
const int HostToClient::kStatusFieldNumber;
const int HostToClient::kDriveListFieldNumber;
const int HostToClient::kFileListFieldNumber;
const int HostToClient::kDirectorySizeFieldNumber;
const int HostToClient::kFilePacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list()) {
    drive_list_ = new ::aspia::proto::DriveList(*from.drive_list_);
  } else {
    drive_list_ = NULL;
  }
  if (from.has_file_list()) {
    file_list_ = new ::aspia::proto::FileList(*from.file_list_);
  } else {
    file_list_ = NULL;
  }
  if (from.has_directory_size()) {
    directory_size_ = new ::aspia::proto::DirectorySize(*from.directory_size_);
  } else {
    directory_size_ = NULL;
  }
  if (from.has_file_packet()) {
    file_packet_ = new ::aspia::proto::FilePacket(*from.file_packet_);
  } else {
    file_packet_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.HostToClient)
}

void HostToClient::SharedCtor() {
  ::memset(&drive_list_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&drive_list_) + sizeof(status_));
  _cached_size_ = 0;
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_list_;
  }
  if (this != internal_default_instance()) {
    delete file_list_;
  }
  if (this != internal_default_instance()) {
    delete directory_size_;
  }
  if (this != internal_default_instance()) {
    delete file_packet_;
  }
}

void HostToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostToClient& HostToClient::default_instance() {
  protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostToClient* HostToClient::New(::google::protobuf::Arena* arena) const {
  HostToClient* n = new HostToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.HostToClient)
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) {
    delete drive_list_;
  }
  drive_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) {
    delete file_list_;
  }
  file_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && directory_size_ != NULL) {
    delete directory_size_;
  }
  directory_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_packet_ != NULL) {
    delete file_packet_;
  }
  file_packet_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_) + sizeof(status_));
}

bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.HostToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.RequestStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::RequestStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DriveList drive_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FileList file_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DirectorySize directory_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directory_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FilePacket file_packet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.HostToClient)
  return false;
#undef DO_
}

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .aspia.proto.RequestStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // .aspia.proto.DriveList drive_list = 3;
  if (this->has_drive_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->drive_list_, output);
  }

  // .aspia.proto.FileList file_list = 4;
  if (this->has_file_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->file_list_, output);
  }

  // .aspia.proto.DirectorySize directory_size = 5;
  if (this->has_directory_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->directory_size_, output);
  }

  // .aspia.proto.FilePacket file_packet = 6;
  if (this->has_file_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->file_packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.HostToClient)
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.HostToClient)
  size_t total_size = 0;

  // .aspia.proto.DriveList drive_list = 3;
  if (this->has_drive_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_list_);
  }

  // .aspia.proto.FileList file_list = 4;
  if (this->has_file_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_list_);
  }

  // .aspia.proto.DirectorySize directory_size = 5;
  if (this->has_directory_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->directory_size_);
  }

  // .aspia.proto.FilePacket file_packet = 6;
  if (this->has_file_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_packet_);
  }

  // .aspia.proto.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.RequestStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostToClient*>(&from));
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_list()) {
    mutable_drive_list()->::aspia::proto::DriveList::MergeFrom(from.drive_list());
  }
  if (from.has_file_list()) {
    mutable_file_list()->::aspia::proto::FileList::MergeFrom(from.file_list());
  }
  if (from.has_directory_size()) {
    mutable_directory_size()->::aspia::proto::DirectorySize::MergeFrom(from.directory_size());
  }
  if (from.has_file_packet()) {
    mutable_file_packet()->::aspia::proto::FilePacket::MergeFrom(from.file_packet());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  std::swap(drive_list_, other->drive_list_);
  std::swap(file_list_, other->file_list_);
  std::swap(directory_size_, other->directory_size_);
  std::swap(file_packet_, other->file_packet_);
  std::swap(type_, other->type_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostToClient::GetTypeName() const {
  return "aspia.proto.file_transfer.HostToClient";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostToClient

// .aspia.proto.RequestType type = 1;
void HostToClient::clear_type() {
  type_ = 0;
}
::aspia::proto::RequestType HostToClient::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.type)
  return static_cast< ::aspia::proto::RequestType >(type_);
}
void HostToClient::set_type(::aspia::proto::RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.file_transfer.HostToClient.type)
}

// .aspia.proto.RequestStatus status = 2;
void HostToClient::clear_status() {
  status_ = 0;
}
::aspia::proto::RequestStatus HostToClient::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.status)
  return static_cast< ::aspia::proto::RequestStatus >(status_);
}
void HostToClient::set_status(::aspia::proto::RequestStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.file_transfer.HostToClient.status)
}

// .aspia.proto.DriveList drive_list = 3;
bool HostToClient::has_drive_list() const {
  return this != internal_default_instance() && drive_list_ != NULL;
}
void HostToClient::clear_drive_list() {
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) delete drive_list_;
  drive_list_ = NULL;
}
const ::aspia::proto::DriveList& HostToClient::drive_list() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.drive_list)
  return drive_list_ != NULL ? *drive_list_
                         : *::aspia::proto::DriveList::internal_default_instance();
}
::aspia::proto::DriveList* HostToClient::mutable_drive_list() {
  
  if (drive_list_ == NULL) {
    drive_list_ = new ::aspia::proto::DriveList;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.drive_list)
  return drive_list_;
}
::aspia::proto::DriveList* HostToClient::release_drive_list() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.drive_list)
  
  ::aspia::proto::DriveList* temp = drive_list_;
  drive_list_ = NULL;
  return temp;
}
void HostToClient::set_allocated_drive_list(::aspia::proto::DriveList* drive_list) {
  delete drive_list_;
  drive_list_ = drive_list;
  if (drive_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.drive_list)
}

// .aspia.proto.FileList file_list = 4;
bool HostToClient::has_file_list() const {
  return this != internal_default_instance() && file_list_ != NULL;
}
void HostToClient::clear_file_list() {
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) delete file_list_;
  file_list_ = NULL;
}
const ::aspia::proto::FileList& HostToClient::file_list() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.file_list)
  return file_list_ != NULL ? *file_list_
                         : *::aspia::proto::FileList::internal_default_instance();
}
::aspia::proto::FileList* HostToClient::mutable_file_list() {
  
  if (file_list_ == NULL) {
    file_list_ = new ::aspia::proto::FileList;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.file_list)
  return file_list_;
}
::aspia::proto::FileList* HostToClient::release_file_list() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.file_list)
  
  ::aspia::proto::FileList* temp = file_list_;
  file_list_ = NULL;
  return temp;
}
void HostToClient::set_allocated_file_list(::aspia::proto::FileList* file_list) {
  delete file_list_;
  file_list_ = file_list;
  if (file_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.file_list)
}

// .aspia.proto.DirectorySize directory_size = 5;
bool HostToClient::has_directory_size() const {
  return this != internal_default_instance() && directory_size_ != NULL;
}
void HostToClient::clear_directory_size() {
  if (GetArenaNoVirtual() == NULL && directory_size_ != NULL) delete directory_size_;
  directory_size_ = NULL;
}
const ::aspia::proto::DirectorySize& HostToClient::directory_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.directory_size)
  return directory_size_ != NULL ? *directory_size_
                         : *::aspia::proto::DirectorySize::internal_default_instance();
}
::aspia::proto::DirectorySize* HostToClient::mutable_directory_size() {
  
  if (directory_size_ == NULL) {
    directory_size_ = new ::aspia::proto::DirectorySize;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.directory_size)
  return directory_size_;
}
::aspia::proto::DirectorySize* HostToClient::release_directory_size() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.directory_size)
  
  ::aspia::proto::DirectorySize* temp = directory_size_;
  directory_size_ = NULL;
  return temp;
}
void HostToClient::set_allocated_directory_size(::aspia::proto::DirectorySize* directory_size) {
  delete directory_size_;
  directory_size_ = directory_size;
  if (directory_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.directory_size)
}

// .aspia.proto.FilePacket file_packet = 6;
bool HostToClient::has_file_packet() const {
  return this != internal_default_instance() && file_packet_ != NULL;
}
void HostToClient::clear_file_packet() {
  if (GetArenaNoVirtual() == NULL && file_packet_ != NULL) delete file_packet_;
  file_packet_ = NULL;
}
const ::aspia::proto::FilePacket& HostToClient::file_packet() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.HostToClient.file_packet)
  return file_packet_ != NULL ? *file_packet_
                         : *::aspia::proto::FilePacket::internal_default_instance();
}
::aspia::proto::FilePacket* HostToClient::mutable_file_packet() {
  
  if (file_packet_ == NULL) {
    file_packet_ = new ::aspia::proto::FilePacket;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.HostToClient.file_packet)
  return file_packet_;
}
::aspia::proto::FilePacket* HostToClient::release_file_packet() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.HostToClient.file_packet)
  
  ::aspia::proto::FilePacket* temp = file_packet_;
  file_packet_ = NULL;
  return temp;
}
void HostToClient::set_allocated_file_packet(::aspia::proto::FilePacket* file_packet) {
  delete file_packet_;
  file_packet_ = file_packet;
  if (file_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.HostToClient.file_packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kTypeFieldNumber;
const int ClientToHost::kFileListRequestFieldNumber;
const int ClientToHost::kDirectorySizeRequestFieldNumber;
const int ClientToHost::kCreateDirectoryRequestFieldNumber;
const int ClientToHost::kRenameRequestFieldNumber;
const int ClientToHost::kRemoveRequestFieldNumber;
const int ClientToHost::kFileDownloadRequestFieldNumber;
const int ClientToHost::kFileUploadRequestFieldNumber;
const int ClientToHost::kFilePacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_file_list_request()) {
    file_list_request_ = new ::aspia::proto::FileListRequest(*from.file_list_request_);
  } else {
    file_list_request_ = NULL;
  }
  if (from.has_directory_size_request()) {
    directory_size_request_ = new ::aspia::proto::DirectorySizeRequest(*from.directory_size_request_);
  } else {
    directory_size_request_ = NULL;
  }
  if (from.has_create_directory_request()) {
    create_directory_request_ = new ::aspia::proto::CreateDirectoryRequest(*from.create_directory_request_);
  } else {
    create_directory_request_ = NULL;
  }
  if (from.has_rename_request()) {
    rename_request_ = new ::aspia::proto::RenameRequest(*from.rename_request_);
  } else {
    rename_request_ = NULL;
  }
  if (from.has_remove_request()) {
    remove_request_ = new ::aspia::proto::RemoveRequest(*from.remove_request_);
  } else {
    remove_request_ = NULL;
  }
  if (from.has_file_download_request()) {
    file_download_request_ = new ::aspia::proto::FileDownloadRequest(*from.file_download_request_);
  } else {
    file_download_request_ = NULL;
  }
  if (from.has_file_upload_request()) {
    file_upload_request_ = new ::aspia::proto::FileUploadRequest(*from.file_upload_request_);
  } else {
    file_upload_request_ = NULL;
  }
  if (from.has_file_packet()) {
    file_packet_ = new ::aspia::proto::FilePacket(*from.file_packet_);
  } else {
    file_packet_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::memset(&file_list_request_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&file_list_request_) + sizeof(type_));
  _cached_size_ = 0;
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) {
    delete file_list_request_;
  }
  if (this != internal_default_instance()) {
    delete directory_size_request_;
  }
  if (this != internal_default_instance()) {
    delete create_directory_request_;
  }
  if (this != internal_default_instance()) {
    delete rename_request_;
  }
  if (this != internal_default_instance()) {
    delete remove_request_;
  }
  if (this != internal_default_instance()) {
    delete file_download_request_;
  }
  if (this != internal_default_instance()) {
    delete file_upload_request_;
  }
  if (this != internal_default_instance()) {
    delete file_packet_;
  }
}

void ClientToHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToHost& ClientToHost::default_instance() {
  protobuf_file_5ftransfer_5fsession_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToHost* ClientToHost::New(::google::protobuf::Arena* arena) const {
  ClientToHost* n = new ClientToHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.ClientToHost)
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) {
    delete file_list_request_;
  }
  file_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && directory_size_request_ != NULL) {
    delete directory_size_request_;
  }
  directory_size_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) {
    delete create_directory_request_;
  }
  create_directory_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) {
    delete rename_request_;
  }
  rename_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) {
    delete remove_request_;
  }
  remove_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_download_request_ != NULL) {
    delete file_download_request_;
  }
  file_download_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_upload_request_ != NULL) {
    delete file_upload_request_;
  }
  file_upload_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_packet_ != NULL) {
    delete file_packet_;
  }
  file_packet_ = NULL;
  type_ = 0;
}

bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.ClientToHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FileListRequest file_list_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DirectorySizeRequest directory_size_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directory_size_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.CreateDirectoryRequest create_directory_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_directory_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.RenameRequest rename_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rename_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.RemoveRequest remove_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FileDownloadRequest file_download_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_download_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FileUploadRequest file_upload_request = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.FilePacket file_packet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.ClientToHost)
  return false;
#undef DO_
}

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .aspia.proto.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->file_list_request_, output);
  }

  // .aspia.proto.DirectorySizeRequest directory_size_request = 3;
  if (this->has_directory_size_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->directory_size_request_, output);
  }

  // .aspia.proto.CreateDirectoryRequest create_directory_request = 4;
  if (this->has_create_directory_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->create_directory_request_, output);
  }

  // .aspia.proto.RenameRequest rename_request = 5;
  if (this->has_rename_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->rename_request_, output);
  }

  // .aspia.proto.RemoveRequest remove_request = 6;
  if (this->has_remove_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->remove_request_, output);
  }

  // .aspia.proto.FileDownloadRequest file_download_request = 7;
  if (this->has_file_download_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->file_download_request_, output);
  }

  // .aspia.proto.FileUploadRequest file_upload_request = 8;
  if (this->has_file_upload_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->file_upload_request_, output);
  }

  // .aspia.proto.FilePacket file_packet = 9;
  if (this->has_file_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->file_packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.ClientToHost)
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.ClientToHost)
  size_t total_size = 0;

  // .aspia.proto.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_list_request_);
  }

  // .aspia.proto.DirectorySizeRequest directory_size_request = 3;
  if (this->has_directory_size_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->directory_size_request_);
  }

  // .aspia.proto.CreateDirectoryRequest create_directory_request = 4;
  if (this->has_create_directory_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_directory_request_);
  }

  // .aspia.proto.RenameRequest rename_request = 5;
  if (this->has_rename_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rename_request_);
  }

  // .aspia.proto.RemoveRequest remove_request = 6;
  if (this->has_remove_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remove_request_);
  }

  // .aspia.proto.FileDownloadRequest file_download_request = 7;
  if (this->has_file_download_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_download_request_);
  }

  // .aspia.proto.FileUploadRequest file_upload_request = 8;
  if (this->has_file_upload_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_upload_request_);
  }

  // .aspia.proto.FilePacket file_packet = 9;
  if (this->has_file_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_packet_);
  }

  // .aspia.proto.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToHost*>(&from));
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_list_request()) {
    mutable_file_list_request()->::aspia::proto::FileListRequest::MergeFrom(from.file_list_request());
  }
  if (from.has_directory_size_request()) {
    mutable_directory_size_request()->::aspia::proto::DirectorySizeRequest::MergeFrom(from.directory_size_request());
  }
  if (from.has_create_directory_request()) {
    mutable_create_directory_request()->::aspia::proto::CreateDirectoryRequest::MergeFrom(from.create_directory_request());
  }
  if (from.has_rename_request()) {
    mutable_rename_request()->::aspia::proto::RenameRequest::MergeFrom(from.rename_request());
  }
  if (from.has_remove_request()) {
    mutable_remove_request()->::aspia::proto::RemoveRequest::MergeFrom(from.remove_request());
  }
  if (from.has_file_download_request()) {
    mutable_file_download_request()->::aspia::proto::FileDownloadRequest::MergeFrom(from.file_download_request());
  }
  if (from.has_file_upload_request()) {
    mutable_file_upload_request()->::aspia::proto::FileUploadRequest::MergeFrom(from.file_upload_request());
  }
  if (from.has_file_packet()) {
    mutable_file_packet()->::aspia::proto::FilePacket::MergeFrom(from.file_packet());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  std::swap(file_list_request_, other->file_list_request_);
  std::swap(directory_size_request_, other->directory_size_request_);
  std::swap(create_directory_request_, other->create_directory_request_);
  std::swap(rename_request_, other->rename_request_);
  std::swap(remove_request_, other->remove_request_);
  std::swap(file_download_request_, other->file_download_request_);
  std::swap(file_upload_request_, other->file_upload_request_);
  std::swap(file_packet_, other->file_packet_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToHost::GetTypeName() const {
  return "aspia.proto.file_transfer.ClientToHost";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToHost

// .aspia.proto.RequestType type = 1;
void ClientToHost::clear_type() {
  type_ = 0;
}
::aspia::proto::RequestType ClientToHost::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.type)
  return static_cast< ::aspia::proto::RequestType >(type_);
}
void ClientToHost::set_type(::aspia::proto::RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.file_transfer.ClientToHost.type)
}

// .aspia.proto.FileListRequest file_list_request = 2;
bool ClientToHost::has_file_list_request() const {
  return this != internal_default_instance() && file_list_request_ != NULL;
}
void ClientToHost::clear_file_list_request() {
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) delete file_list_request_;
  file_list_request_ = NULL;
}
const ::aspia::proto::FileListRequest& ClientToHost::file_list_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file_list_request)
  return file_list_request_ != NULL ? *file_list_request_
                         : *::aspia::proto::FileListRequest::internal_default_instance();
}
::aspia::proto::FileListRequest* ClientToHost::mutable_file_list_request() {
  
  if (file_list_request_ == NULL) {
    file_list_request_ = new ::aspia::proto::FileListRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file_list_request)
  return file_list_request_;
}
::aspia::proto::FileListRequest* ClientToHost::release_file_list_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file_list_request)
  
  ::aspia::proto::FileListRequest* temp = file_list_request_;
  file_list_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file_list_request(::aspia::proto::FileListRequest* file_list_request) {
  delete file_list_request_;
  file_list_request_ = file_list_request;
  if (file_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file_list_request)
}

// .aspia.proto.DirectorySizeRequest directory_size_request = 3;
bool ClientToHost::has_directory_size_request() const {
  return this != internal_default_instance() && directory_size_request_ != NULL;
}
void ClientToHost::clear_directory_size_request() {
  if (GetArenaNoVirtual() == NULL && directory_size_request_ != NULL) delete directory_size_request_;
  directory_size_request_ = NULL;
}
const ::aspia::proto::DirectorySizeRequest& ClientToHost::directory_size_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.directory_size_request)
  return directory_size_request_ != NULL ? *directory_size_request_
                         : *::aspia::proto::DirectorySizeRequest::internal_default_instance();
}
::aspia::proto::DirectorySizeRequest* ClientToHost::mutable_directory_size_request() {
  
  if (directory_size_request_ == NULL) {
    directory_size_request_ = new ::aspia::proto::DirectorySizeRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.directory_size_request)
  return directory_size_request_;
}
::aspia::proto::DirectorySizeRequest* ClientToHost::release_directory_size_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.directory_size_request)
  
  ::aspia::proto::DirectorySizeRequest* temp = directory_size_request_;
  directory_size_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_directory_size_request(::aspia::proto::DirectorySizeRequest* directory_size_request) {
  delete directory_size_request_;
  directory_size_request_ = directory_size_request;
  if (directory_size_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.directory_size_request)
}

// .aspia.proto.CreateDirectoryRequest create_directory_request = 4;
bool ClientToHost::has_create_directory_request() const {
  return this != internal_default_instance() && create_directory_request_ != NULL;
}
void ClientToHost::clear_create_directory_request() {
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) delete create_directory_request_;
  create_directory_request_ = NULL;
}
const ::aspia::proto::CreateDirectoryRequest& ClientToHost::create_directory_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.create_directory_request)
  return create_directory_request_ != NULL ? *create_directory_request_
                         : *::aspia::proto::CreateDirectoryRequest::internal_default_instance();
}
::aspia::proto::CreateDirectoryRequest* ClientToHost::mutable_create_directory_request() {
  
  if (create_directory_request_ == NULL) {
    create_directory_request_ = new ::aspia::proto::CreateDirectoryRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.create_directory_request)
  return create_directory_request_;
}
::aspia::proto::CreateDirectoryRequest* ClientToHost::release_create_directory_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.create_directory_request)
  
  ::aspia::proto::CreateDirectoryRequest* temp = create_directory_request_;
  create_directory_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_create_directory_request(::aspia::proto::CreateDirectoryRequest* create_directory_request) {
  delete create_directory_request_;
  create_directory_request_ = create_directory_request;
  if (create_directory_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.create_directory_request)
}

// .aspia.proto.RenameRequest rename_request = 5;
bool ClientToHost::has_rename_request() const {
  return this != internal_default_instance() && rename_request_ != NULL;
}
void ClientToHost::clear_rename_request() {
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) delete rename_request_;
  rename_request_ = NULL;
}
const ::aspia::proto::RenameRequest& ClientToHost::rename_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.rename_request)
  return rename_request_ != NULL ? *rename_request_
                         : *::aspia::proto::RenameRequest::internal_default_instance();
}
::aspia::proto::RenameRequest* ClientToHost::mutable_rename_request() {
  
  if (rename_request_ == NULL) {
    rename_request_ = new ::aspia::proto::RenameRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.rename_request)
  return rename_request_;
}
::aspia::proto::RenameRequest* ClientToHost::release_rename_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.rename_request)
  
  ::aspia::proto::RenameRequest* temp = rename_request_;
  rename_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_rename_request(::aspia::proto::RenameRequest* rename_request) {
  delete rename_request_;
  rename_request_ = rename_request;
  if (rename_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.rename_request)
}

// .aspia.proto.RemoveRequest remove_request = 6;
bool ClientToHost::has_remove_request() const {
  return this != internal_default_instance() && remove_request_ != NULL;
}
void ClientToHost::clear_remove_request() {
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) delete remove_request_;
  remove_request_ = NULL;
}
const ::aspia::proto::RemoveRequest& ClientToHost::remove_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.remove_request)
  return remove_request_ != NULL ? *remove_request_
                         : *::aspia::proto::RemoveRequest::internal_default_instance();
}
::aspia::proto::RemoveRequest* ClientToHost::mutable_remove_request() {
  
  if (remove_request_ == NULL) {
    remove_request_ = new ::aspia::proto::RemoveRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.remove_request)
  return remove_request_;
}
::aspia::proto::RemoveRequest* ClientToHost::release_remove_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.remove_request)
  
  ::aspia::proto::RemoveRequest* temp = remove_request_;
  remove_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_remove_request(::aspia::proto::RemoveRequest* remove_request) {
  delete remove_request_;
  remove_request_ = remove_request;
  if (remove_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.remove_request)
}

// .aspia.proto.FileDownloadRequest file_download_request = 7;
bool ClientToHost::has_file_download_request() const {
  return this != internal_default_instance() && file_download_request_ != NULL;
}
void ClientToHost::clear_file_download_request() {
  if (GetArenaNoVirtual() == NULL && file_download_request_ != NULL) delete file_download_request_;
  file_download_request_ = NULL;
}
const ::aspia::proto::FileDownloadRequest& ClientToHost::file_download_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file_download_request)
  return file_download_request_ != NULL ? *file_download_request_
                         : *::aspia::proto::FileDownloadRequest::internal_default_instance();
}
::aspia::proto::FileDownloadRequest* ClientToHost::mutable_file_download_request() {
  
  if (file_download_request_ == NULL) {
    file_download_request_ = new ::aspia::proto::FileDownloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file_download_request)
  return file_download_request_;
}
::aspia::proto::FileDownloadRequest* ClientToHost::release_file_download_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file_download_request)
  
  ::aspia::proto::FileDownloadRequest* temp = file_download_request_;
  file_download_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file_download_request(::aspia::proto::FileDownloadRequest* file_download_request) {
  delete file_download_request_;
  file_download_request_ = file_download_request;
  if (file_download_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file_download_request)
}

// .aspia.proto.FileUploadRequest file_upload_request = 8;
bool ClientToHost::has_file_upload_request() const {
  return this != internal_default_instance() && file_upload_request_ != NULL;
}
void ClientToHost::clear_file_upload_request() {
  if (GetArenaNoVirtual() == NULL && file_upload_request_ != NULL) delete file_upload_request_;
  file_upload_request_ = NULL;
}
const ::aspia::proto::FileUploadRequest& ClientToHost::file_upload_request() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file_upload_request)
  return file_upload_request_ != NULL ? *file_upload_request_
                         : *::aspia::proto::FileUploadRequest::internal_default_instance();
}
::aspia::proto::FileUploadRequest* ClientToHost::mutable_file_upload_request() {
  
  if (file_upload_request_ == NULL) {
    file_upload_request_ = new ::aspia::proto::FileUploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file_upload_request)
  return file_upload_request_;
}
::aspia::proto::FileUploadRequest* ClientToHost::release_file_upload_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file_upload_request)
  
  ::aspia::proto::FileUploadRequest* temp = file_upload_request_;
  file_upload_request_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file_upload_request(::aspia::proto::FileUploadRequest* file_upload_request) {
  delete file_upload_request_;
  file_upload_request_ = file_upload_request;
  if (file_upload_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file_upload_request)
}

// .aspia.proto.FilePacket file_packet = 9;
bool ClientToHost::has_file_packet() const {
  return this != internal_default_instance() && file_packet_ != NULL;
}
void ClientToHost::clear_file_packet() {
  if (GetArenaNoVirtual() == NULL && file_packet_ != NULL) delete file_packet_;
  file_packet_ = NULL;
}
const ::aspia::proto::FilePacket& ClientToHost::file_packet() const {
  // @@protoc_insertion_point(field_get:aspia.proto.file_transfer.ClientToHost.file_packet)
  return file_packet_ != NULL ? *file_packet_
                         : *::aspia::proto::FilePacket::internal_default_instance();
}
::aspia::proto::FilePacket* ClientToHost::mutable_file_packet() {
  
  if (file_packet_ == NULL) {
    file_packet_ = new ::aspia::proto::FilePacket;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.file_transfer.ClientToHost.file_packet)
  return file_packet_;
}
::aspia::proto::FilePacket* ClientToHost::release_file_packet() {
  // @@protoc_insertion_point(field_release:aspia.proto.file_transfer.ClientToHost.file_packet)
  
  ::aspia::proto::FilePacket* temp = file_packet_;
  file_packet_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_file_packet(::aspia::proto::FilePacket* file_packet) {
  delete file_packet_;
  file_packet_ = file_packet;
  if (file_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.file_transfer.ClientToHost.file_packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace file_transfer
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session.proto

#ifndef PROTOBUF_file_5ftransfer_5fsession_2eproto__INCLUDED
#define PROTOBUF_file_5ftransfer_5fsession_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_file_5ftransfer_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDriveList_ItemImpl();
void InitDefaultsDriveList_Item();
void InitDefaultsDriveListImpl();
void InitDefaultsDriveList();
void InitDefaultsDriveListRequestImpl();
void InitDefaultsDriveListRequest();
void InitDefaultsFileList_ItemImpl();
void InitDefaultsFileList_Item();
void InitDefaultsFileListImpl();
void InitDefaultsFileList();
void InitDefaultsFileListRequestImpl();
void InitDefaultsFileListRequest();
void InitDefaultsUploadRequestImpl();
void InitDefaultsUploadRequest();
void InitDefaultsDownloadRequestImpl();
void InitDefaultsDownloadRequest();
void InitDefaultsPacketRequestImpl();
void InitDefaultsPacketRequest();
void InitDefaultsPacketImpl();
void InitDefaultsPacket();
void InitDefaultsCreateDirectoryRequestImpl();
void InitDefaultsCreateDirectoryRequest();
void InitDefaultsRenameRequestImpl();
void InitDefaultsRenameRequest();
void InitDefaultsRemoveRequestImpl();
void InitDefaultsRemoveRequest();
void InitDefaultsReplyImpl();
void InitDefaultsReply();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
inline void InitDefaults() {
  InitDefaultsDriveList_Item();
  InitDefaultsDriveList();
  InitDefaultsDriveListRequest();
  InitDefaultsFileList_Item();
  InitDefaultsFileList();
  InitDefaultsFileListRequest();
  InitDefaultsUploadRequest();
  InitDefaultsDownloadRequest();
  InitDefaultsPacketRequest();
  InitDefaultsPacket();
  InitDefaultsCreateDirectoryRequest();
  InitDefaultsRenameRequest();
  InitDefaultsRemoveRequest();
  InitDefaultsReply();
  InitDefaultsRequest();
}
}  // namespace protobuf_file_5ftransfer_5fsession_2eproto
namespace proto {
namespace file_transfer {
class CreateDirectoryRequest;
class CreateDirectoryRequestDefaultTypeInternal;
extern CreateDirectoryRequestDefaultTypeInternal _CreateDirectoryRequest_default_instance_;
class DownloadRequest;
class DownloadRequestDefaultTypeInternal;
extern DownloadRequestDefaultTypeInternal _DownloadRequest_default_instance_;
class DriveList;
class DriveListDefaultTypeInternal;
extern DriveListDefaultTypeInternal _DriveList_default_instance_;
class DriveListRequest;
class DriveListRequestDefaultTypeInternal;
extern DriveListRequestDefaultTypeInternal _DriveListRequest_default_instance_;
class DriveList_Item;
class DriveList_ItemDefaultTypeInternal;
extern DriveList_ItemDefaultTypeInternal _DriveList_Item_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class FileListRequest;
class FileListRequestDefaultTypeInternal;
extern FileListRequestDefaultTypeInternal _FileListRequest_default_instance_;
class FileList_Item;
class FileList_ItemDefaultTypeInternal;
extern FileList_ItemDefaultTypeInternal _FileList_Item_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketRequest;
class PacketRequestDefaultTypeInternal;
extern PacketRequestDefaultTypeInternal _PacketRequest_default_instance_;
class RemoveRequest;
class RemoveRequestDefaultTypeInternal;
extern RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
class RenameRequest;
class RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class UploadRequest;
class UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
}  // namespace file_transfer
}  // namespace proto
namespace proto {
namespace file_transfer {

enum DriveList_Item_Type {
  DriveList_Item_Type_TYPE_UNKNOWN = 0,
  DriveList_Item_Type_TYPE_CDROM = 1,
  DriveList_Item_Type_TYPE_REMOVABLE = 2,
  DriveList_Item_Type_TYPE_FIXED = 3,
  DriveList_Item_Type_TYPE_REMOTE = 4,
  DriveList_Item_Type_TYPE_RAM = 5,
  DriveList_Item_Type_TYPE_HOME_FOLDER = 6,
  DriveList_Item_Type_TYPE_DESKTOP_FOLDER = 7,
  DriveList_Item_Type_DriveList_Item_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DriveList_Item_Type_DriveList_Item_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DriveList_Item_Type_IsValid(int value);
const DriveList_Item_Type DriveList_Item_Type_Type_MIN = DriveList_Item_Type_TYPE_UNKNOWN;
const DriveList_Item_Type DriveList_Item_Type_Type_MAX = DriveList_Item_Type_TYPE_DESKTOP_FOLDER;
const int DriveList_Item_Type_Type_ARRAYSIZE = DriveList_Item_Type_Type_MAX + 1;

enum Packet_Flags {
  Packet_Flags_FLAG_ERROR = 0,
  Packet_Flags_FLAG_PACKET = 1,
  Packet_Flags_FLAG_FIRST_PACKET = 2,
  Packet_Flags_FLAG_LAST_PACKET = 4,
  Packet_Flags_Packet_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Packet_Flags_Packet_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Packet_Flags_IsValid(int value);
const Packet_Flags Packet_Flags_Flags_MIN = Packet_Flags_FLAG_ERROR;
const Packet_Flags Packet_Flags_Flags_MAX = Packet_Flags_FLAG_LAST_PACKET;
const int Packet_Flags_Flags_ARRAYSIZE = Packet_Flags_Flags_MAX + 1;

enum Status {
  STATUS_UNKNOWN = 0,
  STATUS_SUCCESS = 1,
  STATUS_INVALID_REQUEST = 2,
  STATUS_INVALID_PATH_NAME = 3,
  STATUS_PATH_NOT_FOUND = 4,
  STATUS_PATH_ALREADY_EXISTS = 5,
  STATUS_NO_DRIVES_FOUND = 6,
  STATUS_DISK_FULL = 7,
  STATUS_ACCESS_DENIED = 8,
  STATUS_FILE_OPEN_ERROR = 9,
  STATUS_FILE_CREATE_ERROR = 10,
  STATUS_FILE_WRITE_ERROR = 11,
  STATUS_FILE_READ_ERROR = 12,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = STATUS_UNKNOWN;
const Status Status_MAX = STATUS_FILE_READ_ERROR;
const int Status_ARRAYSIZE = Status_MAX + 1;

// ===================================================================

class DriveList_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.DriveList.Item) */ {
 public:
  DriveList_Item();
  virtual ~DriveList_Item();

  DriveList_Item(const DriveList_Item& from);

  inline DriveList_Item& operator=(const DriveList_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveList_Item(DriveList_Item&& from) noexcept
    : DriveList_Item() {
    *this = ::std::move(from);
  }

  inline DriveList_Item& operator=(DriveList_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DriveList_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveList_Item* internal_default_instance() {
    return reinterpret_cast<const DriveList_Item*>(
               &_DriveList_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DriveList_Item* other);
  friend void swap(DriveList_Item& a, DriveList_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveList_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveList_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveList_Item& from);
  void MergeFrom(const DriveList_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveList_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DriveList_Item_Type Type;
  static const Type TYPE_UNKNOWN =
    DriveList_Item_Type_TYPE_UNKNOWN;
  static const Type TYPE_CDROM =
    DriveList_Item_Type_TYPE_CDROM;
  static const Type TYPE_REMOVABLE =
    DriveList_Item_Type_TYPE_REMOVABLE;
  static const Type TYPE_FIXED =
    DriveList_Item_Type_TYPE_FIXED;
  static const Type TYPE_REMOTE =
    DriveList_Item_Type_TYPE_REMOTE;
  static const Type TYPE_RAM =
    DriveList_Item_Type_TYPE_RAM;
  static const Type TYPE_HOME_FOLDER =
    DriveList_Item_Type_TYPE_HOME_FOLDER;
  static const Type TYPE_DESKTOP_FOLDER =
    DriveList_Item_Type_TYPE_DESKTOP_FOLDER;
  static inline bool Type_IsValid(int value) {
    return DriveList_Item_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DriveList_Item_Type_Type_MIN;
  static const Type Type_MAX =
    DriveList_Item_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DriveList_Item_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .proto.file_transfer.DriveList.Item.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::file_transfer::DriveList_Item_Type type() const;
  void set_type(::proto::file_transfer::DriveList_Item_Type value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.DriveList.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsDriveList_ItemImpl();
};
// -------------------------------------------------------------------

class DriveList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.DriveList) */ {
 public:
  DriveList();
  virtual ~DriveList();

  DriveList(const DriveList& from);

  inline DriveList& operator=(const DriveList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveList(DriveList&& from) noexcept
    : DriveList() {
    *this = ::std::move(from);
  }

  inline DriveList& operator=(DriveList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DriveList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveList* internal_default_instance() {
    return reinterpret_cast<const DriveList*>(
               &_DriveList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DriveList* other);
  friend void swap(DriveList& a, DriveList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveList* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveList& from);
  void MergeFrom(const DriveList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DriveList_Item Item;

  // accessors -------------------------------------------------------

  // repeated .proto.file_transfer.DriveList.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::proto::file_transfer::DriveList_Item& item(int index) const;
  ::proto::file_transfer::DriveList_Item* mutable_item(int index);
  ::proto::file_transfer::DriveList_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::DriveList_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::DriveList_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:proto.file_transfer.DriveList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::DriveList_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsDriveListImpl();
};
// -------------------------------------------------------------------

class DriveListRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.DriveListRequest) */ {
 public:
  DriveListRequest();
  virtual ~DriveListRequest();

  DriveListRequest(const DriveListRequest& from);

  inline DriveListRequest& operator=(const DriveListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveListRequest(DriveListRequest&& from) noexcept
    : DriveListRequest() {
    *this = ::std::move(from);
  }

  inline DriveListRequest& operator=(DriveListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DriveListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveListRequest* internal_default_instance() {
    return reinterpret_cast<const DriveListRequest*>(
               &_DriveListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DriveListRequest* other);
  friend void swap(DriveListRequest& a, DriveListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveListRequest& from);
  void MergeFrom(const DriveListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::uint32 dummy() const;
  void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.DriveListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 dummy_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsDriveListRequestImpl();
};
// -------------------------------------------------------------------

class FileList_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.FileList.Item) */ {
 public:
  FileList_Item();
  virtual ~FileList_Item();

  FileList_Item(const FileList_Item& from);

  inline FileList_Item& operator=(const FileList_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList_Item(FileList_Item&& from) noexcept
    : FileList_Item() {
    *this = ::std::move(from);
  }

  inline FileList_Item& operator=(FileList_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FileList_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList_Item* internal_default_instance() {
    return reinterpret_cast<const FileList_Item*>(
               &_FileList_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FileList_Item* other);
  friend void swap(FileList_Item& a, FileList_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  FileList_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileList_Item& from);
  void MergeFrom(const FileList_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileList_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // int64 modification_time = 3;
  void clear_modification_time();
  static const int kModificationTimeFieldNumber = 3;
  ::google::protobuf::int64 modification_time() const;
  void set_modification_time(::google::protobuf::int64 value);

  // bool is_directory = 4;
  void clear_is_directory();
  static const int kIsDirectoryFieldNumber = 4;
  bool is_directory() const;
  void set_is_directory(bool value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.FileList.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 modification_time_;
  bool is_directory_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsFileList_ItemImpl();
};
// -------------------------------------------------------------------

class FileList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FileList* other);
  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const PROTOBUF_FINAL { return New(NULL); }

  FileList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FileList_Item Item;

  // accessors -------------------------------------------------------

  // repeated .proto.file_transfer.FileList.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::proto::file_transfer::FileList_Item& item(int index) const;
  ::proto::file_transfer::FileList_Item* mutable_item(int index);
  ::proto::file_transfer::FileList_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::FileList_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::FileList_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:proto.file_transfer.FileList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::FileList_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsFileListImpl();
};
// -------------------------------------------------------------------

class FileListRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.FileListRequest) */ {
 public:
  FileListRequest();
  virtual ~FileListRequest();

  FileListRequest(const FileListRequest& from);

  inline FileListRequest& operator=(const FileListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileListRequest(FileListRequest&& from) noexcept
    : FileListRequest() {
    *this = ::std::move(from);
  }

  inline FileListRequest& operator=(FileListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FileListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileListRequest* internal_default_instance() {
    return reinterpret_cast<const FileListRequest*>(
               &_FileListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FileListRequest* other);
  friend void swap(FileListRequest& a, FileListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FileListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FileListRequest& from);
  void MergeFrom(const FileListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.FileListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsFileListRequestImpl();
};
// -------------------------------------------------------------------

class UploadRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.UploadRequest) */ {
 public:
  UploadRequest();
  virtual ~UploadRequest();

  UploadRequest(const UploadRequest& from);

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const UploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UploadRequest* other);
  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const UploadRequest& from);
  void MergeFrom(const UploadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 1;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // bool overwrite = 2;
  void clear_overwrite();
  static const int kOverwriteFieldNumber = 2;
  bool overwrite() const;
  void set_overwrite(bool value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.UploadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  bool overwrite_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsUploadRequestImpl();
};
// -------------------------------------------------------------------

class DownloadRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.DownloadRequest) */ {
 public:
  DownloadRequest();
  virtual ~DownloadRequest();

  DownloadRequest(const DownloadRequest& from);

  inline DownloadRequest& operator=(const DownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadRequest(DownloadRequest&& from) noexcept
    : DownloadRequest() {
    *this = ::std::move(from);
  }

  inline DownloadRequest& operator=(DownloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadRequest*>(
               &_DownloadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DownloadRequest* other);
  friend void swap(DownloadRequest& a, DownloadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DownloadRequest& from);
  void MergeFrom(const DownloadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DownloadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 1;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.DownloadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsDownloadRequestImpl();
};
// -------------------------------------------------------------------

class PacketRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.PacketRequest) */ {
 public:
  PacketRequest();
  virtual ~PacketRequest();

  PacketRequest(const PacketRequest& from);

  inline PacketRequest& operator=(const PacketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PacketRequest(PacketRequest&& from) noexcept
    : PacketRequest() {
    *this = ::std::move(from);
  }

  inline PacketRequest& operator=(PacketRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PacketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketRequest* internal_default_instance() {
    return reinterpret_cast<const PacketRequest*>(
               &_PacketRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PacketRequest* other);
  friend void swap(PacketRequest& a, PacketRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PacketRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PacketRequest& from);
  void MergeFrom(const PacketRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PacketRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::uint32 dummy() const;
  void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.PacketRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 dummy_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsPacketRequestImpl();
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const PROTOBUF_FINAL { return New(NULL); }

  Packet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Packet_Flags Flags;
  static const Flags FLAG_ERROR =
    Packet_Flags_FLAG_ERROR;
  static const Flags FLAG_PACKET =
    Packet_Flags_FLAG_PACKET;
  static const Flags FLAG_FIRST_PACKET =
    Packet_Flags_FLAG_FIRST_PACKET;
  static const Flags FLAG_LAST_PACKET =
    Packet_Flags_FLAG_LAST_PACKET;
  static inline bool Flags_IsValid(int value) {
    return Packet_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    Packet_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    Packet_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    Packet_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint64 file_size() const;
  void set_file_size(::google::protobuf::uint64 value);

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsPacketImpl();
};
// -------------------------------------------------------------------

class CreateDirectoryRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.CreateDirectoryRequest) */ {
 public:
  CreateDirectoryRequest();
  virtual ~CreateDirectoryRequest();

  CreateDirectoryRequest(const CreateDirectoryRequest& from);

  inline CreateDirectoryRequest& operator=(const CreateDirectoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDirectoryRequest(CreateDirectoryRequest&& from) noexcept
    : CreateDirectoryRequest() {
    *this = ::std::move(from);
  }

  inline CreateDirectoryRequest& operator=(CreateDirectoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CreateDirectoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDirectoryRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDirectoryRequest*>(
               &_CreateDirectoryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CreateDirectoryRequest* other);
  friend void swap(CreateDirectoryRequest& a, CreateDirectoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDirectoryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDirectoryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CreateDirectoryRequest& from);
  void MergeFrom(const CreateDirectoryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateDirectoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.CreateDirectoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsCreateDirectoryRequestImpl();
};
// -------------------------------------------------------------------

class RenameRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.RenameRequest) */ {
 public:
  RenameRequest();
  virtual ~RenameRequest();

  RenameRequest(const RenameRequest& from);

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenameRequest(RenameRequest&& from) noexcept
    : RenameRequest() {
    *this = ::std::move(from);
  }

  inline RenameRequest& operator=(RenameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RenameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(RenameRequest* other);
  friend void swap(RenameRequest& a, RenameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RenameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RenameRequest& from);
  void MergeFrom(const RenameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string old_name = 1;
  void clear_old_name();
  static const int kOldNameFieldNumber = 1;
  const ::std::string& old_name() const;
  void set_old_name(const ::std::string& value);
  #if LANG_CXX11
  void set_old_name(::std::string&& value);
  #endif
  void set_old_name(const char* value);
  void set_old_name(const char* value, size_t size);
  ::std::string* mutable_old_name();
  ::std::string* release_old_name();
  void set_allocated_old_name(::std::string* old_name);

  // string new_name = 2;
  void clear_new_name();
  static const int kNewNameFieldNumber = 2;
  const ::std::string& new_name() const;
  void set_new_name(const ::std::string& value);
  #if LANG_CXX11
  void set_new_name(::std::string&& value);
  #endif
  void set_new_name(const char* value);
  void set_new_name(const char* value, size_t size);
  ::std::string* mutable_new_name();
  ::std::string* release_new_name();
  void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.RenameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr old_name_;
  ::google::protobuf::internal::ArenaStringPtr new_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsRenameRequestImpl();
};
// -------------------------------------------------------------------

class RemoveRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.RemoveRequest) */ {
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRequest(RemoveRequest&& from) noexcept
    : RemoveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveRequest& operator=(RemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveRequest*>(
               &_RemoveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RemoveRequest* other);
  friend void swap(RemoveRequest& a, RemoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.RemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsRemoveRequestImpl();
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const PROTOBUF_FINAL { return New(NULL); }

  Reply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.file_transfer.DriveList drive_list = 2;
  bool has_drive_list() const;
  void clear_drive_list();
  static const int kDriveListFieldNumber = 2;
  const ::proto::file_transfer::DriveList& drive_list() const;
  ::proto::file_transfer::DriveList* release_drive_list();
  ::proto::file_transfer::DriveList* mutable_drive_list();
  void set_allocated_drive_list(::proto::file_transfer::DriveList* drive_list);

  // .proto.file_transfer.FileList file_list = 3;
  bool has_file_list() const;
  void clear_file_list();
  static const int kFileListFieldNumber = 3;
  const ::proto::file_transfer::FileList& file_list() const;
  ::proto::file_transfer::FileList* release_file_list();
  ::proto::file_transfer::FileList* mutable_file_list();
  void set_allocated_file_list(::proto::file_transfer::FileList* file_list);

  // .proto.file_transfer.Packet packet = 4;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 4;
  const ::proto::file_transfer::Packet& packet() const;
  ::proto::file_transfer::Packet* release_packet();
  ::proto::file_transfer::Packet* mutable_packet();
  void set_allocated_packet(::proto::file_transfer::Packet* packet);

  // .proto.file_transfer.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::proto::file_transfer::Status status() const;
  void set_status(::proto::file_transfer::Status value);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::proto::file_transfer::DriveList* drive_list_;
  ::proto::file_transfer::FileList* file_list_;
  ::proto::file_transfer::Packet* packet_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsReplyImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.file_transfer.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.file_transfer.DriveListRequest drive_list_request = 1;
  bool has_drive_list_request() const;
  void clear_drive_list_request();
  static const int kDriveListRequestFieldNumber = 1;
  const ::proto::file_transfer::DriveListRequest& drive_list_request() const;
  ::proto::file_transfer::DriveListRequest* release_drive_list_request();
  ::proto::file_transfer::DriveListRequest* mutable_drive_list_request();
  void set_allocated_drive_list_request(::proto::file_transfer::DriveListRequest* drive_list_request);

  // .proto.file_transfer.FileListRequest file_list_request = 2;
  bool has_file_list_request() const;
  void clear_file_list_request();
  static const int kFileListRequestFieldNumber = 2;
  const ::proto::file_transfer::FileListRequest& file_list_request() const;
  ::proto::file_transfer::FileListRequest* release_file_list_request();
  ::proto::file_transfer::FileListRequest* mutable_file_list_request();
  void set_allocated_file_list_request(::proto::file_transfer::FileListRequest* file_list_request);

  // .proto.file_transfer.CreateDirectoryRequest create_directory_request = 3;
  bool has_create_directory_request() const;
  void clear_create_directory_request();
  static const int kCreateDirectoryRequestFieldNumber = 3;
  const ::proto::file_transfer::CreateDirectoryRequest& create_directory_request() const;
  ::proto::file_transfer::CreateDirectoryRequest* release_create_directory_request();
  ::proto::file_transfer::CreateDirectoryRequest* mutable_create_directory_request();
  void set_allocated_create_directory_request(::proto::file_transfer::CreateDirectoryRequest* create_directory_request);

  // .proto.file_transfer.RenameRequest rename_request = 4;
  bool has_rename_request() const;
  void clear_rename_request();
  static const int kRenameRequestFieldNumber = 4;
  const ::proto::file_transfer::RenameRequest& rename_request() const;
  ::proto::file_transfer::RenameRequest* release_rename_request();
  ::proto::file_transfer::RenameRequest* mutable_rename_request();
  void set_allocated_rename_request(::proto::file_transfer::RenameRequest* rename_request);

  // .proto.file_transfer.RemoveRequest remove_request = 5;
  bool has_remove_request() const;
  void clear_remove_request();
  static const int kRemoveRequestFieldNumber = 5;
  const ::proto::file_transfer::RemoveRequest& remove_request() const;
  ::proto::file_transfer::RemoveRequest* release_remove_request();
  ::proto::file_transfer::RemoveRequest* mutable_remove_request();
  void set_allocated_remove_request(::proto::file_transfer::RemoveRequest* remove_request);

  // .proto.file_transfer.DownloadRequest download_request = 6;
  bool has_download_request() const;
  void clear_download_request();
  static const int kDownloadRequestFieldNumber = 6;
  const ::proto::file_transfer::DownloadRequest& download_request() const;
  ::proto::file_transfer::DownloadRequest* release_download_request();
  ::proto::file_transfer::DownloadRequest* mutable_download_request();
  void set_allocated_download_request(::proto::file_transfer::DownloadRequest* download_request);

  // .proto.file_transfer.UploadRequest upload_request = 7;
  bool has_upload_request() const;
  void clear_upload_request();
  static const int kUploadRequestFieldNumber = 7;
  const ::proto::file_transfer::UploadRequest& upload_request() const;
  ::proto::file_transfer::UploadRequest* release_upload_request();
  ::proto::file_transfer::UploadRequest* mutable_upload_request();
  void set_allocated_upload_request(::proto::file_transfer::UploadRequest* upload_request);

  // .proto.file_transfer.PacketRequest packet_request = 8;
  bool has_packet_request() const;
  void clear_packet_request();
  static const int kPacketRequestFieldNumber = 8;
  const ::proto::file_transfer::PacketRequest& packet_request() const;
  ::proto::file_transfer::PacketRequest* release_packet_request();
  ::proto::file_transfer::PacketRequest* mutable_packet_request();
  void set_allocated_packet_request(::proto::file_transfer::PacketRequest* packet_request);

  // .proto.file_transfer.Packet packet = 9;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 9;
  const ::proto::file_transfer::Packet& packet() const;
  ::proto::file_transfer::Packet* release_packet();
  ::proto::file_transfer::Packet* mutable_packet();
  void set_allocated_packet(::proto::file_transfer::Packet* packet);

  // @@protoc_insertion_point(class_scope:proto.file_transfer.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::proto::file_transfer::DriveListRequest* drive_list_request_;
  ::proto::file_transfer::FileListRequest* file_list_request_;
  ::proto::file_transfer::CreateDirectoryRequest* create_directory_request_;
  ::proto::file_transfer::RenameRequest* rename_request_;
  ::proto::file_transfer::RemoveRequest* remove_request_;
  ::proto::file_transfer::DownloadRequest* download_request_;
  ::proto::file_transfer::UploadRequest* upload_request_;
  ::proto::file_transfer::PacketRequest* packet_request_;
  ::proto::file_transfer::Packet* packet_;
  mutable int _cached_size_;
  friend struct ::protobuf_file_5ftransfer_5fsession_2eproto::TableStruct;
  friend void ::protobuf_file_5ftransfer_5fsession_2eproto::InitDefaultsRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DriveList_Item

// .proto.file_transfer.DriveList.Item.Type type = 1;
inline void DriveList_Item::clear_type() {
  type_ = 0;
}
inline ::proto::file_transfer::DriveList_Item_Type DriveList_Item::type() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.DriveList.Item.type)
  return static_cast< ::proto::file_transfer::DriveList_Item_Type >(type_);
}
inline void DriveList_Item::set_type(::proto::file_transfer::DriveList_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.DriveList.Item.type)
}

// string path = 2;
inline void DriveList_Item::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveList_Item::path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.DriveList.Item.path)
  return path_.GetNoArena();
}
inline void DriveList_Item::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.DriveList.Item.path)
}
#if LANG_CXX11
inline void DriveList_Item::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.DriveList.Item.path)
}
#endif
inline void DriveList_Item::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.DriveList.Item.path)
}
inline void DriveList_Item::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.DriveList.Item.path)
}
inline ::std::string* DriveList_Item::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.DriveList.Item.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveList_Item::release_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.DriveList.Item.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveList_Item::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.DriveList.Item.path)
}

// -------------------------------------------------------------------

// DriveList

// repeated .proto.file_transfer.DriveList.Item item = 1;
inline int DriveList::item_size() const {
  return item_.size();
}
inline void DriveList::clear_item() {
  item_.Clear();
}
inline const ::proto::file_transfer::DriveList_Item& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.DriveList.item)
  return item_.Get(index);
}
inline ::proto::file_transfer::DriveList_Item* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.DriveList.item)
  return item_.Mutable(index);
}
inline ::proto::file_transfer::DriveList_Item* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:proto.file_transfer.DriveList.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::DriveList_Item >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:proto.file_transfer.DriveList.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::DriveList_Item >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:proto.file_transfer.DriveList.item)
  return item_;
}

// -------------------------------------------------------------------

// DriveListRequest

// uint32 dummy = 1;
inline void DriveListRequest::clear_dummy() {
  dummy_ = 0u;
}
inline ::google::protobuf::uint32 DriveListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.DriveListRequest.dummy)
  return dummy_;
}
inline void DriveListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.DriveListRequest.dummy)
}

// -------------------------------------------------------------------

// FileList_Item

// string name = 1;
inline void FileList_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileList_Item::name() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileList.Item.name)
  return name_.GetNoArena();
}
inline void FileList_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.FileList.Item.name)
}
#if LANG_CXX11
inline void FileList_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.FileList.Item.name)
}
#endif
inline void FileList_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.FileList.Item.name)
}
inline void FileList_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.FileList.Item.name)
}
inline ::std::string* FileList_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.FileList.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileList_Item::release_name() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.FileList.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileList_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.FileList.Item.name)
}

// uint64 size = 2;
inline void FileList_Item::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileList_Item::size() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileList.Item.size)
  return size_;
}
inline void FileList_Item::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.FileList.Item.size)
}

// int64 modification_time = 3;
inline void FileList_Item::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileList_Item::modification_time() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileList.Item.modification_time)
  return modification_time_;
}
inline void FileList_Item::set_modification_time(::google::protobuf::int64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.FileList.Item.modification_time)
}

// bool is_directory = 4;
inline void FileList_Item::clear_is_directory() {
  is_directory_ = false;
}
inline bool FileList_Item::is_directory() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileList.Item.is_directory)
  return is_directory_;
}
inline void FileList_Item::set_is_directory(bool value) {
  
  is_directory_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.FileList.Item.is_directory)
}

// -------------------------------------------------------------------

// FileList

// repeated .proto.file_transfer.FileList.Item item = 1;
inline int FileList::item_size() const {
  return item_.size();
}
inline void FileList::clear_item() {
  item_.Clear();
}
inline const ::proto::file_transfer::FileList_Item& FileList::item(int index) const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileList.item)
  return item_.Get(index);
}
inline ::proto::file_transfer::FileList_Item* FileList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.FileList.item)
  return item_.Mutable(index);
}
inline ::proto::file_transfer::FileList_Item* FileList::add_item() {
  // @@protoc_insertion_point(field_add:proto.file_transfer.FileList.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::FileList_Item >*
FileList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:proto.file_transfer.FileList.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::file_transfer::FileList_Item >&
FileList::item() const {
  // @@protoc_insertion_point(field_list:proto.file_transfer.FileList.item)
  return item_;
}

// -------------------------------------------------------------------

// FileListRequest

// string path = 1;
inline void FileListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileListRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.FileListRequest.path)
  return path_.GetNoArena();
}
inline void FileListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.FileListRequest.path)
}
#if LANG_CXX11
inline void FileListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.FileListRequest.path)
}
#endif
inline void FileListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.FileListRequest.path)
}
inline void FileListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.FileListRequest.path)
}
inline ::std::string* FileListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.FileListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileListRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.FileListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.FileListRequest.path)
}

// -------------------------------------------------------------------

// UploadRequest

// string file_path = 1;
inline void UploadRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.UploadRequest.file_path)
  return file_path_.GetNoArena();
}
inline void UploadRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.UploadRequest.file_path)
}
#if LANG_CXX11
inline void UploadRequest::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.UploadRequest.file_path)
}
#endif
inline void UploadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.UploadRequest.file_path)
}
inline void UploadRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.UploadRequest.file_path)
}
inline ::std::string* UploadRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.UploadRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.UploadRequest.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.UploadRequest.file_path)
}

// bool overwrite = 2;
inline void UploadRequest::clear_overwrite() {
  overwrite_ = false;
}
inline bool UploadRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.UploadRequest.overwrite)
  return overwrite_;
}
inline void UploadRequest::set_overwrite(bool value) {
  
  overwrite_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.UploadRequest.overwrite)
}

// -------------------------------------------------------------------

// DownloadRequest

// string file_path = 1;
inline void DownloadRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.DownloadRequest.file_path)
  return file_path_.GetNoArena();
}
inline void DownloadRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.DownloadRequest.file_path)
}
#if LANG_CXX11
inline void DownloadRequest::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.DownloadRequest.file_path)
}
#endif
inline void DownloadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.DownloadRequest.file_path)
}
inline void DownloadRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.DownloadRequest.file_path)
}
inline ::std::string* DownloadRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.DownloadRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.DownloadRequest.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.DownloadRequest.file_path)
}

// -------------------------------------------------------------------

// PacketRequest

// uint32 dummy = 1;
inline void PacketRequest::clear_dummy() {
  dummy_ = 0u;
}
inline ::google::protobuf::uint32 PacketRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.PacketRequest.dummy)
  return dummy_;
}
inline void PacketRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.PacketRequest.dummy)
}

// -------------------------------------------------------------------

// Packet

// uint32 flags = 1;
inline void Packet::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 Packet::flags() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.Packet.flags)
  return flags_;
}
inline void Packet::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.Packet.flags)
}

// uint64 file_size = 2;
inline void Packet::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Packet::file_size() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.Packet.file_size)
  return file_size_;
}
inline void Packet::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.Packet.file_size)
}

// bytes data = 3;
inline void Packet::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::data() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.Packet.data)
  return data_.GetNoArena();
}
inline void Packet::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.Packet.data)
}
#if LANG_CXX11
inline void Packet::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.Packet.data)
}
#endif
inline void Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.Packet.data)
}
inline void Packet::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.Packet.data)
}
inline ::std::string* Packet::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Packet.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_data() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Packet.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Packet.data)
}

// -------------------------------------------------------------------

// CreateDirectoryRequest

// string path = 1;
inline void CreateDirectoryRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDirectoryRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.CreateDirectoryRequest.path)
  return path_.GetNoArena();
}
inline void CreateDirectoryRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.CreateDirectoryRequest.path)
}
#if LANG_CXX11
inline void CreateDirectoryRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.CreateDirectoryRequest.path)
}
#endif
inline void CreateDirectoryRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.CreateDirectoryRequest.path)
}
inline void CreateDirectoryRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.CreateDirectoryRequest.path)
}
inline ::std::string* CreateDirectoryRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.CreateDirectoryRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDirectoryRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.CreateDirectoryRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDirectoryRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.CreateDirectoryRequest.path)
}

// -------------------------------------------------------------------

// RenameRequest

// string old_name = 1;
inline void RenameRequest::clear_old_name() {
  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::old_name() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.RenameRequest.old_name)
  return old_name_.GetNoArena();
}
inline void RenameRequest::set_old_name(const ::std::string& value) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.RenameRequest.old_name)
}
#if LANG_CXX11
inline void RenameRequest::set_old_name(::std::string&& value) {
  
  old_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.RenameRequest.old_name)
}
#endif
inline void RenameRequest::set_old_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.RenameRequest.old_name)
}
inline void RenameRequest::set_old_name(const char* value, size_t size) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.RenameRequest.old_name)
}
inline ::std::string* RenameRequest::mutable_old_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.RenameRequest.old_name)
  return old_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_old_name() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.RenameRequest.old_name)
  
  return old_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_old_name(::std::string* old_name) {
  if (old_name != NULL) {
    
  } else {
    
  }
  old_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_name);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.RenameRequest.old_name)
}

// string new_name = 2;
inline void RenameRequest::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::new_name() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.RenameRequest.new_name)
  return new_name_.GetNoArena();
}
inline void RenameRequest::set_new_name(const ::std::string& value) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.RenameRequest.new_name)
}
#if LANG_CXX11
inline void RenameRequest::set_new_name(::std::string&& value) {
  
  new_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.RenameRequest.new_name)
}
#endif
inline void RenameRequest::set_new_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.RenameRequest.new_name)
}
inline void RenameRequest::set_new_name(const char* value, size_t size) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.RenameRequest.new_name)
}
inline ::std::string* RenameRequest::mutable_new_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.RenameRequest.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_new_name() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.RenameRequest.new_name)
  
  return new_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    
  } else {
    
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.RenameRequest.new_name)
}

// -------------------------------------------------------------------

// RemoveRequest

// string path = 1;
inline void RemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.RemoveRequest.path)
  return path_.GetNoArena();
}
inline void RemoveRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.file_transfer.RemoveRequest.path)
}
#if LANG_CXX11
inline void RemoveRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.file_transfer.RemoveRequest.path)
}
#endif
inline void RemoveRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.file_transfer.RemoveRequest.path)
}
inline void RemoveRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.file_transfer.RemoveRequest.path)
}
inline ::std::string* RemoveRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.RemoveRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.RemoveRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.RemoveRequest.path)
}

// -------------------------------------------------------------------

// Reply

// .proto.file_transfer.Status status = 1;
inline void Reply::clear_status() {
  status_ = 0;
}
inline ::proto::file_transfer::Status Reply::status() const {
  // @@protoc_insertion_point(field_get:proto.file_transfer.Reply.status)
  return static_cast< ::proto::file_transfer::Status >(status_);
}
inline void Reply::set_status(::proto::file_transfer::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.file_transfer.Reply.status)
}

// .proto.file_transfer.DriveList drive_list = 2;
inline bool Reply::has_drive_list() const {
  return this != internal_default_instance() && drive_list_ != NULL;
}
inline void Reply::clear_drive_list() {
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) {
    delete drive_list_;
  }
  drive_list_ = NULL;
}
inline const ::proto::file_transfer::DriveList& Reply::drive_list() const {
  const ::proto::file_transfer::DriveList* p = drive_list_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Reply.drive_list)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::DriveList*>(
      &::proto::file_transfer::_DriveList_default_instance_);
}
inline ::proto::file_transfer::DriveList* Reply::release_drive_list() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Reply.drive_list)
  
  ::proto::file_transfer::DriveList* temp = drive_list_;
  drive_list_ = NULL;
  return temp;
}
inline ::proto::file_transfer::DriveList* Reply::mutable_drive_list() {
  
  if (drive_list_ == NULL) {
    drive_list_ = new ::proto::file_transfer::DriveList;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Reply.drive_list)
  return drive_list_;
}
inline void Reply::set_allocated_drive_list(::proto::file_transfer::DriveList* drive_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drive_list_;
  }
  if (drive_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive_list, submessage_arena);
    }
    
  } else {
    
  }
  drive_list_ = drive_list;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Reply.drive_list)
}

// .proto.file_transfer.FileList file_list = 3;
inline bool Reply::has_file_list() const {
  return this != internal_default_instance() && file_list_ != NULL;
}
inline void Reply::clear_file_list() {
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) {
    delete file_list_;
  }
  file_list_ = NULL;
}
inline const ::proto::file_transfer::FileList& Reply::file_list() const {
  const ::proto::file_transfer::FileList* p = file_list_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Reply.file_list)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::FileList*>(
      &::proto::file_transfer::_FileList_default_instance_);
}
inline ::proto::file_transfer::FileList* Reply::release_file_list() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Reply.file_list)
  
  ::proto::file_transfer::FileList* temp = file_list_;
  file_list_ = NULL;
  return temp;
}
inline ::proto::file_transfer::FileList* Reply::mutable_file_list() {
  
  if (file_list_ == NULL) {
    file_list_ = new ::proto::file_transfer::FileList;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Reply.file_list)
  return file_list_;
}
inline void Reply::set_allocated_file_list(::proto::file_transfer::FileList* file_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete file_list_;
  }
  if (file_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_list, submessage_arena);
    }
    
  } else {
    
  }
  file_list_ = file_list;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Reply.file_list)
}

// .proto.file_transfer.Packet packet = 4;
inline bool Reply::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
inline void Reply::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
}
inline const ::proto::file_transfer::Packet& Reply::packet() const {
  const ::proto::file_transfer::Packet* p = packet_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Reply.packet)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::Packet*>(
      &::proto::file_transfer::_Packet_default_instance_);
}
inline ::proto::file_transfer::Packet* Reply::release_packet() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Reply.packet)
  
  ::proto::file_transfer::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
inline ::proto::file_transfer::Packet* Reply::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::proto::file_transfer::Packet;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Reply.packet)
  return packet_;
}
inline void Reply::set_allocated_packet(::proto::file_transfer::Packet* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    
  } else {
    
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Reply.packet)
}

// -------------------------------------------------------------------

// Request

// .proto.file_transfer.DriveListRequest drive_list_request = 1;
inline bool Request::has_drive_list_request() const {
  return this != internal_default_instance() && drive_list_request_ != NULL;
}
inline void Request::clear_drive_list_request() {
  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) {
    delete drive_list_request_;
  }
  drive_list_request_ = NULL;
}
inline const ::proto::file_transfer::DriveListRequest& Request::drive_list_request() const {
  const ::proto::file_transfer::DriveListRequest* p = drive_list_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.drive_list_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::DriveListRequest*>(
      &::proto::file_transfer::_DriveListRequest_default_instance_);
}
inline ::proto::file_transfer::DriveListRequest* Request::release_drive_list_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.drive_list_request)
  
  ::proto::file_transfer::DriveListRequest* temp = drive_list_request_;
  drive_list_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::DriveListRequest* Request::mutable_drive_list_request() {
  
  if (drive_list_request_ == NULL) {
    drive_list_request_ = new ::proto::file_transfer::DriveListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.drive_list_request)
  return drive_list_request_;
}
inline void Request::set_allocated_drive_list_request(::proto::file_transfer::DriveListRequest* drive_list_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drive_list_request_;
  }
  if (drive_list_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive_list_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive_list_request, submessage_arena);
    }
    
  } else {
    
  }
  drive_list_request_ = drive_list_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.drive_list_request)
}

// .proto.file_transfer.FileListRequest file_list_request = 2;
inline bool Request::has_file_list_request() const {
  return this != internal_default_instance() && file_list_request_ != NULL;
}
inline void Request::clear_file_list_request() {
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) {
    delete file_list_request_;
  }
  file_list_request_ = NULL;
}
inline const ::proto::file_transfer::FileListRequest& Request::file_list_request() const {
  const ::proto::file_transfer::FileListRequest* p = file_list_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.file_list_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::FileListRequest*>(
      &::proto::file_transfer::_FileListRequest_default_instance_);
}
inline ::proto::file_transfer::FileListRequest* Request::release_file_list_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.file_list_request)
  
  ::proto::file_transfer::FileListRequest* temp = file_list_request_;
  file_list_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::FileListRequest* Request::mutable_file_list_request() {
  
  if (file_list_request_ == NULL) {
    file_list_request_ = new ::proto::file_transfer::FileListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.file_list_request)
  return file_list_request_;
}
inline void Request::set_allocated_file_list_request(::proto::file_transfer::FileListRequest* file_list_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete file_list_request_;
  }
  if (file_list_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_list_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_list_request, submessage_arena);
    }
    
  } else {
    
  }
  file_list_request_ = file_list_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.file_list_request)
}

// .proto.file_transfer.CreateDirectoryRequest create_directory_request = 3;
inline bool Request::has_create_directory_request() const {
  return this != internal_default_instance() && create_directory_request_ != NULL;
}
inline void Request::clear_create_directory_request() {
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) {
    delete create_directory_request_;
  }
  create_directory_request_ = NULL;
}
inline const ::proto::file_transfer::CreateDirectoryRequest& Request::create_directory_request() const {
  const ::proto::file_transfer::CreateDirectoryRequest* p = create_directory_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.create_directory_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::CreateDirectoryRequest*>(
      &::proto::file_transfer::_CreateDirectoryRequest_default_instance_);
}
inline ::proto::file_transfer::CreateDirectoryRequest* Request::release_create_directory_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.create_directory_request)
  
  ::proto::file_transfer::CreateDirectoryRequest* temp = create_directory_request_;
  create_directory_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::CreateDirectoryRequest* Request::mutable_create_directory_request() {
  
  if (create_directory_request_ == NULL) {
    create_directory_request_ = new ::proto::file_transfer::CreateDirectoryRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.create_directory_request)
  return create_directory_request_;
}
inline void Request::set_allocated_create_directory_request(::proto::file_transfer::CreateDirectoryRequest* create_directory_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete create_directory_request_;
  }
  if (create_directory_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_directory_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_directory_request, submessage_arena);
    }
    
  } else {
    
  }
  create_directory_request_ = create_directory_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.create_directory_request)
}

// .proto.file_transfer.RenameRequest rename_request = 4;
inline bool Request::has_rename_request() const {
  return this != internal_default_instance() && rename_request_ != NULL;
}
inline void Request::clear_rename_request() {
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) {
    delete rename_request_;
  }
  rename_request_ = NULL;
}
inline const ::proto::file_transfer::RenameRequest& Request::rename_request() const {
  const ::proto::file_transfer::RenameRequest* p = rename_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.rename_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::RenameRequest*>(
      &::proto::file_transfer::_RenameRequest_default_instance_);
}
inline ::proto::file_transfer::RenameRequest* Request::release_rename_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.rename_request)
  
  ::proto::file_transfer::RenameRequest* temp = rename_request_;
  rename_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::RenameRequest* Request::mutable_rename_request() {
  
  if (rename_request_ == NULL) {
    rename_request_ = new ::proto::file_transfer::RenameRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.rename_request)
  return rename_request_;
}
inline void Request::set_allocated_rename_request(::proto::file_transfer::RenameRequest* rename_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rename_request_;
  }
  if (rename_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rename_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rename_request, submessage_arena);
    }
    
  } else {
    
  }
  rename_request_ = rename_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.rename_request)
}

// .proto.file_transfer.RemoveRequest remove_request = 5;
inline bool Request::has_remove_request() const {
  return this != internal_default_instance() && remove_request_ != NULL;
}
inline void Request::clear_remove_request() {
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) {
    delete remove_request_;
  }
  remove_request_ = NULL;
}
inline const ::proto::file_transfer::RemoveRequest& Request::remove_request() const {
  const ::proto::file_transfer::RemoveRequest* p = remove_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.remove_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::RemoveRequest*>(
      &::proto::file_transfer::_RemoveRequest_default_instance_);
}
inline ::proto::file_transfer::RemoveRequest* Request::release_remove_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.remove_request)
  
  ::proto::file_transfer::RemoveRequest* temp = remove_request_;
  remove_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::RemoveRequest* Request::mutable_remove_request() {
  
  if (remove_request_ == NULL) {
    remove_request_ = new ::proto::file_transfer::RemoveRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.remove_request)
  return remove_request_;
}
inline void Request::set_allocated_remove_request(::proto::file_transfer::RemoveRequest* remove_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remove_request_;
  }
  if (remove_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remove_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remove_request, submessage_arena);
    }
    
  } else {
    
  }
  remove_request_ = remove_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.remove_request)
}

// .proto.file_transfer.DownloadRequest download_request = 6;
inline bool Request::has_download_request() const {
  return this != internal_default_instance() && download_request_ != NULL;
}
inline void Request::clear_download_request() {
  if (GetArenaNoVirtual() == NULL && download_request_ != NULL) {
    delete download_request_;
  }
  download_request_ = NULL;
}
inline const ::proto::file_transfer::DownloadRequest& Request::download_request() const {
  const ::proto::file_transfer::DownloadRequest* p = download_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.download_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::DownloadRequest*>(
      &::proto::file_transfer::_DownloadRequest_default_instance_);
}
inline ::proto::file_transfer::DownloadRequest* Request::release_download_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.download_request)
  
  ::proto::file_transfer::DownloadRequest* temp = download_request_;
  download_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::DownloadRequest* Request::mutable_download_request() {
  
  if (download_request_ == NULL) {
    download_request_ = new ::proto::file_transfer::DownloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.download_request)
  return download_request_;
}
inline void Request::set_allocated_download_request(::proto::file_transfer::DownloadRequest* download_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete download_request_;
  }
  if (download_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      download_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, download_request, submessage_arena);
    }
    
  } else {
    
  }
  download_request_ = download_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.download_request)
}

// .proto.file_transfer.UploadRequest upload_request = 7;
inline bool Request::has_upload_request() const {
  return this != internal_default_instance() && upload_request_ != NULL;
}
inline void Request::clear_upload_request() {
  if (GetArenaNoVirtual() == NULL && upload_request_ != NULL) {
    delete upload_request_;
  }
  upload_request_ = NULL;
}
inline const ::proto::file_transfer::UploadRequest& Request::upload_request() const {
  const ::proto::file_transfer::UploadRequest* p = upload_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.upload_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::UploadRequest*>(
      &::proto::file_transfer::_UploadRequest_default_instance_);
}
inline ::proto::file_transfer::UploadRequest* Request::release_upload_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.upload_request)
  
  ::proto::file_transfer::UploadRequest* temp = upload_request_;
  upload_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::UploadRequest* Request::mutable_upload_request() {
  
  if (upload_request_ == NULL) {
    upload_request_ = new ::proto::file_transfer::UploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.upload_request)
  return upload_request_;
}
inline void Request::set_allocated_upload_request(::proto::file_transfer::UploadRequest* upload_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upload_request_;
  }
  if (upload_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upload_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upload_request, submessage_arena);
    }
    
  } else {
    
  }
  upload_request_ = upload_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.upload_request)
}

// .proto.file_transfer.PacketRequest packet_request = 8;
inline bool Request::has_packet_request() const {
  return this != internal_default_instance() && packet_request_ != NULL;
}
inline void Request::clear_packet_request() {
  if (GetArenaNoVirtual() == NULL && packet_request_ != NULL) {
    delete packet_request_;
  }
  packet_request_ = NULL;
}
inline const ::proto::file_transfer::PacketRequest& Request::packet_request() const {
  const ::proto::file_transfer::PacketRequest* p = packet_request_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.packet_request)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::PacketRequest*>(
      &::proto::file_transfer::_PacketRequest_default_instance_);
}
inline ::proto::file_transfer::PacketRequest* Request::release_packet_request() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.packet_request)
  
  ::proto::file_transfer::PacketRequest* temp = packet_request_;
  packet_request_ = NULL;
  return temp;
}
inline ::proto::file_transfer::PacketRequest* Request::mutable_packet_request() {
  
  if (packet_request_ == NULL) {
    packet_request_ = new ::proto::file_transfer::PacketRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.packet_request)
  return packet_request_;
}
inline void Request::set_allocated_packet_request(::proto::file_transfer::PacketRequest* packet_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packet_request_;
  }
  if (packet_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packet_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet_request, submessage_arena);
    }
    
  } else {
    
  }
  packet_request_ = packet_request;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.packet_request)
}

// .proto.file_transfer.Packet packet = 9;
inline bool Request::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
inline void Request::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
}
inline const ::proto::file_transfer::Packet& Request::packet() const {
  const ::proto::file_transfer::Packet* p = packet_;
  // @@protoc_insertion_point(field_get:proto.file_transfer.Request.packet)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::file_transfer::Packet*>(
      &::proto::file_transfer::_Packet_default_instance_);
}
inline ::proto::file_transfer::Packet* Request::release_packet() {
  // @@protoc_insertion_point(field_release:proto.file_transfer.Request.packet)
  
  ::proto::file_transfer::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
inline ::proto::file_transfer::Packet* Request::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::proto::file_transfer::Packet;
  }
  // @@protoc_insertion_point(field_mutable:proto.file_transfer.Request.packet)
  return packet_;
}
inline void Request::set_allocated_packet(::proto::file_transfer::Packet* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    
  } else {
    
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:proto.file_transfer.Request.packet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_transfer
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::file_transfer::DriveList_Item_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::file_transfer::Packet_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::file_transfer::Status> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5ftransfer_5fsession_2eproto__INCLUDED

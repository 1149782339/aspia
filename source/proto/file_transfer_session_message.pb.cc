// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class DriveList_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList_Item> {
} _DriveList_Item_default_instance_;
class DriveListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList> {
} _DriveList_default_instance_;
class FileList_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileList_Item> {
} _FileList_Item_default_instance_;
class FileListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileList> {
} _FileList_default_instance_;
class FileListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileListRequest> {
} _FileListRequest_default_instance_;
class DirectorySizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectorySize> {
} _DirectorySize_default_instance_;
class DirectorySizeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectorySizeRequest> {
} _DirectorySizeRequest_default_instance_;
class FileUploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileUploadRequest> {
} _FileUploadRequest_default_instance_;
class FileDownloadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileDownloadRequest> {
} _FileDownloadRequest_default_instance_;
class FilePacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilePacket> {
} _FilePacket_default_instance_;
class CreateDirectoryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateDirectoryRequest> {
} _CreateDirectoryRequest_default_instance_;
class RenameRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RenameRequest> {
} _RenameRequest_default_instance_;
class RemoveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoveRequest> {
} _RemoveRequest_default_instance_;

namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DriveList_Item_default_instance_.Shutdown();
  _DriveList_default_instance_.Shutdown();
  _FileList_Item_default_instance_.Shutdown();
  _FileList_default_instance_.Shutdown();
  _FileListRequest_default_instance_.Shutdown();
  _DirectorySize_default_instance_.Shutdown();
  _DirectorySizeRequest_default_instance_.Shutdown();
  _FileUploadRequest_default_instance_.Shutdown();
  _FileDownloadRequest_default_instance_.Shutdown();
  _FilePacket_default_instance_.Shutdown();
  _CreateDirectoryRequest_default_instance_.Shutdown();
  _RenameRequest_default_instance_.Shutdown();
  _RemoveRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DriveList_Item_default_instance_.DefaultConstruct();
  _DriveList_default_instance_.DefaultConstruct();
  _FileList_Item_default_instance_.DefaultConstruct();
  _FileList_default_instance_.DefaultConstruct();
  _FileListRequest_default_instance_.DefaultConstruct();
  _DirectorySize_default_instance_.DefaultConstruct();
  _DirectorySizeRequest_default_instance_.DefaultConstruct();
  _FileUploadRequest_default_instance_.DefaultConstruct();
  _FileDownloadRequest_default_instance_.DefaultConstruct();
  _FilePacket_default_instance_.DefaultConstruct();
  _CreateDirectoryRequest_default_instance_.DefaultConstruct();
  _RenameRequest_default_instance_.DefaultConstruct();
  _RemoveRequest_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_5fsession_5fmessage_2eproto

bool DriveList_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveList_Item_Type DriveList_Item::UNKNOWN;
const DriveList_Item_Type DriveList_Item::CDROM;
const DriveList_Item_Type DriveList_Item::REMOVABLE;
const DriveList_Item_Type DriveList_Item::FIXED;
const DriveList_Item_Type DriveList_Item::REMOTE;
const DriveList_Item_Type DriveList_Item::RAM;
const DriveList_Item_Type DriveList_Item::HOME_FOLDER;
const DriveList_Item_Type DriveList_Item::DESKTOP_FOLDER;
const DriveList_Item_Type DriveList_Item::Type_MIN;
const DriveList_Item_Type DriveList_Item::Type_MAX;
const int DriveList_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FilePacket_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FilePacket_Flags FilePacket::ERROR;
const FilePacket_Flags FilePacket::PACKET;
const FilePacket_Flags FilePacket::FIRST_PACKET;
const FilePacket_Flags FilePacket::LAST_PACKET;
const FilePacket_Flags FilePacket::Flags_MIN;
const FilePacket_Flags FilePacket::Flags_MAX;
const int FilePacket::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList_Item::kTypeFieldNumber;
const int DriveList_Item::kNameFieldNumber;
const int DriveList_Item::kPathFieldNumber;
const int DriveList_Item::kTotalSpaceFieldNumber;
const int DriveList_Item::kFreeSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList_Item::DriveList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveList.Item)
}
DriveList_Item::DriveList_Item(const DriveList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&total_space_, &from.total_space_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveList.Item)
}

void DriveList_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  _cached_size_ = 0;
}

DriveList_Item::~DriveList_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveList.Item)
  SharedDtor();
}

void DriveList_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveList_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList_Item& DriveList_Item::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList_Item* DriveList_Item::New(::google::protobuf::Arena* arena) const {
  DriveList_Item* n = new DriveList_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveList.Item)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
}

bool DriveList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveList.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DriveList.Item.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DriveList_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DriveList.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DriveList.Item.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_space = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_space = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveList.Item)
  return false;
#undef DO_
}

void DriveList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DriveList.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DriveList.Item.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // uint64 total_space = 4;
  if (this->total_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_space(), output);
  }

  // uint64 free_space = 5;
  if (this->free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->free_space(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveList.Item)
}

size_t DriveList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveList.Item)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // uint64 total_space = 4;
  if (this->total_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_space());
  }

  // uint64 free_space = 5;
  if (this->free_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_space());
  }

  // .aspia.proto.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList_Item*>(&from));
}

void DriveList_Item::MergeFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.total_space() != 0) {
    set_total_space(from.total_space());
  }
  if (from.free_space() != 0) {
    set_free_space(from.free_space());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DriveList_Item::CopyFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList_Item::IsInitialized() const {
  return true;
}

void DriveList_Item::Swap(DriveList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList_Item::InternalSwap(DriveList_Item* other) {
  name_.Swap(&other->name_);
  path_.Swap(&other->path_);
  std::swap(total_space_, other->total_space_);
  std::swap(free_space_, other->free_space_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList_Item::GetTypeName() const {
  return "aspia.proto.DriveList.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList_Item

// .aspia.proto.DriveList.Item.Type type = 1;
void DriveList_Item::clear_type() {
  type_ = 0;
}
::aspia::proto::DriveList_Item_Type DriveList_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.Item.type)
  return static_cast< ::aspia::proto::DriveList_Item_Type >(type_);
}
void DriveList_Item::set_type(::aspia::proto::DriveList_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveList.Item.type)
}

// string name = 2;
void DriveList_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveList_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.Item.name)
  return name_.GetNoArena();
}
void DriveList_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveList.Item.name)
}
#if LANG_CXX11
void DriveList_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveList.Item.name)
}
#endif
void DriveList_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveList.Item.name)
}
void DriveList_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveList.Item.name)
}
::std::string* DriveList_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveList_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveList.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveList_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveList.Item.name)
}

// string path = 3;
void DriveList_Item::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveList_Item::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.Item.path)
  return path_.GetNoArena();
}
void DriveList_Item::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DriveList.Item.path)
}
#if LANG_CXX11
void DriveList_Item::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DriveList.Item.path)
}
#endif
void DriveList_Item::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DriveList.Item.path)
}
void DriveList_Item::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DriveList.Item.path)
}
::std::string* DriveList_Item::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.Item.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveList_Item::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DriveList.Item.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveList_Item::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DriveList.Item.path)
}

// uint64 total_space = 4;
void DriveList_Item::clear_total_space() {
  total_space_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DriveList_Item::total_space() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.Item.total_space)
  return total_space_;
}
void DriveList_Item::set_total_space(::google::protobuf::uint64 value) {
  
  total_space_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveList.Item.total_space)
}

// uint64 free_space = 5;
void DriveList_Item::clear_free_space() {
  free_space_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DriveList_Item::free_space() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.Item.free_space)
  return free_space_;
}
void DriveList_Item::set_free_space(::google::protobuf::uint64 value) {
  
  free_space_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DriveList.Item.free_space)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList::DriveList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DriveList)
}
DriveList::DriveList(const DriveList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DriveList)
}

void DriveList::SharedCtor() {
  _cached_size_ = 0;
}

DriveList::~DriveList() {
  // @@protoc_insertion_point(destructor:aspia.proto.DriveList)
  SharedDtor();
}

void DriveList::SharedDtor() {
}

void DriveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList& DriveList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList* DriveList::New(::google::protobuf::Arena* arena) const {
  DriveList* n = new DriveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DriveList)
  item_.Clear();
}

bool DriveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DriveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DriveList.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DriveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DriveList)
  return false;
#undef DO_
}

void DriveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DriveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DriveList.Item item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DriveList)
}

size_t DriveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DriveList)
  size_t total_size = 0;

  // repeated .aspia.proto.DriveList.Item item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList*>(&from));
}

void DriveList::MergeFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DriveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DriveList::CopyFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DriveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList::IsInitialized() const {
  return true;
}

void DriveList::Swap(DriveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList::InternalSwap(DriveList* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList::GetTypeName() const {
  return "aspia.proto.DriveList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList

// repeated .aspia.proto.DriveList.Item item = 1;
int DriveList::item_size() const {
  return item_.size();
}
void DriveList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::DriveList_Item& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DriveList.item)
  return item_.Get(index);
}
::aspia::proto::DriveList_Item* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DriveList.item)
  return item_.Mutable(index);
}
::aspia::proto::DriveList_Item* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DriveList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveList_Item >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DriveList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DriveList_Item >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DriveList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList_Item::kNameFieldNumber;
const int FileList_Item::kSizeFieldNumber;
const int FileList_Item::kModificationTimeFieldNumber;
const int FileList_Item::kIsDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList_Item::FileList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileList.Item)
}
FileList_Item::FileList_Item(const FileList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileList.Item)
}

void FileList_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
  _cached_size_ = 0;
}

FileList_Item::~FileList_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileList.Item)
  SharedDtor();
}

void FileList_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileList_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileList_Item& FileList_Item::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileList_Item* FileList_Item::New(::google::protobuf::Arena* arena) const {
  FileList_Item* n = new FileList_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileList.Item)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
}

bool FileList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileList.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileList.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 modification_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_directory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_directory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileList.Item)
  return false;
#undef DO_
}

void FileList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileList.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->modification_time(), output);
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_directory(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileList.Item)
}

size_t FileList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileList.Item)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->modification_time());
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList_Item*>(&from));
}

void FileList_Item::MergeFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
  if (from.is_directory() != 0) {
    set_is_directory(from.is_directory());
  }
}

void FileList_Item::CopyFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList_Item::IsInitialized() const {
  return true;
}

void FileList_Item::Swap(FileList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList_Item::InternalSwap(FileList_Item* other) {
  name_.Swap(&other->name_);
  std::swap(size_, other->size_);
  std::swap(modification_time_, other->modification_time_);
  std::swap(is_directory_, other->is_directory_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileList_Item::GetTypeName() const {
  return "aspia.proto.FileList.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileList_Item

// string name = 1;
void FileList_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileList_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileList.Item.name)
  return name_.GetNoArena();
}
void FileList_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileList.Item.name)
}
#if LANG_CXX11
void FileList_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileList.Item.name)
}
#endif
void FileList_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileList.Item.name)
}
void FileList_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileList.Item.name)
}
::std::string* FileList_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileList.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileList_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileList.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileList_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileList.Item.name)
}

// uint64 size = 2;
void FileList_Item::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FileList_Item::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileList.Item.size)
  return size_;
}
void FileList_Item::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FileList.Item.size)
}

// int64 modification_time = 3;
void FileList_Item::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileList_Item::modification_time() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileList.Item.modification_time)
  return modification_time_;
}
void FileList_Item::set_modification_time(::google::protobuf::int64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FileList.Item.modification_time)
}

// bool is_directory = 4;
void FileList_Item::clear_is_directory() {
  is_directory_ = false;
}
bool FileList_Item::is_directory() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileList.Item.is_directory)
  return is_directory_;
}
void FileList_Item::set_is_directory(bool value) {
  
  is_directory_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FileList.Item.is_directory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList::FileList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileList)
}
FileList::FileList(const FileList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileList)
}

void FileList::SharedCtor() {
  _cached_size_ = 0;
}

FileList::~FileList() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileList)
  SharedDtor();
}

void FileList::SharedDtor() {
}

void FileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileList& FileList::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileList* FileList::New(::google::protobuf::Arena* arena) const {
  FileList* n = new FileList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileList)
  item_.Clear();
}

bool FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.FileList.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileList)
  return false;
#undef DO_
}

void FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.FileList.Item item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileList)
}

size_t FileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileList)
  size_t total_size = 0;

  // repeated .aspia.proto.FileList.Item item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList*>(&from));
}

void FileList::MergeFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void FileList::CopyFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList::IsInitialized() const {
  return true;
}

void FileList::Swap(FileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList::InternalSwap(FileList* other) {
  item_.InternalSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileList::GetTypeName() const {
  return "aspia.proto.FileList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileList

// repeated .aspia.proto.FileList.Item item = 1;
int FileList::item_size() const {
  return item_.size();
}
void FileList::clear_item() {
  item_.Clear();
}
const ::aspia::proto::FileList_Item& FileList::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileList.item)
  return item_.Get(index);
}
::aspia::proto::FileList_Item* FileList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileList.item)
  return item_.Mutable(index);
}
::aspia::proto::FileList_Item* FileList::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.FileList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::FileList_Item >*
FileList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.FileList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::FileList_Item >&
FileList::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.FileList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListRequest::FileListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileListRequest)
}
FileListRequest::FileListRequest(const FileListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileListRequest)
}

void FileListRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileListRequest)
  SharedDtor();
}

void FileListRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileListRequest& FileListRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileListRequest* FileListRequest::New(::google::protobuf::Arena* arena) const {
  FileListRequest* n = new FileListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileListRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileListRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileListRequest)
  return false;
#undef DO_
}

void FileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileListRequest)
}

size_t FileListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileListRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileListRequest*>(&from));
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {
  return true;
}

void FileListRequest::Swap(FileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListRequest::InternalSwap(FileListRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileListRequest::GetTypeName() const {
  return "aspia.proto.FileListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileListRequest

// string path = 1;
void FileListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileListRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileListRequest.path)
  return path_.GetNoArena();
}
void FileListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileListRequest.path)
}
#if LANG_CXX11
void FileListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileListRequest.path)
}
#endif
void FileListRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileListRequest.path)
}
void FileListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileListRequest.path)
}
::std::string* FileListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileListRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileListRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorySize::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorySize::DirectorySize()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectorySize)
}
DirectorySize::DirectorySize(const DirectorySize& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectorySize)
}

void DirectorySize::SharedCtor() {
  size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DirectorySize::~DirectorySize() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectorySize)
  SharedDtor();
}

void DirectorySize::SharedDtor() {
}

void DirectorySize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectorySize& DirectorySize::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorySize* DirectorySize::New(::google::protobuf::Arena* arena) const {
  DirectorySize* n = new DirectorySize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorySize::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectorySize)
  size_ = GOOGLE_ULONGLONG(0);
}

bool DirectorySize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectorySize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectorySize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectorySize)
  return false;
#undef DO_
}

void DirectorySize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectorySize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectorySize)
}

size_t DirectorySize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectorySize)
  size_t total_size = 0;

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorySize::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectorySize*>(&from));
}

void DirectorySize::MergeFrom(const DirectorySize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectorySize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void DirectorySize::CopyFrom(const DirectorySize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectorySize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorySize::IsInitialized() const {
  return true;
}

void DirectorySize::Swap(DirectorySize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorySize::InternalSwap(DirectorySize* other) {
  std::swap(size_, other->size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectorySize::GetTypeName() const {
  return "aspia.proto.DirectorySize";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorySize

// uint64 size = 1;
void DirectorySize::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DirectorySize::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectorySize.size)
  return size_;
}
void DirectorySize::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DirectorySize.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorySizeRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorySizeRequest::DirectorySizeRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DirectorySizeRequest)
}
DirectorySizeRequest::DirectorySizeRequest(const DirectorySizeRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DirectorySizeRequest)
}

void DirectorySizeRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DirectorySizeRequest::~DirectorySizeRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.DirectorySizeRequest)
  SharedDtor();
}

void DirectorySizeRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectorySizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectorySizeRequest& DirectorySizeRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorySizeRequest* DirectorySizeRequest::New(::google::protobuf::Arena* arena) const {
  DirectorySizeRequest* n = new DirectorySizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorySizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DirectorySizeRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DirectorySizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.DirectorySizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DirectorySizeRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DirectorySizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DirectorySizeRequest)
  return false;
#undef DO_
}

void DirectorySizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DirectorySizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DirectorySizeRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.DirectorySizeRequest)
}

size_t DirectorySizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DirectorySizeRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorySizeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectorySizeRequest*>(&from));
}

void DirectorySizeRequest::MergeFrom(const DirectorySizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DirectorySizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DirectorySizeRequest::CopyFrom(const DirectorySizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DirectorySizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorySizeRequest::IsInitialized() const {
  return true;
}

void DirectorySizeRequest::Swap(DirectorySizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorySizeRequest::InternalSwap(DirectorySizeRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectorySizeRequest::GetTypeName() const {
  return "aspia.proto.DirectorySizeRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorySizeRequest

// string path = 1;
void DirectorySizeRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DirectorySizeRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DirectorySizeRequest.path)
  return path_.GetNoArena();
}
void DirectorySizeRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DirectorySizeRequest.path)
}
#if LANG_CXX11
void DirectorySizeRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DirectorySizeRequest.path)
}
#endif
void DirectorySizeRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DirectorySizeRequest.path)
}
void DirectorySizeRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DirectorySizeRequest.path)
}
::std::string* DirectorySizeRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DirectorySizeRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DirectorySizeRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.DirectorySizeRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DirectorySizeRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DirectorySizeRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileUploadRequest::kFilePathFieldNumber;
const int FileUploadRequest::kOverwriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileUploadRequest::FileUploadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileUploadRequest)
}
FileUploadRequest::FileUploadRequest(const FileUploadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileUploadRequest)
}

void FileUploadRequest::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
  _cached_size_ = 0;
}

FileUploadRequest::~FileUploadRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileUploadRequest)
  SharedDtor();
}

void FileUploadRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileUploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileUploadRequest& FileUploadRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileUploadRequest* FileUploadRequest::New(::google::protobuf::Arena* arena) const {
  FileUploadRequest* n = new FileUploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileUploadRequest)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
}

bool FileUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileUploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileUploadRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileUploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileUploadRequest)
  return false;
#undef DO_
}

void FileUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileUploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileUploadRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->overwrite(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileUploadRequest)
}

size_t FileUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileUploadRequest)
  size_t total_size = 0;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileUploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileUploadRequest*>(&from));
}

void FileUploadRequest::MergeFrom(const FileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.overwrite() != 0) {
    set_overwrite(from.overwrite());
  }
}

void FileUploadRequest::CopyFrom(const FileUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUploadRequest::IsInitialized() const {
  return true;
}

void FileUploadRequest::Swap(FileUploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileUploadRequest::InternalSwap(FileUploadRequest* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(overwrite_, other->overwrite_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileUploadRequest::GetTypeName() const {
  return "aspia.proto.FileUploadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileUploadRequest

// string file_path = 1;
void FileUploadRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileUploadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileUploadRequest.file_path)
  return file_path_.GetNoArena();
}
void FileUploadRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileUploadRequest.file_path)
}
#if LANG_CXX11
void FileUploadRequest::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileUploadRequest.file_path)
}
#endif
void FileUploadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileUploadRequest.file_path)
}
void FileUploadRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileUploadRequest.file_path)
}
::std::string* FileUploadRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileUploadRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileUploadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileUploadRequest.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileUploadRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileUploadRequest.file_path)
}

// bool overwrite = 2;
void FileUploadRequest::clear_overwrite() {
  overwrite_ = false;
}
bool FileUploadRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileUploadRequest.overwrite)
  return overwrite_;
}
void FileUploadRequest::set_overwrite(bool value) {
  
  overwrite_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FileUploadRequest.overwrite)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDownloadRequest::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDownloadRequest::FileDownloadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FileDownloadRequest)
}
FileDownloadRequest::FileDownloadRequest(const FileDownloadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FileDownloadRequest)
}

void FileDownloadRequest::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileDownloadRequest::~FileDownloadRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.FileDownloadRequest)
  SharedDtor();
}

void FileDownloadRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileDownloadRequest& FileDownloadRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileDownloadRequest* FileDownloadRequest::New(::google::protobuf::Arena* arena) const {
  FileDownloadRequest* n = new FileDownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FileDownloadRequest)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FileDownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.FileDownloadRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FileDownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FileDownloadRequest)
  return false;
#undef DO_
}

void FileDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FileDownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.FileDownloadRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FileDownloadRequest)
}

size_t FileDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FileDownloadRequest)
  size_t total_size = 0;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileDownloadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileDownloadRequest*>(&from));
}

void FileDownloadRequest::MergeFrom(const FileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FileDownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void FileDownloadRequest::CopyFrom(const FileDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FileDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDownloadRequest::IsInitialized() const {
  return true;
}

void FileDownloadRequest::Swap(FileDownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDownloadRequest::InternalSwap(FileDownloadRequest* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileDownloadRequest::GetTypeName() const {
  return "aspia.proto.FileDownloadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileDownloadRequest

// string file_path = 1;
void FileDownloadRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileDownloadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FileDownloadRequest.file_path)
  return file_path_.GetNoArena();
}
void FileDownloadRequest::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FileDownloadRequest.file_path)
}
#if LANG_CXX11
void FileDownloadRequest::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FileDownloadRequest.file_path)
}
#endif
void FileDownloadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FileDownloadRequest.file_path)
}
void FileDownloadRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FileDownloadRequest.file_path)
}
::std::string* FileDownloadRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FileDownloadRequest.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileDownloadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.FileDownloadRequest.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileDownloadRequest::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FileDownloadRequest.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilePacket::kFlagsFieldNumber;
const int FilePacket::kFileSizeFieldNumber;
const int FilePacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilePacket::FilePacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.FilePacket)
}
FilePacket::FilePacket(const FilePacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.FilePacket)
}

void FilePacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
  _cached_size_ = 0;
}

FilePacket::~FilePacket() {
  // @@protoc_insertion_point(destructor:aspia.proto.FilePacket)
  SharedDtor();
}

void FilePacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FilePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilePacket& FilePacket::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilePacket* FilePacket::New(::google::protobuf::Arena* arena) const {
  FilePacket* n = new FilePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.FilePacket)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
}

bool FilePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.FilePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.FilePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.FilePacket)
  return false;
#undef DO_
}

void FilePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.FilePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.FilePacket)
}

size_t FilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.FilePacket)
  size_t total_size = 0;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilePacket*>(&from));
}

void FilePacket::MergeFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.FilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void FilePacket::CopyFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.FilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePacket::IsInitialized() const {
  return true;
}

void FilePacket::Swap(FilePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilePacket::InternalSwap(FilePacket* other) {
  data_.Swap(&other->data_);
  std::swap(file_size_, other->file_size_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FilePacket::GetTypeName() const {
  return "aspia.proto.FilePacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilePacket

// uint32 flags = 1;
void FilePacket::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 FilePacket::flags() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.flags)
  return flags_;
}
void FilePacket::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.flags)
}

// uint64 file_size = 2;
void FilePacket::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FilePacket::file_size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.file_size)
  return file_size_;
}
void FilePacket::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.file_size)
}

// bytes data = 3;
void FilePacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilePacket::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.FilePacket.data)
  return data_.GetNoArena();
}
void FilePacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.FilePacket.data)
}
#if LANG_CXX11
void FilePacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.FilePacket.data)
}
#endif
void FilePacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.FilePacket.data)
}
void FilePacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.FilePacket.data)
}
::std::string* FilePacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.FilePacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilePacket::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.FilePacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilePacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.FilePacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDirectoryRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDirectoryRequest::CreateDirectoryRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.CreateDirectoryRequest)
}
CreateDirectoryRequest::CreateDirectoryRequest(const CreateDirectoryRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.CreateDirectoryRequest)
}

void CreateDirectoryRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateDirectoryRequest::~CreateDirectoryRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.CreateDirectoryRequest)
  SharedDtor();
}

void CreateDirectoryRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateDirectoryRequest& CreateDirectoryRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDirectoryRequest* CreateDirectoryRequest::New(::google::protobuf::Arena* arena) const {
  CreateDirectoryRequest* n = new CreateDirectoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.CreateDirectoryRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateDirectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.CreateDirectoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.CreateDirectoryRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.CreateDirectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.CreateDirectoryRequest)
  return false;
#undef DO_
}

void CreateDirectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.CreateDirectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.CreateDirectoryRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.CreateDirectoryRequest)
}

size_t CreateDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.CreateDirectoryRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDirectoryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateDirectoryRequest*>(&from));
}

void CreateDirectoryRequest::MergeFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.CreateDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CreateDirectoryRequest::CopyFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.CreateDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryRequest::IsInitialized() const {
  return true;
}

void CreateDirectoryRequest::Swap(CreateDirectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDirectoryRequest::InternalSwap(CreateDirectoryRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CreateDirectoryRequest::GetTypeName() const {
  return "aspia.proto.CreateDirectoryRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDirectoryRequest

// string path = 1;
void CreateDirectoryRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDirectoryRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.CreateDirectoryRequest.path)
  return path_.GetNoArena();
}
void CreateDirectoryRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.CreateDirectoryRequest.path)
}
#if LANG_CXX11
void CreateDirectoryRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.CreateDirectoryRequest.path)
}
#endif
void CreateDirectoryRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.CreateDirectoryRequest.path)
}
void CreateDirectoryRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.CreateDirectoryRequest.path)
}
::std::string* CreateDirectoryRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.CreateDirectoryRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDirectoryRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.CreateDirectoryRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDirectoryRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.CreateDirectoryRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kOldNameFieldNumber;
const int RenameRequest::kNewNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_name().size() > 0) {
    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_name().size() > 0) {
    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RenameRequest)
}

void RenameRequest::SharedCtor() {
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  old_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RenameRequest& RenameRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RenameRequest* RenameRequest::New(::google::protobuf::Arena* arena) const {
  RenameRequest* n = new RenameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RenameRequest)
  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RenameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string old_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_name().data(), this->old_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RenameRequest.old_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RenameRequest.new_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_name = 1;
  if (this->old_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RenameRequest.old_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->old_name(), output);
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RenameRequest.new_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RenameRequest)
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RenameRequest)
  size_t total_size = 0;

  // string old_name = 1;
  if (this->old_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_name());
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RenameRequest*>(&from));
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_name().size() > 0) {

    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  if (from.new_name().size() > 0) {

    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  old_name_.Swap(&other->old_name_);
  new_name_.Swap(&other->new_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RenameRequest::GetTypeName() const {
  return "aspia.proto.RenameRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameRequest

// string old_name = 1;
void RenameRequest::clear_old_name() {
  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::old_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.old_name)
  return old_name_.GetNoArena();
}
void RenameRequest::set_old_name(const ::std::string& value) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.old_name)
}
#if LANG_CXX11
void RenameRequest::set_old_name(::std::string&& value) {
  
  old_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.old_name)
}
#endif
void RenameRequest::set_old_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.old_name)
}
void RenameRequest::set_old_name(const char* value, size_t size) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.old_name)
}
::std::string* RenameRequest::mutable_old_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.old_name)
  return old_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_old_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.old_name)
  
  return old_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_old_name(::std::string* old_name) {
  if (old_name != NULL) {
    
  } else {
    
  }
  old_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.old_name)
}

// string new_name = 2;
void RenameRequest::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::new_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RenameRequest.new_name)
  return new_name_.GetNoArena();
}
void RenameRequest::set_new_name(const ::std::string& value) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RenameRequest.new_name)
}
#if LANG_CXX11
void RenameRequest::set_new_name(::std::string&& value) {
  
  new_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RenameRequest.new_name)
}
#endif
void RenameRequest::set_new_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RenameRequest.new_name)
}
void RenameRequest::set_new_name(const char* value, size_t size) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RenameRequest.new_name)
}
::std::string* RenameRequest::mutable_new_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RenameRequest.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_new_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.RenameRequest.new_name)
  
  return new_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    
  } else {
    
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RenameRequest.new_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveRequest& RemoveRequest::default_instance() {
  protobuf_file_5ftransfer_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveRequest* RemoveRequest::New(::google::protobuf::Arena* arena) const {
  RemoveRequest* n = new RemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.RemoveRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.RemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.RemoveRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.RemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.RemoveRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.RemoveRequest)
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.RemoveRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveRequest::InternalSwap(RemoveRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoveRequest::GetTypeName() const {
  return "aspia.proto.RemoveRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveRequest

// string path = 1;
void RemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:aspia.proto.RemoveRequest.path)
  return path_.GetNoArena();
}
void RemoveRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.RemoveRequest.path)
}
#if LANG_CXX11
void RemoveRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.RemoveRequest.path)
}
#endif
void RemoveRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.RemoveRequest.path)
}
void RemoveRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.RemoveRequest.path)
}
::std::string* RemoveRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.RemoveRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:aspia.proto.RemoveRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.RemoveRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

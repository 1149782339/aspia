// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: host_user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "host_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace proto {
class HostUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostUser> {
} _HostUser_default_instance_;
class HostUserListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostUserList> {
} _HostUserList_default_instance_;

namespace protobuf_host_5fuser_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HostUser_default_instance_.Shutdown();
  _HostUserList_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HostUser_default_instance_.DefaultConstruct();
  _HostUserList_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_host_5fuser_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostUser::kEnabledFieldNumber;
const int HostUser::kUsernameFieldNumber;
const int HostUser::kPasswordHashFieldNumber;
const int HostUser::kSessionTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostUser::HostUser()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_host_5fuser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.HostUser)
}
HostUser::HostUser(const HostUser& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password_hash().size() > 0) {
    password_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(session_types_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.HostUser)
}

void HostUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(session_types_));
  _cached_size_ = 0;
}

HostUser::~HostUser() {
  // @@protoc_insertion_point(destructor:aspia.proto.HostUser)
  SharedDtor();
}

void HostUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostUser& HostUser::default_instance() {
  protobuf_host_5fuser_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostUser* HostUser::New(::google::protobuf::Arena* arena) const {
  HostUser* n = new HostUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostUser::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.HostUser)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, reinterpret_cast<char*>(&session_types_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(session_types_));
}

bool HostUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.HostUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.HostUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_types = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.HostUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.HostUser)
  return false;
#undef DO_
}

void HostUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.HostUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.HostUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // bytes password_hash = 3;
  if (this->password_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->password_hash(), output);
  }

  // uint32 session_types = 4;
  if (this->session_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_types(), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.HostUser)
}

size_t HostUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.HostUser)
  size_t total_size = 0;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes password_hash = 3;
  if (this->password_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password_hash());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 session_types = 4;
  if (this->session_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_types());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostUser*>(&from));
}

void HostUser::MergeFrom(const HostUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.HostUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password_hash().size() > 0) {

    password_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_hash_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.session_types() != 0) {
    set_session_types(from.session_types());
  }
}

void HostUser::CopyFrom(const HostUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.HostUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostUser::IsInitialized() const {
  return true;
}

void HostUser::Swap(HostUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostUser::InternalSwap(HostUser* other) {
  username_.Swap(&other->username_);
  password_hash_.Swap(&other->password_hash_);
  std::swap(enabled_, other->enabled_);
  std::swap(session_types_, other->session_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostUser::GetTypeName() const {
  return "aspia.proto.HostUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostUser

// bool enabled = 1;
void HostUser::clear_enabled() {
  enabled_ = false;
}
bool HostUser::enabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.enabled)
  return enabled_;
}
void HostUser::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.enabled)
}

// string username = 2;
void HostUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostUser::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.username)
  return username_.GetNoArena();
}
void HostUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.username)
}
#if LANG_CXX11
void HostUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.HostUser.username)
}
#endif
void HostUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.HostUser.username)
}
void HostUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.HostUser.username)
}
::std::string* HostUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostUser::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.HostUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.HostUser.username)
}

// bytes password_hash = 3;
void HostUser::clear_password_hash() {
  password_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostUser::password_hash() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.password_hash)
  return password_hash_.GetNoArena();
}
void HostUser::set_password_hash(const ::std::string& value) {
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.password_hash)
}
#if LANG_CXX11
void HostUser::set_password_hash(::std::string&& value) {
  
  password_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.HostUser.password_hash)
}
#endif
void HostUser::set_password_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.HostUser.password_hash)
}
void HostUser::set_password_hash(const void* value, size_t size) {
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.HostUser.password_hash)
}
::std::string* HostUser::mutable_password_hash() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUser.password_hash)
  return password_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostUser::release_password_hash() {
  // @@protoc_insertion_point(field_release:aspia.proto.HostUser.password_hash)
  
  return password_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostUser::set_allocated_password_hash(::std::string* password_hash) {
  if (password_hash != NULL) {
    
  } else {
    
  }
  password_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_hash);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.HostUser.password_hash)
}

// uint32 session_types = 4;
void HostUser::clear_session_types() {
  session_types_ = 0u;
}
::google::protobuf::uint32 HostUser::session_types() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.session_types)
  return session_types_;
}
void HostUser::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.session_types)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostUserList::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostUserList::HostUserList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_host_5fuser_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.HostUserList)
}
HostUserList::HostUserList(const HostUserList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_list_(from.user_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.HostUserList)
}

void HostUserList::SharedCtor() {
  _cached_size_ = 0;
}

HostUserList::~HostUserList() {
  // @@protoc_insertion_point(destructor:aspia.proto.HostUserList)
  SharedDtor();
}

void HostUserList::SharedDtor() {
}

void HostUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostUserList& HostUserList::default_instance() {
  protobuf_host_5fuser_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostUserList* HostUserList::New(::google::protobuf::Arena* arena) const {
  HostUserList* n = new HostUserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.HostUserList)
  user_list_.Clear();
}

bool HostUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aspia.proto.HostUserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.HostUser user_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.HostUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.HostUserList)
  return false;
#undef DO_
}

void HostUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.HostUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.HostUser user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aspia.proto.HostUserList)
}

size_t HostUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.HostUserList)
  size_t total_size = 0;

  // repeated .aspia.proto.HostUser user_list = 1;
  {
    unsigned int count = this->user_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostUserList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostUserList*>(&from));
}

void HostUserList::MergeFrom(const HostUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.HostUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
}

void HostUserList::CopyFrom(const HostUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.HostUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostUserList::IsInitialized() const {
  return true;
}

void HostUserList::Swap(HostUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostUserList::InternalSwap(HostUserList* other) {
  user_list_.InternalSwap(&other->user_list_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostUserList::GetTypeName() const {
  return "aspia.proto.HostUserList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostUserList

// repeated .aspia.proto.HostUser user_list = 1;
int HostUserList::user_list_size() const {
  return user_list_.size();
}
void HostUserList::clear_user_list() {
  user_list_.Clear();
}
const ::aspia::proto::HostUser& HostUserList::user_list(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUserList.user_list)
  return user_list_.Get(index);
}
::aspia::proto::HostUser* HostUserList::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUserList.user_list)
  return user_list_.Mutable(index);
}
::aspia::proto::HostUser* HostUserList::add_user_list() {
  // @@protoc_insertion_point(field_add:aspia.proto.HostUserList.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >*
HostUserList::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.HostUserList.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >&
HostUserList::user_list() const {
  // @@protoc_insertion_point(field_list:aspia.proto.HostUserList.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

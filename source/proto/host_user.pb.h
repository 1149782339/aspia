// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: host_user.proto

#ifndef PROTOBUF_host_5fuser_2eproto__INCLUDED
#define PROTOBUF_host_5fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class HostUser;
class HostUserDefaultTypeInternal;
extern HostUserDefaultTypeInternal _HostUser_default_instance_;
class HostUserList;
class HostUserListDefaultTypeInternal;
extern HostUserListDefaultTypeInternal _HostUserList_default_instance_;
}  // namespace proto
}  // namespace aspia

namespace aspia {
namespace proto {

namespace protobuf_host_5fuser_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_host_5fuser_2eproto

// ===================================================================

class HostUser : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.HostUser) */ {
 public:
  HostUser();
  virtual ~HostUser();

  HostUser(const HostUser& from);

  inline HostUser& operator=(const HostUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostUser(HostUser&& from) noexcept
    : HostUser() {
    *this = ::std::move(from);
  }

  inline HostUser& operator=(HostUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HostUser& default_instance();

  static inline const HostUser* internal_default_instance() {
    return reinterpret_cast<const HostUser*>(
               &_HostUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HostUser* other);
  friend void swap(HostUser& a, HostUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostUser* New() const PROTOBUF_FINAL { return New(NULL); }

  HostUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HostUser& from);
  void MergeFrom(const HostUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes password_hash = 3;
  void clear_password_hash();
  static const int kPasswordHashFieldNumber = 3;
  const ::std::string& password_hash() const;
  void set_password_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_password_hash(::std::string&& value);
  #endif
  void set_password_hash(const char* value);
  void set_password_hash(const void* value, size_t size);
  ::std::string* mutable_password_hash();
  ::std::string* release_password_hash();
  void set_allocated_password_hash(::std::string* password_hash);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 session_types = 4;
  void clear_session_types();
  static const int kSessionTypesFieldNumber = 4;
  ::google::protobuf::uint32 session_types() const;
  void set_session_types(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.HostUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_hash_;
  bool enabled_;
  ::google::protobuf::uint32 session_types_;
  mutable int _cached_size_;
  friend struct protobuf_host_5fuser_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HostUserList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.HostUserList) */ {
 public:
  HostUserList();
  virtual ~HostUserList();

  HostUserList(const HostUserList& from);

  inline HostUserList& operator=(const HostUserList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostUserList(HostUserList&& from) noexcept
    : HostUserList() {
    *this = ::std::move(from);
  }

  inline HostUserList& operator=(HostUserList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HostUserList& default_instance();

  static inline const HostUserList* internal_default_instance() {
    return reinterpret_cast<const HostUserList*>(
               &_HostUserList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HostUserList* other);
  friend void swap(HostUserList& a, HostUserList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostUserList* New() const PROTOBUF_FINAL { return New(NULL); }

  HostUserList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HostUserList& from);
  void MergeFrom(const HostUserList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostUserList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.HostUser user_list = 1;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 1;
  const ::aspia::proto::HostUser& user_list(int index) const;
  ::aspia::proto::HostUser* mutable_user_list(int index);
  ::aspia::proto::HostUser* add_user_list();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >*
      mutable_user_list();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >&
      user_list() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.HostUserList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser > user_list_;
  mutable int _cached_size_;
  friend struct protobuf_host_5fuser_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostUser

// bool enabled = 1;
inline void HostUser::clear_enabled() {
  enabled_ = false;
}
inline bool HostUser::enabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.enabled)
  return enabled_;
}
inline void HostUser::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.enabled)
}

// string username = 2;
inline void HostUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HostUser::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.username)
  return username_.GetNoArena();
}
inline void HostUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.username)
}
#if LANG_CXX11
inline void HostUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.HostUser.username)
}
#endif
inline void HostUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.HostUser.username)
}
inline void HostUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.HostUser.username)
}
inline ::std::string* HostUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HostUser::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.HostUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HostUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.HostUser.username)
}

// bytes password_hash = 3;
inline void HostUser::clear_password_hash() {
  password_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HostUser::password_hash() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.password_hash)
  return password_hash_.GetNoArena();
}
inline void HostUser::set_password_hash(const ::std::string& value) {
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.password_hash)
}
#if LANG_CXX11
inline void HostUser::set_password_hash(::std::string&& value) {
  
  password_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.HostUser.password_hash)
}
#endif
inline void HostUser::set_password_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.HostUser.password_hash)
}
inline void HostUser::set_password_hash(const void* value, size_t size) {
  
  password_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.HostUser.password_hash)
}
inline ::std::string* HostUser::mutable_password_hash() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUser.password_hash)
  return password_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HostUser::release_password_hash() {
  // @@protoc_insertion_point(field_release:aspia.proto.HostUser.password_hash)
  
  return password_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HostUser::set_allocated_password_hash(::std::string* password_hash) {
  if (password_hash != NULL) {
    
  } else {
    
  }
  password_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_hash);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.HostUser.password_hash)
}

// uint32 session_types = 4;
inline void HostUser::clear_session_types() {
  session_types_ = 0u;
}
inline ::google::protobuf::uint32 HostUser::session_types() const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUser.session_types)
  return session_types_;
}
inline void HostUser::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.HostUser.session_types)
}

// -------------------------------------------------------------------

// HostUserList

// repeated .aspia.proto.HostUser user_list = 1;
inline int HostUserList::user_list_size() const {
  return user_list_.size();
}
inline void HostUserList::clear_user_list() {
  user_list_.Clear();
}
inline const ::aspia::proto::HostUser& HostUserList::user_list(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.HostUserList.user_list)
  return user_list_.Get(index);
}
inline ::aspia::proto::HostUser* HostUserList::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.HostUserList.user_list)
  return user_list_.Mutable(index);
}
inline ::aspia::proto::HostUser* HostUserList::add_user_list() {
  // @@protoc_insertion_point(field_add:aspia.proto.HostUserList.user_list)
  return user_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >*
HostUserList::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.HostUserList.user_list)
  return &user_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::HostUser >&
HostUserList::user_list() const {
  // @@protoc_insertion_point(field_list:aspia.proto.HostUserList.user_list)
  return user_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_host_5fuser_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mru.proto

#include "mru.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class MRUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MRU>
      _instance;
} _MRU_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_mru_2eproto {
void InitDefaultsMRUImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_client_5fconfig_2eproto::InitDefaultsClientConfig();
  {
    void* ptr = &::aspia::proto::_MRU_default_instance_;
    new (ptr) ::aspia::proto::MRU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::MRU::InitAsDefaultInstance();
}

void InitDefaultsMRU() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMRUImpl);
}

}  // namespace protobuf_mru_2eproto
namespace aspia {
namespace proto {

// ===================================================================

void MRU::InitAsDefaultInstance() {
}
void MRU::clear_client_config() {
  client_config_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MRU::kClientConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MRU::MRU()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mru_2eproto::InitDefaultsMRU();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.MRU)
}
MRU::MRU(const MRU& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      client_config_(from.client_config_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.MRU)
}

void MRU::SharedCtor() {
  _cached_size_ = 0;
}

MRU::~MRU() {
  // @@protoc_insertion_point(destructor:aspia.proto.MRU)
  SharedDtor();
}

void MRU::SharedDtor() {
}

void MRU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MRU& MRU::default_instance() {
  ::protobuf_mru_2eproto::InitDefaultsMRU();
  return *internal_default_instance();
}

MRU* MRU::New(::google::protobuf::Arena* arena) const {
  MRU* n = new MRU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MRU::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.MRU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_config_.Clear();
  _internal_metadata_.Clear();
}

bool MRU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.MRU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.ClientConfig client_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_client_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.MRU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.MRU)
  return false;
#undef DO_
}

void MRU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.MRU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.ClientConfig client_config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->client_config(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.MRU)
}

size_t MRU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.MRU)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.ClientConfig client_config = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->client_config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client_config(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MRU*>(&from));
}

void MRU::MergeFrom(const MRU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.MRU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_config_.MergeFrom(from.client_config_);
}

void MRU::CopyFrom(const MRU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.MRU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRU::IsInitialized() const {
  return true;
}

void MRU::Swap(MRU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MRU::InternalSwap(MRU* other) {
  using std::swap;
  client_config_.InternalSwap(&other->client_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string MRU::GetTypeName() const {
  return "aspia.proto.MRU";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

//
// Aspia Project
// Copyright (C) 2020 Dmitry Chapyshev <dmitry@aspia.ru>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package proto;

enum RouterSession
{
    ROUTER_SESSION_UNKNOWN         = 0;
    ROUTER_SESSION_MANAGER         = 1;
    ROUTER_SESSION_AUTHORIZED_PEER = 2;
    ROUTER_SESSION_ANONIMOUS_PEER  = 4;
}

enum ConnectionType
{
    CONNECTION_TYPE_UNKNOWN = 0;
    CONNECTION_TYPE_DIRECT  = 1;
    CONNECTION_TYPE_RELAY   = 2;
}

message EndPoint
{
    string host = 1;
    uint32 port = 2;
}

message PeerIdRequest
{
    bytes key = 1;
}

message PeerIdResponse
{
    fixed64 peer_id = 1;
}

message ConnectionRequest
{
    fixed64 peer_id = 1;
}

message ConnectionCandidate
{
    repeated EndPoint end_point = 1;
}

message ConnectionOffer
{
    ConnectionType type = 1;
    EndPoint address    = 2;
    bytes key           = 3;
}

message ConnectionResponse
{
    enum ErrorCode
    {
        UNKNOWN        = 0;
        SUCCESS        = 1;
        PEER_NOT_FOUND = 2;
        ACCESS_DENIED  = 3;
    }

    ErrorCode error_code  = 1;
    ConnectionOffer offer = 2;
}

message RouterToPeer
{
    PeerIdResponse peer_id_response        = 1;
    ConnectionRequest connection_request   = 2;
    ConnectionResponse connection_response = 3;
    ConnectionOffer connection_offer       = 4;
}

message PeerToRouter
{
    PeerIdRequest peer_id_request            = 1;
    ConnectionRequest connection_request     = 2;
    ConnectionCandidate connection_candidate = 3;
}

message Peer
{
    fixed64 peer_id   = 1;
    string ip_address = 2;
    string user_name  = 3;
}

message PeerListRequest
{
    uint32 dummy = 1;
}

message PeerList
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        UNKNOWN_ERROR = 1;
    }

    ErrorCode error_code = 1;
    repeated Peer peer   = 2;
}

enum PeerRequestType
{
    PEER_REQUEST_UNKNOWN    = 0;
    PEER_REQUEST_DISCONNECT = 1;
}

message PeerRequest
{
    PeerRequestType type = 1;
    Peer peer            = 2;
}

message PeerResult
{
    enum ErrorCode
    {
        SUCCESS        = 0;
        INTERNAL_ERROR = 1;
        INVALID_DATA   = 2;
    }

    PeerRequestType type = 1;
    ErrorCode error_code = 2;
}

message User
{
    int64 entry_id  = 1;
    string name     = 2;
    string password = 3;
    uint32 sessions = 4;
    uint32 flags    = 5;
}

message UserListRequest
{
    uint32 dummy = 1;
}

message UserList
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        UNKNOWN_ERROR = 1;
    }

    ErrorCode error_code = 1;
    repeated User user   = 2;
}

enum UserRequestType
{
    USER_REQUEST_UNKNOWN = 0;
    USER_REQUEST_ADD     = 1;
    USER_REQUEST_MODIFY  = 2;
    USER_REQUEST_DELETE  = 3;
}

message UserRequest
{
    UserRequestType type = 1;
    User user            = 2;
}

message UserResult
{
    enum ErrorCode
    {
        SUCCESS        = 0;
        INTERNAL_ERROR = 1;
        INVALID_DATA   = 2;
        ALREADY_EXISTS = 3;
    }

    UserRequestType type = 1;
    ErrorCode error_code = 2;
}

message Proxy
{
    string address   = 1;
    uint64 pool_size = 2;
}

message ProxyListRequest
{
    uint32 dummy = 1;
}

message ProxyList
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        UNKNOWN_ERROR = 1;
    }

    ErrorCode error_code = 1;
    repeated Proxy proxy = 2;
}

message RouterToManager
{
    PeerList peer_list     = 1;
    PeerResult peer_result = 2;
    UserList user_list     = 3;
    UserResult user_result = 4;
    ProxyList proxy_list   = 5;
}

message ManagerToRouter
{
    PeerListRequest peer_list_request   = 1;
    PeerRequest peer_request            = 2;
    UserListRequest user_list_request   = 3;
    UserRequest user_request            = 4;
    ProxyListRequest proxy_list_request = 5;
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system_info_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace system_info {
class DmiBios_FeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBios_Feature>
     _instance;
} _DmiBios_Feature_default_instance_;
class DmiBiosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBios>
     _instance;
} _DmiBios_default_instance_;
class DmiSystemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiSystem>
     _instance;
} _DmiSystem_default_instance_;
class DmiBaseboard_Item_FeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard_Item_Feature>
     _instance;
} _DmiBaseboard_Item_Feature_default_instance_;
class DmiBaseboard_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard_Item>
     _instance;
} _DmiBaseboard_Item_default_instance_;
class DmiBaseboardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBaseboard>
     _instance;
} _DmiBaseboard_default_instance_;
class DmiChassis_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis_Item>
     _instance;
} _DmiChassis_Item_default_instance_;
class DmiChassisDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis>
     _instance;
} _DmiChassis_default_instance_;
class DmiCaches_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiCaches_Item>
     _instance;
} _DmiCaches_Item_default_instance_;
class DmiCachesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiCaches>
     _instance;
} _DmiCaches_default_instance_;
class DmiProcessors_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessors_Item>
     _instance;
} _DmiProcessors_Item_default_instance_;
class DmiProcessorsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessors>
     _instance;
} _DmiProcessors_default_instance_;
class DmiMemoryDevices_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiMemoryDevices_Item>
     _instance;
} _DmiMemoryDevices_Item_default_instance_;
class DmiMemoryDevicesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiMemoryDevices>
     _instance;
} _DmiMemoryDevices_default_instance_;
class DmiSystemSlots_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiSystemSlots_Item>
     _instance;
} _DmiSystemSlots_Item_default_instance_;
class DmiSystemSlotsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiSystemSlots>
     _instance;
} _DmiSystemSlots_default_instance_;
class DmiPortConnectors_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnectors_Item>
     _instance;
} _DmiPortConnectors_Item_default_instance_;
class DmiPortConnectorsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnectors>
     _instance;
} _DmiPortConnectors_default_instance_;
class DmiOnBoardDevices_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiOnBoardDevices_Item>
     _instance;
} _DmiOnBoardDevices_Item_default_instance_;
class DmiOnBoardDevicesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiOnBoardDevices>
     _instance;
} _DmiOnBoardDevices_default_instance_;
class DmiBuildinPointing_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBuildinPointing_Item>
     _instance;
} _DmiBuildinPointing_Item_default_instance_;
class DmiBuildinPointingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiBuildinPointing>
     _instance;
} _DmiBuildinPointing_default_instance_;
class DmiPortableBattery_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiPortableBattery_Item>
     _instance;
} _DmiPortableBattery_Item_default_instance_;
class DmiPortableBatteryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DmiPortableBattery>
     _instance;
} _DmiPortableBattery_default_instance_;
class Monitors_Item_TimingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Monitors_Item_Timing>
     _instance;
} _Monitors_Item_Timing_default_instance_;
class Monitors_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Monitors_Item>
     _instance;
} _Monitors_Item_default_instance_;
class MonitorsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Monitors>
     _instance;
} _Monitors_default_instance_;
class Printers_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Printers_Item>
     _instance;
} _Printers_Item_default_instance_;
class PrintersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Printers>
     _instance;
} _Printers_default_instance_;
class Services_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Services_Item>
     _instance;
} _Services_Item_default_instance_;
class ServicesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Services>
     _instance;
} _Services_default_instance_;
class NetworkCards_Item_IpAddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item_IpAddress>
     _instance;
} _NetworkCards_Item_IpAddress_default_instance_;
class NetworkCards_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item>
     _instance;
} _NetworkCards_Item_default_instance_;
class NetworkCardsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards>
     _instance;
} _NetworkCards_default_instance_;
class OpenConnections_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections_Item>
     _instance;
} _OpenConnections_Item_default_instance_;
class OpenConnectionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections>
     _instance;
} _OpenConnections_default_instance_;
class SharedResources_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SharedResources_Item>
     _instance;
} _SharedResources_Item_default_instance_;
class SharedResourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SharedResources>
     _instance;
} _SharedResources_default_instance_;
class Routes_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Routes_Item>
     _instance;
} _Routes_Item_default_instance_;
class RoutesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Routes>
     _instance;
} _Routes_default_instance_;
class Users_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Users_Item>
     _instance;
} _Users_Item_default_instance_;
class UsersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Users>
     _instance;
} _Users_default_instance_;
class UserGroups_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserGroups_Item>
     _instance;
} _UserGroups_Item_default_instance_;
class UserGroupsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserGroups>
     _instance;
} _UserGroups_default_instance_;
class Sessions_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sessions_Item>
     _instance;
} _Sessions_Item_default_instance_;
class SessionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sessions>
     _instance;
} _Sessions_default_instance_;

namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DmiBios_Feature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBios_Feature_default_instance_);_DmiBios_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBios_default_instance_);_DmiSystem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiSystem_default_instance_);_DmiBaseboard_Item_Feature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBaseboard_Item_Feature_default_instance_);_DmiBaseboard_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBaseboard_Item_default_instance_);_DmiBaseboard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBaseboard_default_instance_);_DmiChassis_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiChassis_Item_default_instance_);_DmiChassis_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiChassis_default_instance_);_DmiCaches_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiCaches_Item_default_instance_);_DmiCaches_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiCaches_default_instance_);_DmiProcessors_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiProcessors_Item_default_instance_);_DmiProcessors_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiProcessors_default_instance_);_DmiMemoryDevices_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiMemoryDevices_Item_default_instance_);_DmiMemoryDevices_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiMemoryDevices_default_instance_);_DmiSystemSlots_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiSystemSlots_Item_default_instance_);_DmiSystemSlots_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiSystemSlots_default_instance_);_DmiPortConnectors_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiPortConnectors_Item_default_instance_);_DmiPortConnectors_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiPortConnectors_default_instance_);_DmiOnBoardDevices_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiOnBoardDevices_Item_default_instance_);_DmiOnBoardDevices_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiOnBoardDevices_default_instance_);_DmiBuildinPointing_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBuildinPointing_Item_default_instance_);_DmiBuildinPointing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiBuildinPointing_default_instance_);_DmiPortableBattery_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiPortableBattery_Item_default_instance_);_DmiPortableBattery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DmiPortableBattery_default_instance_);_Monitors_Item_Timing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Monitors_Item_Timing_default_instance_);_Monitors_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Monitors_Item_default_instance_);_Monitors_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Monitors_default_instance_);_Printers_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Printers_Item_default_instance_);_Printers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Printers_default_instance_);_Services_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Services_Item_default_instance_);_Services_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Services_default_instance_);_NetworkCards_Item_IpAddress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_Item_IpAddress_default_instance_);_NetworkCards_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_Item_default_instance_);_NetworkCards_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_default_instance_);_OpenConnections_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpenConnections_Item_default_instance_);_OpenConnections_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpenConnections_default_instance_);_SharedResources_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SharedResources_Item_default_instance_);_SharedResources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SharedResources_default_instance_);_Routes_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Routes_Item_default_instance_);_Routes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Routes_default_instance_);_Users_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Users_Item_default_instance_);_Users_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Users_default_instance_);_UserGroups_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserGroups_Item_default_instance_);_UserGroups_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserGroups_default_instance_);_Sessions_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sessions_Item_default_instance_);_Sessions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sessions_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto

bool DmiBaseboard_Item_BoardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_UNKNOWN;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_OTHER;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_SERVER_BLADE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_CONNECTIVITY_SWITCH;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_SYSTEM_MANAGEMENT_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_PROCESSOR_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_IO_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_MEMORY_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_DAUGHTER_BOARD;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_MOTHERBOARD;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_PROCESSOR_PLUS_MEMORY_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_PROCESSOR_PLUS_IO_MODULE;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BOARD_TYPE_INTERCONNECT_BOARD;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BoardType_MIN;
const DmiBaseboard_Item_BoardType DmiBaseboard_Item::BoardType_MAX;
const int DmiBaseboard_Item::BoardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Item_Type DmiChassis_Item::TYPE_UNKNOWN;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_OTHER;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_DESKTOP;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_LOW_PROFILE_DESKTOP;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_PIZZA_BOX;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_MINI_TOWER;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_TOWER;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_PORTABLE;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_LAPTOP;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_NOTEBOOK;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_HAND_HELD;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_DOCKING_STATION;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_ALL_IN_ONE;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_SUB_NOTEBOOK;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_SPACE_SAVING;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_LUNCH_BOX;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_MAIN_SERVER_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_EXPANSION_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_SUB_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_BUS_EXPANSION_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_PERIPHERIAL_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_RAID_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_RACK_MOUNT_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_SEALED_CASE_PC;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_MULTI_SYSTEM_CHASSIS;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_COMPACT_PCI;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_ADVANCED_TCA;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_BLADE;
const DmiChassis_Item_Type DmiChassis_Item::TYPE_BLADE_ENCLOSURE;
const DmiChassis_Item_Type DmiChassis_Item::Type_MIN;
const DmiChassis_Item_Type DmiChassis_Item::Type_MAX;
const int DmiChassis_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Item_Status DmiChassis_Item::STATUS_UNKNOWN;
const DmiChassis_Item_Status DmiChassis_Item::STATUS_OTHER;
const DmiChassis_Item_Status DmiChassis_Item::STATUS_SAFE;
const DmiChassis_Item_Status DmiChassis_Item::STATUS_WARNING;
const DmiChassis_Item_Status DmiChassis_Item::STATUS_CRITICAL;
const DmiChassis_Item_Status DmiChassis_Item::STATUS_NON_RECOVERABLE;
const DmiChassis_Item_Status DmiChassis_Item::Status_MIN;
const DmiChassis_Item_Status DmiChassis_Item::Status_MAX;
const int DmiChassis_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_Item_SecurityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SECURITY_STATUS_UNKNOWN;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SECURITY_STATUS_OTHER;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SECURITY_STATUS_NONE;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SecurityStatus_MIN;
const DmiChassis_Item_SecurityStatus DmiChassis_Item::SecurityStatus_MAX;
const int DmiChassis_Item::SecurityStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Location_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Location DmiCaches_Item::LOCATION_UNKNOWN;
const DmiCaches_Item_Location DmiCaches_Item::LOCATION_INTERNAL;
const DmiCaches_Item_Location DmiCaches_Item::LOCATION_EXTERNAL;
const DmiCaches_Item_Location DmiCaches_Item::LOCATION_RESERVED;
const DmiCaches_Item_Location DmiCaches_Item::Location_MIN;
const DmiCaches_Item_Location DmiCaches_Item::Location_MAX;
const int DmiCaches_Item::Location_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Status DmiCaches_Item::STATUS_UNKNOWN;
const DmiCaches_Item_Status DmiCaches_Item::STATUS_ENABLED;
const DmiCaches_Item_Status DmiCaches_Item::STATUS_DISABLED;
const DmiCaches_Item_Status DmiCaches_Item::Status_MIN;
const DmiCaches_Item_Status DmiCaches_Item::Status_MAX;
const int DmiCaches_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Mode DmiCaches_Item::MODE_UNKNOWN;
const DmiCaches_Item_Mode DmiCaches_Item::MODE_WRITE_THRU;
const DmiCaches_Item_Mode DmiCaches_Item::MODE_WRITE_BACK;
const DmiCaches_Item_Mode DmiCaches_Item::MODE_WRITE_WITH_MEMORY_ADDRESS;
const DmiCaches_Item_Mode DmiCaches_Item::Mode_MIN;
const DmiCaches_Item_Mode DmiCaches_Item::Mode_MAX;
const int DmiCaches_Item::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Level DmiCaches_Item::LEVEL_UNKNOWN;
const DmiCaches_Item_Level DmiCaches_Item::LEVEL_L1;
const DmiCaches_Item_Level DmiCaches_Item::LEVEL_L2;
const DmiCaches_Item_Level DmiCaches_Item::LEVEL_L3;
const DmiCaches_Item_Level DmiCaches_Item::Level_MIN;
const DmiCaches_Item_Level DmiCaches_Item::Level_MAX;
const int DmiCaches_Item::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_SRAMType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_BAD;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_OTHER;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_UNKNOWN;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_NON_BURST;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_BURST;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_PIPELINE_BURST;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_SYNCHRONOUS;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAM_TYPE_ASYNCHRONOUS;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAMType_MIN;
const DmiCaches_Item_SRAMType DmiCaches_Item::SRAMType_MAX;
const int DmiCaches_Item::SRAMType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_ErrorCorrectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_UNKNOWN;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_OTHER;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_NONE;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_PARITY;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_SINGLE_BIT_ECC;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ERROR_CORRECTION_TYPE_MULTI_BIT_ECC;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ErrorCorrectionType_MIN;
const DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::ErrorCorrectionType_MAX;
const int DmiCaches_Item::ErrorCorrectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Type DmiCaches_Item::TYPE_UNKNOWN;
const DmiCaches_Item_Type DmiCaches_Item::TYPE_OTHER;
const DmiCaches_Item_Type DmiCaches_Item::TYPE_INSTRUCTION;
const DmiCaches_Item_Type DmiCaches_Item::TYPE_DATA;
const DmiCaches_Item_Type DmiCaches_Item::TYPE_UNIFIED;
const DmiCaches_Item_Type DmiCaches_Item::Type_MIN;
const DmiCaches_Item_Type DmiCaches_Item::Type_MAX;
const int DmiCaches_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Item_Associativity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_UNKNOWN;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_OTHER;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_DIRECT_MAPPED;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_2_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_4_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_FULLY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_8_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_16_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_12_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_24_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_32_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_48_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_64_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::ASSOCIATIVITY_20_WAY;
const DmiCaches_Item_Associativity DmiCaches_Item::Associativity_MIN;
const DmiCaches_Item_Associativity DmiCaches_Item::Associativity_MAX;
const int DmiCaches_Item::Associativity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_UNKNOWN;
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_OTHER;
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_CENTRAL_PROCESSOR;
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_MATH_PROCESSOR;
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_DSP_PROCESSOR;
const DmiProcessors_Item_Type DmiProcessors_Item::TYPE_VIDEO_PROCESSOR;
const DmiProcessors_Item_Type DmiProcessors_Item::Type_MIN;
const DmiProcessors_Item_Type DmiProcessors_Item::Type_MAX;
const int DmiProcessors_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_UNKNOWN;
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_ENABLED;
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_DISABLED_BY_USER;
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_DISABLED_BY_BIOS;
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_IDLE;
const DmiProcessors_Item_Status DmiProcessors_Item::STATUS_OTHER;
const DmiProcessors_Item_Status DmiProcessors_Item::Status_MIN;
const DmiProcessors_Item_Status DmiProcessors_Item::Status_MAX;
const int DmiProcessors_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Item_Characteristics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_NONE;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_64BIT_CAPABLE;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_MULTI_CORE;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_HARDWARE_THREAD;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_EXECUTE_PROTECTION;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_ENHANCED_VIRTUALIZATION;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::CHARACTERISTIC_POWER_CONTROL;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::Characteristics_MIN;
const DmiProcessors_Item_Characteristics DmiProcessors_Item::Characteristics_MAX;
const int DmiProcessors_Item::Characteristics_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_Item_Usage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::USAGE_UNKNOWN;
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::USAGE_OTHER;
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::USAGE_AVAILABLE;
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::USAGE_IN_USE;
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::Usage_MIN;
const DmiSystemSlots_Item_Usage DmiSystemSlots_Item::Usage_MAX;
const int DmiSystemSlots_Item::Usage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_Item_Length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::LENGTH_UNKNOWN;
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::LENGTH_OTHER;
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::LENGTH_SHORT;
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::LENGTH_LONG;
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::Length_MIN;
const DmiSystemSlots_Item_Length DmiSystemSlots_Item::Length_MAX;
const int DmiSystemSlots_Item::Length_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Monitors_Item_InputSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Monitors_Item_InputSignalType Monitors_Item::INPUT_SIGNAL_TYPE_UNKNOWN;
const Monitors_Item_InputSignalType Monitors_Item::INPUT_SIGNAL_TYPE_ANALOG;
const Monitors_Item_InputSignalType Monitors_Item::INPUT_SIGNAL_TYPE_DIGITAL;
const Monitors_Item_InputSignalType Monitors_Item::InputSignalType_MIN;
const Monitors_Item_InputSignalType Monitors_Item::InputSignalType_MAX;
const int Monitors_Item::InputSignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Printers_Item_Orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Printers_Item_Orientation Printers_Item::ORIENTATION_UNKNOWN;
const Printers_Item_Orientation Printers_Item::ORIENTATION_PORTRAIT;
const Printers_Item_Orientation Printers_Item::ORIENTATION_LANDSCAPE;
const Printers_Item_Orientation Printers_Item::Orientation_MIN;
const Printers_Item_Orientation Printers_Item::Orientation_MAX;
const int Printers_Item::Orientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_Status Services_Item::STATUS_UNKNOWN;
const Services_Item_Status Services_Item::STATUS_CONTINUE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSED;
const Services_Item_Status Services_Item::STATUS_RUNNING;
const Services_Item_Status Services_Item::STATUS_START_PENDING;
const Services_Item_Status Services_Item::STATUS_STOP_PENDING;
const Services_Item_Status Services_Item::STATUS_STOPPED;
const Services_Item_Status Services_Item::Status_MIN;
const Services_Item_Status Services_Item::Status_MAX;
const int Services_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_StartupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_StartupType Services_Item::STARTUP_TYPE_UNKNOWN;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_AUTO_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DEMAND_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DISABLED;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_BOOT_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_SYSTEM_START;
const Services_Item_StartupType Services_Item::StartupType_MIN;
const Services_Item_StartupType Services_Item::StartupType_MAX;
const int Services_Item::StartupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SharedResources_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SharedResources_Item_Type SharedResources_Item::TYPE_UNKNOWN;
const SharedResources_Item_Type SharedResources_Item::TYPE_DISK;
const SharedResources_Item_Type SharedResources_Item::TYPE_PRINTER;
const SharedResources_Item_Type SharedResources_Item::TYPE_DEVICE;
const SharedResources_Item_Type SharedResources_Item::TYPE_IPC;
const SharedResources_Item_Type SharedResources_Item::TYPE_SPECIAL;
const SharedResources_Item_Type SharedResources_Item::TYPE_TEMPORARY;
const SharedResources_Item_Type SharedResources_Item::Type_MIN;
const SharedResources_Item_Type SharedResources_Item::Type_MAX;
const int SharedResources_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBios_Feature::kNameFieldNumber;
const int DmiBios_Feature::kSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBios_Feature::DmiBios_Feature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBios.Feature)
}
DmiBios_Feature::DmiBios_Feature(const DmiBios_Feature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  supported_ = from.supported_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBios.Feature)
}

void DmiBios_Feature::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_ = false;
  _cached_size_ = 0;
}

DmiBios_Feature::~DmiBios_Feature() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBios.Feature)
  SharedDtor();
}

void DmiBios_Feature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiBios_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBios_Feature& DmiBios_Feature::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBios_Feature* DmiBios_Feature::New(::google::protobuf::Arena* arena) const {
  DmiBios_Feature* n = new DmiBios_Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBios_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBios.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_ = false;
  _internal_metadata_.Clear();
}

bool DmiBios_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBios.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.Feature.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool supported = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBios.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBios.Feature)
  return false;
#undef DO_
}

void DmiBios_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBios.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool supported = 2;
  if (this->supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supported(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBios.Feature)
}

size_t DmiBios_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBios.Feature)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bool supported = 2;
  if (this->supported() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBios_Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBios_Feature*>(&from));
}

void DmiBios_Feature::MergeFrom(const DmiBios_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBios.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.supported() != 0) {
    set_supported(from.supported());
  }
}

void DmiBios_Feature::CopyFrom(const DmiBios_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBios.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBios_Feature::IsInitialized() const {
  return true;
}

void DmiBios_Feature::Swap(DmiBios_Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBios_Feature::InternalSwap(DmiBios_Feature* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(supported_, other->supported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBios_Feature::GetTypeName() const {
  return "aspia.system_info.DmiBios.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBios_Feature

// string name = 1;
void DmiBios_Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios_Feature::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.Feature.name)
  return name_.GetNoArena();
}
void DmiBios_Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.Feature.name)
}
#if LANG_CXX11
void DmiBios_Feature::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.Feature.name)
}
#endif
void DmiBios_Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.Feature.name)
}
void DmiBios_Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.Feature.name)
}
::std::string* DmiBios_Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios_Feature::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.Feature.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios_Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.Feature.name)
}

// bool supported = 2;
void DmiBios_Feature::clear_supported() {
  supported_ = false;
}
bool DmiBios_Feature::supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.Feature.supported)
  return supported_;
}
void DmiBios_Feature::set_supported(bool value) {
  
  supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.Feature.supported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBios::kManufacturerFieldNumber;
const int DmiBios::kVersionFieldNumber;
const int DmiBios::kDateFieldNumber;
const int DmiBios::kSizeFieldNumber;
const int DmiBios::kBiosRevisionFieldNumber;
const int DmiBios::kFirmwareRevisionFieldNumber;
const int DmiBios::kAddressFieldNumber;
const int DmiBios::kRuntimeSizeFieldNumber;
const int DmiBios::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBios::DmiBios()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBios)
}
DmiBios::DmiBios(const DmiBios& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      feature_(from.feature_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  bios_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bios_revision().size() > 0) {
    bios_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bios_revision_);
  }
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_revision().size() > 0) {
    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&runtime_size_) -
    reinterpret_cast<char*>(&size_)) + sizeof(runtime_size_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBios)
}

void DmiBios::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_size_) -
      reinterpret_cast<char*>(&size_)) + sizeof(runtime_size_));
  _cached_size_ = 0;
}

DmiBios::~DmiBios() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBios)
  SharedDtor();
}

void DmiBios::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiBios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBios& DmiBios::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBios* DmiBios::New(::google::protobuf::Arena* arena) const {
  DmiBios* n = new DmiBios;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBios::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_size_) -
      reinterpret_cast<char*>(&size_)) + sizeof(runtime_size_));
  _internal_metadata_.Clear();
}

bool DmiBios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBios)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bios_revision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bios_revision().data(), static_cast<int>(this->bios_revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.bios_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_revision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.firmware_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBios.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 runtime_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runtime_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.DmiBios.Feature feature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBios)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBios)
  return false;
#undef DO_
}

void DmiBios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // string bios_revision = 5;
  if (this->bios_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bios_revision().data(), static_cast<int>(this->bios_revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.bios_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bios_revision(), output);
  }

  // string firmware_revision = 6;
  if (this->firmware_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.firmware_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->firmware_revision(), output);
  }

  // string address = 7;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBios.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address(), output);
  }

  // int32 runtime_size = 8;
  if (this->runtime_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->runtime_size(), output);
  }

  // repeated .aspia.system_info.DmiBios.Feature feature = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->feature(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBios)
}

size_t DmiBios::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBios)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiBios.Feature feature = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature(static_cast<int>(i)));
    }
  }

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string bios_revision = 5;
  if (this->bios_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bios_revision());
  }

  // string firmware_revision = 6;
  if (this->firmware_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_revision());
  }

  // string address = 7;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // int32 runtime_size = 8;
  if (this->runtime_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runtime_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBios::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBios*>(&from));
}

void DmiBios::MergeFrom(const DmiBios& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBios)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.bios_revision().size() > 0) {

    bios_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bios_revision_);
  }
  if (from.firmware_revision().size() > 0) {

    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.runtime_size() != 0) {
    set_runtime_size(from.runtime_size());
  }
}

void DmiBios::CopyFrom(const DmiBios& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBios::IsInitialized() const {
  return true;
}

void DmiBios::Swap(DmiBios* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBios::InternalSwap(DmiBios* other) {
  using std::swap;
  feature_.InternalSwap(&other->feature_);
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  date_.Swap(&other->date_);
  bios_revision_.Swap(&other->bios_revision_);
  firmware_revision_.Swap(&other->firmware_revision_);
  address_.Swap(&other->address_);
  swap(size_, other->size_);
  swap(runtime_size_, other->runtime_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBios::GetTypeName() const {
  return "aspia.system_info.DmiBios";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBios

// string manufacturer = 1;
void DmiBios::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiBios::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.manufacturer)
}
#if LANG_CXX11
void DmiBios::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.manufacturer)
}
#endif
void DmiBios::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.manufacturer)
}
void DmiBios::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.manufacturer)
}
::std::string* DmiBios::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.manufacturer)
}

// string version = 2;
void DmiBios::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.version)
  return version_.GetNoArena();
}
void DmiBios::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.version)
}
#if LANG_CXX11
void DmiBios::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.version)
}
#endif
void DmiBios::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.version)
}
void DmiBios::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.version)
}
::std::string* DmiBios::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_version() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.version)
}

// string date = 3;
void DmiBios::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::date() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.date)
  return date_.GetNoArena();
}
void DmiBios::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.date)
}
#if LANG_CXX11
void DmiBios::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.date)
}
#endif
void DmiBios::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.date)
}
void DmiBios::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.date)
}
::std::string* DmiBios::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_date() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.date)
}

// int32 size = 4;
void DmiBios::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 DmiBios::size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.size)
  return size_;
}
void DmiBios::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.size)
}

// string bios_revision = 5;
void DmiBios::clear_bios_revision() {
  bios_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::bios_revision() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.bios_revision)
  return bios_revision_.GetNoArena();
}
void DmiBios::set_bios_revision(const ::std::string& value) {
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.bios_revision)
}
#if LANG_CXX11
void DmiBios::set_bios_revision(::std::string&& value) {
  
  bios_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.bios_revision)
}
#endif
void DmiBios::set_bios_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.bios_revision)
}
void DmiBios::set_bios_revision(const char* value, size_t size) {
  
  bios_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.bios_revision)
}
::std::string* DmiBios::mutable_bios_revision() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.bios_revision)
  return bios_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_bios_revision() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.bios_revision)
  
  return bios_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_bios_revision(::std::string* bios_revision) {
  if (bios_revision != NULL) {
    
  } else {
    
  }
  bios_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bios_revision);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.bios_revision)
}

// string firmware_revision = 6;
void DmiBios::clear_firmware_revision() {
  firmware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::firmware_revision() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.firmware_revision)
  return firmware_revision_.GetNoArena();
}
void DmiBios::set_firmware_revision(const ::std::string& value) {
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.firmware_revision)
}
#if LANG_CXX11
void DmiBios::set_firmware_revision(::std::string&& value) {
  
  firmware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.firmware_revision)
}
#endif
void DmiBios::set_firmware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.firmware_revision)
}
void DmiBios::set_firmware_revision(const char* value, size_t size) {
  
  firmware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.firmware_revision)
}
::std::string* DmiBios::mutable_firmware_revision() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.firmware_revision)
  return firmware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_firmware_revision() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.firmware_revision)
  
  return firmware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_firmware_revision(::std::string* firmware_revision) {
  if (firmware_revision != NULL) {
    
  } else {
    
  }
  firmware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_revision);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.firmware_revision)
}

// string address = 7;
void DmiBios::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBios::address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.address)
  return address_.GetNoArena();
}
void DmiBios::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.address)
}
#if LANG_CXX11
void DmiBios::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBios.address)
}
#endif
void DmiBios::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBios.address)
}
void DmiBios::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBios.address)
}
::std::string* DmiBios::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBios::release_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBios.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBios::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBios.address)
}

// int32 runtime_size = 8;
void DmiBios::clear_runtime_size() {
  runtime_size_ = 0;
}
::google::protobuf::int32 DmiBios::runtime_size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.runtime_size)
  return runtime_size_;
}
void DmiBios::set_runtime_size(::google::protobuf::int32 value) {
  
  runtime_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBios.runtime_size)
}

// repeated .aspia.system_info.DmiBios.Feature feature = 9;
int DmiBios::feature_size() const {
  return feature_.size();
}
void DmiBios::clear_feature() {
  feature_.Clear();
}
const ::aspia::system_info::DmiBios_Feature& DmiBios::feature(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBios.feature)
  return feature_.Get(index);
}
::aspia::system_info::DmiBios_Feature* DmiBios::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBios.feature)
  return feature_.Mutable(index);
}
::aspia::system_info::DmiBios_Feature* DmiBios::add_feature() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiBios.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBios_Feature >*
DmiBios::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiBios.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBios_Feature >&
DmiBios::feature() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiBios.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiSystem::kManufacturerFieldNumber;
const int DmiSystem::kProductNameFieldNumber;
const int DmiSystem::kVersionFieldNumber;
const int DmiSystem::kSerialNumberFieldNumber;
const int DmiSystem::kUuidFieldNumber;
const int DmiSystem::kWakeupTypeFieldNumber;
const int DmiSystem::kSkuNumberFieldNumber;
const int DmiSystem::kFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiSystem::DmiSystem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiSystem)
}
DmiSystem::DmiSystem(const DmiSystem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  wakeup_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wakeup_type().size() > 0) {
    wakeup_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wakeup_type_);
  }
  sku_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sku_number().size() > 0) {
    sku_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sku_number_);
  }
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.family().size() > 0) {
    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiSystem)
}

void DmiSystem::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakeup_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DmiSystem::~DmiSystem() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiSystem)
  SharedDtor();
}

void DmiSystem::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakeup_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiSystem& DmiSystem::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiSystem* DmiSystem::New(::google::protobuf::Arena* arena) const {
  DmiSystem* n = new DmiSystem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiSystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakeup_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DmiSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wakeup_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wakeup_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wakeup_type().data(), static_cast<int>(this->wakeup_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.wakeup_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sku_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sku_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sku_number().data(), static_cast<int>(this->sku_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.sku_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string family = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family().data(), static_cast<int>(this->family().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystem.family"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiSystem)
  return false;
#undef DO_
}

void DmiSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiSystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uuid(), output);
  }

  // string wakeup_type = 6;
  if (this->wakeup_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wakeup_type().data(), static_cast<int>(this->wakeup_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.wakeup_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->wakeup_type(), output);
  }

  // string sku_number = 7;
  if (this->sku_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sku_number().data(), static_cast<int>(this->sku_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.sku_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sku_number(), output);
  }

  // string family = 8;
  if (this->family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family().data(), static_cast<int>(this->family().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystem.family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->family(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiSystem)
}

size_t DmiSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiSystem)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string wakeup_type = 6;
  if (this->wakeup_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wakeup_type());
  }

  // string sku_number = 7;
  if (this->sku_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sku_number());
  }

  // string family = 8;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiSystem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiSystem*>(&from));
}

void DmiSystem::MergeFrom(const DmiSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.wakeup_type().size() > 0) {

    wakeup_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wakeup_type_);
  }
  if (from.sku_number().size() > 0) {

    sku_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sku_number_);
  }
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
}

void DmiSystem::CopyFrom(const DmiSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiSystem::IsInitialized() const {
  return true;
}

void DmiSystem::Swap(DmiSystem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiSystem::InternalSwap(DmiSystem* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  product_name_.Swap(&other->product_name_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  uuid_.Swap(&other->uuid_);
  wakeup_type_.Swap(&other->wakeup_type_);
  sku_number_.Swap(&other->sku_number_);
  family_.Swap(&other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiSystem::GetTypeName() const {
  return "aspia.system_info.DmiSystem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiSystem

// string manufacturer = 1;
void DmiSystem::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiSystem::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.manufacturer)
}
#if LANG_CXX11
void DmiSystem::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.manufacturer)
}
#endif
void DmiSystem::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.manufacturer)
}
void DmiSystem::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.manufacturer)
}
::std::string* DmiSystem::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.manufacturer)
}

// string product_name = 2;
void DmiSystem::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::product_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.product_name)
  return product_name_.GetNoArena();
}
void DmiSystem::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.product_name)
}
#if LANG_CXX11
void DmiSystem::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.product_name)
}
#endif
void DmiSystem::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.product_name)
}
void DmiSystem::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.product_name)
}
::std::string* DmiSystem::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_product_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.product_name)
}

// string version = 3;
void DmiSystem::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.version)
  return version_.GetNoArena();
}
void DmiSystem::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.version)
}
#if LANG_CXX11
void DmiSystem::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.version)
}
#endif
void DmiSystem::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.version)
}
void DmiSystem::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.version)
}
::std::string* DmiSystem::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_version() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.version)
}

// string serial_number = 4;
void DmiSystem::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.serial_number)
  return serial_number_.GetNoArena();
}
void DmiSystem::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.serial_number)
}
#if LANG_CXX11
void DmiSystem::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.serial_number)
}
#endif
void DmiSystem::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.serial_number)
}
void DmiSystem::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.serial_number)
}
::std::string* DmiSystem::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.serial_number)
}

// string uuid = 5;
void DmiSystem::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::uuid() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.uuid)
  return uuid_.GetNoArena();
}
void DmiSystem::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.uuid)
}
#if LANG_CXX11
void DmiSystem::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.uuid)
}
#endif
void DmiSystem::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.uuid)
}
void DmiSystem::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.uuid)
}
::std::string* DmiSystem::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_uuid() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.uuid)
}

// string wakeup_type = 6;
void DmiSystem::clear_wakeup_type() {
  wakeup_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::wakeup_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.wakeup_type)
  return wakeup_type_.GetNoArena();
}
void DmiSystem::set_wakeup_type(const ::std::string& value) {
  
  wakeup_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.wakeup_type)
}
#if LANG_CXX11
void DmiSystem::set_wakeup_type(::std::string&& value) {
  
  wakeup_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.wakeup_type)
}
#endif
void DmiSystem::set_wakeup_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wakeup_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.wakeup_type)
}
void DmiSystem::set_wakeup_type(const char* value, size_t size) {
  
  wakeup_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.wakeup_type)
}
::std::string* DmiSystem::mutable_wakeup_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.wakeup_type)
  return wakeup_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_wakeup_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.wakeup_type)
  
  return wakeup_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_wakeup_type(::std::string* wakeup_type) {
  if (wakeup_type != NULL) {
    
  } else {
    
  }
  wakeup_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wakeup_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.wakeup_type)
}

// string sku_number = 7;
void DmiSystem::clear_sku_number() {
  sku_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::sku_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.sku_number)
  return sku_number_.GetNoArena();
}
void DmiSystem::set_sku_number(const ::std::string& value) {
  
  sku_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.sku_number)
}
#if LANG_CXX11
void DmiSystem::set_sku_number(::std::string&& value) {
  
  sku_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.sku_number)
}
#endif
void DmiSystem::set_sku_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sku_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.sku_number)
}
void DmiSystem::set_sku_number(const char* value, size_t size) {
  
  sku_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.sku_number)
}
::std::string* DmiSystem::mutable_sku_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.sku_number)
  return sku_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_sku_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.sku_number)
  
  return sku_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_sku_number(::std::string* sku_number) {
  if (sku_number != NULL) {
    
  } else {
    
  }
  sku_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sku_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.sku_number)
}

// string family = 8;
void DmiSystem::clear_family() {
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystem::family() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystem.family)
  return family_.GetNoArena();
}
void DmiSystem::set_family(const ::std::string& value) {
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystem.family)
}
#if LANG_CXX11
void DmiSystem::set_family(::std::string&& value) {
  
  family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystem.family)
}
#endif
void DmiSystem::set_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystem.family)
}
void DmiSystem::set_family(const char* value, size_t size) {
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystem.family)
}
::std::string* DmiSystem::mutable_family() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystem.family)
  return family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystem::release_family() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystem.family)
  
  return family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystem::set_allocated_family(::std::string* family) {
  if (family != NULL) {
    
  } else {
    
  }
  family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystem.family)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard_Item_Feature::kNameFieldNumber;
const int DmiBaseboard_Item_Feature::kSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard_Item_Feature::DmiBaseboard_Item_Feature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBaseboard.Item.Feature)
}
DmiBaseboard_Item_Feature::DmiBaseboard_Item_Feature(const DmiBaseboard_Item_Feature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  supported_ = from.supported_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBaseboard.Item.Feature)
}

void DmiBaseboard_Item_Feature::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_ = false;
  _cached_size_ = 0;
}

DmiBaseboard_Item_Feature::~DmiBaseboard_Item_Feature() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBaseboard.Item.Feature)
  SharedDtor();
}

void DmiBaseboard_Item_Feature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiBaseboard_Item_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard_Item_Feature& DmiBaseboard_Item_Feature::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBaseboard_Item_Feature* DmiBaseboard_Item_Feature::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard_Item_Feature* n = new DmiBaseboard_Item_Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard_Item_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBaseboard.Item.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_ = false;
  _internal_metadata_.Clear();
}

bool DmiBaseboard_Item_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBaseboard.Item.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.Feature.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool supported = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBaseboard.Item.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBaseboard.Item.Feature)
  return false;
#undef DO_
}

void DmiBaseboard_Item_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBaseboard.Item.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool supported = 2;
  if (this->supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supported(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBaseboard.Item.Feature)
}

size_t DmiBaseboard_Item_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBaseboard.Item.Feature)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bool supported = 2;
  if (this->supported() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard_Item_Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard_Item_Feature*>(&from));
}

void DmiBaseboard_Item_Feature::MergeFrom(const DmiBaseboard_Item_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBaseboard.Item.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.supported() != 0) {
    set_supported(from.supported());
  }
}

void DmiBaseboard_Item_Feature::CopyFrom(const DmiBaseboard_Item_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBaseboard.Item.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard_Item_Feature::IsInitialized() const {
  return true;
}

void DmiBaseboard_Item_Feature::Swap(DmiBaseboard_Item_Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard_Item_Feature::InternalSwap(DmiBaseboard_Item_Feature* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(supported_, other->supported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard_Item_Feature::GetTypeName() const {
  return "aspia.system_info.DmiBaseboard.Item.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBaseboard_Item_Feature

// string name = 1;
void DmiBaseboard_Item_Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item_Feature::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.Feature.name)
  return name_.GetNoArena();
}
void DmiBaseboard_Item_Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.Feature.name)
}
#if LANG_CXX11
void DmiBaseboard_Item_Feature::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.Feature.name)
}
#endif
void DmiBaseboard_Item_Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.Feature.name)
}
void DmiBaseboard_Item_Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.Feature.name)
}
::std::string* DmiBaseboard_Item_Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item_Feature::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.Feature.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item_Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.Feature.name)
}

// bool supported = 2;
void DmiBaseboard_Item_Feature::clear_supported() {
  supported_ = false;
}
bool DmiBaseboard_Item_Feature::supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.Feature.supported)
  return supported_;
}
void DmiBaseboard_Item_Feature::set_supported(bool value) {
  
  supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.Feature.supported)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard_Item::kManufacturerFieldNumber;
const int DmiBaseboard_Item::kProductNameFieldNumber;
const int DmiBaseboard_Item::kVersionFieldNumber;
const int DmiBaseboard_Item::kSerialNumberFieldNumber;
const int DmiBaseboard_Item::kAssetTagFieldNumber;
const int DmiBaseboard_Item::kFeatureFieldNumber;
const int DmiBaseboard_Item::kLocationInChassisFieldNumber;
const int DmiBaseboard_Item::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard_Item::DmiBaseboard_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBaseboard.Item)
}
DmiBaseboard_Item::DmiBaseboard_Item(const DmiBaseboard_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      feature_(from.feature_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  location_in_chassis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_in_chassis().size() > 0) {
    location_in_chassis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_in_chassis_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBaseboard.Item)
}

void DmiBaseboard_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DmiBaseboard_Item::~DmiBaseboard_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBaseboard.Item)
  SharedDtor();
}

void DmiBaseboard_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiBaseboard_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard_Item& DmiBaseboard_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBaseboard_Item* DmiBaseboard_Item::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard_Item* n = new DmiBaseboard_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBaseboard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_in_chassis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool DmiBaseboard_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBaseboard.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.DmiBaseboard.Item.Feature feature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_in_chassis = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_in_chassis()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_in_chassis().data(), static_cast<int>(this->location_in_chassis().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBaseboard.Item.location_in_chassis"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiBaseboard.Item.BoardType type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::DmiBaseboard_Item_BoardType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBaseboard.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBaseboard.Item)
  return false;
#undef DO_
}

void DmiBaseboard_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBaseboard.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string asset_tag = 5;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->asset_tag(), output);
  }

  // repeated .aspia.system_info.DmiBaseboard.Item.Feature feature = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->feature(static_cast<int>(i)), output);
  }

  // string location_in_chassis = 7;
  if (this->location_in_chassis().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_in_chassis().data(), static_cast<int>(this->location_in_chassis().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBaseboard.Item.location_in_chassis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_in_chassis(), output);
  }

  // .aspia.system_info.DmiBaseboard.Item.BoardType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBaseboard.Item)
}

size_t DmiBaseboard_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBaseboard.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiBaseboard.Item.Feature feature = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature(static_cast<int>(i)));
    }
  }

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 5;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string location_in_chassis = 7;
  if (this->location_in_chassis().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_in_chassis());
  }

  // .aspia.system_info.DmiBaseboard.Item.BoardType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard_Item*>(&from));
}

void DmiBaseboard_Item::MergeFrom(const DmiBaseboard_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBaseboard.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.location_in_chassis().size() > 0) {

    location_in_chassis_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_in_chassis_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DmiBaseboard_Item::CopyFrom(const DmiBaseboard_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBaseboard.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard_Item::IsInitialized() const {
  return true;
}

void DmiBaseboard_Item::Swap(DmiBaseboard_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard_Item::InternalSwap(DmiBaseboard_Item* other) {
  using std::swap;
  feature_.InternalSwap(&other->feature_);
  manufacturer_.Swap(&other->manufacturer_);
  product_name_.Swap(&other->product_name_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  location_in_chassis_.Swap(&other->location_in_chassis_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard_Item::GetTypeName() const {
  return "aspia.system_info.DmiBaseboard.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBaseboard_Item

// string manufacturer = 1;
void DmiBaseboard_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiBaseboard_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.manufacturer)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.manufacturer)
}
#endif
void DmiBaseboard_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.manufacturer)
}
void DmiBaseboard_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.manufacturer)
}
::std::string* DmiBaseboard_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.manufacturer)
}

// string product_name = 2;
void DmiBaseboard_Item::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::product_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.product_name)
  return product_name_.GetNoArena();
}
void DmiBaseboard_Item::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.product_name)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.product_name)
}
#endif
void DmiBaseboard_Item::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.product_name)
}
void DmiBaseboard_Item::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.product_name)
}
::std::string* DmiBaseboard_Item::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_product_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.product_name)
}

// string version = 3;
void DmiBaseboard_Item::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.version)
  return version_.GetNoArena();
}
void DmiBaseboard_Item::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.version)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.version)
}
#endif
void DmiBaseboard_Item::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.version)
}
void DmiBaseboard_Item::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.version)
}
::std::string* DmiBaseboard_Item::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_version() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.version)
}

// string serial_number = 4;
void DmiBaseboard_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.serial_number)
  return serial_number_.GetNoArena();
}
void DmiBaseboard_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.serial_number)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.serial_number)
}
#endif
void DmiBaseboard_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.serial_number)
}
void DmiBaseboard_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.serial_number)
}
::std::string* DmiBaseboard_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.serial_number)
}

// string asset_tag = 5;
void DmiBaseboard_Item::clear_asset_tag() {
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::asset_tag() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.asset_tag)
  return asset_tag_.GetNoArena();
}
void DmiBaseboard_Item::set_asset_tag(const ::std::string& value) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.asset_tag)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_asset_tag(::std::string&& value) {
  
  asset_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.asset_tag)
}
#endif
void DmiBaseboard_Item::set_asset_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.asset_tag)
}
void DmiBaseboard_Item::set_asset_tag(const char* value, size_t size) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.asset_tag)
}
::std::string* DmiBaseboard_Item::mutable_asset_tag() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.asset_tag)
  return asset_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_asset_tag() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.asset_tag)
  
  return asset_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_asset_tag(::std::string* asset_tag) {
  if (asset_tag != NULL) {
    
  } else {
    
  }
  asset_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_tag);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.asset_tag)
}

// repeated .aspia.system_info.DmiBaseboard.Item.Feature feature = 6;
int DmiBaseboard_Item::feature_size() const {
  return feature_.size();
}
void DmiBaseboard_Item::clear_feature() {
  feature_.Clear();
}
const ::aspia::system_info::DmiBaseboard_Item_Feature& DmiBaseboard_Item::feature(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.feature)
  return feature_.Get(index);
}
::aspia::system_info::DmiBaseboard_Item_Feature* DmiBaseboard_Item::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.feature)
  return feature_.Mutable(index);
}
::aspia::system_info::DmiBaseboard_Item_Feature* DmiBaseboard_Item::add_feature() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiBaseboard.Item.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBaseboard_Item_Feature >*
DmiBaseboard_Item::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiBaseboard.Item.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBaseboard_Item_Feature >&
DmiBaseboard_Item::feature() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiBaseboard.Item.feature)
  return feature_;
}

// string location_in_chassis = 7;
void DmiBaseboard_Item::clear_location_in_chassis() {
  location_in_chassis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBaseboard_Item::location_in_chassis() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
  return location_in_chassis_.GetNoArena();
}
void DmiBaseboard_Item::set_location_in_chassis(const ::std::string& value) {
  
  location_in_chassis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
}
#if LANG_CXX11
void DmiBaseboard_Item::set_location_in_chassis(::std::string&& value) {
  
  location_in_chassis_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
}
#endif
void DmiBaseboard_Item::set_location_in_chassis(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_in_chassis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
}
void DmiBaseboard_Item::set_location_in_chassis(const char* value, size_t size) {
  
  location_in_chassis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
}
::std::string* DmiBaseboard_Item::mutable_location_in_chassis() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
  return location_in_chassis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBaseboard_Item::release_location_in_chassis() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
  
  return location_in_chassis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBaseboard_Item::set_allocated_location_in_chassis(::std::string* location_in_chassis) {
  if (location_in_chassis != NULL) {
    
  } else {
    
  }
  location_in_chassis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_in_chassis);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBaseboard.Item.location_in_chassis)
}

// .aspia.system_info.DmiBaseboard.Item.BoardType type = 8;
void DmiBaseboard_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::DmiBaseboard_Item_BoardType DmiBaseboard_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.Item.type)
  return static_cast< ::aspia::system_info::DmiBaseboard_Item_BoardType >(type_);
}
void DmiBaseboard_Item::set_type(::aspia::system_info::DmiBaseboard_Item_BoardType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBaseboard.Item.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBaseboard::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBaseboard::DmiBaseboard()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBaseboard)
}
DmiBaseboard::DmiBaseboard(const DmiBaseboard& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBaseboard)
}

void DmiBaseboard::SharedCtor() {
  _cached_size_ = 0;
}

DmiBaseboard::~DmiBaseboard() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBaseboard)
  SharedDtor();
}

void DmiBaseboard::SharedDtor() {
}

void DmiBaseboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBaseboard& DmiBaseboard::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBaseboard* DmiBaseboard::New(::google::protobuf::Arena* arena) const {
  DmiBaseboard* n = new DmiBaseboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBaseboard::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBaseboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiBaseboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBaseboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiBaseboard.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBaseboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBaseboard)
  return false;
#undef DO_
}

void DmiBaseboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBaseboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiBaseboard.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBaseboard)
}

size_t DmiBaseboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBaseboard)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiBaseboard.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBaseboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBaseboard*>(&from));
}

void DmiBaseboard::MergeFrom(const DmiBaseboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBaseboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiBaseboard::CopyFrom(const DmiBaseboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBaseboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBaseboard::IsInitialized() const {
  return true;
}

void DmiBaseboard::Swap(DmiBaseboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBaseboard::InternalSwap(DmiBaseboard* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBaseboard::GetTypeName() const {
  return "aspia.system_info.DmiBaseboard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBaseboard

// repeated .aspia.system_info.DmiBaseboard.Item item = 1;
int DmiBaseboard::item_size() const {
  return item_.size();
}
void DmiBaseboard::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiBaseboard_Item& DmiBaseboard::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBaseboard.item)
  return item_.Get(index);
}
::aspia::system_info::DmiBaseboard_Item* DmiBaseboard::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBaseboard.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiBaseboard_Item* DmiBaseboard::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiBaseboard.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBaseboard_Item >*
DmiBaseboard::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiBaseboard.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBaseboard_Item >&
DmiBaseboard::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiBaseboard.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis_Item::kManufacturerFieldNumber;
const int DmiChassis_Item::kVersionFieldNumber;
const int DmiChassis_Item::kSerialNumberFieldNumber;
const int DmiChassis_Item::kAssetTagFieldNumber;
const int DmiChassis_Item::kTypeFieldNumber;
const int DmiChassis_Item::kOsLoadStatusFieldNumber;
const int DmiChassis_Item::kPowerSourceStatusFieldNumber;
const int DmiChassis_Item::kTemparatureStatusFieldNumber;
const int DmiChassis_Item::kSecurityStatusFieldNumber;
const int DmiChassis_Item::kHeightFieldNumber;
const int DmiChassis_Item::kNumberOfPowerCordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis_Item::DmiChassis_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiChassis.Item)
}
DmiChassis_Item::DmiChassis_Item(const DmiChassis_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_power_cords_) -
    reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiChassis.Item)
}

void DmiChassis_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _cached_size_ = 0;
}

DmiChassis_Item::~DmiChassis_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiChassis.Item)
  SharedDtor();
}

void DmiChassis_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiChassis_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis_Item& DmiChassis_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiChassis_Item* DmiChassis_Item::New(::google::protobuf::Arena* arena) const {
  DmiChassis_Item* n = new DmiChassis_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _internal_metadata_.Clear();
}

bool DmiChassis_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiChassis.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiChassis.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiChassis.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiChassis.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiChassis.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiChassis.Item.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::DmiChassis_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiChassis.Item.Status os_load_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_load_status(static_cast< ::aspia::system_info::DmiChassis_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiChassis.Item.Status power_source_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_source_status(static_cast< ::aspia::system_info::DmiChassis_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiChassis.Item.Status temparature_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_temparature_status(static_cast< ::aspia::system_info::DmiChassis_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiChassis.Item.SecurityStatus security_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_security_status(static_cast< ::aspia::system_info::DmiChassis_Item_SecurityStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_of_power_cords = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_power_cords_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiChassis.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiChassis.Item)
  return false;
#undef DO_
}

void DmiChassis_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiChassis.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiChassis.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiChassis.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serial_number(), output);
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiChassis.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset_tag(), output);
  }

  // .aspia.system_info.DmiChassis.Item.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .aspia.system_info.DmiChassis.Item.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->os_load_status(), output);
  }

  // .aspia.system_info.DmiChassis.Item.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->power_source_status(), output);
  }

  // .aspia.system_info.DmiChassis.Item.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->temparature_status(), output);
  }

  // .aspia.system_info.DmiChassis.Item.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->security_status(), output);
  }

  // int32 height = 10;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->number_of_power_cords(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiChassis.Item)
}

size_t DmiChassis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiChassis.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // .aspia.system_info.DmiChassis.Item.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.DmiChassis.Item.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_load_status());
  }

  // .aspia.system_info.DmiChassis.Item.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_source_status());
  }

  // .aspia.system_info.DmiChassis.Item.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->temparature_status());
  }

  // .aspia.system_info.DmiChassis.Item.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_status());
  }

  // int32 height = 10;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_power_cords());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis_Item*>(&from));
}

void DmiChassis_Item::MergeFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiChassis.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.os_load_status() != 0) {
    set_os_load_status(from.os_load_status());
  }
  if (from.power_source_status() != 0) {
    set_power_source_status(from.power_source_status());
  }
  if (from.temparature_status() != 0) {
    set_temparature_status(from.temparature_status());
  }
  if (from.security_status() != 0) {
    set_security_status(from.security_status());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.number_of_power_cords() != 0) {
    set_number_of_power_cords(from.number_of_power_cords());
  }
}

void DmiChassis_Item::CopyFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiChassis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis_Item::IsInitialized() const {
  return true;
}

void DmiChassis_Item::Swap(DmiChassis_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis_Item::InternalSwap(DmiChassis_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  swap(type_, other->type_);
  swap(os_load_status_, other->os_load_status_);
  swap(power_source_status_, other->power_source_status_);
  swap(temparature_status_, other->temparature_status_);
  swap(security_status_, other->security_status_);
  swap(height_, other->height_);
  swap(number_of_power_cords_, other->number_of_power_cords_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis_Item::GetTypeName() const {
  return "aspia.system_info.DmiChassis.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiChassis_Item

// string manufacturer = 1;
void DmiChassis_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiChassis_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiChassis_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.manufacturer)
}
#if LANG_CXX11
void DmiChassis_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiChassis.Item.manufacturer)
}
#endif
void DmiChassis_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiChassis.Item.manufacturer)
}
void DmiChassis_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiChassis.Item.manufacturer)
}
::std::string* DmiChassis_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiChassis.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiChassis_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiChassis.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiChassis_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiChassis.Item.manufacturer)
}

// string version = 2;
void DmiChassis_Item::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiChassis_Item::version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.version)
  return version_.GetNoArena();
}
void DmiChassis_Item::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.version)
}
#if LANG_CXX11
void DmiChassis_Item::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiChassis.Item.version)
}
#endif
void DmiChassis_Item::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiChassis.Item.version)
}
void DmiChassis_Item::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiChassis.Item.version)
}
::std::string* DmiChassis_Item::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiChassis.Item.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiChassis_Item::release_version() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiChassis.Item.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiChassis_Item::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiChassis.Item.version)
}

// string serial_number = 3;
void DmiChassis_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiChassis_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.serial_number)
  return serial_number_.GetNoArena();
}
void DmiChassis_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.serial_number)
}
#if LANG_CXX11
void DmiChassis_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiChassis.Item.serial_number)
}
#endif
void DmiChassis_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiChassis.Item.serial_number)
}
void DmiChassis_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiChassis.Item.serial_number)
}
::std::string* DmiChassis_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiChassis.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiChassis_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiChassis.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiChassis_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiChassis.Item.serial_number)
}

// string asset_tag = 4;
void DmiChassis_Item::clear_asset_tag() {
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiChassis_Item::asset_tag() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.asset_tag)
  return asset_tag_.GetNoArena();
}
void DmiChassis_Item::set_asset_tag(const ::std::string& value) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.asset_tag)
}
#if LANG_CXX11
void DmiChassis_Item::set_asset_tag(::std::string&& value) {
  
  asset_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiChassis.Item.asset_tag)
}
#endif
void DmiChassis_Item::set_asset_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiChassis.Item.asset_tag)
}
void DmiChassis_Item::set_asset_tag(const char* value, size_t size) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiChassis.Item.asset_tag)
}
::std::string* DmiChassis_Item::mutable_asset_tag() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiChassis.Item.asset_tag)
  return asset_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiChassis_Item::release_asset_tag() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiChassis.Item.asset_tag)
  
  return asset_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiChassis_Item::set_allocated_asset_tag(::std::string* asset_tag) {
  if (asset_tag != NULL) {
    
  } else {
    
  }
  asset_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_tag);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiChassis.Item.asset_tag)
}

// .aspia.system_info.DmiChassis.Item.Type type = 5;
void DmiChassis_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::DmiChassis_Item_Type DmiChassis_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.type)
  return static_cast< ::aspia::system_info::DmiChassis_Item_Type >(type_);
}
void DmiChassis_Item::set_type(::aspia::system_info::DmiChassis_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.type)
}

// .aspia.system_info.DmiChassis.Item.Status os_load_status = 6;
void DmiChassis_Item::clear_os_load_status() {
  os_load_status_ = 0;
}
::aspia::system_info::DmiChassis_Item_Status DmiChassis_Item::os_load_status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.os_load_status)
  return static_cast< ::aspia::system_info::DmiChassis_Item_Status >(os_load_status_);
}
void DmiChassis_Item::set_os_load_status(::aspia::system_info::DmiChassis_Item_Status value) {
  
  os_load_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.os_load_status)
}

// .aspia.system_info.DmiChassis.Item.Status power_source_status = 7;
void DmiChassis_Item::clear_power_source_status() {
  power_source_status_ = 0;
}
::aspia::system_info::DmiChassis_Item_Status DmiChassis_Item::power_source_status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.power_source_status)
  return static_cast< ::aspia::system_info::DmiChassis_Item_Status >(power_source_status_);
}
void DmiChassis_Item::set_power_source_status(::aspia::system_info::DmiChassis_Item_Status value) {
  
  power_source_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.power_source_status)
}

// .aspia.system_info.DmiChassis.Item.Status temparature_status = 8;
void DmiChassis_Item::clear_temparature_status() {
  temparature_status_ = 0;
}
::aspia::system_info::DmiChassis_Item_Status DmiChassis_Item::temparature_status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.temparature_status)
  return static_cast< ::aspia::system_info::DmiChassis_Item_Status >(temparature_status_);
}
void DmiChassis_Item::set_temparature_status(::aspia::system_info::DmiChassis_Item_Status value) {
  
  temparature_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.temparature_status)
}

// .aspia.system_info.DmiChassis.Item.SecurityStatus security_status = 9;
void DmiChassis_Item::clear_security_status() {
  security_status_ = 0;
}
::aspia::system_info::DmiChassis_Item_SecurityStatus DmiChassis_Item::security_status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.security_status)
  return static_cast< ::aspia::system_info::DmiChassis_Item_SecurityStatus >(security_status_);
}
void DmiChassis_Item::set_security_status(::aspia::system_info::DmiChassis_Item_SecurityStatus value) {
  
  security_status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.security_status)
}

// int32 height = 10;
void DmiChassis_Item::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 DmiChassis_Item::height() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.height)
  return height_;
}
void DmiChassis_Item::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.height)
}

// int32 number_of_power_cords = 11;
void DmiChassis_Item::clear_number_of_power_cords() {
  number_of_power_cords_ = 0;
}
::google::protobuf::int32 DmiChassis_Item::number_of_power_cords() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.Item.number_of_power_cords)
  return number_of_power_cords_;
}
void DmiChassis_Item::set_number_of_power_cords(::google::protobuf::int32 value) {
  
  number_of_power_cords_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiChassis.Item.number_of_power_cords)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis::DmiChassis()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiChassis)
}
DmiChassis::DmiChassis(const DmiChassis& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiChassis)
}

void DmiChassis::SharedCtor() {
  _cached_size_ = 0;
}

DmiChassis::~DmiChassis() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiChassis)
  SharedDtor();
}

void DmiChassis::SharedDtor() {
}

void DmiChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis& DmiChassis::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiChassis* DmiChassis::New(::google::protobuf::Arena* arena) const {
  DmiChassis* n = new DmiChassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiChassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiChassis.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiChassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiChassis)
  return false;
#undef DO_
}

void DmiChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiChassis.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiChassis)
}

size_t DmiChassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiChassis)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiChassis.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis*>(&from));
}

void DmiChassis::MergeFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiChassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiChassis::CopyFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiChassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis::IsInitialized() const {
  return true;
}

void DmiChassis::Swap(DmiChassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis::InternalSwap(DmiChassis* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis::GetTypeName() const {
  return "aspia.system_info.DmiChassis";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiChassis

// repeated .aspia.system_info.DmiChassis.Item item = 1;
int DmiChassis::item_size() const {
  return item_.size();
}
void DmiChassis::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiChassis_Item& DmiChassis::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiChassis.item)
  return item_.Get(index);
}
::aspia::system_info::DmiChassis_Item* DmiChassis::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiChassis.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiChassis_Item* DmiChassis::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiChassis.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiChassis_Item >*
DmiChassis::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiChassis.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiChassis_Item >&
DmiChassis::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiChassis.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiCaches_Item::kNameFieldNumber;
const int DmiCaches_Item::kLocationFieldNumber;
const int DmiCaches_Item::kStatusFieldNumber;
const int DmiCaches_Item::kModeFieldNumber;
const int DmiCaches_Item::kLevelFieldNumber;
const int DmiCaches_Item::kMaximumSizeFieldNumber;
const int DmiCaches_Item::kCurrentSizeFieldNumber;
const int DmiCaches_Item::kSupportedSramTypesFieldNumber;
const int DmiCaches_Item::kCurrentSramTypeFieldNumber;
const int DmiCaches_Item::kSpeedFieldNumber;
const int DmiCaches_Item::kErrorCorrectionTypeFieldNumber;
const int DmiCaches_Item::kTypeFieldNumber;
const int DmiCaches_Item::kAssociativityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiCaches_Item::DmiCaches_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiCaches.Item)
}
DmiCaches_Item::DmiCaches_Item(const DmiCaches_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&associativity_) -
    reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiCaches.Item)
}

void DmiCaches_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  _cached_size_ = 0;
}

DmiCaches_Item::~DmiCaches_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiCaches.Item)
  SharedDtor();
}

void DmiCaches_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiCaches_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiCaches_Item& DmiCaches_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiCaches_Item* DmiCaches_Item::New(::google::protobuf::Arena* arena) const {
  DmiCaches_Item* n = new DmiCaches_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiCaches_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiCaches.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  _internal_metadata_.Clear();
}

bool DmiCaches_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiCaches.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiCaches.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location(static_cast< ::aspia::system_info::DmiCaches_Item_Location >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::DmiCaches_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::aspia::system_info::DmiCaches_Item_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Level level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::aspia::system_info::DmiCaches_Item_Level >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 supported_sram_types = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supported_sram_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.SRAMType current_sram_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_sram_type(static_cast< ::aspia::system_info::DmiCaches_Item_SRAMType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.ErrorCorrectionType error_correction_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_correction_type(static_cast< ::aspia::system_info::DmiCaches_Item_ErrorCorrectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Type type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::DmiCaches_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiCaches.Item.Associativity associativity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_associativity(static_cast< ::aspia::system_info::DmiCaches_Item_Associativity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiCaches.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiCaches.Item)
  return false;
#undef DO_
}

void DmiCaches_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiCaches.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiCaches.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Location location = 2;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->location(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Mode mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Level level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->level(), output);
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maximum_size(), output);
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_size(), output);
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->supported_sram_types(), output);
  }

  // .aspia.system_info.DmiCaches.Item.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->current_sram_type(), output);
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->speed(), output);
  }

  // .aspia.system_info.DmiCaches.Item.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_correction_type(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Type type = 12;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // .aspia.system_info.DmiCaches.Item.Associativity associativity = 13;
  if (this->associativity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->associativity(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiCaches.Item)
}

size_t DmiCaches_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiCaches.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aspia.system_info.DmiCaches.Item.Location location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
  }

  // .aspia.system_info.DmiCaches.Item.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.system_info.DmiCaches.Item.Mode mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .aspia.system_info.DmiCaches.Item.Level level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_size());
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_size());
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->supported_sram_types());
  }

  // .aspia.system_info.DmiCaches.Item.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_sram_type());
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // .aspia.system_info.DmiCaches.Item.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_correction_type());
  }

  // .aspia.system_info.DmiCaches.Item.Type type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.DmiCaches.Item.Associativity associativity = 13;
  if (this->associativity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->associativity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiCaches_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiCaches_Item*>(&from));
}

void DmiCaches_Item::MergeFrom(const DmiCaches_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiCaches.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.location() != 0) {
    set_location(from.location());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.maximum_size() != 0) {
    set_maximum_size(from.maximum_size());
  }
  if (from.current_size() != 0) {
    set_current_size(from.current_size());
  }
  if (from.supported_sram_types() != 0) {
    set_supported_sram_types(from.supported_sram_types());
  }
  if (from.current_sram_type() != 0) {
    set_current_sram_type(from.current_sram_type());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.error_correction_type() != 0) {
    set_error_correction_type(from.error_correction_type());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.associativity() != 0) {
    set_associativity(from.associativity());
  }
}

void DmiCaches_Item::CopyFrom(const DmiCaches_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiCaches.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiCaches_Item::IsInitialized() const {
  return true;
}

void DmiCaches_Item::Swap(DmiCaches_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiCaches_Item::InternalSwap(DmiCaches_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(status_, other->status_);
  swap(mode_, other->mode_);
  swap(level_, other->level_);
  swap(maximum_size_, other->maximum_size_);
  swap(current_size_, other->current_size_);
  swap(supported_sram_types_, other->supported_sram_types_);
  swap(current_sram_type_, other->current_sram_type_);
  swap(speed_, other->speed_);
  swap(error_correction_type_, other->error_correction_type_);
  swap(type_, other->type_);
  swap(associativity_, other->associativity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiCaches_Item::GetTypeName() const {
  return "aspia.system_info.DmiCaches.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiCaches_Item

// string name = 1;
void DmiCaches_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiCaches_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.name)
  return name_.GetNoArena();
}
void DmiCaches_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.name)
}
#if LANG_CXX11
void DmiCaches_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiCaches.Item.name)
}
#endif
void DmiCaches_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiCaches.Item.name)
}
void DmiCaches_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiCaches.Item.name)
}
::std::string* DmiCaches_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiCaches.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiCaches_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiCaches.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiCaches_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiCaches.Item.name)
}

// .aspia.system_info.DmiCaches.Item.Location location = 2;
void DmiCaches_Item::clear_location() {
  location_ = 0;
}
::aspia::system_info::DmiCaches_Item_Location DmiCaches_Item::location() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.location)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Location >(location_);
}
void DmiCaches_Item::set_location(::aspia::system_info::DmiCaches_Item_Location value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.location)
}

// .aspia.system_info.DmiCaches.Item.Status status = 3;
void DmiCaches_Item::clear_status() {
  status_ = 0;
}
::aspia::system_info::DmiCaches_Item_Status DmiCaches_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.status)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Status >(status_);
}
void DmiCaches_Item::set_status(::aspia::system_info::DmiCaches_Item_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.status)
}

// .aspia.system_info.DmiCaches.Item.Mode mode = 4;
void DmiCaches_Item::clear_mode() {
  mode_ = 0;
}
::aspia::system_info::DmiCaches_Item_Mode DmiCaches_Item::mode() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.mode)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Mode >(mode_);
}
void DmiCaches_Item::set_mode(::aspia::system_info::DmiCaches_Item_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.mode)
}

// .aspia.system_info.DmiCaches.Item.Level level = 5;
void DmiCaches_Item::clear_level() {
  level_ = 0;
}
::aspia::system_info::DmiCaches_Item_Level DmiCaches_Item::level() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.level)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Level >(level_);
}
void DmiCaches_Item::set_level(::aspia::system_info::DmiCaches_Item_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.level)
}

// int32 maximum_size = 6;
void DmiCaches_Item::clear_maximum_size() {
  maximum_size_ = 0;
}
::google::protobuf::int32 DmiCaches_Item::maximum_size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.maximum_size)
  return maximum_size_;
}
void DmiCaches_Item::set_maximum_size(::google::protobuf::int32 value) {
  
  maximum_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.maximum_size)
}

// int32 current_size = 7;
void DmiCaches_Item::clear_current_size() {
  current_size_ = 0;
}
::google::protobuf::int32 DmiCaches_Item::current_size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.current_size)
  return current_size_;
}
void DmiCaches_Item::set_current_size(::google::protobuf::int32 value) {
  
  current_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.current_size)
}

// uint32 supported_sram_types = 8;
void DmiCaches_Item::clear_supported_sram_types() {
  supported_sram_types_ = 0u;
}
::google::protobuf::uint32 DmiCaches_Item::supported_sram_types() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.supported_sram_types)
  return supported_sram_types_;
}
void DmiCaches_Item::set_supported_sram_types(::google::protobuf::uint32 value) {
  
  supported_sram_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.supported_sram_types)
}

// .aspia.system_info.DmiCaches.Item.SRAMType current_sram_type = 9;
void DmiCaches_Item::clear_current_sram_type() {
  current_sram_type_ = 0;
}
::aspia::system_info::DmiCaches_Item_SRAMType DmiCaches_Item::current_sram_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.current_sram_type)
  return static_cast< ::aspia::system_info::DmiCaches_Item_SRAMType >(current_sram_type_);
}
void DmiCaches_Item::set_current_sram_type(::aspia::system_info::DmiCaches_Item_SRAMType value) {
  
  current_sram_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.current_sram_type)
}

// int32 speed = 10;
void DmiCaches_Item::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 DmiCaches_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.speed)
  return speed_;
}
void DmiCaches_Item::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.speed)
}

// .aspia.system_info.DmiCaches.Item.ErrorCorrectionType error_correction_type = 11;
void DmiCaches_Item::clear_error_correction_type() {
  error_correction_type_ = 0;
}
::aspia::system_info::DmiCaches_Item_ErrorCorrectionType DmiCaches_Item::error_correction_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.error_correction_type)
  return static_cast< ::aspia::system_info::DmiCaches_Item_ErrorCorrectionType >(error_correction_type_);
}
void DmiCaches_Item::set_error_correction_type(::aspia::system_info::DmiCaches_Item_ErrorCorrectionType value) {
  
  error_correction_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.error_correction_type)
}

// .aspia.system_info.DmiCaches.Item.Type type = 12;
void DmiCaches_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::DmiCaches_Item_Type DmiCaches_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.type)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Type >(type_);
}
void DmiCaches_Item::set_type(::aspia::system_info::DmiCaches_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.type)
}

// .aspia.system_info.DmiCaches.Item.Associativity associativity = 13;
void DmiCaches_Item::clear_associativity() {
  associativity_ = 0;
}
::aspia::system_info::DmiCaches_Item_Associativity DmiCaches_Item::associativity() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.Item.associativity)
  return static_cast< ::aspia::system_info::DmiCaches_Item_Associativity >(associativity_);
}
void DmiCaches_Item::set_associativity(::aspia::system_info::DmiCaches_Item_Associativity value) {
  
  associativity_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiCaches.Item.associativity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiCaches::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiCaches::DmiCaches()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiCaches)
}
DmiCaches::DmiCaches(const DmiCaches& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiCaches)
}

void DmiCaches::SharedCtor() {
  _cached_size_ = 0;
}

DmiCaches::~DmiCaches() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiCaches)
  SharedDtor();
}

void DmiCaches::SharedDtor() {
}

void DmiCaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiCaches& DmiCaches::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiCaches* DmiCaches::New(::google::protobuf::Arena* arena) const {
  DmiCaches* n = new DmiCaches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiCaches::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiCaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiCaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiCaches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiCaches.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiCaches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiCaches)
  return false;
#undef DO_
}

void DmiCaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiCaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiCaches.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiCaches)
}

size_t DmiCaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiCaches)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiCaches.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiCaches::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiCaches*>(&from));
}

void DmiCaches::MergeFrom(const DmiCaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiCaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiCaches::CopyFrom(const DmiCaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiCaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiCaches::IsInitialized() const {
  return true;
}

void DmiCaches::Swap(DmiCaches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiCaches::InternalSwap(DmiCaches* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiCaches::GetTypeName() const {
  return "aspia.system_info.DmiCaches";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiCaches

// repeated .aspia.system_info.DmiCaches.Item item = 1;
int DmiCaches::item_size() const {
  return item_.size();
}
void DmiCaches::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiCaches_Item& DmiCaches::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiCaches.item)
  return item_.Get(index);
}
::aspia::system_info::DmiCaches_Item* DmiCaches::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiCaches.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiCaches_Item* DmiCaches::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiCaches.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiCaches_Item >*
DmiCaches::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiCaches.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiCaches_Item >&
DmiCaches::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiCaches.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessors_Item::kManufacturerFieldNumber;
const int DmiProcessors_Item::kVersionFieldNumber;
const int DmiProcessors_Item::kFamilyFieldNumber;
const int DmiProcessors_Item::kTypeFieldNumber;
const int DmiProcessors_Item::kStatusFieldNumber;
const int DmiProcessors_Item::kSocketFieldNumber;
const int DmiProcessors_Item::kUpgradeFieldNumber;
const int DmiProcessors_Item::kExternalClockFieldNumber;
const int DmiProcessors_Item::kCurrentSpeedFieldNumber;
const int DmiProcessors_Item::kMaximumSpeedFieldNumber;
const int DmiProcessors_Item::kVoltageFieldNumber;
const int DmiProcessors_Item::kSerialNumberFieldNumber;
const int DmiProcessors_Item::kAssetTagFieldNumber;
const int DmiProcessors_Item::kPartNumberFieldNumber;
const int DmiProcessors_Item::kCoreCountFieldNumber;
const int DmiProcessors_Item::kCoreEnabledFieldNumber;
const int DmiProcessors_Item::kThreadCountFieldNumber;
const int DmiProcessors_Item::kCharacteristicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessors_Item::DmiProcessors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiProcessors.Item)
}
DmiProcessors_Item::DmiProcessors_Item(const DmiProcessors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.family().size() > 0) {
    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket().size() > 0) {
    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  upgrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upgrade().size() > 0) {
    upgrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&characteristics_) -
    reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiProcessors.Item)
}

void DmiProcessors_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
  _cached_size_ = 0;
}

DmiProcessors_Item::~DmiProcessors_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiProcessors.Item)
  SharedDtor();
}

void DmiProcessors_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiProcessors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessors_Item& DmiProcessors_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiProcessors_Item* DmiProcessors_Item::New(::google::protobuf::Arena* arena) const {
  DmiProcessors_Item* n = new DmiProcessors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiProcessors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
  _internal_metadata_.Clear();
}

bool DmiProcessors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiProcessors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family().data(), static_cast<int>(this->family().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.family"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiProcessors.Item.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::DmiProcessors_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiProcessors.Item.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::DmiProcessors_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string socket = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket().data(), static_cast<int>(this->socket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.socket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upgrade = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgrade()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upgrade().data(), static_cast<int>(this->upgrade().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.upgrade"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 external_clock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiProcessors.Item.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thread_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 characteristics = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characteristics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiProcessors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiProcessors.Item)
  return false;
#undef DO_
}

void DmiProcessors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiProcessors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string family = 3;
  if (this->family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family().data(), static_cast<int>(this->family().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->family(), output);
  }

  // .aspia.system_info.DmiProcessors.Item.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .aspia.system_info.DmiProcessors.Item.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket().data(), static_cast<int>(this->socket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.socket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket(), output);
  }

  // string upgrade = 7;
  if (this->upgrade().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upgrade().data(), static_cast<int>(this->upgrade().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.upgrade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->upgrade(), output);
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->external_clock(), output);
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->current_speed(), output);
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maximum_speed(), output);
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voltage(), output);
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->serial_number(), output);
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->asset_tag(), output);
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiProcessors.Item.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->part_number(), output);
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->core_count(), output);
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->core_enabled(), output);
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->thread_count(), output);
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->characteristics(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiProcessors.Item)
}

size_t DmiProcessors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiProcessors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string family = 3;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family());
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket());
  }

  // string upgrade = 7;
  if (this->upgrade().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upgrade());
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // .aspia.system_info.DmiProcessors.Item.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.DmiProcessors.Item.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->external_clock());
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_speed());
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    total_size += 1 + 8;
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_speed());
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_count());
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_enabled());
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_count());
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->characteristics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessors_Item*>(&from));
}

void DmiProcessors_Item::MergeFrom(const DmiProcessors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiProcessors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.socket().size() > 0) {

    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  if (from.upgrade().size() > 0) {

    upgrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.external_clock() != 0) {
    set_external_clock(from.external_clock());
  }
  if (from.current_speed() != 0) {
    set_current_speed(from.current_speed());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.maximum_speed() != 0) {
    set_maximum_speed(from.maximum_speed());
  }
  if (from.core_count() != 0) {
    set_core_count(from.core_count());
  }
  if (from.core_enabled() != 0) {
    set_core_enabled(from.core_enabled());
  }
  if (from.thread_count() != 0) {
    set_thread_count(from.thread_count());
  }
  if (from.characteristics() != 0) {
    set_characteristics(from.characteristics());
  }
}

void DmiProcessors_Item::CopyFrom(const DmiProcessors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiProcessors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessors_Item::IsInitialized() const {
  return true;
}

void DmiProcessors_Item::Swap(DmiProcessors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessors_Item::InternalSwap(DmiProcessors_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  family_.Swap(&other->family_);
  socket_.Swap(&other->socket_);
  upgrade_.Swap(&other->upgrade_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  part_number_.Swap(&other->part_number_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(external_clock_, other->external_clock_);
  swap(current_speed_, other->current_speed_);
  swap(voltage_, other->voltage_);
  swap(maximum_speed_, other->maximum_speed_);
  swap(core_count_, other->core_count_);
  swap(core_enabled_, other->core_enabled_);
  swap(thread_count_, other->thread_count_);
  swap(characteristics_, other->characteristics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessors_Item::GetTypeName() const {
  return "aspia.system_info.DmiProcessors.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiProcessors_Item

// string manufacturer = 1;
void DmiProcessors_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiProcessors_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.manufacturer)
}
#if LANG_CXX11
void DmiProcessors_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.manufacturer)
}
#endif
void DmiProcessors_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.manufacturer)
}
void DmiProcessors_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.manufacturer)
}
::std::string* DmiProcessors_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.manufacturer)
}

// string version = 2;
void DmiProcessors_Item::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.version)
  return version_.GetNoArena();
}
void DmiProcessors_Item::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.version)
}
#if LANG_CXX11
void DmiProcessors_Item::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.version)
}
#endif
void DmiProcessors_Item::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.version)
}
void DmiProcessors_Item::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.version)
}
::std::string* DmiProcessors_Item::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_version() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.version)
}

// string family = 3;
void DmiProcessors_Item::clear_family() {
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::family() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.family)
  return family_.GetNoArena();
}
void DmiProcessors_Item::set_family(const ::std::string& value) {
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.family)
}
#if LANG_CXX11
void DmiProcessors_Item::set_family(::std::string&& value) {
  
  family_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.family)
}
#endif
void DmiProcessors_Item::set_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.family)
}
void DmiProcessors_Item::set_family(const char* value, size_t size) {
  
  family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.family)
}
::std::string* DmiProcessors_Item::mutable_family() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.family)
  return family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_family() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.family)
  
  return family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_family(::std::string* family) {
  if (family != NULL) {
    
  } else {
    
  }
  family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.family)
}

// .aspia.system_info.DmiProcessors.Item.Type type = 4;
void DmiProcessors_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::DmiProcessors_Item_Type DmiProcessors_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.type)
  return static_cast< ::aspia::system_info::DmiProcessors_Item_Type >(type_);
}
void DmiProcessors_Item::set_type(::aspia::system_info::DmiProcessors_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.type)
}

// .aspia.system_info.DmiProcessors.Item.Status status = 5;
void DmiProcessors_Item::clear_status() {
  status_ = 0;
}
::aspia::system_info::DmiProcessors_Item_Status DmiProcessors_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.status)
  return static_cast< ::aspia::system_info::DmiProcessors_Item_Status >(status_);
}
void DmiProcessors_Item::set_status(::aspia::system_info::DmiProcessors_Item_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.status)
}

// string socket = 6;
void DmiProcessors_Item::clear_socket() {
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::socket() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.socket)
  return socket_.GetNoArena();
}
void DmiProcessors_Item::set_socket(const ::std::string& value) {
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.socket)
}
#if LANG_CXX11
void DmiProcessors_Item::set_socket(::std::string&& value) {
  
  socket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.socket)
}
#endif
void DmiProcessors_Item::set_socket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.socket)
}
void DmiProcessors_Item::set_socket(const char* value, size_t size) {
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.socket)
}
::std::string* DmiProcessors_Item::mutable_socket() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.socket)
  return socket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_socket() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.socket)
  
  return socket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_socket(::std::string* socket) {
  if (socket != NULL) {
    
  } else {
    
  }
  socket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.socket)
}

// string upgrade = 7;
void DmiProcessors_Item::clear_upgrade() {
  upgrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::upgrade() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.upgrade)
  return upgrade_.GetNoArena();
}
void DmiProcessors_Item::set_upgrade(const ::std::string& value) {
  
  upgrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.upgrade)
}
#if LANG_CXX11
void DmiProcessors_Item::set_upgrade(::std::string&& value) {
  
  upgrade_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.upgrade)
}
#endif
void DmiProcessors_Item::set_upgrade(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upgrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.upgrade)
}
void DmiProcessors_Item::set_upgrade(const char* value, size_t size) {
  
  upgrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.upgrade)
}
::std::string* DmiProcessors_Item::mutable_upgrade() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.upgrade)
  return upgrade_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_upgrade() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.upgrade)
  
  return upgrade_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_upgrade(::std::string* upgrade) {
  if (upgrade != NULL) {
    
  } else {
    
  }
  upgrade_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upgrade);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.upgrade)
}

// int32 external_clock = 8;
void DmiProcessors_Item::clear_external_clock() {
  external_clock_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::external_clock() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.external_clock)
  return external_clock_;
}
void DmiProcessors_Item::set_external_clock(::google::protobuf::int32 value) {
  
  external_clock_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.external_clock)
}

// int32 current_speed = 9;
void DmiProcessors_Item::clear_current_speed() {
  current_speed_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::current_speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.current_speed)
  return current_speed_;
}
void DmiProcessors_Item::set_current_speed(::google::protobuf::int32 value) {
  
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.current_speed)
}

// int32 maximum_speed = 10;
void DmiProcessors_Item::clear_maximum_speed() {
  maximum_speed_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::maximum_speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.maximum_speed)
  return maximum_speed_;
}
void DmiProcessors_Item::set_maximum_speed(::google::protobuf::int32 value) {
  
  maximum_speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.maximum_speed)
}

// double voltage = 11;
void DmiProcessors_Item::clear_voltage() {
  voltage_ = 0;
}
double DmiProcessors_Item::voltage() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.voltage)
  return voltage_;
}
void DmiProcessors_Item::set_voltage(double value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.voltage)
}

// string serial_number = 12;
void DmiProcessors_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.serial_number)
  return serial_number_.GetNoArena();
}
void DmiProcessors_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.serial_number)
}
#if LANG_CXX11
void DmiProcessors_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.serial_number)
}
#endif
void DmiProcessors_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.serial_number)
}
void DmiProcessors_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.serial_number)
}
::std::string* DmiProcessors_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.serial_number)
}

// string asset_tag = 13;
void DmiProcessors_Item::clear_asset_tag() {
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::asset_tag() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.asset_tag)
  return asset_tag_.GetNoArena();
}
void DmiProcessors_Item::set_asset_tag(const ::std::string& value) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.asset_tag)
}
#if LANG_CXX11
void DmiProcessors_Item::set_asset_tag(::std::string&& value) {
  
  asset_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.asset_tag)
}
#endif
void DmiProcessors_Item::set_asset_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.asset_tag)
}
void DmiProcessors_Item::set_asset_tag(const char* value, size_t size) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.asset_tag)
}
::std::string* DmiProcessors_Item::mutable_asset_tag() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.asset_tag)
  return asset_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_asset_tag() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.asset_tag)
  
  return asset_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_asset_tag(::std::string* asset_tag) {
  if (asset_tag != NULL) {
    
  } else {
    
  }
  asset_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_tag);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.asset_tag)
}

// string part_number = 14;
void DmiProcessors_Item::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiProcessors_Item::part_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.part_number)
  return part_number_.GetNoArena();
}
void DmiProcessors_Item::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.part_number)
}
#if LANG_CXX11
void DmiProcessors_Item::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiProcessors.Item.part_number)
}
#endif
void DmiProcessors_Item::set_part_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiProcessors.Item.part_number)
}
void DmiProcessors_Item::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiProcessors.Item.part_number)
}
::std::string* DmiProcessors_Item::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.Item.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiProcessors_Item::release_part_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiProcessors.Item.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiProcessors_Item::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiProcessors.Item.part_number)
}

// int32 core_count = 15;
void DmiProcessors_Item::clear_core_count() {
  core_count_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::core_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.core_count)
  return core_count_;
}
void DmiProcessors_Item::set_core_count(::google::protobuf::int32 value) {
  
  core_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.core_count)
}

// int32 core_enabled = 16;
void DmiProcessors_Item::clear_core_enabled() {
  core_enabled_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::core_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.core_enabled)
  return core_enabled_;
}
void DmiProcessors_Item::set_core_enabled(::google::protobuf::int32 value) {
  
  core_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.core_enabled)
}

// int32 thread_count = 17;
void DmiProcessors_Item::clear_thread_count() {
  thread_count_ = 0;
}
::google::protobuf::int32 DmiProcessors_Item::thread_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.thread_count)
  return thread_count_;
}
void DmiProcessors_Item::set_thread_count(::google::protobuf::int32 value) {
  
  thread_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.thread_count)
}

// uint32 characteristics = 18;
void DmiProcessors_Item::clear_characteristics() {
  characteristics_ = 0u;
}
::google::protobuf::uint32 DmiProcessors_Item::characteristics() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.Item.characteristics)
  return characteristics_;
}
void DmiProcessors_Item::set_characteristics(::google::protobuf::uint32 value) {
  
  characteristics_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiProcessors.Item.characteristics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessors::DmiProcessors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiProcessors)
}
DmiProcessors::DmiProcessors(const DmiProcessors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiProcessors)
}

void DmiProcessors::SharedCtor() {
  _cached_size_ = 0;
}

DmiProcessors::~DmiProcessors() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiProcessors)
  SharedDtor();
}

void DmiProcessors::SharedDtor() {
}

void DmiProcessors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessors& DmiProcessors::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiProcessors* DmiProcessors::New(::google::protobuf::Arena* arena) const {
  DmiProcessors* n = new DmiProcessors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiProcessors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiProcessors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiProcessors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiProcessors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiProcessors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiProcessors)
  return false;
#undef DO_
}

void DmiProcessors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiProcessors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiProcessors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiProcessors)
}

size_t DmiProcessors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiProcessors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiProcessors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessors*>(&from));
}

void DmiProcessors::MergeFrom(const DmiProcessors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiProcessors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiProcessors::CopyFrom(const DmiProcessors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiProcessors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessors::IsInitialized() const {
  return true;
}

void DmiProcessors::Swap(DmiProcessors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessors::InternalSwap(DmiProcessors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessors::GetTypeName() const {
  return "aspia.system_info.DmiProcessors";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiProcessors

// repeated .aspia.system_info.DmiProcessors.Item item = 1;
int DmiProcessors::item_size() const {
  return item_.size();
}
void DmiProcessors::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiProcessors_Item& DmiProcessors::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiProcessors.item)
  return item_.Get(index);
}
::aspia::system_info::DmiProcessors_Item* DmiProcessors::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiProcessors.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiProcessors_Item* DmiProcessors::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiProcessors.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiProcessors_Item >*
DmiProcessors::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiProcessors.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiProcessors_Item >&
DmiProcessors::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiProcessors.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiMemoryDevices_Item::kDeviceLocatorFieldNumber;
const int DmiMemoryDevices_Item::kSizeFieldNumber;
const int DmiMemoryDevices_Item::kTypeFieldNumber;
const int DmiMemoryDevices_Item::kSpeedFieldNumber;
const int DmiMemoryDevices_Item::kFormFactorFieldNumber;
const int DmiMemoryDevices_Item::kSerialNumberFieldNumber;
const int DmiMemoryDevices_Item::kPartNumberFieldNumber;
const int DmiMemoryDevices_Item::kManufactorerFieldNumber;
const int DmiMemoryDevices_Item::kBankFieldNumber;
const int DmiMemoryDevices_Item::kTotalWidthFieldNumber;
const int DmiMemoryDevices_Item::kDataWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiMemoryDevices_Item::DmiMemoryDevices_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiMemoryDevices.Item)
}
DmiMemoryDevices_Item::DmiMemoryDevices_Item(const DmiMemoryDevices_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_locator().size() > 0) {
    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.form_factor().size() > 0) {
    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufactorer().size() > 0) {
    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank().size() > 0) {
    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_width_) -
    reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiMemoryDevices.Item)
}

void DmiMemoryDevices_Item::SharedCtor() {
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  _cached_size_ = 0;
}

DmiMemoryDevices_Item::~DmiMemoryDevices_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiMemoryDevices.Item)
  SharedDtor();
}

void DmiMemoryDevices_Item::SharedDtor() {
  device_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiMemoryDevices_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiMemoryDevices_Item& DmiMemoryDevices_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiMemoryDevices_Item* DmiMemoryDevices_Item::New(::google::protobuf::Arena* arena) const {
  DmiMemoryDevices_Item* n = new DmiMemoryDevices_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiMemoryDevices_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiMemoryDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  _internal_metadata_.Clear();
}

bool DmiMemoryDevices_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiMemoryDevices.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_locator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_locator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_locator().data(), static_cast<int>(this->device_locator().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.device_locator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string form_factor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_form_factor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->form_factor().data(), static_cast<int>(this->form_factor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.form_factor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufactorer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactorer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.manufactorer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank().data(), static_cast<int>(this->bank().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiMemoryDevices.Item.bank"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 data_width = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiMemoryDevices.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiMemoryDevices.Item)
  return false;
#undef DO_
}

void DmiMemoryDevices_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiMemoryDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_locator().data(), static_cast<int>(this->device_locator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.device_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_locator(), output);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // string form_factor = 5;
  if (this->form_factor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->form_factor().data(), static_cast<int>(this->form_factor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.form_factor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->form_factor(), output);
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serial_number(), output);
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->part_number(), output);
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.manufactorer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manufactorer(), output);
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank().data(), static_cast<int>(this->bank().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiMemoryDevices.Item.bank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bank(), output);
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_width(), output);
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->data_width(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiMemoryDevices.Item)
}

size_t DmiMemoryDevices_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiMemoryDevices.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_locator());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string form_factor = 5;
  if (this->form_factor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->form_factor());
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufactorer());
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_width());
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiMemoryDevices_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiMemoryDevices_Item*>(&from));
}

void DmiMemoryDevices_Item::MergeFrom(const DmiMemoryDevices_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiMemoryDevices.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_locator().size() > 0) {

    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.form_factor().size() > 0) {

    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.manufactorer().size() > 0) {

    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  if (from.bank().size() > 0) {

    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.total_width() != 0) {
    set_total_width(from.total_width());
  }
  if (from.data_width() != 0) {
    set_data_width(from.data_width());
  }
}

void DmiMemoryDevices_Item::CopyFrom(const DmiMemoryDevices_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiMemoryDevices.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiMemoryDevices_Item::IsInitialized() const {
  return true;
}

void DmiMemoryDevices_Item::Swap(DmiMemoryDevices_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiMemoryDevices_Item::InternalSwap(DmiMemoryDevices_Item* other) {
  using std::swap;
  device_locator_.Swap(&other->device_locator_);
  type_.Swap(&other->type_);
  form_factor_.Swap(&other->form_factor_);
  serial_number_.Swap(&other->serial_number_);
  part_number_.Swap(&other->part_number_);
  manufactorer_.Swap(&other->manufactorer_);
  bank_.Swap(&other->bank_);
  swap(size_, other->size_);
  swap(speed_, other->speed_);
  swap(total_width_, other->total_width_);
  swap(data_width_, other->data_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiMemoryDevices_Item::GetTypeName() const {
  return "aspia.system_info.DmiMemoryDevices.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiMemoryDevices_Item

// string device_locator = 1;
void DmiMemoryDevices_Item::clear_device_locator() {
  device_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::device_locator() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.device_locator)
  return device_locator_.GetNoArena();
}
void DmiMemoryDevices_Item::set_device_locator(const ::std::string& value) {
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.device_locator)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_device_locator(::std::string&& value) {
  
  device_locator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.device_locator)
}
#endif
void DmiMemoryDevices_Item::set_device_locator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.device_locator)
}
void DmiMemoryDevices_Item::set_device_locator(const char* value, size_t size) {
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.device_locator)
}
::std::string* DmiMemoryDevices_Item::mutable_device_locator() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.device_locator)
  return device_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_device_locator() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.device_locator)
  
  return device_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_device_locator(::std::string* device_locator) {
  if (device_locator != NULL) {
    
  } else {
    
  }
  device_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_locator);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.device_locator)
}

// int32 size = 2;
void DmiMemoryDevices_Item::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 DmiMemoryDevices_Item::size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.size)
  return size_;
}
void DmiMemoryDevices_Item::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.size)
}

// string type = 3;
void DmiMemoryDevices_Item::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.type)
  return type_.GetNoArena();
}
void DmiMemoryDevices_Item::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.type)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.type)
}
#endif
void DmiMemoryDevices_Item::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.type)
}
void DmiMemoryDevices_Item::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.type)
}
::std::string* DmiMemoryDevices_Item::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.type)
}

// int32 speed = 4;
void DmiMemoryDevices_Item::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 DmiMemoryDevices_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.speed)
  return speed_;
}
void DmiMemoryDevices_Item::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.speed)
}

// string form_factor = 5;
void DmiMemoryDevices_Item::clear_form_factor() {
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::form_factor() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.form_factor)
  return form_factor_.GetNoArena();
}
void DmiMemoryDevices_Item::set_form_factor(const ::std::string& value) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.form_factor)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_form_factor(::std::string&& value) {
  
  form_factor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.form_factor)
}
#endif
void DmiMemoryDevices_Item::set_form_factor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.form_factor)
}
void DmiMemoryDevices_Item::set_form_factor(const char* value, size_t size) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.form_factor)
}
::std::string* DmiMemoryDevices_Item::mutable_form_factor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.form_factor)
  return form_factor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_form_factor() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.form_factor)
  
  return form_factor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_form_factor(::std::string* form_factor) {
  if (form_factor != NULL) {
    
  } else {
    
  }
  form_factor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_factor);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.form_factor)
}

// string serial_number = 6;
void DmiMemoryDevices_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.serial_number)
  return serial_number_.GetNoArena();
}
void DmiMemoryDevices_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.serial_number)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.serial_number)
}
#endif
void DmiMemoryDevices_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.serial_number)
}
void DmiMemoryDevices_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.serial_number)
}
::std::string* DmiMemoryDevices_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.serial_number)
}

// string part_number = 7;
void DmiMemoryDevices_Item::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::part_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.part_number)
  return part_number_.GetNoArena();
}
void DmiMemoryDevices_Item::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.part_number)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.part_number)
}
#endif
void DmiMemoryDevices_Item::set_part_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.part_number)
}
void DmiMemoryDevices_Item::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.part_number)
}
::std::string* DmiMemoryDevices_Item::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_part_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.part_number)
}

// string manufactorer = 8;
void DmiMemoryDevices_Item::clear_manufactorer() {
  manufactorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::manufactorer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
  return manufactorer_.GetNoArena();
}
void DmiMemoryDevices_Item::set_manufactorer(const ::std::string& value) {
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_manufactorer(::std::string&& value) {
  
  manufactorer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
}
#endif
void DmiMemoryDevices_Item::set_manufactorer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
}
void DmiMemoryDevices_Item::set_manufactorer(const char* value, size_t size) {
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
}
::std::string* DmiMemoryDevices_Item::mutable_manufactorer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
  return manufactorer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_manufactorer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
  
  return manufactorer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_manufactorer(::std::string* manufactorer) {
  if (manufactorer != NULL) {
    
  } else {
    
  }
  manufactorer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufactorer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.manufactorer)
}

// string bank = 9;
void DmiMemoryDevices_Item::clear_bank() {
  bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiMemoryDevices_Item::bank() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.bank)
  return bank_.GetNoArena();
}
void DmiMemoryDevices_Item::set_bank(const ::std::string& value) {
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.bank)
}
#if LANG_CXX11
void DmiMemoryDevices_Item::set_bank(::std::string&& value) {
  
  bank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiMemoryDevices.Item.bank)
}
#endif
void DmiMemoryDevices_Item::set_bank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiMemoryDevices.Item.bank)
}
void DmiMemoryDevices_Item::set_bank(const char* value, size_t size) {
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiMemoryDevices.Item.bank)
}
::std::string* DmiMemoryDevices_Item::mutable_bank() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.Item.bank)
  return bank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiMemoryDevices_Item::release_bank() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiMemoryDevices.Item.bank)
  
  return bank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiMemoryDevices_Item::set_allocated_bank(::std::string* bank) {
  if (bank != NULL) {
    
  } else {
    
  }
  bank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiMemoryDevices.Item.bank)
}

// int32 total_width = 10;
void DmiMemoryDevices_Item::clear_total_width() {
  total_width_ = 0;
}
::google::protobuf::int32 DmiMemoryDevices_Item::total_width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.total_width)
  return total_width_;
}
void DmiMemoryDevices_Item::set_total_width(::google::protobuf::int32 value) {
  
  total_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.total_width)
}

// int32 data_width = 11;
void DmiMemoryDevices_Item::clear_data_width() {
  data_width_ = 0;
}
::google::protobuf::int32 DmiMemoryDevices_Item::data_width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.Item.data_width)
  return data_width_;
}
void DmiMemoryDevices_Item::set_data_width(::google::protobuf::int32 value) {
  
  data_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiMemoryDevices.Item.data_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiMemoryDevices::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiMemoryDevices::DmiMemoryDevices()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiMemoryDevices)
}
DmiMemoryDevices::DmiMemoryDevices(const DmiMemoryDevices& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiMemoryDevices)
}

void DmiMemoryDevices::SharedCtor() {
  _cached_size_ = 0;
}

DmiMemoryDevices::~DmiMemoryDevices() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiMemoryDevices)
  SharedDtor();
}

void DmiMemoryDevices::SharedDtor() {
}

void DmiMemoryDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiMemoryDevices& DmiMemoryDevices::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiMemoryDevices* DmiMemoryDevices::New(::google::protobuf::Arena* arena) const {
  DmiMemoryDevices* n = new DmiMemoryDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiMemoryDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiMemoryDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiMemoryDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiMemoryDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiMemoryDevices.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiMemoryDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiMemoryDevices)
  return false;
#undef DO_
}

void DmiMemoryDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiMemoryDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiMemoryDevices.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiMemoryDevices)
}

size_t DmiMemoryDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiMemoryDevices)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiMemoryDevices.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiMemoryDevices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiMemoryDevices*>(&from));
}

void DmiMemoryDevices::MergeFrom(const DmiMemoryDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiMemoryDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiMemoryDevices::CopyFrom(const DmiMemoryDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiMemoryDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiMemoryDevices::IsInitialized() const {
  return true;
}

void DmiMemoryDevices::Swap(DmiMemoryDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiMemoryDevices::InternalSwap(DmiMemoryDevices* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiMemoryDevices::GetTypeName() const {
  return "aspia.system_info.DmiMemoryDevices";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiMemoryDevices

// repeated .aspia.system_info.DmiMemoryDevices.Item item = 1;
int DmiMemoryDevices::item_size() const {
  return item_.size();
}
void DmiMemoryDevices::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiMemoryDevices_Item& DmiMemoryDevices::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiMemoryDevices.item)
  return item_.Get(index);
}
::aspia::system_info::DmiMemoryDevices_Item* DmiMemoryDevices::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiMemoryDevices.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiMemoryDevices_Item* DmiMemoryDevices::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiMemoryDevices.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiMemoryDevices_Item >*
DmiMemoryDevices::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiMemoryDevices.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiMemoryDevices_Item >&
DmiMemoryDevices::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiMemoryDevices.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiSystemSlots_Item::kSlotDesignationFieldNumber;
const int DmiSystemSlots_Item::kTypeFieldNumber;
const int DmiSystemSlots_Item::kUsageFieldNumber;
const int DmiSystemSlots_Item::kBusWidthFieldNumber;
const int DmiSystemSlots_Item::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiSystemSlots_Item::DmiSystemSlots_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiSystemSlots.Item)
}
DmiSystemSlots_Item::DmiSystemSlots_Item(const DmiSystemSlots_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slot_designation().size() > 0) {
    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  bus_width_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bus_width().size() > 0) {
    bus_width_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bus_width_);
  }
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiSystemSlots.Item)
}

void DmiSystemSlots_Item::SharedCtor() {
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_width_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(length_));
  _cached_size_ = 0;
}

DmiSystemSlots_Item::~DmiSystemSlots_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiSystemSlots.Item)
  SharedDtor();
}

void DmiSystemSlots_Item::SharedDtor() {
  slot_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_width_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiSystemSlots_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiSystemSlots_Item& DmiSystemSlots_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiSystemSlots_Item* DmiSystemSlots_Item::New(::google::protobuf::Arena* arena) const {
  DmiSystemSlots_Item* n = new DmiSystemSlots_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiSystemSlots_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiSystemSlots.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_width_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool DmiSystemSlots_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiSystemSlots.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string slot_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystemSlots.Item.slot_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystemSlots.Item.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiSystemSlots.Item.Usage usage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_usage(static_cast< ::aspia::system_info::DmiSystemSlots_Item_Usage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bus_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_width()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bus_width().data(), static_cast<int>(this->bus_width().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiSystemSlots.Item.bus_width"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.DmiSystemSlots.Item.Length length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_length(static_cast< ::aspia::system_info::DmiSystemSlots_Item_Length >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiSystemSlots.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiSystemSlots.Item)
  return false;
#undef DO_
}

void DmiSystemSlots_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiSystemSlots.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystemSlots.Item.slot_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slot_designation(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystemSlots.Item.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // .aspia.system_info.DmiSystemSlots.Item.Usage usage = 3;
  if (this->usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usage(), output);
  }

  // string bus_width = 4;
  if (this->bus_width().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bus_width().data(), static_cast<int>(this->bus_width().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiSystemSlots.Item.bus_width");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bus_width(), output);
  }

  // .aspia.system_info.DmiSystemSlots.Item.Length length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->length(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiSystemSlots.Item)
}

size_t DmiSystemSlots_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiSystemSlots.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slot_designation());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string bus_width = 4;
  if (this->bus_width().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bus_width());
  }

  // .aspia.system_info.DmiSystemSlots.Item.Usage usage = 3;
  if (this->usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
  }

  // .aspia.system_info.DmiSystemSlots.Item.Length length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiSystemSlots_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiSystemSlots_Item*>(&from));
}

void DmiSystemSlots_Item::MergeFrom(const DmiSystemSlots_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiSystemSlots.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_designation().size() > 0) {

    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.bus_width().size() > 0) {

    bus_width_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bus_width_);
  }
  if (from.usage() != 0) {
    set_usage(from.usage());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void DmiSystemSlots_Item::CopyFrom(const DmiSystemSlots_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiSystemSlots.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiSystemSlots_Item::IsInitialized() const {
  return true;
}

void DmiSystemSlots_Item::Swap(DmiSystemSlots_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiSystemSlots_Item::InternalSwap(DmiSystemSlots_Item* other) {
  using std::swap;
  slot_designation_.Swap(&other->slot_designation_);
  type_.Swap(&other->type_);
  bus_width_.Swap(&other->bus_width_);
  swap(usage_, other->usage_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiSystemSlots_Item::GetTypeName() const {
  return "aspia.system_info.DmiSystemSlots.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiSystemSlots_Item

// string slot_designation = 1;
void DmiSystemSlots_Item::clear_slot_designation() {
  slot_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystemSlots_Item::slot_designation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.Item.slot_designation)
  return slot_designation_.GetNoArena();
}
void DmiSystemSlots_Item::set_slot_designation(const ::std::string& value) {
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystemSlots.Item.slot_designation)
}
#if LANG_CXX11
void DmiSystemSlots_Item::set_slot_designation(::std::string&& value) {
  
  slot_designation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystemSlots.Item.slot_designation)
}
#endif
void DmiSystemSlots_Item::set_slot_designation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystemSlots.Item.slot_designation)
}
void DmiSystemSlots_Item::set_slot_designation(const char* value, size_t size) {
  
  slot_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystemSlots.Item.slot_designation)
}
::std::string* DmiSystemSlots_Item::mutable_slot_designation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystemSlots.Item.slot_designation)
  return slot_designation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystemSlots_Item::release_slot_designation() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystemSlots.Item.slot_designation)
  
  return slot_designation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystemSlots_Item::set_allocated_slot_designation(::std::string* slot_designation) {
  if (slot_designation != NULL) {
    
  } else {
    
  }
  slot_designation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_designation);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystemSlots.Item.slot_designation)
}

// string type = 2;
void DmiSystemSlots_Item::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystemSlots_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.Item.type)
  return type_.GetNoArena();
}
void DmiSystemSlots_Item::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystemSlots.Item.type)
}
#if LANG_CXX11
void DmiSystemSlots_Item::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystemSlots.Item.type)
}
#endif
void DmiSystemSlots_Item::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystemSlots.Item.type)
}
void DmiSystemSlots_Item::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystemSlots.Item.type)
}
::std::string* DmiSystemSlots_Item::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystemSlots.Item.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystemSlots_Item::release_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystemSlots.Item.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystemSlots_Item::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystemSlots.Item.type)
}

// .aspia.system_info.DmiSystemSlots.Item.Usage usage = 3;
void DmiSystemSlots_Item::clear_usage() {
  usage_ = 0;
}
::aspia::system_info::DmiSystemSlots_Item_Usage DmiSystemSlots_Item::usage() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.Item.usage)
  return static_cast< ::aspia::system_info::DmiSystemSlots_Item_Usage >(usage_);
}
void DmiSystemSlots_Item::set_usage(::aspia::system_info::DmiSystemSlots_Item_Usage value) {
  
  usage_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystemSlots.Item.usage)
}

// string bus_width = 4;
void DmiSystemSlots_Item::clear_bus_width() {
  bus_width_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiSystemSlots_Item::bus_width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.Item.bus_width)
  return bus_width_.GetNoArena();
}
void DmiSystemSlots_Item::set_bus_width(const ::std::string& value) {
  
  bus_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystemSlots.Item.bus_width)
}
#if LANG_CXX11
void DmiSystemSlots_Item::set_bus_width(::std::string&& value) {
  
  bus_width_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiSystemSlots.Item.bus_width)
}
#endif
void DmiSystemSlots_Item::set_bus_width(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bus_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiSystemSlots.Item.bus_width)
}
void DmiSystemSlots_Item::set_bus_width(const char* value, size_t size) {
  
  bus_width_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiSystemSlots.Item.bus_width)
}
::std::string* DmiSystemSlots_Item::mutable_bus_width() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystemSlots.Item.bus_width)
  return bus_width_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiSystemSlots_Item::release_bus_width() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiSystemSlots.Item.bus_width)
  
  return bus_width_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiSystemSlots_Item::set_allocated_bus_width(::std::string* bus_width) {
  if (bus_width != NULL) {
    
  } else {
    
  }
  bus_width_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_width);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiSystemSlots.Item.bus_width)
}

// .aspia.system_info.DmiSystemSlots.Item.Length length = 5;
void DmiSystemSlots_Item::clear_length() {
  length_ = 0;
}
::aspia::system_info::DmiSystemSlots_Item_Length DmiSystemSlots_Item::length() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.Item.length)
  return static_cast< ::aspia::system_info::DmiSystemSlots_Item_Length >(length_);
}
void DmiSystemSlots_Item::set_length(::aspia::system_info::DmiSystemSlots_Item_Length value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiSystemSlots.Item.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiSystemSlots::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiSystemSlots::DmiSystemSlots()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiSystemSlots)
}
DmiSystemSlots::DmiSystemSlots(const DmiSystemSlots& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiSystemSlots)
}

void DmiSystemSlots::SharedCtor() {
  _cached_size_ = 0;
}

DmiSystemSlots::~DmiSystemSlots() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiSystemSlots)
  SharedDtor();
}

void DmiSystemSlots::SharedDtor() {
}

void DmiSystemSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiSystemSlots& DmiSystemSlots::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiSystemSlots* DmiSystemSlots::New(::google::protobuf::Arena* arena) const {
  DmiSystemSlots* n = new DmiSystemSlots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiSystemSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiSystemSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiSystemSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiSystemSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiSystemSlots.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiSystemSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiSystemSlots)
  return false;
#undef DO_
}

void DmiSystemSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiSystemSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiSystemSlots.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiSystemSlots)
}

size_t DmiSystemSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiSystemSlots)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiSystemSlots.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiSystemSlots::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiSystemSlots*>(&from));
}

void DmiSystemSlots::MergeFrom(const DmiSystemSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiSystemSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiSystemSlots::CopyFrom(const DmiSystemSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiSystemSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiSystemSlots::IsInitialized() const {
  return true;
}

void DmiSystemSlots::Swap(DmiSystemSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiSystemSlots::InternalSwap(DmiSystemSlots* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiSystemSlots::GetTypeName() const {
  return "aspia.system_info.DmiSystemSlots";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiSystemSlots

// repeated .aspia.system_info.DmiSystemSlots.Item item = 1;
int DmiSystemSlots::item_size() const {
  return item_.size();
}
void DmiSystemSlots::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiSystemSlots_Item& DmiSystemSlots::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiSystemSlots.item)
  return item_.Get(index);
}
::aspia::system_info::DmiSystemSlots_Item* DmiSystemSlots::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiSystemSlots.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiSystemSlots_Item* DmiSystemSlots::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiSystemSlots.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiSystemSlots_Item >*
DmiSystemSlots::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiSystemSlots.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiSystemSlots_Item >&
DmiSystemSlots::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiSystemSlots.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnectors_Item::kInternalDesignationFieldNumber;
const int DmiPortConnectors_Item::kExternalDesignationFieldNumber;
const int DmiPortConnectors_Item::kTypeFieldNumber;
const int DmiPortConnectors_Item::kInternalConnectorTypeFieldNumber;
const int DmiPortConnectors_Item::kExternalConnectorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnectors_Item::DmiPortConnectors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiPortConnectors.Item)
}
DmiPortConnectors_Item::DmiPortConnectors_Item(const DmiPortConnectors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_designation().size() > 0) {
    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_designation().size() > 0) {
    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  internal_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_connector_type().size() > 0) {
    internal_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_connector_type_);
  }
  external_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_connector_type().size() > 0) {
    external_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_connector_type_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiPortConnectors.Item)
}

void DmiPortConnectors_Item::SharedCtor() {
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DmiPortConnectors_Item::~DmiPortConnectors_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiPortConnectors.Item)
  SharedDtor();
}

void DmiPortConnectors_Item::SharedDtor() {
  internal_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiPortConnectors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnectors_Item& DmiPortConnectors_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiPortConnectors_Item* DmiPortConnectors_Item::New(::google::protobuf::Arena* arena) const {
  DmiPortConnectors_Item* n = new DmiPortConnectors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnectors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiPortConnectors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DmiPortConnectors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiPortConnectors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string internal_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortConnectors.Item.internal_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_designation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_designation().data(), static_cast<int>(this->external_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortConnectors.Item.external_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortConnectors.Item.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_connector_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_connector_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_connector_type().data(), static_cast<int>(this->internal_connector_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortConnectors.Item.internal_connector_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_connector_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_connector_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_connector_type().data(), static_cast<int>(this->external_connector_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortConnectors.Item.external_connector_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiPortConnectors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiPortConnectors.Item)
  return false;
#undef DO_
}

void DmiPortConnectors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiPortConnectors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortConnectors.Item.internal_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->internal_designation(), output);
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_designation().data(), static_cast<int>(this->external_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortConnectors.Item.external_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_designation(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortConnectors.Item.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // string internal_connector_type = 4;
  if (this->internal_connector_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_connector_type().data(), static_cast<int>(this->internal_connector_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortConnectors.Item.internal_connector_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->internal_connector_type(), output);
  }

  // string external_connector_type = 5;
  if (this->external_connector_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_connector_type().data(), static_cast<int>(this->external_connector_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortConnectors.Item.external_connector_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->external_connector_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiPortConnectors.Item)
}

size_t DmiPortConnectors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiPortConnectors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_designation());
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_designation());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string internal_connector_type = 4;
  if (this->internal_connector_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_connector_type());
  }

  // string external_connector_type = 5;
  if (this->external_connector_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_connector_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnectors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnectors_Item*>(&from));
}

void DmiPortConnectors_Item::MergeFrom(const DmiPortConnectors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiPortConnectors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_designation().size() > 0) {

    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  if (from.external_designation().size() > 0) {

    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.internal_connector_type().size() > 0) {

    internal_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_connector_type_);
  }
  if (from.external_connector_type().size() > 0) {

    external_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_connector_type_);
  }
}

void DmiPortConnectors_Item::CopyFrom(const DmiPortConnectors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiPortConnectors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnectors_Item::IsInitialized() const {
  return true;
}

void DmiPortConnectors_Item::Swap(DmiPortConnectors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnectors_Item::InternalSwap(DmiPortConnectors_Item* other) {
  using std::swap;
  internal_designation_.Swap(&other->internal_designation_);
  external_designation_.Swap(&other->external_designation_);
  type_.Swap(&other->type_);
  internal_connector_type_.Swap(&other->internal_connector_type_);
  external_connector_type_.Swap(&other->external_connector_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnectors_Item::GetTypeName() const {
  return "aspia.system_info.DmiPortConnectors.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiPortConnectors_Item

// string internal_designation = 1;
void DmiPortConnectors_Item::clear_internal_designation() {
  internal_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortConnectors_Item::internal_designation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.Item.internal_designation)
  return internal_designation_.GetNoArena();
}
void DmiPortConnectors_Item::set_internal_designation(const ::std::string& value) {
  
  internal_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortConnectors.Item.internal_designation)
}
#if LANG_CXX11
void DmiPortConnectors_Item::set_internal_designation(::std::string&& value) {
  
  internal_designation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortConnectors.Item.internal_designation)
}
#endif
void DmiPortConnectors_Item::set_internal_designation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortConnectors.Item.internal_designation)
}
void DmiPortConnectors_Item::set_internal_designation(const char* value, size_t size) {
  
  internal_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortConnectors.Item.internal_designation)
}
::std::string* DmiPortConnectors_Item::mutable_internal_designation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.Item.internal_designation)
  return internal_designation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortConnectors_Item::release_internal_designation() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortConnectors.Item.internal_designation)
  
  return internal_designation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortConnectors_Item::set_allocated_internal_designation(::std::string* internal_designation) {
  if (internal_designation != NULL) {
    
  } else {
    
  }
  internal_designation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_designation);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortConnectors.Item.internal_designation)
}

// string external_designation = 2;
void DmiPortConnectors_Item::clear_external_designation() {
  external_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortConnectors_Item::external_designation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.Item.external_designation)
  return external_designation_.GetNoArena();
}
void DmiPortConnectors_Item::set_external_designation(const ::std::string& value) {
  
  external_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortConnectors.Item.external_designation)
}
#if LANG_CXX11
void DmiPortConnectors_Item::set_external_designation(::std::string&& value) {
  
  external_designation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortConnectors.Item.external_designation)
}
#endif
void DmiPortConnectors_Item::set_external_designation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  external_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortConnectors.Item.external_designation)
}
void DmiPortConnectors_Item::set_external_designation(const char* value, size_t size) {
  
  external_designation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortConnectors.Item.external_designation)
}
::std::string* DmiPortConnectors_Item::mutable_external_designation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.Item.external_designation)
  return external_designation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortConnectors_Item::release_external_designation() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortConnectors.Item.external_designation)
  
  return external_designation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortConnectors_Item::set_allocated_external_designation(::std::string* external_designation) {
  if (external_designation != NULL) {
    
  } else {
    
  }
  external_designation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_designation);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortConnectors.Item.external_designation)
}

// string type = 3;
void DmiPortConnectors_Item::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortConnectors_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.Item.type)
  return type_.GetNoArena();
}
void DmiPortConnectors_Item::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortConnectors.Item.type)
}
#if LANG_CXX11
void DmiPortConnectors_Item::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortConnectors.Item.type)
}
#endif
void DmiPortConnectors_Item::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortConnectors.Item.type)
}
void DmiPortConnectors_Item::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortConnectors.Item.type)
}
::std::string* DmiPortConnectors_Item::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.Item.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortConnectors_Item::release_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortConnectors.Item.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortConnectors_Item::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortConnectors.Item.type)
}

// string internal_connector_type = 4;
void DmiPortConnectors_Item::clear_internal_connector_type() {
  internal_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortConnectors_Item::internal_connector_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
  return internal_connector_type_.GetNoArena();
}
void DmiPortConnectors_Item::set_internal_connector_type(const ::std::string& value) {
  
  internal_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
}
#if LANG_CXX11
void DmiPortConnectors_Item::set_internal_connector_type(::std::string&& value) {
  
  internal_connector_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
}
#endif
void DmiPortConnectors_Item::set_internal_connector_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  internal_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
}
void DmiPortConnectors_Item::set_internal_connector_type(const char* value, size_t size) {
  
  internal_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
}
::std::string* DmiPortConnectors_Item::mutable_internal_connector_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
  return internal_connector_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortConnectors_Item::release_internal_connector_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
  
  return internal_connector_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortConnectors_Item::set_allocated_internal_connector_type(::std::string* internal_connector_type) {
  if (internal_connector_type != NULL) {
    
  } else {
    
  }
  internal_connector_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_connector_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortConnectors.Item.internal_connector_type)
}

// string external_connector_type = 5;
void DmiPortConnectors_Item::clear_external_connector_type() {
  external_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortConnectors_Item::external_connector_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
  return external_connector_type_.GetNoArena();
}
void DmiPortConnectors_Item::set_external_connector_type(const ::std::string& value) {
  
  external_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
}
#if LANG_CXX11
void DmiPortConnectors_Item::set_external_connector_type(::std::string&& value) {
  
  external_connector_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
}
#endif
void DmiPortConnectors_Item::set_external_connector_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  external_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
}
void DmiPortConnectors_Item::set_external_connector_type(const char* value, size_t size) {
  
  external_connector_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
}
::std::string* DmiPortConnectors_Item::mutable_external_connector_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
  return external_connector_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortConnectors_Item::release_external_connector_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
  
  return external_connector_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortConnectors_Item::set_allocated_external_connector_type(::std::string* external_connector_type) {
  if (external_connector_type != NULL) {
    
  } else {
    
  }
  external_connector_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_connector_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortConnectors.Item.external_connector_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnectors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnectors::DmiPortConnectors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiPortConnectors)
}
DmiPortConnectors::DmiPortConnectors(const DmiPortConnectors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiPortConnectors)
}

void DmiPortConnectors::SharedCtor() {
  _cached_size_ = 0;
}

DmiPortConnectors::~DmiPortConnectors() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiPortConnectors)
  SharedDtor();
}

void DmiPortConnectors::SharedDtor() {
}

void DmiPortConnectors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnectors& DmiPortConnectors::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiPortConnectors* DmiPortConnectors::New(::google::protobuf::Arena* arena) const {
  DmiPortConnectors* n = new DmiPortConnectors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnectors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiPortConnectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPortConnectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiPortConnectors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiPortConnectors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiPortConnectors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiPortConnectors)
  return false;
#undef DO_
}

void DmiPortConnectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiPortConnectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiPortConnectors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiPortConnectors)
}

size_t DmiPortConnectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiPortConnectors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiPortConnectors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnectors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnectors*>(&from));
}

void DmiPortConnectors::MergeFrom(const DmiPortConnectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiPortConnectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPortConnectors::CopyFrom(const DmiPortConnectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiPortConnectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnectors::IsInitialized() const {
  return true;
}

void DmiPortConnectors::Swap(DmiPortConnectors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnectors::InternalSwap(DmiPortConnectors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnectors::GetTypeName() const {
  return "aspia.system_info.DmiPortConnectors";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiPortConnectors

// repeated .aspia.system_info.DmiPortConnectors.Item item = 1;
int DmiPortConnectors::item_size() const {
  return item_.size();
}
void DmiPortConnectors::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiPortConnectors_Item& DmiPortConnectors::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortConnectors.item)
  return item_.Get(index);
}
::aspia::system_info::DmiPortConnectors_Item* DmiPortConnectors::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortConnectors.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiPortConnectors_Item* DmiPortConnectors::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiPortConnectors.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiPortConnectors_Item >*
DmiPortConnectors::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiPortConnectors.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiPortConnectors_Item >&
DmiPortConnectors::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiPortConnectors.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiOnBoardDevices_Item::kDescriptionFieldNumber;
const int DmiOnBoardDevices_Item::kTypeFieldNumber;
const int DmiOnBoardDevices_Item::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiOnBoardDevices_Item::DmiOnBoardDevices_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiOnBoardDevices.Item)
}
DmiOnBoardDevices_Item::DmiOnBoardDevices_Item(const DmiOnBoardDevices_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiOnBoardDevices.Item)
}

void DmiOnBoardDevices_Item::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  _cached_size_ = 0;
}

DmiOnBoardDevices_Item::~DmiOnBoardDevices_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiOnBoardDevices.Item)
  SharedDtor();
}

void DmiOnBoardDevices_Item::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiOnBoardDevices_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiOnBoardDevices_Item& DmiOnBoardDevices_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiOnBoardDevices_Item* DmiOnBoardDevices_Item::New(::google::protobuf::Arena* arena) const {
  DmiOnBoardDevices_Item* n = new DmiOnBoardDevices_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiOnBoardDevices_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiOnBoardDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  _internal_metadata_.Clear();
}

bool DmiOnBoardDevices_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiOnBoardDevices.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiOnBoardDevices.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiOnBoardDevices.Item.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiOnBoardDevices.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiOnBoardDevices.Item)
  return false;
#undef DO_
}

void DmiOnBoardDevices_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiOnBoardDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiOnBoardDevices.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiOnBoardDevices.Item.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiOnBoardDevices.Item)
}

size_t DmiOnBoardDevices_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiOnBoardDevices.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiOnBoardDevices_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiOnBoardDevices_Item*>(&from));
}

void DmiOnBoardDevices_Item::MergeFrom(const DmiOnBoardDevices_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiOnBoardDevices.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void DmiOnBoardDevices_Item::CopyFrom(const DmiOnBoardDevices_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiOnBoardDevices.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiOnBoardDevices_Item::IsInitialized() const {
  return true;
}

void DmiOnBoardDevices_Item::Swap(DmiOnBoardDevices_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiOnBoardDevices_Item::InternalSwap(DmiOnBoardDevices_Item* other) {
  using std::swap;
  description_.Swap(&other->description_);
  type_.Swap(&other->type_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiOnBoardDevices_Item::GetTypeName() const {
  return "aspia.system_info.DmiOnBoardDevices.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiOnBoardDevices_Item

// string description = 1;
void DmiOnBoardDevices_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiOnBoardDevices_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiOnBoardDevices.Item.description)
  return description_.GetNoArena();
}
void DmiOnBoardDevices_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiOnBoardDevices.Item.description)
}
#if LANG_CXX11
void DmiOnBoardDevices_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiOnBoardDevices.Item.description)
}
#endif
void DmiOnBoardDevices_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiOnBoardDevices.Item.description)
}
void DmiOnBoardDevices_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiOnBoardDevices.Item.description)
}
::std::string* DmiOnBoardDevices_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiOnBoardDevices.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiOnBoardDevices_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiOnBoardDevices.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiOnBoardDevices_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiOnBoardDevices.Item.description)
}

// string type = 2;
void DmiOnBoardDevices_Item::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiOnBoardDevices_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiOnBoardDevices.Item.type)
  return type_.GetNoArena();
}
void DmiOnBoardDevices_Item::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiOnBoardDevices.Item.type)
}
#if LANG_CXX11
void DmiOnBoardDevices_Item::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiOnBoardDevices.Item.type)
}
#endif
void DmiOnBoardDevices_Item::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiOnBoardDevices.Item.type)
}
void DmiOnBoardDevices_Item::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiOnBoardDevices.Item.type)
}
::std::string* DmiOnBoardDevices_Item::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiOnBoardDevices.Item.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiOnBoardDevices_Item::release_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiOnBoardDevices.Item.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiOnBoardDevices_Item::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiOnBoardDevices.Item.type)
}

// bool enabled = 3;
void DmiOnBoardDevices_Item::clear_enabled() {
  enabled_ = false;
}
bool DmiOnBoardDevices_Item::enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiOnBoardDevices.Item.enabled)
  return enabled_;
}
void DmiOnBoardDevices_Item::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiOnBoardDevices.Item.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiOnBoardDevices::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiOnBoardDevices::DmiOnBoardDevices()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiOnBoardDevices)
}
DmiOnBoardDevices::DmiOnBoardDevices(const DmiOnBoardDevices& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiOnBoardDevices)
}

void DmiOnBoardDevices::SharedCtor() {
  _cached_size_ = 0;
}

DmiOnBoardDevices::~DmiOnBoardDevices() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiOnBoardDevices)
  SharedDtor();
}

void DmiOnBoardDevices::SharedDtor() {
}

void DmiOnBoardDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiOnBoardDevices& DmiOnBoardDevices::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiOnBoardDevices* DmiOnBoardDevices::New(::google::protobuf::Arena* arena) const {
  DmiOnBoardDevices* n = new DmiOnBoardDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiOnBoardDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiOnBoardDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiOnBoardDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiOnBoardDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiOnBoardDevices.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiOnBoardDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiOnBoardDevices)
  return false;
#undef DO_
}

void DmiOnBoardDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiOnBoardDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiOnBoardDevices.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiOnBoardDevices)
}

size_t DmiOnBoardDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiOnBoardDevices)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiOnBoardDevices.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiOnBoardDevices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiOnBoardDevices*>(&from));
}

void DmiOnBoardDevices::MergeFrom(const DmiOnBoardDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiOnBoardDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiOnBoardDevices::CopyFrom(const DmiOnBoardDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiOnBoardDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiOnBoardDevices::IsInitialized() const {
  return true;
}

void DmiOnBoardDevices::Swap(DmiOnBoardDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiOnBoardDevices::InternalSwap(DmiOnBoardDevices* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiOnBoardDevices::GetTypeName() const {
  return "aspia.system_info.DmiOnBoardDevices";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiOnBoardDevices

// repeated .aspia.system_info.DmiOnBoardDevices.Item item = 1;
int DmiOnBoardDevices::item_size() const {
  return item_.size();
}
void DmiOnBoardDevices::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiOnBoardDevices_Item& DmiOnBoardDevices::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiOnBoardDevices.item)
  return item_.Get(index);
}
::aspia::system_info::DmiOnBoardDevices_Item* DmiOnBoardDevices::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiOnBoardDevices.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiOnBoardDevices_Item* DmiOnBoardDevices::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiOnBoardDevices.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiOnBoardDevices_Item >*
DmiOnBoardDevices::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiOnBoardDevices.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiOnBoardDevices_Item >&
DmiOnBoardDevices::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiOnBoardDevices.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBuildinPointing_Item::kDeviceTypeFieldNumber;
const int DmiBuildinPointing_Item::kDeviceInterfaceFieldNumber;
const int DmiBuildinPointing_Item::kButtonCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBuildinPointing_Item::DmiBuildinPointing_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBuildinPointing.Item)
}
DmiBuildinPointing_Item::DmiBuildinPointing_Item(const DmiBuildinPointing_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_type().size() > 0) {
    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  device_interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_interface().size() > 0) {
    device_interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_interface_);
  }
  button_count_ = from.button_count_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBuildinPointing.Item)
}

void DmiBuildinPointing_Item::SharedCtor() {
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_interface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_count_ = 0;
  _cached_size_ = 0;
}

DmiBuildinPointing_Item::~DmiBuildinPointing_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBuildinPointing.Item)
  SharedDtor();
}

void DmiBuildinPointing_Item::SharedDtor() {
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_interface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiBuildinPointing_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBuildinPointing_Item& DmiBuildinPointing_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBuildinPointing_Item* DmiBuildinPointing_Item::New(::google::protobuf::Arena* arena) const {
  DmiBuildinPointing_Item* n = new DmiBuildinPointing_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBuildinPointing_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBuildinPointing.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_count_ = 0;
  _internal_metadata_.Clear();
}

bool DmiBuildinPointing_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBuildinPointing.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBuildinPointing.Item.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_interface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_interface().data(), static_cast<int>(this->device_interface().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiBuildinPointing.Item.device_interface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 button_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &button_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBuildinPointing.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBuildinPointing.Item)
  return false;
#undef DO_
}

void DmiBuildinPointing_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBuildinPointing.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_type = 1;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBuildinPointing.Item.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_type(), output);
  }

  // string device_interface = 2;
  if (this->device_interface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_interface().data(), static_cast<int>(this->device_interface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiBuildinPointing.Item.device_interface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_interface(), output);
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->button_count(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBuildinPointing.Item)
}

size_t DmiBuildinPointing_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBuildinPointing.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_type = 1;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // string device_interface = 2;
  if (this->device_interface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_interface());
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->button_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBuildinPointing_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBuildinPointing_Item*>(&from));
}

void DmiBuildinPointing_Item::MergeFrom(const DmiBuildinPointing_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBuildinPointing.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type().size() > 0) {

    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  if (from.device_interface().size() > 0) {

    device_interface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_interface_);
  }
  if (from.button_count() != 0) {
    set_button_count(from.button_count());
  }
}

void DmiBuildinPointing_Item::CopyFrom(const DmiBuildinPointing_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBuildinPointing.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBuildinPointing_Item::IsInitialized() const {
  return true;
}

void DmiBuildinPointing_Item::Swap(DmiBuildinPointing_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBuildinPointing_Item::InternalSwap(DmiBuildinPointing_Item* other) {
  using std::swap;
  device_type_.Swap(&other->device_type_);
  device_interface_.Swap(&other->device_interface_);
  swap(button_count_, other->button_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBuildinPointing_Item::GetTypeName() const {
  return "aspia.system_info.DmiBuildinPointing.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBuildinPointing_Item

// string device_type = 1;
void DmiBuildinPointing_Item::clear_device_type() {
  device_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBuildinPointing_Item::device_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBuildinPointing.Item.device_type)
  return device_type_.GetNoArena();
}
void DmiBuildinPointing_Item::set_device_type(const ::std::string& value) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBuildinPointing.Item.device_type)
}
#if LANG_CXX11
void DmiBuildinPointing_Item::set_device_type(::std::string&& value) {
  
  device_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBuildinPointing.Item.device_type)
}
#endif
void DmiBuildinPointing_Item::set_device_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBuildinPointing.Item.device_type)
}
void DmiBuildinPointing_Item::set_device_type(const char* value, size_t size) {
  
  device_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBuildinPointing.Item.device_type)
}
::std::string* DmiBuildinPointing_Item::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBuildinPointing.Item.device_type)
  return device_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBuildinPointing_Item::release_device_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBuildinPointing.Item.device_type)
  
  return device_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBuildinPointing_Item::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBuildinPointing.Item.device_type)
}

// string device_interface = 2;
void DmiBuildinPointing_Item::clear_device_interface() {
  device_interface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiBuildinPointing_Item::device_interface() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBuildinPointing.Item.device_interface)
  return device_interface_.GetNoArena();
}
void DmiBuildinPointing_Item::set_device_interface(const ::std::string& value) {
  
  device_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBuildinPointing.Item.device_interface)
}
#if LANG_CXX11
void DmiBuildinPointing_Item::set_device_interface(::std::string&& value) {
  
  device_interface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiBuildinPointing.Item.device_interface)
}
#endif
void DmiBuildinPointing_Item::set_device_interface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiBuildinPointing.Item.device_interface)
}
void DmiBuildinPointing_Item::set_device_interface(const char* value, size_t size) {
  
  device_interface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiBuildinPointing.Item.device_interface)
}
::std::string* DmiBuildinPointing_Item::mutable_device_interface() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBuildinPointing.Item.device_interface)
  return device_interface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiBuildinPointing_Item::release_device_interface() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiBuildinPointing.Item.device_interface)
  
  return device_interface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiBuildinPointing_Item::set_allocated_device_interface(::std::string* device_interface) {
  if (device_interface != NULL) {
    
  } else {
    
  }
  device_interface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_interface);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiBuildinPointing.Item.device_interface)
}

// int32 button_count = 3;
void DmiBuildinPointing_Item::clear_button_count() {
  button_count_ = 0;
}
::google::protobuf::int32 DmiBuildinPointing_Item::button_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBuildinPointing.Item.button_count)
  return button_count_;
}
void DmiBuildinPointing_Item::set_button_count(::google::protobuf::int32 value) {
  
  button_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiBuildinPointing.Item.button_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiBuildinPointing::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiBuildinPointing::DmiBuildinPointing()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiBuildinPointing)
}
DmiBuildinPointing::DmiBuildinPointing(const DmiBuildinPointing& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiBuildinPointing)
}

void DmiBuildinPointing::SharedCtor() {
  _cached_size_ = 0;
}

DmiBuildinPointing::~DmiBuildinPointing() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiBuildinPointing)
  SharedDtor();
}

void DmiBuildinPointing::SharedDtor() {
}

void DmiBuildinPointing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiBuildinPointing& DmiBuildinPointing::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiBuildinPointing* DmiBuildinPointing::New(::google::protobuf::Arena* arena) const {
  DmiBuildinPointing* n = new DmiBuildinPointing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiBuildinPointing::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiBuildinPointing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiBuildinPointing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiBuildinPointing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiBuildinPointing.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiBuildinPointing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiBuildinPointing)
  return false;
#undef DO_
}

void DmiBuildinPointing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiBuildinPointing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiBuildinPointing.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiBuildinPointing)
}

size_t DmiBuildinPointing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiBuildinPointing)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiBuildinPointing.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiBuildinPointing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiBuildinPointing*>(&from));
}

void DmiBuildinPointing::MergeFrom(const DmiBuildinPointing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiBuildinPointing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiBuildinPointing::CopyFrom(const DmiBuildinPointing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiBuildinPointing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiBuildinPointing::IsInitialized() const {
  return true;
}

void DmiBuildinPointing::Swap(DmiBuildinPointing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiBuildinPointing::InternalSwap(DmiBuildinPointing* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiBuildinPointing::GetTypeName() const {
  return "aspia.system_info.DmiBuildinPointing";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiBuildinPointing

// repeated .aspia.system_info.DmiBuildinPointing.Item item = 1;
int DmiBuildinPointing::item_size() const {
  return item_.size();
}
void DmiBuildinPointing::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiBuildinPointing_Item& DmiBuildinPointing::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiBuildinPointing.item)
  return item_.Get(index);
}
::aspia::system_info::DmiBuildinPointing_Item* DmiBuildinPointing::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiBuildinPointing.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiBuildinPointing_Item* DmiBuildinPointing::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiBuildinPointing.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBuildinPointing_Item >*
DmiBuildinPointing::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiBuildinPointing.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiBuildinPointing_Item >&
DmiBuildinPointing::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiBuildinPointing.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortableBattery_Item::kLocationFieldNumber;
const int DmiPortableBattery_Item::kManufacturerFieldNumber;
const int DmiPortableBattery_Item::kManufactureDateFieldNumber;
const int DmiPortableBattery_Item::kSerialNumberFieldNumber;
const int DmiPortableBattery_Item::kDeviceNameFieldNumber;
const int DmiPortableBattery_Item::kChemistryFieldNumber;
const int DmiPortableBattery_Item::kDesignCapacityFieldNumber;
const int DmiPortableBattery_Item::kDesignVoltageFieldNumber;
const int DmiPortableBattery_Item::kSbdsVersionNumberFieldNumber;
const int DmiPortableBattery_Item::kMaxErrorInBatteryDataFieldNumber;
const int DmiPortableBattery_Item::kSbdsSerialNumberFieldNumber;
const int DmiPortableBattery_Item::kSbdsManufactureDateFieldNumber;
const int DmiPortableBattery_Item::kSbdsDeviceChemistryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortableBattery_Item::DmiPortableBattery_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiPortableBattery.Item)
}
DmiPortableBattery_Item::DmiPortableBattery_Item(const DmiPortableBattery_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacture_date().size() > 0) {
    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chemistry().size() > 0) {
    chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chemistry_);
  }
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_version_number().size() > 0) {
    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_serial_number().size() > 0) {
    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_manufacture_date().size() > 0) {
    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_device_chemistry().size() > 0) {
    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  ::memcpy(&design_capacity_, &from.design_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_error_in_battery_data_) -
    reinterpret_cast<char*>(&design_capacity_)) + sizeof(max_error_in_battery_data_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiPortableBattery.Item)
}

void DmiPortableBattery_Item::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&design_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&design_capacity_)) + sizeof(max_error_in_battery_data_));
  _cached_size_ = 0;
}

DmiPortableBattery_Item::~DmiPortableBattery_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiPortableBattery.Item)
  SharedDtor();
}

void DmiPortableBattery_Item::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chemistry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiPortableBattery_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortableBattery_Item& DmiPortableBattery_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiPortableBattery_Item* DmiPortableBattery_Item::New(::google::protobuf::Arena* arena) const {
  DmiPortableBattery_Item* n = new DmiPortableBattery_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortableBattery_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiPortableBattery.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&design_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&design_capacity_)) + sizeof(max_error_in_battery_data_));
  _internal_metadata_.Clear();
}

bool DmiPortableBattery_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiPortableBattery.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacture_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chemistry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chemistry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chemistry().data(), static_cast<int>(this->chemistry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.chemistry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_version_number = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_version_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.sbds_version_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_error_in_battery_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_error_in_battery_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_serial_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.sbds_serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_manufacture_date = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_device_chemistry = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_device_chemistry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiPortableBattery.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiPortableBattery.Item)
  return false;
#undef DO_
}

void DmiPortableBattery_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiPortableBattery.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacture_date(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_name(), output);
  }

  // string chemistry = 6;
  if (this->chemistry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chemistry().data(), static_cast<int>(this->chemistry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.chemistry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chemistry(), output);
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->design_capacity(), output);
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->design_voltage(), output);
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.sbds_version_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sbds_version_number(), output);
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_error_in_battery_data(), output);
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.sbds_serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sbds_serial_number(), output);
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sbds_manufacture_date(), output);
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sbds_device_chemistry(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiPortableBattery.Item)
}

size_t DmiPortableBattery_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiPortableBattery.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacture_date());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string chemistry = 6;
  if (this->chemistry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chemistry());
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_version_number());
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_serial_number());
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_manufacture_date());
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_device_chemistry());
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_capacity());
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_voltage());
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_error_in_battery_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortableBattery_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortableBattery_Item*>(&from));
}

void DmiPortableBattery_Item::MergeFrom(const DmiPortableBattery_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiPortableBattery.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.manufacture_date().size() > 0) {

    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.chemistry().size() > 0) {

    chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chemistry_);
  }
  if (from.sbds_version_number().size() > 0) {

    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  if (from.sbds_serial_number().size() > 0) {

    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  if (from.sbds_manufacture_date().size() > 0) {

    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  if (from.sbds_device_chemistry().size() > 0) {

    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  if (from.design_capacity() != 0) {
    set_design_capacity(from.design_capacity());
  }
  if (from.design_voltage() != 0) {
    set_design_voltage(from.design_voltage());
  }
  if (from.max_error_in_battery_data() != 0) {
    set_max_error_in_battery_data(from.max_error_in_battery_data());
  }
}

void DmiPortableBattery_Item::CopyFrom(const DmiPortableBattery_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiPortableBattery.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortableBattery_Item::IsInitialized() const {
  return true;
}

void DmiPortableBattery_Item::Swap(DmiPortableBattery_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortableBattery_Item::InternalSwap(DmiPortableBattery_Item* other) {
  using std::swap;
  location_.Swap(&other->location_);
  manufacturer_.Swap(&other->manufacturer_);
  manufacture_date_.Swap(&other->manufacture_date_);
  serial_number_.Swap(&other->serial_number_);
  device_name_.Swap(&other->device_name_);
  chemistry_.Swap(&other->chemistry_);
  sbds_version_number_.Swap(&other->sbds_version_number_);
  sbds_serial_number_.Swap(&other->sbds_serial_number_);
  sbds_manufacture_date_.Swap(&other->sbds_manufacture_date_);
  sbds_device_chemistry_.Swap(&other->sbds_device_chemistry_);
  swap(design_capacity_, other->design_capacity_);
  swap(design_voltage_, other->design_voltage_);
  swap(max_error_in_battery_data_, other->max_error_in_battery_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortableBattery_Item::GetTypeName() const {
  return "aspia.system_info.DmiPortableBattery.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiPortableBattery_Item

// string location = 1;
void DmiPortableBattery_Item::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::location() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.location)
  return location_.GetNoArena();
}
void DmiPortableBattery_Item::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.location)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.location)
}
#endif
void DmiPortableBattery_Item::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.location)
}
void DmiPortableBattery_Item::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.location)
}
::std::string* DmiPortableBattery_Item::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_location() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.location)
}

// string manufacturer = 2;
void DmiPortableBattery_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
void DmiPortableBattery_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.manufacturer)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.manufacturer)
}
#endif
void DmiPortableBattery_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.manufacturer)
}
void DmiPortableBattery_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.manufacturer)
}
::std::string* DmiPortableBattery_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.manufacturer)
}

// string manufacture_date = 3;
void DmiPortableBattery_Item::clear_manufacture_date() {
  manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::manufacture_date() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
  return manufacture_date_.GetNoArena();
}
void DmiPortableBattery_Item::set_manufacture_date(const ::std::string& value) {
  
  manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_manufacture_date(::std::string&& value) {
  
  manufacture_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
}
#endif
void DmiPortableBattery_Item::set_manufacture_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
}
void DmiPortableBattery_Item::set_manufacture_date(const char* value, size_t size) {
  
  manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
}
::std::string* DmiPortableBattery_Item::mutable_manufacture_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
  return manufacture_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_manufacture_date() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
  
  return manufacture_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_manufacture_date(::std::string* manufacture_date) {
  if (manufacture_date != NULL) {
    
  } else {
    
  }
  manufacture_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacture_date);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.manufacture_date)
}

// string serial_number = 4;
void DmiPortableBattery_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.serial_number)
  return serial_number_.GetNoArena();
}
void DmiPortableBattery_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.serial_number)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.serial_number)
}
#endif
void DmiPortableBattery_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.serial_number)
}
void DmiPortableBattery_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.serial_number)
}
::std::string* DmiPortableBattery_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.serial_number)
}

// string device_name = 5;
void DmiPortableBattery_Item::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::device_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.device_name)
  return device_name_.GetNoArena();
}
void DmiPortableBattery_Item::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.device_name)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.device_name)
}
#endif
void DmiPortableBattery_Item::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.device_name)
}
void DmiPortableBattery_Item::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.device_name)
}
::std::string* DmiPortableBattery_Item::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_device_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.device_name)
}

// string chemistry = 6;
void DmiPortableBattery_Item::clear_chemistry() {
  chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::chemistry() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.chemistry)
  return chemistry_.GetNoArena();
}
void DmiPortableBattery_Item::set_chemistry(const ::std::string& value) {
  
  chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.chemistry)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_chemistry(::std::string&& value) {
  
  chemistry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.chemistry)
}
#endif
void DmiPortableBattery_Item::set_chemistry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.chemistry)
}
void DmiPortableBattery_Item::set_chemistry(const char* value, size_t size) {
  
  chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.chemistry)
}
::std::string* DmiPortableBattery_Item::mutable_chemistry() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.chemistry)
  return chemistry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_chemistry() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.chemistry)
  
  return chemistry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_chemistry(::std::string* chemistry) {
  if (chemistry != NULL) {
    
  } else {
    
  }
  chemistry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chemistry);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.chemistry)
}

// int32 design_capacity = 7;
void DmiPortableBattery_Item::clear_design_capacity() {
  design_capacity_ = 0;
}
::google::protobuf::int32 DmiPortableBattery_Item::design_capacity() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.design_capacity)
  return design_capacity_;
}
void DmiPortableBattery_Item::set_design_capacity(::google::protobuf::int32 value) {
  
  design_capacity_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.design_capacity)
}

// int32 design_voltage = 8;
void DmiPortableBattery_Item::clear_design_voltage() {
  design_voltage_ = 0;
}
::google::protobuf::int32 DmiPortableBattery_Item::design_voltage() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.design_voltage)
  return design_voltage_;
}
void DmiPortableBattery_Item::set_design_voltage(::google::protobuf::int32 value) {
  
  design_voltage_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.design_voltage)
}

// string sbds_version_number = 9;
void DmiPortableBattery_Item::clear_sbds_version_number() {
  sbds_version_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::sbds_version_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
  return sbds_version_number_.GetNoArena();
}
void DmiPortableBattery_Item::set_sbds_version_number(const ::std::string& value) {
  
  sbds_version_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_sbds_version_number(::std::string&& value) {
  
  sbds_version_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
}
#endif
void DmiPortableBattery_Item::set_sbds_version_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbds_version_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
}
void DmiPortableBattery_Item::set_sbds_version_number(const char* value, size_t size) {
  
  sbds_version_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
}
::std::string* DmiPortableBattery_Item::mutable_sbds_version_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
  return sbds_version_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_sbds_version_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
  
  return sbds_version_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_sbds_version_number(::std::string* sbds_version_number) {
  if (sbds_version_number != NULL) {
    
  } else {
    
  }
  sbds_version_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbds_version_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.sbds_version_number)
}

// int32 max_error_in_battery_data = 10;
void DmiPortableBattery_Item::clear_max_error_in_battery_data() {
  max_error_in_battery_data_ = 0;
}
::google::protobuf::int32 DmiPortableBattery_Item::max_error_in_battery_data() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.max_error_in_battery_data)
  return max_error_in_battery_data_;
}
void DmiPortableBattery_Item::set_max_error_in_battery_data(::google::protobuf::int32 value) {
  
  max_error_in_battery_data_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.max_error_in_battery_data)
}

// string sbds_serial_number = 11;
void DmiPortableBattery_Item::clear_sbds_serial_number() {
  sbds_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::sbds_serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
  return sbds_serial_number_.GetNoArena();
}
void DmiPortableBattery_Item::set_sbds_serial_number(const ::std::string& value) {
  
  sbds_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_sbds_serial_number(::std::string&& value) {
  
  sbds_serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
}
#endif
void DmiPortableBattery_Item::set_sbds_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbds_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
}
void DmiPortableBattery_Item::set_sbds_serial_number(const char* value, size_t size) {
  
  sbds_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
}
::std::string* DmiPortableBattery_Item::mutable_sbds_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
  return sbds_serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_sbds_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
  
  return sbds_serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_sbds_serial_number(::std::string* sbds_serial_number) {
  if (sbds_serial_number != NULL) {
    
  } else {
    
  }
  sbds_serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbds_serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.sbds_serial_number)
}

// string sbds_manufacture_date = 12;
void DmiPortableBattery_Item::clear_sbds_manufacture_date() {
  sbds_manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::sbds_manufacture_date() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
  return sbds_manufacture_date_.GetNoArena();
}
void DmiPortableBattery_Item::set_sbds_manufacture_date(const ::std::string& value) {
  
  sbds_manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_sbds_manufacture_date(::std::string&& value) {
  
  sbds_manufacture_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
}
#endif
void DmiPortableBattery_Item::set_sbds_manufacture_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbds_manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
}
void DmiPortableBattery_Item::set_sbds_manufacture_date(const char* value, size_t size) {
  
  sbds_manufacture_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
}
::std::string* DmiPortableBattery_Item::mutable_sbds_manufacture_date() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
  return sbds_manufacture_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_sbds_manufacture_date() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
  
  return sbds_manufacture_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_sbds_manufacture_date(::std::string* sbds_manufacture_date) {
  if (sbds_manufacture_date != NULL) {
    
  } else {
    
  }
  sbds_manufacture_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbds_manufacture_date);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.sbds_manufacture_date)
}

// string sbds_device_chemistry = 13;
void DmiPortableBattery_Item::clear_sbds_device_chemistry() {
  sbds_device_chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DmiPortableBattery_Item::sbds_device_chemistry() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
  return sbds_device_chemistry_.GetNoArena();
}
void DmiPortableBattery_Item::set_sbds_device_chemistry(const ::std::string& value) {
  
  sbds_device_chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
}
#if LANG_CXX11
void DmiPortableBattery_Item::set_sbds_device_chemistry(::std::string&& value) {
  
  sbds_device_chemistry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
}
#endif
void DmiPortableBattery_Item::set_sbds_device_chemistry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbds_device_chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
}
void DmiPortableBattery_Item::set_sbds_device_chemistry(const char* value, size_t size) {
  
  sbds_device_chemistry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
}
::std::string* DmiPortableBattery_Item::mutable_sbds_device_chemistry() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
  return sbds_device_chemistry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DmiPortableBattery_Item::release_sbds_device_chemistry() {
  // @@protoc_insertion_point(field_release:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
  
  return sbds_device_chemistry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DmiPortableBattery_Item::set_allocated_sbds_device_chemistry(::std::string* sbds_device_chemistry) {
  if (sbds_device_chemistry != NULL) {
    
  } else {
    
  }
  sbds_device_chemistry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbds_device_chemistry);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.DmiPortableBattery.Item.sbds_device_chemistry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortableBattery::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortableBattery::DmiPortableBattery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.DmiPortableBattery)
}
DmiPortableBattery::DmiPortableBattery(const DmiPortableBattery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.DmiPortableBattery)
}

void DmiPortableBattery::SharedCtor() {
  _cached_size_ = 0;
}

DmiPortableBattery::~DmiPortableBattery() {
  // @@protoc_insertion_point(destructor:aspia.system_info.DmiPortableBattery)
  SharedDtor();
}

void DmiPortableBattery::SharedDtor() {
}

void DmiPortableBattery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortableBattery& DmiPortableBattery::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

DmiPortableBattery* DmiPortableBattery::New(::google::protobuf::Arena* arena) const {
  DmiPortableBattery* n = new DmiPortableBattery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortableBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.DmiPortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPortableBattery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.DmiPortableBattery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.DmiPortableBattery.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.DmiPortableBattery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.DmiPortableBattery)
  return false;
#undef DO_
}

void DmiPortableBattery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.DmiPortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.DmiPortableBattery.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.DmiPortableBattery)
}

size_t DmiPortableBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.DmiPortableBattery)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.DmiPortableBattery.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortableBattery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortableBattery*>(&from));
}

void DmiPortableBattery::MergeFrom(const DmiPortableBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.DmiPortableBattery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPortableBattery::CopyFrom(const DmiPortableBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.DmiPortableBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortableBattery::IsInitialized() const {
  return true;
}

void DmiPortableBattery::Swap(DmiPortableBattery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortableBattery::InternalSwap(DmiPortableBattery* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortableBattery::GetTypeName() const {
  return "aspia.system_info.DmiPortableBattery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DmiPortableBattery

// repeated .aspia.system_info.DmiPortableBattery.Item item = 1;
int DmiPortableBattery::item_size() const {
  return item_.size();
}
void DmiPortableBattery::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::DmiPortableBattery_Item& DmiPortableBattery::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.DmiPortableBattery.item)
  return item_.Get(index);
}
::aspia::system_info::DmiPortableBattery_Item* DmiPortableBattery::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.DmiPortableBattery.item)
  return item_.Mutable(index);
}
::aspia::system_info::DmiPortableBattery_Item* DmiPortableBattery::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.DmiPortableBattery.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiPortableBattery_Item >*
DmiPortableBattery::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.DmiPortableBattery.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::DmiPortableBattery_Item >&
DmiPortableBattery::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.DmiPortableBattery.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors_Item_Timing::kWidthFieldNumber;
const int Monitors_Item_Timing::kHeightFieldNumber;
const int Monitors_Item_Timing::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors_Item_Timing::Monitors_Item_Timing()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Monitors.Item.Timing)
}
Monitors_Item_Timing::Monitors_Item_Timing(const Monitors_Item_Timing& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Monitors.Item.Timing)
}

void Monitors_Item_Timing::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  _cached_size_ = 0;
}

Monitors_Item_Timing::~Monitors_Item_Timing() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Monitors.Item.Timing)
  SharedDtor();
}

void Monitors_Item_Timing::SharedDtor() {
}

void Monitors_Item_Timing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors_Item_Timing& Monitors_Item_Timing::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Monitors_Item_Timing* Monitors_Item_Timing::New(::google::protobuf::Arena* arena) const {
  Monitors_Item_Timing* n = new Monitors_Item_Timing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors_Item_Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Monitors.Item.Timing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&width_)) + sizeof(frequency_));
  _internal_metadata_.Clear();
}

bool Monitors_Item_Timing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Monitors.Item.Timing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Monitors.Item.Timing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Monitors.Item.Timing)
  return false;
#undef DO_
}

void Monitors_Item_Timing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Monitors.Item.Timing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frequency(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Monitors.Item.Timing)
}

size_t Monitors_Item_Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Monitors.Item.Timing)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 frequency = 3;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors_Item_Timing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors_Item_Timing*>(&from));
}

void Monitors_Item_Timing::MergeFrom(const Monitors_Item_Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Monitors.Item.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void Monitors_Item_Timing::CopyFrom(const Monitors_Item_Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Monitors.Item.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors_Item_Timing::IsInitialized() const {
  return true;
}

void Monitors_Item_Timing::Swap(Monitors_Item_Timing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors_Item_Timing::InternalSwap(Monitors_Item_Timing* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(frequency_, other->frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors_Item_Timing::GetTypeName() const {
  return "aspia.system_info.Monitors.Item.Timing";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Monitors_Item_Timing

// int32 width = 1;
void Monitors_Item_Timing::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 Monitors_Item_Timing::width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.Timing.width)
  return width_;
}
void Monitors_Item_Timing::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.Timing.width)
}

// int32 height = 2;
void Monitors_Item_Timing::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 Monitors_Item_Timing::height() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.Timing.height)
  return height_;
}
void Monitors_Item_Timing::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.Timing.height)
}

// int32 frequency = 3;
void Monitors_Item_Timing::clear_frequency() {
  frequency_ = 0;
}
::google::protobuf::int32 Monitors_Item_Timing::frequency() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.Timing.frequency)
  return frequency_;
}
void Monitors_Item_Timing::set_frequency(::google::protobuf::int32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.Timing.frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors_Item::kSystemNameFieldNumber;
const int Monitors_Item::kMonitorNameFieldNumber;
const int Monitors_Item::kManufacturerNameFieldNumber;
const int Monitors_Item::kMonitorIdFieldNumber;
const int Monitors_Item::kSerialNumberFieldNumber;
const int Monitors_Item::kEdidVersionFieldNumber;
const int Monitors_Item::kEdidRevisionFieldNumber;
const int Monitors_Item::kWeekOfManufactureFieldNumber;
const int Monitors_Item::kYearOfManufactureFieldNumber;
const int Monitors_Item::kMaxHorizontalImageSizeFieldNumber;
const int Monitors_Item::kMaxVerticalImageSizeFieldNumber;
const int Monitors_Item::kHorizontalResolutionFieldNumber;
const int Monitors_Item::kVerticalResoulutionFieldNumber;
const int Monitors_Item::kGammaFieldNumber;
const int Monitors_Item::kMinHorizontalRateFieldNumber;
const int Monitors_Item::kMaxHorizontalRateFieldNumber;
const int Monitors_Item::kMinVerticalRateFieldNumber;
const int Monitors_Item::kMaxVerticalRateFieldNumber;
const int Monitors_Item::kPixelClockFieldNumber;
const int Monitors_Item::kMaxPixelClockFieldNumber;
const int Monitors_Item::kInputSignalTypeFieldNumber;
const int Monitors_Item::kDefaultGtfSupportedFieldNumber;
const int Monitors_Item::kSuspendSupportedFieldNumber;
const int Monitors_Item::kStandbySupportedFieldNumber;
const int Monitors_Item::kActiveOffSupportedFieldNumber;
const int Monitors_Item::kPreferredTimingModeSupportedFieldNumber;
const int Monitors_Item::kSrgbSupportedFieldNumber;
const int Monitors_Item::kTimingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors_Item::Monitors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Monitors.Item)
}
Monitors_Item::Monitors_Item(const Monitors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      timings_(from.timings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_name().size() > 0) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitor_name().size() > 0) {
    monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
  }
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer_name().size() > 0) {
    manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
  }
  monitor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitor_id().size() > 0) {
    monitor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_id_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&edid_version_, &from.edid_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&srgb_supported_) -
    reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Monitors.Item)
}

void Monitors_Item::SharedCtor() {
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&edid_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srgb_supported_) -
      reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  _cached_size_ = 0;
}

Monitors_Item::~Monitors_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Monitors.Item)
  SharedDtor();
}

void Monitors_Item::SharedDtor() {
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Monitors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors_Item& Monitors_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Monitors_Item* Monitors_Item::New(::google::protobuf::Arena* arena) const {
  Monitors_Item* n = new Monitors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Monitors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timings_.Clear();
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&edid_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srgb_supported_) -
      reinterpret_cast<char*>(&edid_version_)) + sizeof(srgb_supported_));
  _internal_metadata_.Clear();
}

bool Monitors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Monitors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string system_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Monitors.Item.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitor_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Monitors.Item.monitor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer_name().data(), static_cast<int>(this->manufacturer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Monitors.Item.manufacturer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitor_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitor_id().data(), static_cast<int>(this->monitor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Monitors.Item.monitor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Monitors.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edid_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edid_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 edid_revision = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edid_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week_of_manufacture = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_of_manufacture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 year_of_manufacture = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_of_manufacture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_horizontal_image_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_horizontal_image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertical_image_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertical_image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 horizontal_resolution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vertical_resoulution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_resoulution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gamma = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_horizontal_rate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_horizontal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_horizontal_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_horizontal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_vertical_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_vertical_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_vertical_rate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_vertical_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pixel_clock = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixel_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_pixel_clock = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pixel_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Monitors.Item.InputSignalType input_signal_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_input_signal_type(static_cast< ::aspia::system_info::Monitors_Item_InputSignalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool default_gtf_supported = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_gtf_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool suspend_supported = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspend_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool standby_supported = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standby_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active_off_supported = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_off_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preferred_timing_mode_supported = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preferred_timing_mode_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool srgb_supported = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &srgb_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.Monitors.Item.Timing timings = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Monitors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Monitors.Item)
  return false;
#undef DO_
}

void Monitors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Monitors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_name = 1;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Monitors.Item.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_name(), output);
  }

  // string monitor_name = 2;
  if (this->monitor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Monitors.Item.monitor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monitor_name(), output);
  }

  // string manufacturer_name = 3;
  if (this->manufacturer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer_name().data(), static_cast<int>(this->manufacturer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Monitors.Item.manufacturer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer_name(), output);
  }

  // string monitor_id = 4;
  if (this->monitor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitor_id().data(), static_cast<int>(this->monitor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Monitors.Item.monitor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->monitor_id(), output);
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Monitors.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // int32 edid_version = 6;
  if (this->edid_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->edid_version(), output);
  }

  // int32 edid_revision = 7;
  if (this->edid_revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->edid_revision(), output);
  }

  // int32 week_of_manufacture = 8;
  if (this->week_of_manufacture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->week_of_manufacture(), output);
  }

  // int32 year_of_manufacture = 9;
  if (this->year_of_manufacture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->year_of_manufacture(), output);
  }

  // int32 max_horizontal_image_size = 10;
  if (this->max_horizontal_image_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_horizontal_image_size(), output);
  }

  // int32 max_vertical_image_size = 11;
  if (this->max_vertical_image_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_vertical_image_size(), output);
  }

  // int32 horizontal_resolution = 12;
  if (this->horizontal_resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->horizontal_resolution(), output);
  }

  // int32 vertical_resoulution = 13;
  if (this->vertical_resoulution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vertical_resoulution(), output);
  }

  // double gamma = 14;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->gamma(), output);
  }

  // int32 min_horizontal_rate = 15;
  if (this->min_horizontal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->min_horizontal_rate(), output);
  }

  // int32 max_horizontal_rate = 16;
  if (this->max_horizontal_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_horizontal_rate(), output);
  }

  // int32 min_vertical_rate = 17;
  if (this->min_vertical_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->min_vertical_rate(), output);
  }

  // int32 max_vertical_rate = 18;
  if (this->max_vertical_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_vertical_rate(), output);
  }

  // double pixel_clock = 19;
  if (this->pixel_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pixel_clock(), output);
  }

  // int32 max_pixel_clock = 20;
  if (this->max_pixel_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_pixel_clock(), output);
  }

  // .aspia.system_info.Monitors.Item.InputSignalType input_signal_type = 21;
  if (this->input_signal_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->input_signal_type(), output);
  }

  // bool default_gtf_supported = 22;
  if (this->default_gtf_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->default_gtf_supported(), output);
  }

  // bool suspend_supported = 23;
  if (this->suspend_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->suspend_supported(), output);
  }

  // bool standby_supported = 24;
  if (this->standby_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->standby_supported(), output);
  }

  // bool active_off_supported = 25;
  if (this->active_off_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->active_off_supported(), output);
  }

  // bool preferred_timing_mode_supported = 26;
  if (this->preferred_timing_mode_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->preferred_timing_mode_supported(), output);
  }

  // bool srgb_supported = 27;
  if (this->srgb_supported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->srgb_supported(), output);
  }

  // repeated .aspia.system_info.Monitors.Item.Timing timings = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->timings(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Monitors.Item)
}

size_t Monitors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Monitors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Monitors.Item.Timing timings = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->timings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timings(static_cast<int>(i)));
    }
  }

  // string system_name = 1;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  // string monitor_name = 2;
  if (this->monitor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitor_name());
  }

  // string manufacturer_name = 3;
  if (this->manufacturer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer_name());
  }

  // string monitor_id = 4;
  if (this->monitor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitor_id());
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // int32 edid_version = 6;
  if (this->edid_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edid_version());
  }

  // int32 edid_revision = 7;
  if (this->edid_revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->edid_revision());
  }

  // int32 week_of_manufacture = 8;
  if (this->week_of_manufacture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week_of_manufacture());
  }

  // int32 year_of_manufacture = 9;
  if (this->year_of_manufacture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year_of_manufacture());
  }

  // int32 max_horizontal_image_size = 10;
  if (this->max_horizontal_image_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_horizontal_image_size());
  }

  // int32 max_vertical_image_size = 11;
  if (this->max_vertical_image_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vertical_image_size());
  }

  // int32 horizontal_resolution = 12;
  if (this->horizontal_resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horizontal_resolution());
  }

  // int32 vertical_resoulution = 13;
  if (this->vertical_resoulution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertical_resoulution());
  }

  // double gamma = 14;
  if (this->gamma() != 0) {
    total_size += 1 + 8;
  }

  // int32 min_horizontal_rate = 15;
  if (this->min_horizontal_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_horizontal_rate());
  }

  // int32 max_horizontal_rate = 16;
  if (this->max_horizontal_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_horizontal_rate());
  }

  // int32 min_vertical_rate = 17;
  if (this->min_vertical_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_vertical_rate());
  }

  // int32 max_vertical_rate = 18;
  if (this->max_vertical_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_vertical_rate());
  }

  // double pixel_clock = 19;
  if (this->pixel_clock() != 0) {
    total_size += 2 + 8;
  }

  // int32 max_pixel_clock = 20;
  if (this->max_pixel_clock() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_pixel_clock());
  }

  // .aspia.system_info.Monitors.Item.InputSignalType input_signal_type = 21;
  if (this->input_signal_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_signal_type());
  }

  // bool default_gtf_supported = 22;
  if (this->default_gtf_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool suspend_supported = 23;
  if (this->suspend_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool standby_supported = 24;
  if (this->standby_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool active_off_supported = 25;
  if (this->active_off_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool preferred_timing_mode_supported = 26;
  if (this->preferred_timing_mode_supported() != 0) {
    total_size += 2 + 1;
  }

  // bool srgb_supported = 27;
  if (this->srgb_supported() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors_Item*>(&from));
}

void Monitors_Item::MergeFrom(const Monitors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Monitors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timings_.MergeFrom(from.timings_);
  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  if (from.monitor_name().size() > 0) {

    monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
  }
  if (from.manufacturer_name().size() > 0) {

    manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
  }
  if (from.monitor_id().size() > 0) {

    monitor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_id_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.edid_version() != 0) {
    set_edid_version(from.edid_version());
  }
  if (from.edid_revision() != 0) {
    set_edid_revision(from.edid_revision());
  }
  if (from.week_of_manufacture() != 0) {
    set_week_of_manufacture(from.week_of_manufacture());
  }
  if (from.year_of_manufacture() != 0) {
    set_year_of_manufacture(from.year_of_manufacture());
  }
  if (from.max_horizontal_image_size() != 0) {
    set_max_horizontal_image_size(from.max_horizontal_image_size());
  }
  if (from.max_vertical_image_size() != 0) {
    set_max_vertical_image_size(from.max_vertical_image_size());
  }
  if (from.horizontal_resolution() != 0) {
    set_horizontal_resolution(from.horizontal_resolution());
  }
  if (from.vertical_resoulution() != 0) {
    set_vertical_resoulution(from.vertical_resoulution());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.min_horizontal_rate() != 0) {
    set_min_horizontal_rate(from.min_horizontal_rate());
  }
  if (from.max_horizontal_rate() != 0) {
    set_max_horizontal_rate(from.max_horizontal_rate());
  }
  if (from.min_vertical_rate() != 0) {
    set_min_vertical_rate(from.min_vertical_rate());
  }
  if (from.max_vertical_rate() != 0) {
    set_max_vertical_rate(from.max_vertical_rate());
  }
  if (from.pixel_clock() != 0) {
    set_pixel_clock(from.pixel_clock());
  }
  if (from.max_pixel_clock() != 0) {
    set_max_pixel_clock(from.max_pixel_clock());
  }
  if (from.input_signal_type() != 0) {
    set_input_signal_type(from.input_signal_type());
  }
  if (from.default_gtf_supported() != 0) {
    set_default_gtf_supported(from.default_gtf_supported());
  }
  if (from.suspend_supported() != 0) {
    set_suspend_supported(from.suspend_supported());
  }
  if (from.standby_supported() != 0) {
    set_standby_supported(from.standby_supported());
  }
  if (from.active_off_supported() != 0) {
    set_active_off_supported(from.active_off_supported());
  }
  if (from.preferred_timing_mode_supported() != 0) {
    set_preferred_timing_mode_supported(from.preferred_timing_mode_supported());
  }
  if (from.srgb_supported() != 0) {
    set_srgb_supported(from.srgb_supported());
  }
}

void Monitors_Item::CopyFrom(const Monitors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Monitors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors_Item::IsInitialized() const {
  return true;
}

void Monitors_Item::Swap(Monitors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors_Item::InternalSwap(Monitors_Item* other) {
  using std::swap;
  timings_.InternalSwap(&other->timings_);
  system_name_.Swap(&other->system_name_);
  monitor_name_.Swap(&other->monitor_name_);
  manufacturer_name_.Swap(&other->manufacturer_name_);
  monitor_id_.Swap(&other->monitor_id_);
  serial_number_.Swap(&other->serial_number_);
  swap(edid_version_, other->edid_version_);
  swap(edid_revision_, other->edid_revision_);
  swap(week_of_manufacture_, other->week_of_manufacture_);
  swap(year_of_manufacture_, other->year_of_manufacture_);
  swap(max_horizontal_image_size_, other->max_horizontal_image_size_);
  swap(max_vertical_image_size_, other->max_vertical_image_size_);
  swap(horizontal_resolution_, other->horizontal_resolution_);
  swap(vertical_resoulution_, other->vertical_resoulution_);
  swap(gamma_, other->gamma_);
  swap(min_horizontal_rate_, other->min_horizontal_rate_);
  swap(max_horizontal_rate_, other->max_horizontal_rate_);
  swap(min_vertical_rate_, other->min_vertical_rate_);
  swap(max_vertical_rate_, other->max_vertical_rate_);
  swap(pixel_clock_, other->pixel_clock_);
  swap(max_pixel_clock_, other->max_pixel_clock_);
  swap(input_signal_type_, other->input_signal_type_);
  swap(default_gtf_supported_, other->default_gtf_supported_);
  swap(suspend_supported_, other->suspend_supported_);
  swap(standby_supported_, other->standby_supported_);
  swap(active_off_supported_, other->active_off_supported_);
  swap(preferred_timing_mode_supported_, other->preferred_timing_mode_supported_);
  swap(srgb_supported_, other->srgb_supported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors_Item::GetTypeName() const {
  return "aspia.system_info.Monitors.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Monitors_Item

// string system_name = 1;
void Monitors_Item::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Monitors_Item::system_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.system_name)
  return system_name_.GetNoArena();
}
void Monitors_Item::set_system_name(const ::std::string& value) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.system_name)
}
#if LANG_CXX11
void Monitors_Item::set_system_name(::std::string&& value) {
  
  system_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Monitors.Item.system_name)
}
#endif
void Monitors_Item::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Monitors.Item.system_name)
}
void Monitors_Item::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Monitors.Item.system_name)
}
::std::string* Monitors_Item::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.system_name)
  return system_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Monitors_Item::release_system_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Monitors.Item.system_name)
  
  return system_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Monitors_Item::set_allocated_system_name(::std::string* system_name) {
  if (system_name != NULL) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Monitors.Item.system_name)
}

// string monitor_name = 2;
void Monitors_Item::clear_monitor_name() {
  monitor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Monitors_Item::monitor_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.monitor_name)
  return monitor_name_.GetNoArena();
}
void Monitors_Item::set_monitor_name(const ::std::string& value) {
  
  monitor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.monitor_name)
}
#if LANG_CXX11
void Monitors_Item::set_monitor_name(::std::string&& value) {
  
  monitor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Monitors.Item.monitor_name)
}
#endif
void Monitors_Item::set_monitor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Monitors.Item.monitor_name)
}
void Monitors_Item::set_monitor_name(const char* value, size_t size) {
  
  monitor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Monitors.Item.monitor_name)
}
::std::string* Monitors_Item::mutable_monitor_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.monitor_name)
  return monitor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Monitors_Item::release_monitor_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Monitors.Item.monitor_name)
  
  return monitor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Monitors_Item::set_allocated_monitor_name(::std::string* monitor_name) {
  if (monitor_name != NULL) {
    
  } else {
    
  }
  monitor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Monitors.Item.monitor_name)
}

// string manufacturer_name = 3;
void Monitors_Item::clear_manufacturer_name() {
  manufacturer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Monitors_Item::manufacturer_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.manufacturer_name)
  return manufacturer_name_.GetNoArena();
}
void Monitors_Item::set_manufacturer_name(const ::std::string& value) {
  
  manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.manufacturer_name)
}
#if LANG_CXX11
void Monitors_Item::set_manufacturer_name(::std::string&& value) {
  
  manufacturer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Monitors.Item.manufacturer_name)
}
#endif
void Monitors_Item::set_manufacturer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Monitors.Item.manufacturer_name)
}
void Monitors_Item::set_manufacturer_name(const char* value, size_t size) {
  
  manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Monitors.Item.manufacturer_name)
}
::std::string* Monitors_Item::mutable_manufacturer_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.manufacturer_name)
  return manufacturer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Monitors_Item::release_manufacturer_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Monitors.Item.manufacturer_name)
  
  return manufacturer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Monitors_Item::set_allocated_manufacturer_name(::std::string* manufacturer_name) {
  if (manufacturer_name != NULL) {
    
  } else {
    
  }
  manufacturer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Monitors.Item.manufacturer_name)
}

// string monitor_id = 4;
void Monitors_Item::clear_monitor_id() {
  monitor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Monitors_Item::monitor_id() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.monitor_id)
  return monitor_id_.GetNoArena();
}
void Monitors_Item::set_monitor_id(const ::std::string& value) {
  
  monitor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.monitor_id)
}
#if LANG_CXX11
void Monitors_Item::set_monitor_id(::std::string&& value) {
  
  monitor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Monitors.Item.monitor_id)
}
#endif
void Monitors_Item::set_monitor_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Monitors.Item.monitor_id)
}
void Monitors_Item::set_monitor_id(const char* value, size_t size) {
  
  monitor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Monitors.Item.monitor_id)
}
::std::string* Monitors_Item::mutable_monitor_id() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.monitor_id)
  return monitor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Monitors_Item::release_monitor_id() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Monitors.Item.monitor_id)
  
  return monitor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Monitors_Item::set_allocated_monitor_id(::std::string* monitor_id) {
  if (monitor_id != NULL) {
    
  } else {
    
  }
  monitor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitor_id);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Monitors.Item.monitor_id)
}

// string serial_number = 5;
void Monitors_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Monitors_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.serial_number)
  return serial_number_.GetNoArena();
}
void Monitors_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.serial_number)
}
#if LANG_CXX11
void Monitors_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Monitors.Item.serial_number)
}
#endif
void Monitors_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Monitors.Item.serial_number)
}
void Monitors_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Monitors.Item.serial_number)
}
::std::string* Monitors_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Monitors_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Monitors.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Monitors_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Monitors.Item.serial_number)
}

// int32 edid_version = 6;
void Monitors_Item::clear_edid_version() {
  edid_version_ = 0;
}
::google::protobuf::int32 Monitors_Item::edid_version() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.edid_version)
  return edid_version_;
}
void Monitors_Item::set_edid_version(::google::protobuf::int32 value) {
  
  edid_version_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.edid_version)
}

// int32 edid_revision = 7;
void Monitors_Item::clear_edid_revision() {
  edid_revision_ = 0;
}
::google::protobuf::int32 Monitors_Item::edid_revision() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.edid_revision)
  return edid_revision_;
}
void Monitors_Item::set_edid_revision(::google::protobuf::int32 value) {
  
  edid_revision_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.edid_revision)
}

// int32 week_of_manufacture = 8;
void Monitors_Item::clear_week_of_manufacture() {
  week_of_manufacture_ = 0;
}
::google::protobuf::int32 Monitors_Item::week_of_manufacture() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.week_of_manufacture)
  return week_of_manufacture_;
}
void Monitors_Item::set_week_of_manufacture(::google::protobuf::int32 value) {
  
  week_of_manufacture_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.week_of_manufacture)
}

// int32 year_of_manufacture = 9;
void Monitors_Item::clear_year_of_manufacture() {
  year_of_manufacture_ = 0;
}
::google::protobuf::int32 Monitors_Item::year_of_manufacture() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.year_of_manufacture)
  return year_of_manufacture_;
}
void Monitors_Item::set_year_of_manufacture(::google::protobuf::int32 value) {
  
  year_of_manufacture_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.year_of_manufacture)
}

// int32 max_horizontal_image_size = 10;
void Monitors_Item::clear_max_horizontal_image_size() {
  max_horizontal_image_size_ = 0;
}
::google::protobuf::int32 Monitors_Item::max_horizontal_image_size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.max_horizontal_image_size)
  return max_horizontal_image_size_;
}
void Monitors_Item::set_max_horizontal_image_size(::google::protobuf::int32 value) {
  
  max_horizontal_image_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.max_horizontal_image_size)
}

// int32 max_vertical_image_size = 11;
void Monitors_Item::clear_max_vertical_image_size() {
  max_vertical_image_size_ = 0;
}
::google::protobuf::int32 Monitors_Item::max_vertical_image_size() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.max_vertical_image_size)
  return max_vertical_image_size_;
}
void Monitors_Item::set_max_vertical_image_size(::google::protobuf::int32 value) {
  
  max_vertical_image_size_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.max_vertical_image_size)
}

// int32 horizontal_resolution = 12;
void Monitors_Item::clear_horizontal_resolution() {
  horizontal_resolution_ = 0;
}
::google::protobuf::int32 Monitors_Item::horizontal_resolution() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.horizontal_resolution)
  return horizontal_resolution_;
}
void Monitors_Item::set_horizontal_resolution(::google::protobuf::int32 value) {
  
  horizontal_resolution_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.horizontal_resolution)
}

// int32 vertical_resoulution = 13;
void Monitors_Item::clear_vertical_resoulution() {
  vertical_resoulution_ = 0;
}
::google::protobuf::int32 Monitors_Item::vertical_resoulution() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.vertical_resoulution)
  return vertical_resoulution_;
}
void Monitors_Item::set_vertical_resoulution(::google::protobuf::int32 value) {
  
  vertical_resoulution_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.vertical_resoulution)
}

// double gamma = 14;
void Monitors_Item::clear_gamma() {
  gamma_ = 0;
}
double Monitors_Item::gamma() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.gamma)
  return gamma_;
}
void Monitors_Item::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.gamma)
}

// int32 min_horizontal_rate = 15;
void Monitors_Item::clear_min_horizontal_rate() {
  min_horizontal_rate_ = 0;
}
::google::protobuf::int32 Monitors_Item::min_horizontal_rate() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.min_horizontal_rate)
  return min_horizontal_rate_;
}
void Monitors_Item::set_min_horizontal_rate(::google::protobuf::int32 value) {
  
  min_horizontal_rate_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.min_horizontal_rate)
}

// int32 max_horizontal_rate = 16;
void Monitors_Item::clear_max_horizontal_rate() {
  max_horizontal_rate_ = 0;
}
::google::protobuf::int32 Monitors_Item::max_horizontal_rate() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.max_horizontal_rate)
  return max_horizontal_rate_;
}
void Monitors_Item::set_max_horizontal_rate(::google::protobuf::int32 value) {
  
  max_horizontal_rate_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.max_horizontal_rate)
}

// int32 min_vertical_rate = 17;
void Monitors_Item::clear_min_vertical_rate() {
  min_vertical_rate_ = 0;
}
::google::protobuf::int32 Monitors_Item::min_vertical_rate() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.min_vertical_rate)
  return min_vertical_rate_;
}
void Monitors_Item::set_min_vertical_rate(::google::protobuf::int32 value) {
  
  min_vertical_rate_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.min_vertical_rate)
}

// int32 max_vertical_rate = 18;
void Monitors_Item::clear_max_vertical_rate() {
  max_vertical_rate_ = 0;
}
::google::protobuf::int32 Monitors_Item::max_vertical_rate() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.max_vertical_rate)
  return max_vertical_rate_;
}
void Monitors_Item::set_max_vertical_rate(::google::protobuf::int32 value) {
  
  max_vertical_rate_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.max_vertical_rate)
}

// double pixel_clock = 19;
void Monitors_Item::clear_pixel_clock() {
  pixel_clock_ = 0;
}
double Monitors_Item::pixel_clock() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.pixel_clock)
  return pixel_clock_;
}
void Monitors_Item::set_pixel_clock(double value) {
  
  pixel_clock_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.pixel_clock)
}

// int32 max_pixel_clock = 20;
void Monitors_Item::clear_max_pixel_clock() {
  max_pixel_clock_ = 0;
}
::google::protobuf::int32 Monitors_Item::max_pixel_clock() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.max_pixel_clock)
  return max_pixel_clock_;
}
void Monitors_Item::set_max_pixel_clock(::google::protobuf::int32 value) {
  
  max_pixel_clock_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.max_pixel_clock)
}

// .aspia.system_info.Monitors.Item.InputSignalType input_signal_type = 21;
void Monitors_Item::clear_input_signal_type() {
  input_signal_type_ = 0;
}
::aspia::system_info::Monitors_Item_InputSignalType Monitors_Item::input_signal_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.input_signal_type)
  return static_cast< ::aspia::system_info::Monitors_Item_InputSignalType >(input_signal_type_);
}
void Monitors_Item::set_input_signal_type(::aspia::system_info::Monitors_Item_InputSignalType value) {
  
  input_signal_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.input_signal_type)
}

// bool default_gtf_supported = 22;
void Monitors_Item::clear_default_gtf_supported() {
  default_gtf_supported_ = false;
}
bool Monitors_Item::default_gtf_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.default_gtf_supported)
  return default_gtf_supported_;
}
void Monitors_Item::set_default_gtf_supported(bool value) {
  
  default_gtf_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.default_gtf_supported)
}

// bool suspend_supported = 23;
void Monitors_Item::clear_suspend_supported() {
  suspend_supported_ = false;
}
bool Monitors_Item::suspend_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.suspend_supported)
  return suspend_supported_;
}
void Monitors_Item::set_suspend_supported(bool value) {
  
  suspend_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.suspend_supported)
}

// bool standby_supported = 24;
void Monitors_Item::clear_standby_supported() {
  standby_supported_ = false;
}
bool Monitors_Item::standby_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.standby_supported)
  return standby_supported_;
}
void Monitors_Item::set_standby_supported(bool value) {
  
  standby_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.standby_supported)
}

// bool active_off_supported = 25;
void Monitors_Item::clear_active_off_supported() {
  active_off_supported_ = false;
}
bool Monitors_Item::active_off_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.active_off_supported)
  return active_off_supported_;
}
void Monitors_Item::set_active_off_supported(bool value) {
  
  active_off_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.active_off_supported)
}

// bool preferred_timing_mode_supported = 26;
void Monitors_Item::clear_preferred_timing_mode_supported() {
  preferred_timing_mode_supported_ = false;
}
bool Monitors_Item::preferred_timing_mode_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.preferred_timing_mode_supported)
  return preferred_timing_mode_supported_;
}
void Monitors_Item::set_preferred_timing_mode_supported(bool value) {
  
  preferred_timing_mode_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.preferred_timing_mode_supported)
}

// bool srgb_supported = 27;
void Monitors_Item::clear_srgb_supported() {
  srgb_supported_ = false;
}
bool Monitors_Item::srgb_supported() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.srgb_supported)
  return srgb_supported_;
}
void Monitors_Item::set_srgb_supported(bool value) {
  
  srgb_supported_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Monitors.Item.srgb_supported)
}

// repeated .aspia.system_info.Monitors.Item.Timing timings = 28;
int Monitors_Item::timings_size() const {
  return timings_.size();
}
void Monitors_Item::clear_timings() {
  timings_.Clear();
}
const ::aspia::system_info::Monitors_Item_Timing& Monitors_Item::timings(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.Item.timings)
  return timings_.Get(index);
}
::aspia::system_info::Monitors_Item_Timing* Monitors_Item::mutable_timings(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.Item.timings)
  return timings_.Mutable(index);
}
::aspia::system_info::Monitors_Item_Timing* Monitors_Item::add_timings() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Monitors.Item.timings)
  return timings_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Monitors_Item_Timing >*
Monitors_Item::mutable_timings() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Monitors.Item.timings)
  return &timings_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Monitors_Item_Timing >&
Monitors_Item::timings() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Monitors.Item.timings)
  return timings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Monitors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Monitors::Monitors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Monitors)
}
Monitors::Monitors(const Monitors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Monitors)
}

void Monitors::SharedCtor() {
  _cached_size_ = 0;
}

Monitors::~Monitors() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Monitors)
  SharedDtor();
}

void Monitors::SharedDtor() {
}

void Monitors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Monitors& Monitors::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Monitors* Monitors::New(::google::protobuf::Arena* arena) const {
  Monitors* n = new Monitors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Monitors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Monitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Monitors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Monitors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Monitors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Monitors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Monitors)
  return false;
#undef DO_
}

void Monitors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Monitors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Monitors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Monitors)
}

size_t Monitors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Monitors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Monitors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Monitors*>(&from));
}

void Monitors::MergeFrom(const Monitors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Monitors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Monitors::CopyFrom(const Monitors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Monitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitors::IsInitialized() const {
  return true;
}

void Monitors::Swap(Monitors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Monitors::InternalSwap(Monitors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Monitors::GetTypeName() const {
  return "aspia.system_info.Monitors";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Monitors

// repeated .aspia.system_info.Monitors.Item item = 1;
int Monitors::item_size() const {
  return item_.size();
}
void Monitors::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Monitors_Item& Monitors::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Monitors.item)
  return item_.Get(index);
}
::aspia::system_info::Monitors_Item* Monitors::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Monitors.item)
  return item_.Mutable(index);
}
::aspia::system_info::Monitors_Item* Monitors::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Monitors.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Monitors_Item >*
Monitors::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Monitors.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Monitors_Item >&
Monitors::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Monitors.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers_Item::kNameFieldNumber;
const int Printers_Item::kIsDefaultFieldNumber;
const int Printers_Item::kIsSharedFieldNumber;
const int Printers_Item::kShareNameFieldNumber;
const int Printers_Item::kPortNameFieldNumber;
const int Printers_Item::kDriverNameFieldNumber;
const int Printers_Item::kDeviceNameFieldNumber;
const int Printers_Item::kPrintProcessorFieldNumber;
const int Printers_Item::kDataTypeFieldNumber;
const int Printers_Item::kServerNameFieldNumber;
const int Printers_Item::kLocationFieldNumber;
const int Printers_Item::kCommentFieldNumber;
const int Printers_Item::kJobsCountFieldNumber;
const int Printers_Item::kPaperWidthFieldNumber;
const int Printers_Item::kPaperLengthFieldNumber;
const int Printers_Item::kPrintQualityFieldNumber;
const int Printers_Item::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers_Item::Printers_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Printers.Item)
}
Printers_Item::Printers_Item(const Printers_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_name().size() > 0) {
    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port_name().size() > 0) {
    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driver_name().size() > 0) {
    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.print_processor().size() > 0) {
    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_type().size() > 0) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Printers.Item)
}

void Printers_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _cached_size_ = 0;
}

Printers_Item::~Printers_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Printers.Item)
  SharedDtor();
}

void Printers_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Printers_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers_Item& Printers_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers_Item* Printers_Item::New(::google::protobuf::Arena* arena) const {
  Printers_Item* n = new Printers_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool Printers_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Printers.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_default = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_shared = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_name().data(), static_cast<int>(this->share_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.share_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_name().data(), static_cast<int>(this->port_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.port_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driver_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driver_name().data(), static_cast<int>(this->driver_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.driver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string print_processor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_processor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->print_processor().data(), static_cast<int>(this->print_processor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.print_processor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.data_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jobs_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_width = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_length = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 print_quality = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Printers.Item.Orientation orientation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orientation(static_cast< ::aspia::system_info::Printers_Item_Orientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Printers.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Printers.Item)
  return false;
#undef DO_
}

void Printers_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_default(), output);
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_shared(), output);
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_name().data(), static_cast<int>(this->share_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.share_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->share_name(), output);
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_name().data(), static_cast<int>(this->port_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.port_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->port_name(), output);
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver_name().data(), static_cast<int>(this->driver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.driver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->driver_name(), output);
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_name(), output);
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->print_processor().data(), static_cast<int>(this->print_processor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.print_processor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->print_processor(), output);
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->data_type(), output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // string location = 11;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->location(), output);
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->comment(), output);
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->jobs_count(), output);
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->paper_width(), output);
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->paper_length(), output);
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->print_quality(), output);
  }

  // .aspia.system_info.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->orientation(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Printers.Item)
}

size_t Printers_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Printers.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_name());
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_name());
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver_name());
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->print_processor());
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string location = 11;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    total_size += 1 + 1;
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    total_size += 1 + 1;
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jobs_count());
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_width());
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_length());
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->print_quality());
  }

  // .aspia.system_info.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers_Item*>(&from));
}

void Printers_Item::MergeFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Printers.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.share_name().size() > 0) {

    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  if (from.port_name().size() > 0) {

    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  if (from.driver_name().size() > 0) {

    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.print_processor().size() > 0) {

    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.is_default() != 0) {
    set_is_default(from.is_default());
  }
  if (from.is_shared() != 0) {
    set_is_shared(from.is_shared());
  }
  if (from.jobs_count() != 0) {
    set_jobs_count(from.jobs_count());
  }
  if (from.paper_width() != 0) {
    set_paper_width(from.paper_width());
  }
  if (from.paper_length() != 0) {
    set_paper_length(from.paper_length());
  }
  if (from.print_quality() != 0) {
    set_print_quality(from.print_quality());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void Printers_Item::CopyFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Printers.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers_Item::IsInitialized() const {
  return true;
}

void Printers_Item::Swap(Printers_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers_Item::InternalSwap(Printers_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  share_name_.Swap(&other->share_name_);
  port_name_.Swap(&other->port_name_);
  driver_name_.Swap(&other->driver_name_);
  device_name_.Swap(&other->device_name_);
  print_processor_.Swap(&other->print_processor_);
  data_type_.Swap(&other->data_type_);
  server_name_.Swap(&other->server_name_);
  location_.Swap(&other->location_);
  comment_.Swap(&other->comment_);
  swap(is_default_, other->is_default_);
  swap(is_shared_, other->is_shared_);
  swap(jobs_count_, other->jobs_count_);
  swap(paper_width_, other->paper_width_);
  swap(paper_length_, other->paper_length_);
  swap(print_quality_, other->print_quality_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers_Item::GetTypeName() const {
  return "aspia.system_info.Printers.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers_Item

// string name = 1;
void Printers_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.name)
  return name_.GetNoArena();
}
void Printers_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.name)
}
#if LANG_CXX11
void Printers_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.name)
}
#endif
void Printers_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.name)
}
void Printers_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.name)
}
::std::string* Printers_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.name)
}

// bool is_default = 2;
void Printers_Item::clear_is_default() {
  is_default_ = false;
}
bool Printers_Item::is_default() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.is_default)
  return is_default_;
}
void Printers_Item::set_is_default(bool value) {
  
  is_default_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.is_default)
}

// bool is_shared = 3;
void Printers_Item::clear_is_shared() {
  is_shared_ = false;
}
bool Printers_Item::is_shared() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.is_shared)
  return is_shared_;
}
void Printers_Item::set_is_shared(bool value) {
  
  is_shared_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.is_shared)
}

// string share_name = 4;
void Printers_Item::clear_share_name() {
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::share_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.share_name)
  return share_name_.GetNoArena();
}
void Printers_Item::set_share_name(const ::std::string& value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.share_name)
}
#if LANG_CXX11
void Printers_Item::set_share_name(::std::string&& value) {
  
  share_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.share_name)
}
#endif
void Printers_Item::set_share_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.share_name)
}
void Printers_Item::set_share_name(const char* value, size_t size) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.share_name)
}
::std::string* Printers_Item::mutable_share_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.share_name)
  return share_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_share_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.share_name)
  
  return share_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_share_name(::std::string* share_name) {
  if (share_name != NULL) {
    
  } else {
    
  }
  share_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.share_name)
}

// string port_name = 5;
void Printers_Item::clear_port_name() {
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::port_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.port_name)
  return port_name_.GetNoArena();
}
void Printers_Item::set_port_name(const ::std::string& value) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.port_name)
}
#if LANG_CXX11
void Printers_Item::set_port_name(::std::string&& value) {
  
  port_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.port_name)
}
#endif
void Printers_Item::set_port_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.port_name)
}
void Printers_Item::set_port_name(const char* value, size_t size) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.port_name)
}
::std::string* Printers_Item::mutable_port_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.port_name)
  return port_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_port_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.port_name)
  
  return port_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_port_name(::std::string* port_name) {
  if (port_name != NULL) {
    
  } else {
    
  }
  port_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.port_name)
}

// string driver_name = 6;
void Printers_Item::clear_driver_name() {
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::driver_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.driver_name)
  return driver_name_.GetNoArena();
}
void Printers_Item::set_driver_name(const ::std::string& value) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.driver_name)
}
#if LANG_CXX11
void Printers_Item::set_driver_name(::std::string&& value) {
  
  driver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.driver_name)
}
#endif
void Printers_Item::set_driver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.driver_name)
}
void Printers_Item::set_driver_name(const char* value, size_t size) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.driver_name)
}
::std::string* Printers_Item::mutable_driver_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.driver_name)
  return driver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_driver_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.driver_name)
  
  return driver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_driver_name(::std::string* driver_name) {
  if (driver_name != NULL) {
    
  } else {
    
  }
  driver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.driver_name)
}

// string device_name = 7;
void Printers_Item::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::device_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.device_name)
  return device_name_.GetNoArena();
}
void Printers_Item::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.device_name)
}
#if LANG_CXX11
void Printers_Item::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.device_name)
}
#endif
void Printers_Item::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.device_name)
}
void Printers_Item::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.device_name)
}
::std::string* Printers_Item::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_device_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.device_name)
}

// string print_processor = 8;
void Printers_Item::clear_print_processor() {
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::print_processor() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.print_processor)
  return print_processor_.GetNoArena();
}
void Printers_Item::set_print_processor(const ::std::string& value) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.print_processor)
}
#if LANG_CXX11
void Printers_Item::set_print_processor(::std::string&& value) {
  
  print_processor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.print_processor)
}
#endif
void Printers_Item::set_print_processor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.print_processor)
}
void Printers_Item::set_print_processor(const char* value, size_t size) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.print_processor)
}
::std::string* Printers_Item::mutable_print_processor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.print_processor)
  return print_processor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_print_processor() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.print_processor)
  
  return print_processor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_print_processor(::std::string* print_processor) {
  if (print_processor != NULL) {
    
  } else {
    
  }
  print_processor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), print_processor);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.print_processor)
}

// string data_type = 9;
void Printers_Item::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::data_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.data_type)
  return data_type_.GetNoArena();
}
void Printers_Item::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.data_type)
}
#if LANG_CXX11
void Printers_Item::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.data_type)
}
#endif
void Printers_Item::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.data_type)
}
void Printers_Item::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.data_type)
}
::std::string* Printers_Item::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_data_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.data_type)
}

// string server_name = 10;
void Printers_Item::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::server_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.server_name)
  return server_name_.GetNoArena();
}
void Printers_Item::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.server_name)
}
#if LANG_CXX11
void Printers_Item::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.server_name)
}
#endif
void Printers_Item::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.server_name)
}
void Printers_Item::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.server_name)
}
::std::string* Printers_Item::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_server_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.server_name)
}

// string location = 11;
void Printers_Item::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::location() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.location)
  return location_.GetNoArena();
}
void Printers_Item::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.location)
}
#if LANG_CXX11
void Printers_Item::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.location)
}
#endif
void Printers_Item::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.location)
}
void Printers_Item::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.location)
}
::std::string* Printers_Item::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_location() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.location)
}

// string comment = 12;
void Printers_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.comment)
  return comment_.GetNoArena();
}
void Printers_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.comment)
}
#if LANG_CXX11
void Printers_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.comment)
}
#endif
void Printers_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.comment)
}
void Printers_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.comment)
}
::std::string* Printers_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.comment)
}

// int32 jobs_count = 13;
void Printers_Item::clear_jobs_count() {
  jobs_count_ = 0;
}
::google::protobuf::int32 Printers_Item::jobs_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.jobs_count)
  return jobs_count_;
}
void Printers_Item::set_jobs_count(::google::protobuf::int32 value) {
  
  jobs_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.jobs_count)
}

// int32 paper_width = 14;
void Printers_Item::clear_paper_width() {
  paper_width_ = 0;
}
::google::protobuf::int32 Printers_Item::paper_width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.paper_width)
  return paper_width_;
}
void Printers_Item::set_paper_width(::google::protobuf::int32 value) {
  
  paper_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.paper_width)
}

// int32 paper_length = 15;
void Printers_Item::clear_paper_length() {
  paper_length_ = 0;
}
::google::protobuf::int32 Printers_Item::paper_length() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.paper_length)
  return paper_length_;
}
void Printers_Item::set_paper_length(::google::protobuf::int32 value) {
  
  paper_length_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.paper_length)
}

// int32 print_quality = 16;
void Printers_Item::clear_print_quality() {
  print_quality_ = 0;
}
::google::protobuf::int32 Printers_Item::print_quality() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.print_quality)
  return print_quality_;
}
void Printers_Item::set_print_quality(::google::protobuf::int32 value) {
  
  print_quality_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.print_quality)
}

// .aspia.system_info.Printers.Item.Orientation orientation = 17;
void Printers_Item::clear_orientation() {
  orientation_ = 0;
}
::aspia::system_info::Printers_Item_Orientation Printers_Item::orientation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.orientation)
  return static_cast< ::aspia::system_info::Printers_Item_Orientation >(orientation_);
}
void Printers_Item::set_orientation(::aspia::system_info::Printers_Item_Orientation value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers::Printers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Printers)
}
Printers::Printers(const Printers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Printers)
}

void Printers::SharedCtor() {
  _cached_size_ = 0;
}

Printers::~Printers() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Printers)
  SharedDtor();
}

void Printers::SharedDtor() {
}

void Printers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers& Printers::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers* Printers::New(::google::protobuf::Arena* arena) const {
  Printers* n = new Printers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Printers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Printers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Printers.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Printers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Printers)
  return false;
#undef DO_
}

void Printers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Printers.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Printers)
}

size_t Printers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Printers)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Printers.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers*>(&from));
}

void Printers::MergeFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Printers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Printers::CopyFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Printers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers::IsInitialized() const {
  return true;
}

void Printers::Swap(Printers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers::InternalSwap(Printers* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers::GetTypeName() const {
  return "aspia.system_info.Printers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers

// repeated .aspia.system_info.Printers.Item item = 1;
int Printers::item_size() const {
  return item_.size();
}
void Printers::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Printers_Item& Printers::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.item)
  return item_.Get(index);
}
::aspia::system_info::Printers_Item* Printers::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.item)
  return item_.Mutable(index);
}
::aspia::system_info::Printers_Item* Printers::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Printers.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Printers_Item >*
Printers::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Printers.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Printers_Item >&
Printers::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Printers.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services_Item::kNameFieldNumber;
const int Services_Item::kDisplayNameFieldNumber;
const int Services_Item::kDescriptionFieldNumber;
const int Services_Item::kStatusFieldNumber;
const int Services_Item::kStartupTypeFieldNumber;
const int Services_Item::kBinaryPathFieldNumber;
const int Services_Item::kStartNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services_Item::Services_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Services.Item)
}
Services_Item::Services_Item(const Services_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binary_path().size() > 0) {
    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_name().size() > 0) {
    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&startup_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Services.Item)
}

void Services_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _cached_size_ = 0;
}

Services_Item::~Services_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Services.Item)
  SharedDtor();
}

void Services_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Services_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services_Item& Services_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Services_Item* Services_Item::New(::google::protobuf::Arena* arena) const {
  Services_Item* n = new Services_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _internal_metadata_.Clear();
}

bool Services_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Services.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Services.Item.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::Services_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Services.Item.StartupType startup_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_startup_type(static_cast< ::aspia::system_info::Services_Item_StartupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string binary_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binary_path().data(), static_cast<int>(this->binary_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.binary_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_name().data(), static_cast<int>(this->start_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.start_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Services.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Services.Item)
  return false;
#undef DO_
}

void Services_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .aspia.system_info.Services.Item.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // .aspia.system_info.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->startup_type(), output);
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binary_path().data(), static_cast<int>(this->binary_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.binary_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->binary_path(), output);
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_name().data(), static_cast<int>(this->start_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.start_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->start_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Services.Item)
}

size_t Services_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Services.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binary_path());
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_name());
  }

  // .aspia.system_info.Services.Item.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.system_info.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->startup_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services_Item*>(&from));
}

void Services_Item::MergeFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Services.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.binary_path().size() > 0) {

    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  if (from.start_name().size() > 0) {

    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.startup_type() != 0) {
    set_startup_type(from.startup_type());
  }
}

void Services_Item::CopyFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Services.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services_Item::IsInitialized() const {
  return true;
}

void Services_Item::Swap(Services_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services_Item::InternalSwap(Services_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  description_.Swap(&other->description_);
  binary_path_.Swap(&other->binary_path_);
  start_name_.Swap(&other->start_name_);
  swap(status_, other->status_);
  swap(startup_type_, other->startup_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services_Item::GetTypeName() const {
  return "aspia.system_info.Services.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Services_Item

// string name = 1;
void Services_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.name)
  return name_.GetNoArena();
}
void Services_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.name)
}
#if LANG_CXX11
void Services_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.name)
}
#endif
void Services_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.name)
}
void Services_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.name)
}
::std::string* Services_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.name)
}

// string display_name = 2;
void Services_Item::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::display_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.display_name)
  return display_name_.GetNoArena();
}
void Services_Item::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.display_name)
}
#if LANG_CXX11
void Services_Item::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.display_name)
}
#endif
void Services_Item::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.display_name)
}
void Services_Item::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.display_name)
}
::std::string* Services_Item::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_display_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.display_name)
}

// string description = 3;
void Services_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.description)
  return description_.GetNoArena();
}
void Services_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.description)
}
#if LANG_CXX11
void Services_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.description)
}
#endif
void Services_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.description)
}
void Services_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.description)
}
::std::string* Services_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.description)
}

// .aspia.system_info.Services.Item.Status status = 4;
void Services_Item::clear_status() {
  status_ = 0;
}
::aspia::system_info::Services_Item_Status Services_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.status)
  return static_cast< ::aspia::system_info::Services_Item_Status >(status_);
}
void Services_Item::set_status(::aspia::system_info::Services_Item_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.status)
}

// .aspia.system_info.Services.Item.StartupType startup_type = 5;
void Services_Item::clear_startup_type() {
  startup_type_ = 0;
}
::aspia::system_info::Services_Item_StartupType Services_Item::startup_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.startup_type)
  return static_cast< ::aspia::system_info::Services_Item_StartupType >(startup_type_);
}
void Services_Item::set_startup_type(::aspia::system_info::Services_Item_StartupType value) {
  
  startup_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.startup_type)
}

// string binary_path = 6;
void Services_Item::clear_binary_path() {
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::binary_path() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.binary_path)
  return binary_path_.GetNoArena();
}
void Services_Item::set_binary_path(const ::std::string& value) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.binary_path)
}
#if LANG_CXX11
void Services_Item::set_binary_path(::std::string&& value) {
  
  binary_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.binary_path)
}
#endif
void Services_Item::set_binary_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.binary_path)
}
void Services_Item::set_binary_path(const char* value, size_t size) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.binary_path)
}
::std::string* Services_Item::mutable_binary_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.binary_path)
  return binary_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_binary_path() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.binary_path)
  
  return binary_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_binary_path(::std::string* binary_path) {
  if (binary_path != NULL) {
    
  } else {
    
  }
  binary_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.binary_path)
}

// string start_name = 7;
void Services_Item::clear_start_name() {
  start_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::start_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.start_name)
  return start_name_.GetNoArena();
}
void Services_Item::set_start_name(const ::std::string& value) {
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.start_name)
}
#if LANG_CXX11
void Services_Item::set_start_name(::std::string&& value) {
  
  start_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.start_name)
}
#endif
void Services_Item::set_start_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.start_name)
}
void Services_Item::set_start_name(const char* value, size_t size) {
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.start_name)
}
::std::string* Services_Item::mutable_start_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.start_name)
  return start_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_start_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.start_name)
  
  return start_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_start_name(::std::string* start_name) {
  if (start_name != NULL) {
    
  } else {
    
  }
  start_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.start_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services::Services()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Services)
}
Services::Services(const Services& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Services)
}

void Services::SharedCtor() {
  _cached_size_ = 0;
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Services)
  SharedDtor();
}

void Services::SharedDtor() {
}

void Services::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services& Services::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Services* Services::New(::google::protobuf::Arena* arena) const {
  Services* n = new Services;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Services)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Services.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Services.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Services)
}

size_t Services::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Services)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Services.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services*>(&from));
}

void Services::MergeFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Services)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Services::CopyFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {
  return true;
}

void Services::Swap(Services* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services::InternalSwap(Services* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services::GetTypeName() const {
  return "aspia.system_info.Services";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Services

// repeated .aspia.system_info.Services.Item item = 1;
int Services::item_size() const {
  return item_.size();
}
void Services::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Services_Item& Services::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.item)
  return item_.Get(index);
}
::aspia::system_info::Services_Item* Services::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.item)
  return item_.Mutable(index);
}
::aspia::system_info::Services_Item* Services::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Services.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Services_Item >*
Services::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Services.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Services_Item >&
Services::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Services.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item_IpAddress::kAddressFieldNumber;
const int NetworkCards_Item_IpAddress::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards.Item.IpAddress)
}
NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress(const NetworkCards_Item_IpAddress& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards.Item.IpAddress)
}

void NetworkCards_Item_IpAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkCards_Item_IpAddress::~NetworkCards_Item_IpAddress() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards.Item.IpAddress)
  SharedDtor();
}

void NetworkCards_Item_IpAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item_IpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item_IpAddress& NetworkCards_Item_IpAddress::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards_Item_IpAddress* NetworkCards_Item_IpAddress::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item_IpAddress* n = new NetworkCards_Item_IpAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item_IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NetworkCards_Item_IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards.Item.IpAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.IpAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.IpAddress.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards.Item.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards.Item.IpAddress)
  return false;
#undef DO_
}

void NetworkCards_Item_IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.IpAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.IpAddress.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards.Item.IpAddress)
}

size_t NetworkCards_Item_IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards.Item.IpAddress)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item_IpAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item_IpAddress*>(&from));
}

void NetworkCards_Item_IpAddress::MergeFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards.Item.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void NetworkCards_Item_IpAddress::CopyFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards.Item.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item_IpAddress::IsInitialized() const {
  return true;
}

void NetworkCards_Item_IpAddress::Swap(NetworkCards_Item_IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item_IpAddress::InternalSwap(NetworkCards_Item_IpAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  mask_.Swap(&other->mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item_IpAddress::GetTypeName() const {
  return "aspia.system_info.NetworkCards.Item.IpAddress";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards_Item_IpAddress

// string address = 1;
void NetworkCards_Item_IpAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item_IpAddress::address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.IpAddress.address)
  return address_.GetNoArena();
}
void NetworkCards_Item_IpAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
#if LANG_CXX11
void NetworkCards_Item_IpAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
#endif
void NetworkCards_Item_IpAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
void NetworkCards_Item_IpAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
::std::string* NetworkCards_Item_IpAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.IpAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item_IpAddress::release_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.IpAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item_IpAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.IpAddress.address)
}

// string mask = 2;
void NetworkCards_Item_IpAddress::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item_IpAddress::mask() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  return mask_.GetNoArena();
}
void NetworkCards_Item_IpAddress::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
#if LANG_CXX11
void NetworkCards_Item_IpAddress::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
#endif
void NetworkCards_Item_IpAddress::set_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
void NetworkCards_Item_IpAddress::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
::std::string* NetworkCards_Item_IpAddress::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item_IpAddress::release_mask() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item_IpAddress::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item::kAdapterNameFieldNumber;
const int NetworkCards_Item::kConnectionNameFieldNumber;
const int NetworkCards_Item::kInterfaceTypeFieldNumber;
const int NetworkCards_Item::kMtuFieldNumber;
const int NetworkCards_Item::kSpeedFieldNumber;
const int NetworkCards_Item::kMacAddressFieldNumber;
const int NetworkCards_Item::kIsWinsEnabledFieldNumber;
const int NetworkCards_Item::kPrimaryWinsServerFieldNumber;
const int NetworkCards_Item::kSecondaryWinsServerFieldNumber;
const int NetworkCards_Item::kIsDhcpEnabledFieldNumber;
const int NetworkCards_Item::kIpAddressFieldNumber;
const int NetworkCards_Item::kGatewayAddressFieldNumber;
const int NetworkCards_Item::kDhcpServerAddressFieldNumber;
const int NetworkCards_Item::kDnsServerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item::NetworkCards_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards.Item)
}
NetworkCards_Item::NetworkCards_Item(const NetworkCards_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ip_address_(from.ip_address_),
      gateway_address_(from.gateway_address_),
      dhcp_server_address_(from.dhcp_server_address_),
      dns_server_address_(from.dns_server_address_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter_name().size() > 0) {
    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_name().size() > 0) {
    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_address().size() > 0) {
    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_wins_server().size() > 0) {
    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_wins_server().size() > 0) {
    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  ::memcpy(&mtu_, &from.mtu_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dhcp_enabled_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards.Item)
}

void NetworkCards_Item::SharedCtor() {
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _cached_size_ = 0;
}

NetworkCards_Item::~NetworkCards_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards.Item)
  SharedDtor();
}

void NetworkCards_Item::SharedDtor() {
  adapter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item& NetworkCards_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards_Item* NetworkCards_Item::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item* n = new NetworkCards_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.Clear();
  gateway_address_.Clear();
  dhcp_server_address_.Clear();
  dns_server_address_.Clear();
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _internal_metadata_.Clear();
}

bool NetworkCards_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adapter_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.adapter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_name().data(), static_cast<int>(this->connection_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.connection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), static_cast<int>(this->mac_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.mac_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wins_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wins_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_wins_server = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.primary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_wins_server = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.secondary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateway_address = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateway_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_address(this->gateway_address_size() - 1).data(),
            static_cast<int>(this->gateway_address(this->gateway_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.gateway_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dhcp_server_address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dhcp_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dhcp_server_address(this->dhcp_server_address_size() - 1).data(),
            static_cast<int>(this->dhcp_server_address(this->dhcp_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.dhcp_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dns_server_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns_server_address(this->dns_server_address_size() - 1).data(),
            static_cast<int>(this->dns_server_address(this->dns_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.dns_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards.Item)
  return false;
#undef DO_
}

void NetworkCards_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.adapter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adapter_name(), output);
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.connection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interface_type(), output);
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mtu(), output);
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), static_cast<int>(this->mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mac_address(), output);
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wins_enabled(), output);
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.primary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->primary_wins_server(), output);
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.secondary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->secondary_wins_server(), output);
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dhcp_enabled(), output);
  }

  // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->ip_address(static_cast<int>(i)), output);
  }

  // repeated string gateway_address = 12;
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_address(i).data(), static_cast<int>(this->gateway_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.gateway_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gateway_address(i), output);
  }

  // repeated string dhcp_server_address = 13;
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dhcp_server_address(i).data(), static_cast<int>(this->dhcp_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.dhcp_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->dhcp_server_address(i), output);
  }

  // repeated string dns_server_address = 14;
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns_server_address(i).data(), static_cast<int>(this->dns_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.dns_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->dns_server_address(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards.Item)
}

size_t NetworkCards_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ip_address(static_cast<int>(i)));
    }
  }

  // repeated string gateway_address = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateway_address_size());
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateway_address(i));
  }

  // repeated string dhcp_server_address = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dhcp_server_address_size());
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dhcp_server_address(i));
  }

  // repeated string dns_server_address = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dns_server_address_size());
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_server_address(i));
  }

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter_name());
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_wins_server());
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_wins_server());
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtu());
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item*>(&from));
}

void NetworkCards_Item::MergeFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_address_.MergeFrom(from.ip_address_);
  gateway_address_.MergeFrom(from.gateway_address_);
  dhcp_server_address_.MergeFrom(from.dhcp_server_address_);
  dns_server_address_.MergeFrom(from.dns_server_address_);
  if (from.adapter_name().size() > 0) {

    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  if (from.connection_name().size() > 0) {

    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.primary_wins_server().size() > 0) {

    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  if (from.secondary_wins_server().size() > 0) {

    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_wins_enabled() != 0) {
    set_is_wins_enabled(from.is_wins_enabled());
  }
  if (from.is_dhcp_enabled() != 0) {
    set_is_dhcp_enabled(from.is_dhcp_enabled());
  }
}

void NetworkCards_Item::CopyFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item::IsInitialized() const {
  return true;
}

void NetworkCards_Item::Swap(NetworkCards_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item::InternalSwap(NetworkCards_Item* other) {
  using std::swap;
  ip_address_.InternalSwap(&other->ip_address_);
  gateway_address_.InternalSwap(&other->gateway_address_);
  dhcp_server_address_.InternalSwap(&other->dhcp_server_address_);
  dns_server_address_.InternalSwap(&other->dns_server_address_);
  adapter_name_.Swap(&other->adapter_name_);
  connection_name_.Swap(&other->connection_name_);
  interface_type_.Swap(&other->interface_type_);
  mac_address_.Swap(&other->mac_address_);
  primary_wins_server_.Swap(&other->primary_wins_server_);
  secondary_wins_server_.Swap(&other->secondary_wins_server_);
  swap(mtu_, other->mtu_);
  swap(speed_, other->speed_);
  swap(is_wins_enabled_, other->is_wins_enabled_);
  swap(is_dhcp_enabled_, other->is_dhcp_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item::GetTypeName() const {
  return "aspia.system_info.NetworkCards.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards_Item

// string adapter_name = 1;
void NetworkCards_Item::clear_adapter_name() {
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::adapter_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.adapter_name)
  return adapter_name_.GetNoArena();
}
void NetworkCards_Item::set_adapter_name(const ::std::string& value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.adapter_name)
}
#if LANG_CXX11
void NetworkCards_Item::set_adapter_name(::std::string&& value) {
  
  adapter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.adapter_name)
}
#endif
void NetworkCards_Item::set_adapter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.adapter_name)
}
void NetworkCards_Item::set_adapter_name(const char* value, size_t size) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.adapter_name)
}
::std::string* NetworkCards_Item::mutable_adapter_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.adapter_name)
  return adapter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_adapter_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.adapter_name)
  
  return adapter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_adapter_name(::std::string* adapter_name) {
  if (adapter_name != NULL) {
    
  } else {
    
  }
  adapter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.adapter_name)
}

// string connection_name = 2;
void NetworkCards_Item::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::connection_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.connection_name)
  return connection_name_.GetNoArena();
}
void NetworkCards_Item::set_connection_name(const ::std::string& value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.connection_name)
}
#if LANG_CXX11
void NetworkCards_Item::set_connection_name(::std::string&& value) {
  
  connection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.connection_name)
}
#endif
void NetworkCards_Item::set_connection_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.connection_name)
}
void NetworkCards_Item::set_connection_name(const char* value, size_t size) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.connection_name)
}
::std::string* NetworkCards_Item::mutable_connection_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.connection_name)
  return connection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_connection_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.connection_name)
  
  return connection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_connection_name(::std::string* connection_name) {
  if (connection_name != NULL) {
    
  } else {
    
  }
  connection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.connection_name)
}

// string interface_type = 3;
void NetworkCards_Item::clear_interface_type() {
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::interface_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.interface_type)
  return interface_type_.GetNoArena();
}
void NetworkCards_Item::set_interface_type(const ::std::string& value) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.interface_type)
}
#if LANG_CXX11
void NetworkCards_Item::set_interface_type(::std::string&& value) {
  
  interface_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.interface_type)
}
#endif
void NetworkCards_Item::set_interface_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.interface_type)
}
void NetworkCards_Item::set_interface_type(const char* value, size_t size) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.interface_type)
}
::std::string* NetworkCards_Item::mutable_interface_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.interface_type)
  return interface_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_interface_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.interface_type)
  
  return interface_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_interface_type(::std::string* interface_type) {
  if (interface_type != NULL) {
    
  } else {
    
  }
  interface_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.interface_type)
}

// uint32 mtu = 4;
void NetworkCards_Item::clear_mtu() {
  mtu_ = 0u;
}
::google::protobuf::uint32 NetworkCards_Item::mtu() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.mtu)
  return mtu_;
}
void NetworkCards_Item::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.mtu)
}

// uint32 speed = 5;
void NetworkCards_Item::clear_speed() {
  speed_ = 0u;
}
::google::protobuf::uint32 NetworkCards_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.speed)
  return speed_;
}
void NetworkCards_Item::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.speed)
}

// string mac_address = 6;
void NetworkCards_Item::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::mac_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.mac_address)
  return mac_address_.GetNoArena();
}
void NetworkCards_Item::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.mac_address)
}
#if LANG_CXX11
void NetworkCards_Item::set_mac_address(::std::string&& value) {
  
  mac_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.mac_address)
}
#endif
void NetworkCards_Item::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.mac_address)
}
void NetworkCards_Item::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.mac_address)
}
::std::string* NetworkCards_Item::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_mac_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.mac_address)
}

// bool is_wins_enabled = 7;
void NetworkCards_Item::clear_is_wins_enabled() {
  is_wins_enabled_ = false;
}
bool NetworkCards_Item::is_wins_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.is_wins_enabled)
  return is_wins_enabled_;
}
void NetworkCards_Item::set_is_wins_enabled(bool value) {
  
  is_wins_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.is_wins_enabled)
}

// string primary_wins_server = 8;
void NetworkCards_Item::clear_primary_wins_server() {
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::primary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.primary_wins_server)
  return primary_wins_server_.GetNoArena();
}
void NetworkCards_Item::set_primary_wins_server(const ::std::string& value) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
#if LANG_CXX11
void NetworkCards_Item::set_primary_wins_server(::std::string&& value) {
  
  primary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
#endif
void NetworkCards_Item::set_primary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
void NetworkCards_Item::set_primary_wins_server(const char* value, size_t size) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
::std::string* NetworkCards_Item::mutable_primary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.primary_wins_server)
  return primary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_primary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.primary_wins_server)
  
  return primary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_primary_wins_server(::std::string* primary_wins_server) {
  if (primary_wins_server != NULL) {
    
  } else {
    
  }
  primary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.primary_wins_server)
}

// string secondary_wins_server = 9;
void NetworkCards_Item::clear_secondary_wins_server() {
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::secondary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  return secondary_wins_server_.GetNoArena();
}
void NetworkCards_Item::set_secondary_wins_server(const ::std::string& value) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
#if LANG_CXX11
void NetworkCards_Item::set_secondary_wins_server(::std::string&& value) {
  
  secondary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
#endif
void NetworkCards_Item::set_secondary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
void NetworkCards_Item::set_secondary_wins_server(const char* value, size_t size) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
::std::string* NetworkCards_Item::mutable_secondary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  return secondary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_secondary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  
  return secondary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_secondary_wins_server(::std::string* secondary_wins_server) {
  if (secondary_wins_server != NULL) {
    
  } else {
    
  }
  secondary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}

// bool is_dhcp_enabled = 10;
void NetworkCards_Item::clear_is_dhcp_enabled() {
  is_dhcp_enabled_ = false;
}
bool NetworkCards_Item::is_dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.is_dhcp_enabled)
  return is_dhcp_enabled_;
}
void NetworkCards_Item::set_is_dhcp_enabled(bool value) {
  
  is_dhcp_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.is_dhcp_enabled)
}

// repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
int NetworkCards_Item::ip_address_size() const {
  return ip_address_.size();
}
void NetworkCards_Item::clear_ip_address() {
  ip_address_.Clear();
}
const ::aspia::system_info::NetworkCards_Item_IpAddress& NetworkCards_Item::ip_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Get(index);
}
::aspia::system_info::NetworkCards_Item_IpAddress* NetworkCards_Item::mutable_ip_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Mutable(index);
}
::aspia::system_info::NetworkCards_Item_IpAddress* NetworkCards_Item::add_ip_address() {
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item_IpAddress >*
NetworkCards_Item::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.ip_address)
  return &ip_address_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item_IpAddress >&
NetworkCards_Item::ip_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_;
}

// repeated string gateway_address = 12;
int NetworkCards_Item::gateway_address_size() const {
  return gateway_address_.size();
}
void NetworkCards_Item::clear_gateway_address() {
  gateway_address_.Clear();
}
const ::std::string& NetworkCards_Item::gateway_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_gateway_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Mutable(index);
}
void NetworkCards_Item::set_gateway_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_gateway_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_gateway_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.gateway_address)
}
void NetworkCards_Item::set_gateway_address(int index, const char* value, size_t size) {
  gateway_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.gateway_address)
}
::std::string* NetworkCards_Item::add_gateway_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Add();
}
void NetworkCards_Item::add_gateway_address(const ::std::string& value) {
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.gateway_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_gateway_address(::std::string&& value) {
  gateway_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.gateway_address)
}
#endif
void NetworkCards_Item::add_gateway_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.gateway_address)
}
void NetworkCards_Item::add_gateway_address(const char* value, size_t size) {
  gateway_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.gateway_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::gateway_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_gateway_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.gateway_address)
  return &gateway_address_;
}

// repeated string dhcp_server_address = 13;
int NetworkCards_Item::dhcp_server_address_size() const {
  return dhcp_server_address_.size();
}
void NetworkCards_Item::clear_dhcp_server_address() {
  dhcp_server_address_.Clear();
}
const ::std::string& NetworkCards_Item::dhcp_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_dhcp_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Mutable(index);
}
void NetworkCards_Item::set_dhcp_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_dhcp_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_dhcp_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
void NetworkCards_Item::set_dhcp_server_address(int index, const char* value, size_t size) {
  dhcp_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
::std::string* NetworkCards_Item::add_dhcp_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Add();
}
void NetworkCards_Item::add_dhcp_server_address(const ::std::string& value) {
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_dhcp_server_address(::std::string&& value) {
  dhcp_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
#endif
void NetworkCards_Item::add_dhcp_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
void NetworkCards_Item::add_dhcp_server_address(const char* value, size_t size) {
  dhcp_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::dhcp_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_dhcp_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return &dhcp_server_address_;
}

// repeated string dns_server_address = 14;
int NetworkCards_Item::dns_server_address_size() const {
  return dns_server_address_.size();
}
void NetworkCards_Item::clear_dns_server_address() {
  dns_server_address_.Clear();
}
const ::std::string& NetworkCards_Item::dns_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_dns_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Mutable(index);
}
void NetworkCards_Item::set_dns_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_dns_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_dns_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.dns_server_address)
}
void NetworkCards_Item::set_dns_server_address(int index, const char* value, size_t size) {
  dns_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.dns_server_address)
}
::std::string* NetworkCards_Item::add_dns_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Add();
}
void NetworkCards_Item::add_dns_server_address(const ::std::string& value) {
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dns_server_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_dns_server_address(::std::string&& value) {
  dns_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dns_server_address)
}
#endif
void NetworkCards_Item::add_dns_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.dns_server_address)
}
void NetworkCards_Item::add_dns_server_address(const char* value, size_t size) {
  dns_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.dns_server_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::dns_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_dns_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.dns_server_address)
  return &dns_server_address_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards::NetworkCards()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards)
}
NetworkCards::NetworkCards(const NetworkCards& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards)
}

void NetworkCards::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCards::~NetworkCards() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards)
  SharedDtor();
}

void NetworkCards::SharedDtor() {
}

void NetworkCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards& NetworkCards::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards* NetworkCards::New(::google::protobuf::Arena* arena) const {
  NetworkCards* n = new NetworkCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.NetworkCards.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards)
  return false;
#undef DO_
}

void NetworkCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.NetworkCards.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards)
}

size_t NetworkCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.NetworkCards.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards*>(&from));
}

void NetworkCards::MergeFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void NetworkCards::CopyFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards::IsInitialized() const {
  return true;
}

void NetworkCards::Swap(NetworkCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards::InternalSwap(NetworkCards* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards::GetTypeName() const {
  return "aspia.system_info.NetworkCards";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards

// repeated .aspia.system_info.NetworkCards.Item item = 1;
int NetworkCards::item_size() const {
  return item_.size();
}
void NetworkCards::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::NetworkCards_Item& NetworkCards::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.item)
  return item_.Get(index);
}
::aspia::system_info::NetworkCards_Item* NetworkCards::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.item)
  return item_.Mutable(index);
}
::aspia::system_info::NetworkCards_Item* NetworkCards::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item >*
NetworkCards::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item >&
NetworkCards::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections_Item::kProcessNameFieldNumber;
const int OpenConnections_Item::kLocalAddressFieldNumber;
const int OpenConnections_Item::kRemoteAddressFieldNumber;
const int OpenConnections_Item::kLocalPortFieldNumber;
const int OpenConnections_Item::kRemotePortFieldNumber;
const int OpenConnections_Item::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections_Item::OpenConnections_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.OpenConnections.Item)
}
OpenConnections_Item::OpenConnections_Item(const OpenConnections_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_address().size() > 0) {
    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_address().size() > 0) {
    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_port_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.OpenConnections.Item)
}

void OpenConnections_Item::SharedCtor() {
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_port_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  _cached_size_ = 0;
}

OpenConnections_Item::~OpenConnections_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.OpenConnections.Item)
  SharedDtor();
}

void OpenConnections_Item::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenConnections_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections_Item& OpenConnections_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenConnections_Item* OpenConnections_Item::New(::google::protobuf::Arena* arena) const {
  OpenConnections_Item* n = new OpenConnections_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_port_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  _internal_metadata_.Clear();
}

bool OpenConnections_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.OpenConnections.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string process_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), static_cast<int>(this->local_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.local_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_address().data(), static_cast<int>(this->remote_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.remote_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remote_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.OpenConnections.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.OpenConnections.Item)
  return false;
#undef DO_
}

void OpenConnections_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // string local_address = 2;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_address(), output);
  }

  // string remote_address = 3;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), static_cast<int>(this->remote_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.remote_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remote_address(), output);
  }

  // uint32 local_port = 4;
  if (this->local_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->local_port(), output);
  }

  // uint32 remote_port = 5;
  if (this->remote_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remote_port(), output);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.OpenConnections.Item)
}

size_t OpenConnections_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.OpenConnections.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // string local_address = 2;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // string remote_address = 3;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_address());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // uint32 local_port = 4;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_port());
  }

  // uint32 remote_port = 5;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remote_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections_Item*>(&from));
}

void OpenConnections_Item::MergeFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.OpenConnections.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {

    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.local_port() != 0) {
    set_local_port(from.local_port());
  }
  if (from.remote_port() != 0) {
    set_remote_port(from.remote_port());
  }
}

void OpenConnections_Item::CopyFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.OpenConnections.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections_Item::IsInitialized() const {
  return true;
}

void OpenConnections_Item::Swap(OpenConnections_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections_Item::InternalSwap(OpenConnections_Item* other) {
  using std::swap;
  process_name_.Swap(&other->process_name_);
  local_address_.Swap(&other->local_address_);
  remote_address_.Swap(&other->remote_address_);
  state_.Swap(&other->state_);
  swap(local_port_, other->local_port_);
  swap(remote_port_, other->remote_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections_Item::GetTypeName() const {
  return "aspia.system_info.OpenConnections.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenConnections_Item

// string process_name = 1;
void OpenConnections_Item::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::process_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.process_name)
  return process_name_.GetNoArena();
}
void OpenConnections_Item::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.process_name)
}
#if LANG_CXX11
void OpenConnections_Item::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.process_name)
}
#endif
void OpenConnections_Item::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.process_name)
}
void OpenConnections_Item::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.process_name)
}
::std::string* OpenConnections_Item::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_process_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.process_name)
}

// string local_address = 2;
void OpenConnections_Item::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::local_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.local_address)
  return local_address_.GetNoArena();
}
void OpenConnections_Item::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.local_address)
}
#if LANG_CXX11
void OpenConnections_Item::set_local_address(::std::string&& value) {
  
  local_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.local_address)
}
#endif
void OpenConnections_Item::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.local_address)
}
void OpenConnections_Item::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.local_address)
}
::std::string* OpenConnections_Item::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_local_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.local_address)
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.local_address)
}

// string remote_address = 3;
void OpenConnections_Item::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::remote_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.remote_address)
  return remote_address_.GetNoArena();
}
void OpenConnections_Item::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.remote_address)
}
#if LANG_CXX11
void OpenConnections_Item::set_remote_address(::std::string&& value) {
  
  remote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.remote_address)
}
#endif
void OpenConnections_Item::set_remote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.remote_address)
}
void OpenConnections_Item::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.remote_address)
}
::std::string* OpenConnections_Item::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_remote_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.remote_address)
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.remote_address)
}

// uint32 local_port = 4;
void OpenConnections_Item::clear_local_port() {
  local_port_ = 0u;
}
::google::protobuf::uint32 OpenConnections_Item::local_port() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.local_port)
  return local_port_;
}
void OpenConnections_Item::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.local_port)
}

// uint32 remote_port = 5;
void OpenConnections_Item::clear_remote_port() {
  remote_port_ = 0u;
}
::google::protobuf::uint32 OpenConnections_Item::remote_port() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.remote_port)
  return remote_port_;
}
void OpenConnections_Item::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.remote_port)
}

// string state = 6;
void OpenConnections_Item::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::state() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.state)
  return state_.GetNoArena();
}
void OpenConnections_Item::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.state)
}
#if LANG_CXX11
void OpenConnections_Item::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.state)
}
#endif
void OpenConnections_Item::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.state)
}
void OpenConnections_Item::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.state)
}
::std::string* OpenConnections_Item::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_state() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections::OpenConnections()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.OpenConnections)
}
OpenConnections::OpenConnections(const OpenConnections& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.OpenConnections)
}

void OpenConnections::SharedCtor() {
  _cached_size_ = 0;
}

OpenConnections::~OpenConnections() {
  // @@protoc_insertion_point(destructor:aspia.system_info.OpenConnections)
  SharedDtor();
}

void OpenConnections::SharedDtor() {
}

void OpenConnections::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections& OpenConnections::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenConnections* OpenConnections::New(::google::protobuf::Arena* arena) const {
  OpenConnections* n = new OpenConnections;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool OpenConnections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.OpenConnections)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.OpenConnections.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.OpenConnections)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.OpenConnections)
  return false;
#undef DO_
}

void OpenConnections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.OpenConnections.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.OpenConnections)
}

size_t OpenConnections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.OpenConnections)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.OpenConnections.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections*>(&from));
}

void OpenConnections::MergeFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.OpenConnections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void OpenConnections::CopyFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.OpenConnections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections::IsInitialized() const {
  return true;
}

void OpenConnections::Swap(OpenConnections* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections::InternalSwap(OpenConnections* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections::GetTypeName() const {
  return "aspia.system_info.OpenConnections";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenConnections

// repeated .aspia.system_info.OpenConnections.Item item = 1;
int OpenConnections::item_size() const {
  return item_.size();
}
void OpenConnections::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::OpenConnections_Item& OpenConnections::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.item)
  return item_.Get(index);
}
::aspia::system_info::OpenConnections_Item* OpenConnections::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.item)
  return item_.Mutable(index);
}
::aspia::system_info::OpenConnections_Item* OpenConnections::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.OpenConnections.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::OpenConnections_Item >*
OpenConnections::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.OpenConnections.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::OpenConnections_Item >&
OpenConnections::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.OpenConnections.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources_Item::kNameFieldNumber;
const int SharedResources_Item::kTypeFieldNumber;
const int SharedResources_Item::kDescriptionFieldNumber;
const int SharedResources_Item::kLocalPathFieldNumber;
const int SharedResources_Item::kCurrentUsesFieldNumber;
const int SharedResources_Item::kMaximumUsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources_Item::SharedResources_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.SharedResources.Item)
}
SharedResources_Item::SharedResources_Item(const SharedResources_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_uses_) -
    reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.SharedResources.Item)
}

void SharedResources_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _cached_size_ = 0;
}

SharedResources_Item::~SharedResources_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.SharedResources.Item)
  SharedDtor();
}

void SharedResources_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SharedResources_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources_Item& SharedResources_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedResources_Item* SharedResources_Item::New(::google::protobuf::Arena* arena) const {
  SharedResources_Item* n = new SharedResources_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _internal_metadata_.Clear();
}

bool SharedResources_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.SharedResources.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.SharedResources.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.SharedResources.Item.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::SharedResources_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.SharedResources.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.SharedResources.Item.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_uses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximum_uses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.SharedResources.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.SharedResources.Item)
  return false;
#undef DO_
}

void SharedResources_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.SharedResources.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.system_info.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.SharedResources.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string local_path = 4;
  if (this->local_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.SharedResources.Item.local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->local_path(), output);
  }

  // uint32 current_uses = 5;
  if (this->current_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_uses(), output);
  }

  // uint32 maximum_uses = 6;
  if (this->maximum_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maximum_uses(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.SharedResources.Item)
}

size_t SharedResources_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.SharedResources.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string local_path = 4;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // .aspia.system_info.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 current_uses = 5;
  if (this->current_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_uses());
  }

  // uint32 maximum_uses = 6;
  if (this->maximum_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_uses());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources_Item*>(&from));
}

void SharedResources_Item::MergeFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.SharedResources.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.current_uses() != 0) {
    set_current_uses(from.current_uses());
  }
  if (from.maximum_uses() != 0) {
    set_maximum_uses(from.maximum_uses());
  }
}

void SharedResources_Item::CopyFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.SharedResources.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources_Item::IsInitialized() const {
  return true;
}

void SharedResources_Item::Swap(SharedResources_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources_Item::InternalSwap(SharedResources_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  local_path_.Swap(&other->local_path_);
  swap(type_, other->type_);
  swap(current_uses_, other->current_uses_);
  swap(maximum_uses_, other->maximum_uses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources_Item::GetTypeName() const {
  return "aspia.system_info.SharedResources.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedResources_Item

// string name = 1;
void SharedResources_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharedResources_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.name)
  return name_.GetNoArena();
}
void SharedResources_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.name)
}
#if LANG_CXX11
void SharedResources_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.SharedResources.Item.name)
}
#endif
void SharedResources_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.SharedResources.Item.name)
}
void SharedResources_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.SharedResources.Item.name)
}
::std::string* SharedResources_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharedResources_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.SharedResources.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharedResources_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.SharedResources.Item.name)
}

// .aspia.system_info.SharedResources.Item.Type type = 2;
void SharedResources_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::SharedResources_Item_Type SharedResources_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.type)
  return static_cast< ::aspia::system_info::SharedResources_Item_Type >(type_);
}
void SharedResources_Item::set_type(::aspia::system_info::SharedResources_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.type)
}

// string description = 3;
void SharedResources_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharedResources_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.description)
  return description_.GetNoArena();
}
void SharedResources_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.description)
}
#if LANG_CXX11
void SharedResources_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.SharedResources.Item.description)
}
#endif
void SharedResources_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.SharedResources.Item.description)
}
void SharedResources_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.SharedResources.Item.description)
}
::std::string* SharedResources_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharedResources_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.system_info.SharedResources.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharedResources_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.SharedResources.Item.description)
}

// string local_path = 4;
void SharedResources_Item::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharedResources_Item::local_path() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.local_path)
  return local_path_.GetNoArena();
}
void SharedResources_Item::set_local_path(const ::std::string& value) {
  
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.local_path)
}
#if LANG_CXX11
void SharedResources_Item::set_local_path(::std::string&& value) {
  
  local_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.SharedResources.Item.local_path)
}
#endif
void SharedResources_Item::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.SharedResources.Item.local_path)
}
void SharedResources_Item::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.SharedResources.Item.local_path)
}
::std::string* SharedResources_Item::mutable_local_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.Item.local_path)
  return local_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharedResources_Item::release_local_path() {
  // @@protoc_insertion_point(field_release:aspia.system_info.SharedResources.Item.local_path)
  
  return local_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharedResources_Item::set_allocated_local_path(::std::string* local_path) {
  if (local_path != NULL) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.SharedResources.Item.local_path)
}

// uint32 current_uses = 5;
void SharedResources_Item::clear_current_uses() {
  current_uses_ = 0u;
}
::google::protobuf::uint32 SharedResources_Item::current_uses() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.current_uses)
  return current_uses_;
}
void SharedResources_Item::set_current_uses(::google::protobuf::uint32 value) {
  
  current_uses_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.current_uses)
}

// uint32 maximum_uses = 6;
void SharedResources_Item::clear_maximum_uses() {
  maximum_uses_ = 0u;
}
::google::protobuf::uint32 SharedResources_Item::maximum_uses() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.maximum_uses)
  return maximum_uses_;
}
void SharedResources_Item::set_maximum_uses(::google::protobuf::uint32 value) {
  
  maximum_uses_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.maximum_uses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources::SharedResources()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.SharedResources)
}
SharedResources::SharedResources(const SharedResources& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.SharedResources)
}

void SharedResources::SharedCtor() {
  _cached_size_ = 0;
}

SharedResources::~SharedResources() {
  // @@protoc_insertion_point(destructor:aspia.system_info.SharedResources)
  SharedDtor();
}

void SharedResources::SharedDtor() {
}

void SharedResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources& SharedResources::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedResources* SharedResources::New(::google::protobuf::Arena* arena) const {
  SharedResources* n = new SharedResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool SharedResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.SharedResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.SharedResources.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.SharedResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.SharedResources)
  return false;
#undef DO_
}

void SharedResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.SharedResources.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.SharedResources)
}

size_t SharedResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.SharedResources)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.SharedResources.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources*>(&from));
}

void SharedResources::MergeFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.SharedResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void SharedResources::CopyFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.SharedResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources::IsInitialized() const {
  return true;
}

void SharedResources::Swap(SharedResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources::InternalSwap(SharedResources* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources::GetTypeName() const {
  return "aspia.system_info.SharedResources";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedResources

// repeated .aspia.system_info.SharedResources.Item item = 1;
int SharedResources::item_size() const {
  return item_.size();
}
void SharedResources::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::SharedResources_Item& SharedResources::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.item)
  return item_.Get(index);
}
::aspia::system_info::SharedResources_Item* SharedResources::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.item)
  return item_.Mutable(index);
}
::aspia::system_info::SharedResources_Item* SharedResources::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.SharedResources.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::SharedResources_Item >*
SharedResources::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.SharedResources.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::SharedResources_Item >&
SharedResources::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.SharedResources.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes_Item::kDestonationFieldNumber;
const int Routes_Item::kMaskFieldNumber;
const int Routes_Item::kGatewayFieldNumber;
const int Routes_Item::kMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes_Item::Routes_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Routes.Item)
}
Routes_Item::Routes_Item(const Routes_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destonation().size() > 0) {
    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway().size() > 0) {
    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Routes.Item)
}

void Routes_Item::SharedCtor() {
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _cached_size_ = 0;
}

Routes_Item::~Routes_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Routes.Item)
  SharedDtor();
}

void Routes_Item::SharedDtor() {
  destonation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Routes_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes_Item& Routes_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Routes_Item* Routes_Item::New(::google::protobuf::Arena* arena) const {
  Routes_Item* n = new Routes_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destonation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _internal_metadata_.Clear();
}

bool Routes_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Routes.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destonation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destonation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destonation().data(), static_cast<int>(this->destonation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.destonation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), static_cast<int>(this->gateway().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.gateway"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 metric = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Routes.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Routes.Item)
  return false;
#undef DO_
}

void Routes_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destonation().data(), static_cast<int>(this->destonation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.destonation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destonation(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), static_cast<int>(this->gateway().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway(), output);
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->metric(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Routes.Item)
}

size_t Routes_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Routes.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destonation());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metric());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes_Item*>(&from));
}

void Routes_Item::MergeFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Routes.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destonation().size() > 0) {

    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from.gateway().size() > 0) {

    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  if (from.metric() != 0) {
    set_metric(from.metric());
  }
}

void Routes_Item::CopyFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Routes.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes_Item::IsInitialized() const {
  return true;
}

void Routes_Item::Swap(Routes_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes_Item::InternalSwap(Routes_Item* other) {
  using std::swap;
  destonation_.Swap(&other->destonation_);
  mask_.Swap(&other->mask_);
  gateway_.Swap(&other->gateway_);
  swap(metric_, other->metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes_Item::GetTypeName() const {
  return "aspia.system_info.Routes.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Routes_Item

// string destonation = 1;
void Routes_Item::clear_destonation() {
  destonation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::destonation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.destonation)
  return destonation_.GetNoArena();
}
void Routes_Item::set_destonation(const ::std::string& value) {
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.destonation)
}
#if LANG_CXX11
void Routes_Item::set_destonation(::std::string&& value) {
  
  destonation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.destonation)
}
#endif
void Routes_Item::set_destonation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.destonation)
}
void Routes_Item::set_destonation(const char* value, size_t size) {
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.destonation)
}
::std::string* Routes_Item::mutable_destonation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.destonation)
  return destonation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_destonation() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.destonation)
  
  return destonation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_destonation(::std::string* destonation) {
  if (destonation != NULL) {
    
  } else {
    
  }
  destonation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destonation);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.destonation)
}

// string mask = 2;
void Routes_Item::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::mask() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.mask)
  return mask_.GetNoArena();
}
void Routes_Item::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.mask)
}
#if LANG_CXX11
void Routes_Item::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.mask)
}
#endif
void Routes_Item::set_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.mask)
}
void Routes_Item::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.mask)
}
::std::string* Routes_Item::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_mask() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.mask)
}

// string gateway = 3;
void Routes_Item::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::gateway() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.gateway)
  return gateway_.GetNoArena();
}
void Routes_Item::set_gateway(const ::std::string& value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.gateway)
}
#if LANG_CXX11
void Routes_Item::set_gateway(::std::string&& value) {
  
  gateway_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.gateway)
}
#endif
void Routes_Item::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.gateway)
}
void Routes_Item::set_gateway(const char* value, size_t size) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.gateway)
}
::std::string* Routes_Item::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.gateway)
  return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_gateway() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.gateway)
  
  return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.gateway)
}

// uint32 metric = 4;
void Routes_Item::clear_metric() {
  metric_ = 0u;
}
::google::protobuf::uint32 Routes_Item::metric() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.metric)
  return metric_;
}
void Routes_Item::set_metric(::google::protobuf::uint32 value) {
  
  metric_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.metric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes::Routes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Routes)
}
Routes::Routes(const Routes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Routes)
}

void Routes::SharedCtor() {
  _cached_size_ = 0;
}

Routes::~Routes() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Routes)
  SharedDtor();
}

void Routes::SharedDtor() {
}

void Routes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes& Routes::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Routes* Routes::New(::google::protobuf::Arena* arena) const {
  Routes* n = new Routes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Routes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Routes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Routes.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Routes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Routes)
  return false;
#undef DO_
}

void Routes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Routes.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Routes)
}

size_t Routes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Routes)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Routes.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes*>(&from));
}

void Routes::MergeFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Routes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Routes::CopyFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Routes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes::IsInitialized() const {
  return true;
}

void Routes::Swap(Routes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes::InternalSwap(Routes* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes::GetTypeName() const {
  return "aspia.system_info.Routes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Routes

// repeated .aspia.system_info.Routes.Item item = 1;
int Routes::item_size() const {
  return item_.size();
}
void Routes::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Routes_Item& Routes::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.item)
  return item_.Get(index);
}
::aspia::system_info::Routes_Item* Routes::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.item)
  return item_.Mutable(index);
}
::aspia::system_info::Routes_Item* Routes::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Routes.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Routes_Item >*
Routes::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Routes.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Routes_Item >&
Routes::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Routes.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users_Item::kNameFieldNumber;
const int Users_Item::kFullNameFieldNumber;
const int Users_Item::kCommentFieldNumber;
const int Users_Item::kIsDisabledFieldNumber;
const int Users_Item::kIsPasswordCantChangeFieldNumber;
const int Users_Item::kIsPasswordExpiredFieldNumber;
const int Users_Item::kIsDontExpirePasswordFieldNumber;
const int Users_Item::kIsLockoutFieldNumber;
const int Users_Item::kNumberLogonsFieldNumber;
const int Users_Item::kBadPasswordCountFieldNumber;
const int Users_Item::kLastLogonTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users_Item::Users_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Users.Item)
}
Users_Item::Users_Item(const Users_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_name().size() > 0) {
    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&is_disabled_, &from.is_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_logon_time_) -
    reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Users.Item)
}

void Users_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_logon_time_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  _cached_size_ = 0;
}

Users_Item::~Users_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Users.Item)
  SharedDtor();
}

void Users_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Users_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users_Item& Users_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Users_Item* Users_Item::New(::google::protobuf::Arena* arena) const {
  Users_Item* n = new Users_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_logon_time_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  _internal_metadata_.Clear();
}

bool Users_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Users.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string full_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), static_cast<int>(this->full_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.full_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_disabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_cant_change = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_cant_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_expired = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dont_expire_password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dont_expire_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_lockout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_logons = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_logons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bad_password_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bad_password_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_logon_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logon_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Users.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Users.Item)
  return false;
#undef DO_
}

void Users_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_name(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // bool is_disabled = 4;
  if (this->is_disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
  }

  // bool is_password_cant_change = 5;
  if (this->is_password_cant_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_password_cant_change(), output);
  }

  // bool is_password_expired = 6;
  if (this->is_password_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_password_expired(), output);
  }

  // bool is_dont_expire_password = 7;
  if (this->is_dont_expire_password() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_dont_expire_password(), output);
  }

  // bool is_lockout = 8;
  if (this->is_lockout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_lockout(), output);
  }

  // uint32 number_logons = 9;
  if (this->number_logons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->number_logons(), output);
  }

  // uint32 bad_password_count = 10;
  if (this->bad_password_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bad_password_count(), output);
  }

  // int64 last_logon_time = 11;
  if (this->last_logon_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_logon_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Users.Item)
}

size_t Users_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Users.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // bool is_disabled = 4;
  if (this->is_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_cant_change = 5;
  if (this->is_password_cant_change() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_expired = 6;
  if (this->is_password_expired() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dont_expire_password = 7;
  if (this->is_dont_expire_password() != 0) {
    total_size += 1 + 1;
  }

  // bool is_lockout = 8;
  if (this->is_lockout() != 0) {
    total_size += 1 + 1;
  }

  // uint32 number_logons = 9;
  if (this->number_logons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_logons());
  }

  // uint32 bad_password_count = 10;
  if (this->bad_password_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bad_password_count());
  }

  // int64 last_logon_time = 11;
  if (this->last_logon_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_logon_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users_Item*>(&from));
}

void Users_Item::MergeFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Users.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.full_name().size() > 0) {

    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.is_disabled() != 0) {
    set_is_disabled(from.is_disabled());
  }
  if (from.is_password_cant_change() != 0) {
    set_is_password_cant_change(from.is_password_cant_change());
  }
  if (from.is_password_expired() != 0) {
    set_is_password_expired(from.is_password_expired());
  }
  if (from.is_dont_expire_password() != 0) {
    set_is_dont_expire_password(from.is_dont_expire_password());
  }
  if (from.is_lockout() != 0) {
    set_is_lockout(from.is_lockout());
  }
  if (from.number_logons() != 0) {
    set_number_logons(from.number_logons());
  }
  if (from.bad_password_count() != 0) {
    set_bad_password_count(from.bad_password_count());
  }
  if (from.last_logon_time() != 0) {
    set_last_logon_time(from.last_logon_time());
  }
}

void Users_Item::CopyFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Users.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users_Item::IsInitialized() const {
  return true;
}

void Users_Item::Swap(Users_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users_Item::InternalSwap(Users_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  full_name_.Swap(&other->full_name_);
  comment_.Swap(&other->comment_);
  swap(is_disabled_, other->is_disabled_);
  swap(is_password_cant_change_, other->is_password_cant_change_);
  swap(is_password_expired_, other->is_password_expired_);
  swap(is_dont_expire_password_, other->is_dont_expire_password_);
  swap(is_lockout_, other->is_lockout_);
  swap(number_logons_, other->number_logons_);
  swap(bad_password_count_, other->bad_password_count_);
  swap(last_logon_time_, other->last_logon_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users_Item::GetTypeName() const {
  return "aspia.system_info.Users.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Users_Item

// string name = 1;
void Users_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.name)
  return name_.GetNoArena();
}
void Users_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.name)
}
#if LANG_CXX11
void Users_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.name)
}
#endif
void Users_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.name)
}
void Users_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.name)
}
::std::string* Users_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.name)
}

// string full_name = 2;
void Users_Item::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::full_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.full_name)
  return full_name_.GetNoArena();
}
void Users_Item::set_full_name(const ::std::string& value) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.full_name)
}
#if LANG_CXX11
void Users_Item::set_full_name(::std::string&& value) {
  
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.full_name)
}
#endif
void Users_Item::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.full_name)
}
void Users_Item::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.full_name)
}
::std::string* Users_Item::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_full_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.full_name)
  
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.full_name)
}

// string comment = 3;
void Users_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.comment)
  return comment_.GetNoArena();
}
void Users_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.comment)
}
#if LANG_CXX11
void Users_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.comment)
}
#endif
void Users_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.comment)
}
void Users_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.comment)
}
::std::string* Users_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.comment)
}

// bool is_disabled = 4;
void Users_Item::clear_is_disabled() {
  is_disabled_ = false;
}
bool Users_Item::is_disabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_disabled)
  return is_disabled_;
}
void Users_Item::set_is_disabled(bool value) {
  
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_disabled)
}

// bool is_password_cant_change = 5;
void Users_Item::clear_is_password_cant_change() {
  is_password_cant_change_ = false;
}
bool Users_Item::is_password_cant_change() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_password_cant_change)
  return is_password_cant_change_;
}
void Users_Item::set_is_password_cant_change(bool value) {
  
  is_password_cant_change_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_password_cant_change)
}

// bool is_password_expired = 6;
void Users_Item::clear_is_password_expired() {
  is_password_expired_ = false;
}
bool Users_Item::is_password_expired() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_password_expired)
  return is_password_expired_;
}
void Users_Item::set_is_password_expired(bool value) {
  
  is_password_expired_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_password_expired)
}

// bool is_dont_expire_password = 7;
void Users_Item::clear_is_dont_expire_password() {
  is_dont_expire_password_ = false;
}
bool Users_Item::is_dont_expire_password() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_dont_expire_password)
  return is_dont_expire_password_;
}
void Users_Item::set_is_dont_expire_password(bool value) {
  
  is_dont_expire_password_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_dont_expire_password)
}

// bool is_lockout = 8;
void Users_Item::clear_is_lockout() {
  is_lockout_ = false;
}
bool Users_Item::is_lockout() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_lockout)
  return is_lockout_;
}
void Users_Item::set_is_lockout(bool value) {
  
  is_lockout_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_lockout)
}

// uint32 number_logons = 9;
void Users_Item::clear_number_logons() {
  number_logons_ = 0u;
}
::google::protobuf::uint32 Users_Item::number_logons() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.number_logons)
  return number_logons_;
}
void Users_Item::set_number_logons(::google::protobuf::uint32 value) {
  
  number_logons_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.number_logons)
}

// uint32 bad_password_count = 10;
void Users_Item::clear_bad_password_count() {
  bad_password_count_ = 0u;
}
::google::protobuf::uint32 Users_Item::bad_password_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.bad_password_count)
  return bad_password_count_;
}
void Users_Item::set_bad_password_count(::google::protobuf::uint32 value) {
  
  bad_password_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.bad_password_count)
}

// int64 last_logon_time = 11;
void Users_Item::clear_last_logon_time() {
  last_logon_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Users_Item::last_logon_time() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.last_logon_time)
  return last_logon_time_;
}
void Users_Item::set_last_logon_time(::google::protobuf::int64 value) {
  
  last_logon_time_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.last_logon_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users::Users()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Users)
}
Users::Users(const Users& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Users)
}

void Users::SharedCtor() {
  _cached_size_ = 0;
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Users)
  SharedDtor();
}

void Users::SharedDtor() {
}

void Users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users& Users::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Users* Users::New(::google::protobuf::Arena* arena) const {
  Users* n = new Users;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Users)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Users.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Users)
  return false;
#undef DO_
}

void Users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Users.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Users)
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Users)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Users.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users*>(&from));
}

void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::Swap(Users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users::InternalSwap(Users* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users::GetTypeName() const {
  return "aspia.system_info.Users";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Users

// repeated .aspia.system_info.Users.Item item = 1;
int Users::item_size() const {
  return item_.size();
}
void Users::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Users_Item& Users::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.item)
  return item_.Get(index);
}
::aspia::system_info::Users_Item* Users::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.item)
  return item_.Mutable(index);
}
::aspia::system_info::Users_Item* Users::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Users.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Users_Item >*
Users::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Users.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Users_Item >&
Users::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Users.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups_Item::kNameFieldNumber;
const int UserGroups_Item::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups_Item::UserGroups_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.UserGroups.Item)
}
UserGroups_Item::UserGroups_Item(const UserGroups_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.UserGroups.Item)
}

void UserGroups_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserGroups_Item::~UserGroups_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.UserGroups.Item)
  SharedDtor();
}

void UserGroups_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserGroups_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups_Item& UserGroups_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGroups_Item* UserGroups_Item::New(::google::protobuf::Arena* arena) const {
  UserGroups_Item* n = new UserGroups_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserGroups_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.UserGroups.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.UserGroups.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.UserGroups.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.UserGroups.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.UserGroups.Item)
  return false;
#undef DO_
}

void UserGroups_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.UserGroups.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.UserGroups.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.UserGroups.Item)
}

size_t UserGroups_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.UserGroups.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups_Item*>(&from));
}

void UserGroups_Item::MergeFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.UserGroups.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
}

void UserGroups_Item::CopyFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.UserGroups.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups_Item::IsInitialized() const {
  return true;
}

void UserGroups_Item::Swap(UserGroups_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups_Item::InternalSwap(UserGroups_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  comment_.Swap(&other->comment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups_Item::GetTypeName() const {
  return "aspia.system_info.UserGroups.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGroups_Item

// string name = 1;
void UserGroups_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserGroups_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.Item.name)
  return name_.GetNoArena();
}
void UserGroups_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.UserGroups.Item.name)
}
#if LANG_CXX11
void UserGroups_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.UserGroups.Item.name)
}
#endif
void UserGroups_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.UserGroups.Item.name)
}
void UserGroups_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.UserGroups.Item.name)
}
::std::string* UserGroups_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGroups_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.UserGroups.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGroups_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.UserGroups.Item.name)
}

// string comment = 2;
void UserGroups_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserGroups_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.Item.comment)
  return comment_.GetNoArena();
}
void UserGroups_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.UserGroups.Item.comment)
}
#if LANG_CXX11
void UserGroups_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.UserGroups.Item.comment)
}
#endif
void UserGroups_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.UserGroups.Item.comment)
}
void UserGroups_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.UserGroups.Item.comment)
}
::std::string* UserGroups_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGroups_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.UserGroups.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGroups_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.UserGroups.Item.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups::UserGroups()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.UserGroups)
}
UserGroups::UserGroups(const UserGroups& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.UserGroups)
}

void UserGroups::SharedCtor() {
  _cached_size_ = 0;
}

UserGroups::~UserGroups() {
  // @@protoc_insertion_point(destructor:aspia.system_info.UserGroups)
  SharedDtor();
}

void UserGroups::SharedDtor() {
}

void UserGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups& UserGroups::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGroups* UserGroups::New(::google::protobuf::Arena* arena) const {
  UserGroups* n = new UserGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool UserGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.UserGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.UserGroups.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.UserGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.UserGroups)
  return false;
#undef DO_
}

void UserGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.UserGroups.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.UserGroups)
}

size_t UserGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.UserGroups)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.UserGroups.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups*>(&from));
}

void UserGroups::MergeFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.UserGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void UserGroups::CopyFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.UserGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups::IsInitialized() const {
  return true;
}

void UserGroups::Swap(UserGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups::InternalSwap(UserGroups* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups::GetTypeName() const {
  return "aspia.system_info.UserGroups";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGroups

// repeated .aspia.system_info.UserGroups.Item item = 1;
int UserGroups::item_size() const {
  return item_.size();
}
void UserGroups::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::UserGroups_Item& UserGroups::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.item)
  return item_.Get(index);
}
::aspia::system_info::UserGroups_Item* UserGroups::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.item)
  return item_.Mutable(index);
}
::aspia::system_info::UserGroups_Item* UserGroups::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.UserGroups.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::UserGroups_Item >*
UserGroups::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.UserGroups.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::UserGroups_Item >&
UserGroups::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.UserGroups.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions_Item::kUserNameFieldNumber;
const int Sessions_Item::kDomainNameFieldNumber;
const int Sessions_Item::kSessionIdFieldNumber;
const int Sessions_Item::kConnectStateFieldNumber;
const int Sessions_Item::kClientNameFieldNumber;
const int Sessions_Item::kWinstationNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions_Item::Sessions_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Sessions.Item)
}
Sessions_Item::Sessions_Item(const Sessions_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_name().size() > 0) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  connect_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connect_state().size() > 0) {
    connect_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_state_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_name().size() > 0) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.winstation_name().size() > 0) {
    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Sessions.Item)
}

void Sessions_Item::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  _cached_size_ = 0;
}

Sessions_Item::~Sessions_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Sessions.Item)
  SharedDtor();
}

void Sessions_Item::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sessions_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions_Item& Sessions_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sessions_Item* Sessions_Item::New(::google::protobuf::Arena* arena) const {
  Sessions_Item* n = new Sessions_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Sessions_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Sessions.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_name().data(), static_cast<int>(this->domain_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connect_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connect_state().data(), static_cast<int>(this->connect_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.connect_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_name().data(), static_cast<int>(this->client_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.client_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string winstation_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winstation_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.winstation_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Sessions.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Sessions.Item)
  return false;
#undef DO_
}

void Sessions_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), static_cast<int>(this->domain_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_name(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // string connect_state = 4;
  if (this->connect_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_state().data(), static_cast<int>(this->connect_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.connect_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connect_state(), output);
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_name(), output);
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.winstation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->winstation_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Sessions.Item)
}

size_t Sessions_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Sessions.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_name());
  }

  // string connect_state = 4;
  if (this->connect_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connect_state());
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_name());
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->winstation_name());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions_Item*>(&from));
}

void Sessions_Item::MergeFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Sessions.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.domain_name().size() > 0) {

    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  if (from.connect_state().size() > 0) {

    connect_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_state_);
  }
  if (from.client_name().size() > 0) {

    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  if (from.winstation_name().size() > 0) {

    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void Sessions_Item::CopyFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Sessions.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions_Item::IsInitialized() const {
  return true;
}

void Sessions_Item::Swap(Sessions_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions_Item::InternalSwap(Sessions_Item* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  domain_name_.Swap(&other->domain_name_);
  connect_state_.Swap(&other->connect_state_);
  client_name_.Swap(&other->client_name_);
  winstation_name_.Swap(&other->winstation_name_);
  swap(session_id_, other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions_Item::GetTypeName() const {
  return "aspia.system_info.Sessions.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sessions_Item

// string user_name = 1;
void Sessions_Item::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::user_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.user_name)
  return user_name_.GetNoArena();
}
void Sessions_Item::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.user_name)
}
#if LANG_CXX11
void Sessions_Item::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.user_name)
}
#endif
void Sessions_Item::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.user_name)
}
void Sessions_Item::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.user_name)
}
::std::string* Sessions_Item::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_user_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.user_name)
}

// string domain_name = 2;
void Sessions_Item::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::domain_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.domain_name)
  return domain_name_.GetNoArena();
}
void Sessions_Item::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.domain_name)
}
#if LANG_CXX11
void Sessions_Item::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.domain_name)
}
#endif
void Sessions_Item::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.domain_name)
}
void Sessions_Item::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.domain_name)
}
::std::string* Sessions_Item::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_domain_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.domain_name)
}

// uint32 session_id = 3;
void Sessions_Item::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 Sessions_Item::session_id() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.session_id)
  return session_id_;
}
void Sessions_Item::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.session_id)
}

// string connect_state = 4;
void Sessions_Item::clear_connect_state() {
  connect_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::connect_state() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.connect_state)
  return connect_state_.GetNoArena();
}
void Sessions_Item::set_connect_state(const ::std::string& value) {
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.connect_state)
}
#if LANG_CXX11
void Sessions_Item::set_connect_state(::std::string&& value) {
  
  connect_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.connect_state)
}
#endif
void Sessions_Item::set_connect_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.connect_state)
}
void Sessions_Item::set_connect_state(const char* value, size_t size) {
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.connect_state)
}
::std::string* Sessions_Item::mutable_connect_state() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.connect_state)
  return connect_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_connect_state() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.connect_state)
  
  return connect_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_connect_state(::std::string* connect_state) {
  if (connect_state != NULL) {
    
  } else {
    
  }
  connect_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_state);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.connect_state)
}

// string client_name = 5;
void Sessions_Item::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::client_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.client_name)
  return client_name_.GetNoArena();
}
void Sessions_Item::set_client_name(const ::std::string& value) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.client_name)
}
#if LANG_CXX11
void Sessions_Item::set_client_name(::std::string&& value) {
  
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.client_name)
}
#endif
void Sessions_Item::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.client_name)
}
void Sessions_Item::set_client_name(const char* value, size_t size) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.client_name)
}
::std::string* Sessions_Item::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_client_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.client_name)
  
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.client_name)
}

// string winstation_name = 6;
void Sessions_Item::clear_winstation_name() {
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::winstation_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.winstation_name)
  return winstation_name_.GetNoArena();
}
void Sessions_Item::set_winstation_name(const ::std::string& value) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.winstation_name)
}
#if LANG_CXX11
void Sessions_Item::set_winstation_name(::std::string&& value) {
  
  winstation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.winstation_name)
}
#endif
void Sessions_Item::set_winstation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.winstation_name)
}
void Sessions_Item::set_winstation_name(const char* value, size_t size) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.winstation_name)
}
::std::string* Sessions_Item::mutable_winstation_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.winstation_name)
  return winstation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_winstation_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.winstation_name)
  
  return winstation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_winstation_name(::std::string* winstation_name) {
  if (winstation_name != NULL) {
    
  } else {
    
  }
  winstation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winstation_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.winstation_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions::Sessions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Sessions)
}
Sessions::Sessions(const Sessions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Sessions)
}

void Sessions::SharedCtor() {
  _cached_size_ = 0;
}

Sessions::~Sessions() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Sessions)
  SharedDtor();
}

void Sessions::SharedDtor() {
}

void Sessions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions& Sessions::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sessions* Sessions::New(::google::protobuf::Arena* arena) const {
  Sessions* n = new Sessions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Sessions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Sessions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Sessions.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Sessions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Sessions)
  return false;
#undef DO_
}

void Sessions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Sessions.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Sessions)
}

size_t Sessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Sessions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Sessions.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions*>(&from));
}

void Sessions::MergeFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Sessions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Sessions::CopyFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Sessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions::IsInitialized() const {
  return true;
}

void Sessions::Swap(Sessions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions::InternalSwap(Sessions* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions::GetTypeName() const {
  return "aspia.system_info.Sessions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sessions

// repeated .aspia.system_info.Sessions.Item item = 1;
int Sessions::item_size() const {
  return item_.size();
}
void Sessions::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Sessions_Item& Sessions::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.item)
  return item_.Get(index);
}
::aspia::system_info::Sessions_Item* Sessions::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.item)
  return item_.Mutable(index);
}
::aspia::system_info::Sessions_Item* Sessions::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Sessions.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Sessions_Item >*
Sessions::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Sessions.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Sessions_Item >&
Sessions::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Sessions.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace system_info
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

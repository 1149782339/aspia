// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info_session_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system_info_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace aspia {
namespace system_info {
class Printers_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Printers_Item>
     _instance;
} _Printers_Item_default_instance_;
class PrintersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Printers>
     _instance;
} _Printers_default_instance_;
class Services_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Services_Item>
     _instance;
} _Services_Item_default_instance_;
class ServicesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Services>
     _instance;
} _Services_default_instance_;
class NetworkCards_Item_IpAddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item_IpAddress>
     _instance;
} _NetworkCards_Item_IpAddress_default_instance_;
class NetworkCards_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item>
     _instance;
} _NetworkCards_Item_default_instance_;
class NetworkCardsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards>
     _instance;
} _NetworkCards_default_instance_;
class OpenConnections_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections_Item>
     _instance;
} _OpenConnections_Item_default_instance_;
class OpenConnectionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections>
     _instance;
} _OpenConnections_default_instance_;
class SharedResources_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SharedResources_Item>
     _instance;
} _SharedResources_Item_default_instance_;
class SharedResourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SharedResources>
     _instance;
} _SharedResources_default_instance_;
class Routes_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Routes_Item>
     _instance;
} _Routes_Item_default_instance_;
class RoutesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Routes>
     _instance;
} _Routes_default_instance_;
class Users_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Users_Item>
     _instance;
} _Users_Item_default_instance_;
class UsersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Users>
     _instance;
} _Users_default_instance_;
class UserGroups_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserGroups_Item>
     _instance;
} _UserGroups_Item_default_instance_;
class UserGroupsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserGroups>
     _instance;
} _UserGroups_default_instance_;
class Sessions_ItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sessions_Item>
     _instance;
} _Sessions_Item_default_instance_;
class SessionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sessions>
     _instance;
} _Sessions_default_instance_;

namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Printers_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Printers_Item_default_instance_);_Printers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Printers_default_instance_);_Services_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Services_Item_default_instance_);_Services_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Services_default_instance_);_NetworkCards_Item_IpAddress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_Item_IpAddress_default_instance_);_NetworkCards_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_Item_default_instance_);_NetworkCards_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkCards_default_instance_);_OpenConnections_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpenConnections_Item_default_instance_);_OpenConnections_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpenConnections_default_instance_);_SharedResources_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SharedResources_Item_default_instance_);_SharedResources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SharedResources_default_instance_);_Routes_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Routes_Item_default_instance_);_Routes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Routes_default_instance_);_Users_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Users_Item_default_instance_);_Users_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Users_default_instance_);_UserGroups_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserGroups_Item_default_instance_);_UserGroups_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserGroups_default_instance_);_Sessions_Item_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sessions_Item_default_instance_);_Sessions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sessions_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto

bool Printers_Item_Orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Printers_Item_Orientation Printers_Item::ORIENTATION_UNKNOWN;
const Printers_Item_Orientation Printers_Item::ORIENTATION_PORTRAIT;
const Printers_Item_Orientation Printers_Item::ORIENTATION_LANDSCAPE;
const Printers_Item_Orientation Printers_Item::Orientation_MIN;
const Printers_Item_Orientation Printers_Item::Orientation_MAX;
const int Printers_Item::Orientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_Status Services_Item::STATUS_UNKNOWN;
const Services_Item_Status Services_Item::STATUS_CONTINUE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSED;
const Services_Item_Status Services_Item::STATUS_RUNNING;
const Services_Item_Status Services_Item::STATUS_START_PENDING;
const Services_Item_Status Services_Item::STATUS_STOP_PENDING;
const Services_Item_Status Services_Item::STATUS_STOPPED;
const Services_Item_Status Services_Item::Status_MIN;
const Services_Item_Status Services_Item::Status_MAX;
const int Services_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_StartupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_StartupType Services_Item::STARTUP_TYPE_UNKNOWN;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_AUTO_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DEMAND_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DISABLED;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_BOOT_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_SYSTEM_START;
const Services_Item_StartupType Services_Item::StartupType_MIN;
const Services_Item_StartupType Services_Item::StartupType_MAX;
const int Services_Item::StartupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SharedResources_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SharedResources_Item_Type SharedResources_Item::TYPE_UNKNOWN;
const SharedResources_Item_Type SharedResources_Item::TYPE_DISK;
const SharedResources_Item_Type SharedResources_Item::TYPE_PRINTER;
const SharedResources_Item_Type SharedResources_Item::TYPE_DEVICE;
const SharedResources_Item_Type SharedResources_Item::TYPE_IPC;
const SharedResources_Item_Type SharedResources_Item::TYPE_SPECIAL;
const SharedResources_Item_Type SharedResources_Item::TYPE_TEMPORARY;
const SharedResources_Item_Type SharedResources_Item::Type_MIN;
const SharedResources_Item_Type SharedResources_Item::Type_MAX;
const int SharedResources_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers_Item::kNameFieldNumber;
const int Printers_Item::kIsDefaultFieldNumber;
const int Printers_Item::kIsSharedFieldNumber;
const int Printers_Item::kShareNameFieldNumber;
const int Printers_Item::kPortNameFieldNumber;
const int Printers_Item::kDriverNameFieldNumber;
const int Printers_Item::kDeviceNameFieldNumber;
const int Printers_Item::kPrintProcessorFieldNumber;
const int Printers_Item::kDataTypeFieldNumber;
const int Printers_Item::kServerNameFieldNumber;
const int Printers_Item::kLocationFieldNumber;
const int Printers_Item::kCommentFieldNumber;
const int Printers_Item::kJobsCountFieldNumber;
const int Printers_Item::kPaperWidthFieldNumber;
const int Printers_Item::kPaperLengthFieldNumber;
const int Printers_Item::kPrintQualityFieldNumber;
const int Printers_Item::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers_Item::Printers_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Printers.Item)
}
Printers_Item::Printers_Item(const Printers_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_name().size() > 0) {
    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port_name().size() > 0) {
    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driver_name().size() > 0) {
    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.print_processor().size() > 0) {
    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_type().size() > 0) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Printers.Item)
}

void Printers_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _cached_size_ = 0;
}

Printers_Item::~Printers_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Printers.Item)
  SharedDtor();
}

void Printers_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Printers_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers_Item& Printers_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers_Item* Printers_Item::New(::google::protobuf::Arena* arena) const {
  Printers_Item* n = new Printers_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool Printers_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Printers.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_default = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_shared = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_name().data(), static_cast<int>(this->share_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.share_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_name().data(), static_cast<int>(this->port_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.port_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driver_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driver_name().data(), static_cast<int>(this->driver_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.driver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string print_processor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_processor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->print_processor().data(), static_cast<int>(this->print_processor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.print_processor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.data_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Printers.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jobs_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_width = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_length = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 print_quality = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Printers.Item.Orientation orientation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orientation(static_cast< ::aspia::system_info::Printers_Item_Orientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Printers.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Printers.Item)
  return false;
#undef DO_
}

void Printers_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_default(), output);
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_shared(), output);
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_name().data(), static_cast<int>(this->share_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.share_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->share_name(), output);
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_name().data(), static_cast<int>(this->port_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.port_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->port_name(), output);
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver_name().data(), static_cast<int>(this->driver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.driver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->driver_name(), output);
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_name(), output);
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->print_processor().data(), static_cast<int>(this->print_processor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.print_processor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->print_processor(), output);
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->data_type(), output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // string location = 11;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->location(), output);
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Printers.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->comment(), output);
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->jobs_count(), output);
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->paper_width(), output);
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->paper_length(), output);
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->print_quality(), output);
  }

  // .aspia.system_info.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->orientation(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Printers.Item)
}

size_t Printers_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Printers.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_name());
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_name());
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver_name());
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->print_processor());
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string location = 11;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    total_size += 1 + 1;
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    total_size += 1 + 1;
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jobs_count());
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_width());
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_length());
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->print_quality());
  }

  // .aspia.system_info.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers_Item*>(&from));
}

void Printers_Item::MergeFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Printers.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.share_name().size() > 0) {

    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  if (from.port_name().size() > 0) {

    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  if (from.driver_name().size() > 0) {

    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.print_processor().size() > 0) {

    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.is_default() != 0) {
    set_is_default(from.is_default());
  }
  if (from.is_shared() != 0) {
    set_is_shared(from.is_shared());
  }
  if (from.jobs_count() != 0) {
    set_jobs_count(from.jobs_count());
  }
  if (from.paper_width() != 0) {
    set_paper_width(from.paper_width());
  }
  if (from.paper_length() != 0) {
    set_paper_length(from.paper_length());
  }
  if (from.print_quality() != 0) {
    set_print_quality(from.print_quality());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void Printers_Item::CopyFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Printers.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers_Item::IsInitialized() const {
  return true;
}

void Printers_Item::Swap(Printers_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers_Item::InternalSwap(Printers_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  share_name_.Swap(&other->share_name_);
  port_name_.Swap(&other->port_name_);
  driver_name_.Swap(&other->driver_name_);
  device_name_.Swap(&other->device_name_);
  print_processor_.Swap(&other->print_processor_);
  data_type_.Swap(&other->data_type_);
  server_name_.Swap(&other->server_name_);
  location_.Swap(&other->location_);
  comment_.Swap(&other->comment_);
  swap(is_default_, other->is_default_);
  swap(is_shared_, other->is_shared_);
  swap(jobs_count_, other->jobs_count_);
  swap(paper_width_, other->paper_width_);
  swap(paper_length_, other->paper_length_);
  swap(print_quality_, other->print_quality_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers_Item::GetTypeName() const {
  return "aspia.system_info.Printers.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers_Item

// string name = 1;
void Printers_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.name)
  return name_.GetNoArena();
}
void Printers_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.name)
}
#if LANG_CXX11
void Printers_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.name)
}
#endif
void Printers_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.name)
}
void Printers_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.name)
}
::std::string* Printers_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.name)
}

// bool is_default = 2;
void Printers_Item::clear_is_default() {
  is_default_ = false;
}
bool Printers_Item::is_default() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.is_default)
  return is_default_;
}
void Printers_Item::set_is_default(bool value) {
  
  is_default_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.is_default)
}

// bool is_shared = 3;
void Printers_Item::clear_is_shared() {
  is_shared_ = false;
}
bool Printers_Item::is_shared() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.is_shared)
  return is_shared_;
}
void Printers_Item::set_is_shared(bool value) {
  
  is_shared_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.is_shared)
}

// string share_name = 4;
void Printers_Item::clear_share_name() {
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::share_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.share_name)
  return share_name_.GetNoArena();
}
void Printers_Item::set_share_name(const ::std::string& value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.share_name)
}
#if LANG_CXX11
void Printers_Item::set_share_name(::std::string&& value) {
  
  share_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.share_name)
}
#endif
void Printers_Item::set_share_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.share_name)
}
void Printers_Item::set_share_name(const char* value, size_t size) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.share_name)
}
::std::string* Printers_Item::mutable_share_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.share_name)
  return share_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_share_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.share_name)
  
  return share_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_share_name(::std::string* share_name) {
  if (share_name != NULL) {
    
  } else {
    
  }
  share_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.share_name)
}

// string port_name = 5;
void Printers_Item::clear_port_name() {
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::port_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.port_name)
  return port_name_.GetNoArena();
}
void Printers_Item::set_port_name(const ::std::string& value) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.port_name)
}
#if LANG_CXX11
void Printers_Item::set_port_name(::std::string&& value) {
  
  port_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.port_name)
}
#endif
void Printers_Item::set_port_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.port_name)
}
void Printers_Item::set_port_name(const char* value, size_t size) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.port_name)
}
::std::string* Printers_Item::mutable_port_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.port_name)
  return port_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_port_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.port_name)
  
  return port_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_port_name(::std::string* port_name) {
  if (port_name != NULL) {
    
  } else {
    
  }
  port_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.port_name)
}

// string driver_name = 6;
void Printers_Item::clear_driver_name() {
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::driver_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.driver_name)
  return driver_name_.GetNoArena();
}
void Printers_Item::set_driver_name(const ::std::string& value) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.driver_name)
}
#if LANG_CXX11
void Printers_Item::set_driver_name(::std::string&& value) {
  
  driver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.driver_name)
}
#endif
void Printers_Item::set_driver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.driver_name)
}
void Printers_Item::set_driver_name(const char* value, size_t size) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.driver_name)
}
::std::string* Printers_Item::mutable_driver_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.driver_name)
  return driver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_driver_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.driver_name)
  
  return driver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_driver_name(::std::string* driver_name) {
  if (driver_name != NULL) {
    
  } else {
    
  }
  driver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.driver_name)
}

// string device_name = 7;
void Printers_Item::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::device_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.device_name)
  return device_name_.GetNoArena();
}
void Printers_Item::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.device_name)
}
#if LANG_CXX11
void Printers_Item::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.device_name)
}
#endif
void Printers_Item::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.device_name)
}
void Printers_Item::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.device_name)
}
::std::string* Printers_Item::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_device_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.device_name)
}

// string print_processor = 8;
void Printers_Item::clear_print_processor() {
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::print_processor() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.print_processor)
  return print_processor_.GetNoArena();
}
void Printers_Item::set_print_processor(const ::std::string& value) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.print_processor)
}
#if LANG_CXX11
void Printers_Item::set_print_processor(::std::string&& value) {
  
  print_processor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.print_processor)
}
#endif
void Printers_Item::set_print_processor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.print_processor)
}
void Printers_Item::set_print_processor(const char* value, size_t size) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.print_processor)
}
::std::string* Printers_Item::mutable_print_processor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.print_processor)
  return print_processor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_print_processor() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.print_processor)
  
  return print_processor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_print_processor(::std::string* print_processor) {
  if (print_processor != NULL) {
    
  } else {
    
  }
  print_processor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), print_processor);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.print_processor)
}

// string data_type = 9;
void Printers_Item::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::data_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.data_type)
  return data_type_.GetNoArena();
}
void Printers_Item::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.data_type)
}
#if LANG_CXX11
void Printers_Item::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.data_type)
}
#endif
void Printers_Item::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.data_type)
}
void Printers_Item::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.data_type)
}
::std::string* Printers_Item::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_data_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.data_type)
}

// string server_name = 10;
void Printers_Item::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::server_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.server_name)
  return server_name_.GetNoArena();
}
void Printers_Item::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.server_name)
}
#if LANG_CXX11
void Printers_Item::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.server_name)
}
#endif
void Printers_Item::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.server_name)
}
void Printers_Item::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.server_name)
}
::std::string* Printers_Item::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_server_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.server_name)
}

// string location = 11;
void Printers_Item::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::location() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.location)
  return location_.GetNoArena();
}
void Printers_Item::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.location)
}
#if LANG_CXX11
void Printers_Item::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.location)
}
#endif
void Printers_Item::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.location)
}
void Printers_Item::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.location)
}
::std::string* Printers_Item::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_location() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.location)
}

// string comment = 12;
void Printers_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.comment)
  return comment_.GetNoArena();
}
void Printers_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.comment)
}
#if LANG_CXX11
void Printers_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Printers.Item.comment)
}
#endif
void Printers_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Printers.Item.comment)
}
void Printers_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Printers.Item.comment)
}
::std::string* Printers_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Printers.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Printers.Item.comment)
}

// int32 jobs_count = 13;
void Printers_Item::clear_jobs_count() {
  jobs_count_ = 0;
}
::google::protobuf::int32 Printers_Item::jobs_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.jobs_count)
  return jobs_count_;
}
void Printers_Item::set_jobs_count(::google::protobuf::int32 value) {
  
  jobs_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.jobs_count)
}

// int32 paper_width = 14;
void Printers_Item::clear_paper_width() {
  paper_width_ = 0;
}
::google::protobuf::int32 Printers_Item::paper_width() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.paper_width)
  return paper_width_;
}
void Printers_Item::set_paper_width(::google::protobuf::int32 value) {
  
  paper_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.paper_width)
}

// int32 paper_length = 15;
void Printers_Item::clear_paper_length() {
  paper_length_ = 0;
}
::google::protobuf::int32 Printers_Item::paper_length() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.paper_length)
  return paper_length_;
}
void Printers_Item::set_paper_length(::google::protobuf::int32 value) {
  
  paper_length_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.paper_length)
}

// int32 print_quality = 16;
void Printers_Item::clear_print_quality() {
  print_quality_ = 0;
}
::google::protobuf::int32 Printers_Item::print_quality() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.print_quality)
  return print_quality_;
}
void Printers_Item::set_print_quality(::google::protobuf::int32 value) {
  
  print_quality_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.print_quality)
}

// .aspia.system_info.Printers.Item.Orientation orientation = 17;
void Printers_Item::clear_orientation() {
  orientation_ = 0;
}
::aspia::system_info::Printers_Item_Orientation Printers_Item::orientation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.Item.orientation)
  return static_cast< ::aspia::system_info::Printers_Item_Orientation >(orientation_);
}
void Printers_Item::set_orientation(::aspia::system_info::Printers_Item_Orientation value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Printers.Item.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers::Printers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Printers)
}
Printers::Printers(const Printers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Printers)
}

void Printers::SharedCtor() {
  _cached_size_ = 0;
}

Printers::~Printers() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Printers)
  SharedDtor();
}

void Printers::SharedDtor() {
}

void Printers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers& Printers::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers* Printers::New(::google::protobuf::Arena* arena) const {
  Printers* n = new Printers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Printers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Printers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Printers.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Printers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Printers)
  return false;
#undef DO_
}

void Printers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Printers.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Printers)
}

size_t Printers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Printers)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Printers.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers*>(&from));
}

void Printers::MergeFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Printers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Printers::CopyFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Printers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers::IsInitialized() const {
  return true;
}

void Printers::Swap(Printers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers::InternalSwap(Printers* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers::GetTypeName() const {
  return "aspia.system_info.Printers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers

// repeated .aspia.system_info.Printers.Item item = 1;
int Printers::item_size() const {
  return item_.size();
}
void Printers::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Printers_Item& Printers::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Printers.item)
  return item_.Get(index);
}
::aspia::system_info::Printers_Item* Printers::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Printers.item)
  return item_.Mutable(index);
}
::aspia::system_info::Printers_Item* Printers::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Printers.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Printers_Item >*
Printers::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Printers.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Printers_Item >&
Printers::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Printers.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services_Item::kNameFieldNumber;
const int Services_Item::kDisplayNameFieldNumber;
const int Services_Item::kDescriptionFieldNumber;
const int Services_Item::kStatusFieldNumber;
const int Services_Item::kStartupTypeFieldNumber;
const int Services_Item::kBinaryPathFieldNumber;
const int Services_Item::kStartNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services_Item::Services_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Services.Item)
}
Services_Item::Services_Item(const Services_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binary_path().size() > 0) {
    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_name().size() > 0) {
    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&startup_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Services.Item)
}

void Services_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _cached_size_ = 0;
}

Services_Item::~Services_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Services.Item)
  SharedDtor();
}

void Services_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Services_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services_Item& Services_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Services_Item* Services_Item::New(::google::protobuf::Arena* arena) const {
  Services_Item* n = new Services_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _internal_metadata_.Clear();
}

bool Services_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Services.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Services.Item.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::Services_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.Services.Item.StartupType startup_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_startup_type(static_cast< ::aspia::system_info::Services_Item_StartupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string binary_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binary_path().data(), static_cast<int>(this->binary_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.binary_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_name().data(), static_cast<int>(this->start_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Services.Item.start_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Services.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Services.Item)
  return false;
#undef DO_
}

void Services_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .aspia.system_info.Services.Item.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // .aspia.system_info.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->startup_type(), output);
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binary_path().data(), static_cast<int>(this->binary_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.binary_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->binary_path(), output);
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_name().data(), static_cast<int>(this->start_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Services.Item.start_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->start_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Services.Item)
}

size_t Services_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Services.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binary_path());
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_name());
  }

  // .aspia.system_info.Services.Item.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.system_info.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->startup_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services_Item*>(&from));
}

void Services_Item::MergeFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Services.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.binary_path().size() > 0) {

    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  if (from.start_name().size() > 0) {

    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.startup_type() != 0) {
    set_startup_type(from.startup_type());
  }
}

void Services_Item::CopyFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Services.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services_Item::IsInitialized() const {
  return true;
}

void Services_Item::Swap(Services_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services_Item::InternalSwap(Services_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  description_.Swap(&other->description_);
  binary_path_.Swap(&other->binary_path_);
  start_name_.Swap(&other->start_name_);
  swap(status_, other->status_);
  swap(startup_type_, other->startup_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services_Item::GetTypeName() const {
  return "aspia.system_info.Services.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Services_Item

// string name = 1;
void Services_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.name)
  return name_.GetNoArena();
}
void Services_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.name)
}
#if LANG_CXX11
void Services_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.name)
}
#endif
void Services_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.name)
}
void Services_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.name)
}
::std::string* Services_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.name)
}

// string display_name = 2;
void Services_Item::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::display_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.display_name)
  return display_name_.GetNoArena();
}
void Services_Item::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.display_name)
}
#if LANG_CXX11
void Services_Item::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.display_name)
}
#endif
void Services_Item::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.display_name)
}
void Services_Item::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.display_name)
}
::std::string* Services_Item::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_display_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.display_name)
}

// string description = 3;
void Services_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.description)
  return description_.GetNoArena();
}
void Services_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.description)
}
#if LANG_CXX11
void Services_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.description)
}
#endif
void Services_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.description)
}
void Services_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.description)
}
::std::string* Services_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.description)
}

// .aspia.system_info.Services.Item.Status status = 4;
void Services_Item::clear_status() {
  status_ = 0;
}
::aspia::system_info::Services_Item_Status Services_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.status)
  return static_cast< ::aspia::system_info::Services_Item_Status >(status_);
}
void Services_Item::set_status(::aspia::system_info::Services_Item_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.status)
}

// .aspia.system_info.Services.Item.StartupType startup_type = 5;
void Services_Item::clear_startup_type() {
  startup_type_ = 0;
}
::aspia::system_info::Services_Item_StartupType Services_Item::startup_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.startup_type)
  return static_cast< ::aspia::system_info::Services_Item_StartupType >(startup_type_);
}
void Services_Item::set_startup_type(::aspia::system_info::Services_Item_StartupType value) {
  
  startup_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.startup_type)
}

// string binary_path = 6;
void Services_Item::clear_binary_path() {
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::binary_path() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.binary_path)
  return binary_path_.GetNoArena();
}
void Services_Item::set_binary_path(const ::std::string& value) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.binary_path)
}
#if LANG_CXX11
void Services_Item::set_binary_path(::std::string&& value) {
  
  binary_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.binary_path)
}
#endif
void Services_Item::set_binary_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.binary_path)
}
void Services_Item::set_binary_path(const char* value, size_t size) {
  
  binary_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.binary_path)
}
::std::string* Services_Item::mutable_binary_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.binary_path)
  return binary_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_binary_path() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.binary_path)
  
  return binary_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_binary_path(::std::string* binary_path) {
  if (binary_path != NULL) {
    
  } else {
    
  }
  binary_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.binary_path)
}

// string start_name = 7;
void Services_Item::clear_start_name() {
  start_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Services_Item::start_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.Item.start_name)
  return start_name_.GetNoArena();
}
void Services_Item::set_start_name(const ::std::string& value) {
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Services.Item.start_name)
}
#if LANG_CXX11
void Services_Item::set_start_name(::std::string&& value) {
  
  start_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Services.Item.start_name)
}
#endif
void Services_Item::set_start_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Services.Item.start_name)
}
void Services_Item::set_start_name(const char* value, size_t size) {
  
  start_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Services.Item.start_name)
}
::std::string* Services_Item::mutable_start_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.Item.start_name)
  return start_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Services_Item::release_start_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Services.Item.start_name)
  
  return start_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Services_Item::set_allocated_start_name(::std::string* start_name) {
  if (start_name != NULL) {
    
  } else {
    
  }
  start_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Services.Item.start_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services::Services()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Services)
}
Services::Services(const Services& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Services)
}

void Services::SharedCtor() {
  _cached_size_ = 0;
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Services)
  SharedDtor();
}

void Services::SharedDtor() {
}

void Services::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services& Services::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Services* Services::New(::google::protobuf::Arena* arena) const {
  Services* n = new Services;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Services)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Services.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Services.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Services)
}

size_t Services::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Services)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Services.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services*>(&from));
}

void Services::MergeFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Services)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Services::CopyFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {
  return true;
}

void Services::Swap(Services* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services::InternalSwap(Services* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services::GetTypeName() const {
  return "aspia.system_info.Services";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Services

// repeated .aspia.system_info.Services.Item item = 1;
int Services::item_size() const {
  return item_.size();
}
void Services::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Services_Item& Services::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Services.item)
  return item_.Get(index);
}
::aspia::system_info::Services_Item* Services::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Services.item)
  return item_.Mutable(index);
}
::aspia::system_info::Services_Item* Services::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Services.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Services_Item >*
Services::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Services.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Services_Item >&
Services::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Services.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item_IpAddress::kAddressFieldNumber;
const int NetworkCards_Item_IpAddress::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards.Item.IpAddress)
}
NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress(const NetworkCards_Item_IpAddress& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards.Item.IpAddress)
}

void NetworkCards_Item_IpAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkCards_Item_IpAddress::~NetworkCards_Item_IpAddress() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards.Item.IpAddress)
  SharedDtor();
}

void NetworkCards_Item_IpAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item_IpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item_IpAddress& NetworkCards_Item_IpAddress::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards_Item_IpAddress* NetworkCards_Item_IpAddress::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item_IpAddress* n = new NetworkCards_Item_IpAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item_IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NetworkCards_Item_IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards.Item.IpAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.IpAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.IpAddress.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards.Item.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards.Item.IpAddress)
  return false;
#undef DO_
}

void NetworkCards_Item_IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.IpAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.IpAddress.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards.Item.IpAddress)
}

size_t NetworkCards_Item_IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards.Item.IpAddress)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item_IpAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item_IpAddress*>(&from));
}

void NetworkCards_Item_IpAddress::MergeFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards.Item.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void NetworkCards_Item_IpAddress::CopyFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards.Item.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item_IpAddress::IsInitialized() const {
  return true;
}

void NetworkCards_Item_IpAddress::Swap(NetworkCards_Item_IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item_IpAddress::InternalSwap(NetworkCards_Item_IpAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  mask_.Swap(&other->mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item_IpAddress::GetTypeName() const {
  return "aspia.system_info.NetworkCards.Item.IpAddress";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards_Item_IpAddress

// string address = 1;
void NetworkCards_Item_IpAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item_IpAddress::address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.IpAddress.address)
  return address_.GetNoArena();
}
void NetworkCards_Item_IpAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
#if LANG_CXX11
void NetworkCards_Item_IpAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
#endif
void NetworkCards_Item_IpAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
void NetworkCards_Item_IpAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.IpAddress.address)
}
::std::string* NetworkCards_Item_IpAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.IpAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item_IpAddress::release_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.IpAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item_IpAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.IpAddress.address)
}

// string mask = 2;
void NetworkCards_Item_IpAddress::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item_IpAddress::mask() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  return mask_.GetNoArena();
}
void NetworkCards_Item_IpAddress::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
#if LANG_CXX11
void NetworkCards_Item_IpAddress::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
#endif
void NetworkCards_Item_IpAddress::set_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
void NetworkCards_Item_IpAddress::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}
::std::string* NetworkCards_Item_IpAddress::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item_IpAddress::release_mask() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.IpAddress.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item_IpAddress::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.IpAddress.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item::kAdapterNameFieldNumber;
const int NetworkCards_Item::kConnectionNameFieldNumber;
const int NetworkCards_Item::kInterfaceTypeFieldNumber;
const int NetworkCards_Item::kMtuFieldNumber;
const int NetworkCards_Item::kSpeedFieldNumber;
const int NetworkCards_Item::kMacAddressFieldNumber;
const int NetworkCards_Item::kIsWinsEnabledFieldNumber;
const int NetworkCards_Item::kPrimaryWinsServerFieldNumber;
const int NetworkCards_Item::kSecondaryWinsServerFieldNumber;
const int NetworkCards_Item::kIsDhcpEnabledFieldNumber;
const int NetworkCards_Item::kIpAddressFieldNumber;
const int NetworkCards_Item::kGatewayAddressFieldNumber;
const int NetworkCards_Item::kDhcpServerAddressFieldNumber;
const int NetworkCards_Item::kDnsServerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item::NetworkCards_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards.Item)
}
NetworkCards_Item::NetworkCards_Item(const NetworkCards_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ip_address_(from.ip_address_),
      gateway_address_(from.gateway_address_),
      dhcp_server_address_(from.dhcp_server_address_),
      dns_server_address_(from.dns_server_address_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter_name().size() > 0) {
    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_name().size() > 0) {
    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_address().size() > 0) {
    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_wins_server().size() > 0) {
    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_wins_server().size() > 0) {
    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  ::memcpy(&mtu_, &from.mtu_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dhcp_enabled_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards.Item)
}

void NetworkCards_Item::SharedCtor() {
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _cached_size_ = 0;
}

NetworkCards_Item::~NetworkCards_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards.Item)
  SharedDtor();
}

void NetworkCards_Item::SharedDtor() {
  adapter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item& NetworkCards_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards_Item* NetworkCards_Item::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item* n = new NetworkCards_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.Clear();
  gateway_address_.Clear();
  dhcp_server_address_.Clear();
  dns_server_address_.Clear();
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _internal_metadata_.Clear();
}

bool NetworkCards_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adapter_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.adapter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_name().data(), static_cast<int>(this->connection_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.connection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), static_cast<int>(this->mac_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.mac_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wins_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wins_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_wins_server = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.primary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_wins_server = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.secondary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateway_address = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateway_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_address(this->gateway_address_size() - 1).data(),
            static_cast<int>(this->gateway_address(this->gateway_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.gateway_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dhcp_server_address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dhcp_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dhcp_server_address(this->dhcp_server_address_size() - 1).data(),
            static_cast<int>(this->dhcp_server_address(this->dhcp_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.dhcp_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dns_server_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns_server_address(this->dns_server_address_size() - 1).data(),
            static_cast<int>(this->dns_server_address(this->dns_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.NetworkCards.Item.dns_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards.Item)
  return false;
#undef DO_
}

void NetworkCards_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.adapter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adapter_name(), output);
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.connection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interface_type(), output);
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mtu(), output);
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), static_cast<int>(this->mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mac_address(), output);
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wins_enabled(), output);
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.primary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->primary_wins_server(), output);
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.secondary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->secondary_wins_server(), output);
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dhcp_enabled(), output);
  }

  // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->ip_address(static_cast<int>(i)), output);
  }

  // repeated string gateway_address = 12;
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_address(i).data(), static_cast<int>(this->gateway_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.gateway_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gateway_address(i), output);
  }

  // repeated string dhcp_server_address = 13;
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dhcp_server_address(i).data(), static_cast<int>(this->dhcp_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.dhcp_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->dhcp_server_address(i), output);
  }

  // repeated string dns_server_address = 14;
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns_server_address(i).data(), static_cast<int>(this->dns_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.NetworkCards.Item.dns_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->dns_server_address(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards.Item)
}

size_t NetworkCards_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ip_address(static_cast<int>(i)));
    }
  }

  // repeated string gateway_address = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateway_address_size());
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateway_address(i));
  }

  // repeated string dhcp_server_address = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dhcp_server_address_size());
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dhcp_server_address(i));
  }

  // repeated string dns_server_address = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dns_server_address_size());
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_server_address(i));
  }

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter_name());
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_wins_server());
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_wins_server());
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtu());
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item*>(&from));
}

void NetworkCards_Item::MergeFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_address_.MergeFrom(from.ip_address_);
  gateway_address_.MergeFrom(from.gateway_address_);
  dhcp_server_address_.MergeFrom(from.dhcp_server_address_);
  dns_server_address_.MergeFrom(from.dns_server_address_);
  if (from.adapter_name().size() > 0) {

    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  if (from.connection_name().size() > 0) {

    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.primary_wins_server().size() > 0) {

    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  if (from.secondary_wins_server().size() > 0) {

    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_wins_enabled() != 0) {
    set_is_wins_enabled(from.is_wins_enabled());
  }
  if (from.is_dhcp_enabled() != 0) {
    set_is_dhcp_enabled(from.is_dhcp_enabled());
  }
}

void NetworkCards_Item::CopyFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item::IsInitialized() const {
  return true;
}

void NetworkCards_Item::Swap(NetworkCards_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item::InternalSwap(NetworkCards_Item* other) {
  using std::swap;
  ip_address_.InternalSwap(&other->ip_address_);
  gateway_address_.InternalSwap(&other->gateway_address_);
  dhcp_server_address_.InternalSwap(&other->dhcp_server_address_);
  dns_server_address_.InternalSwap(&other->dns_server_address_);
  adapter_name_.Swap(&other->adapter_name_);
  connection_name_.Swap(&other->connection_name_);
  interface_type_.Swap(&other->interface_type_);
  mac_address_.Swap(&other->mac_address_);
  primary_wins_server_.Swap(&other->primary_wins_server_);
  secondary_wins_server_.Swap(&other->secondary_wins_server_);
  swap(mtu_, other->mtu_);
  swap(speed_, other->speed_);
  swap(is_wins_enabled_, other->is_wins_enabled_);
  swap(is_dhcp_enabled_, other->is_dhcp_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item::GetTypeName() const {
  return "aspia.system_info.NetworkCards.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards_Item

// string adapter_name = 1;
void NetworkCards_Item::clear_adapter_name() {
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::adapter_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.adapter_name)
  return adapter_name_.GetNoArena();
}
void NetworkCards_Item::set_adapter_name(const ::std::string& value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.adapter_name)
}
#if LANG_CXX11
void NetworkCards_Item::set_adapter_name(::std::string&& value) {
  
  adapter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.adapter_name)
}
#endif
void NetworkCards_Item::set_adapter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.adapter_name)
}
void NetworkCards_Item::set_adapter_name(const char* value, size_t size) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.adapter_name)
}
::std::string* NetworkCards_Item::mutable_adapter_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.adapter_name)
  return adapter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_adapter_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.adapter_name)
  
  return adapter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_adapter_name(::std::string* adapter_name) {
  if (adapter_name != NULL) {
    
  } else {
    
  }
  adapter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.adapter_name)
}

// string connection_name = 2;
void NetworkCards_Item::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::connection_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.connection_name)
  return connection_name_.GetNoArena();
}
void NetworkCards_Item::set_connection_name(const ::std::string& value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.connection_name)
}
#if LANG_CXX11
void NetworkCards_Item::set_connection_name(::std::string&& value) {
  
  connection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.connection_name)
}
#endif
void NetworkCards_Item::set_connection_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.connection_name)
}
void NetworkCards_Item::set_connection_name(const char* value, size_t size) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.connection_name)
}
::std::string* NetworkCards_Item::mutable_connection_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.connection_name)
  return connection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_connection_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.connection_name)
  
  return connection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_connection_name(::std::string* connection_name) {
  if (connection_name != NULL) {
    
  } else {
    
  }
  connection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.connection_name)
}

// string interface_type = 3;
void NetworkCards_Item::clear_interface_type() {
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::interface_type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.interface_type)
  return interface_type_.GetNoArena();
}
void NetworkCards_Item::set_interface_type(const ::std::string& value) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.interface_type)
}
#if LANG_CXX11
void NetworkCards_Item::set_interface_type(::std::string&& value) {
  
  interface_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.interface_type)
}
#endif
void NetworkCards_Item::set_interface_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.interface_type)
}
void NetworkCards_Item::set_interface_type(const char* value, size_t size) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.interface_type)
}
::std::string* NetworkCards_Item::mutable_interface_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.interface_type)
  return interface_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_interface_type() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.interface_type)
  
  return interface_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_interface_type(::std::string* interface_type) {
  if (interface_type != NULL) {
    
  } else {
    
  }
  interface_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.interface_type)
}

// uint32 mtu = 4;
void NetworkCards_Item::clear_mtu() {
  mtu_ = 0u;
}
::google::protobuf::uint32 NetworkCards_Item::mtu() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.mtu)
  return mtu_;
}
void NetworkCards_Item::set_mtu(::google::protobuf::uint32 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.mtu)
}

// uint32 speed = 5;
void NetworkCards_Item::clear_speed() {
  speed_ = 0u;
}
::google::protobuf::uint32 NetworkCards_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.speed)
  return speed_;
}
void NetworkCards_Item::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.speed)
}

// string mac_address = 6;
void NetworkCards_Item::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::mac_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.mac_address)
  return mac_address_.GetNoArena();
}
void NetworkCards_Item::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.mac_address)
}
#if LANG_CXX11
void NetworkCards_Item::set_mac_address(::std::string&& value) {
  
  mac_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.mac_address)
}
#endif
void NetworkCards_Item::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.mac_address)
}
void NetworkCards_Item::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.mac_address)
}
::std::string* NetworkCards_Item::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_mac_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.mac_address)
}

// bool is_wins_enabled = 7;
void NetworkCards_Item::clear_is_wins_enabled() {
  is_wins_enabled_ = false;
}
bool NetworkCards_Item::is_wins_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.is_wins_enabled)
  return is_wins_enabled_;
}
void NetworkCards_Item::set_is_wins_enabled(bool value) {
  
  is_wins_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.is_wins_enabled)
}

// string primary_wins_server = 8;
void NetworkCards_Item::clear_primary_wins_server() {
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::primary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.primary_wins_server)
  return primary_wins_server_.GetNoArena();
}
void NetworkCards_Item::set_primary_wins_server(const ::std::string& value) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
#if LANG_CXX11
void NetworkCards_Item::set_primary_wins_server(::std::string&& value) {
  
  primary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
#endif
void NetworkCards_Item::set_primary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
void NetworkCards_Item::set_primary_wins_server(const char* value, size_t size) {
  
  primary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.primary_wins_server)
}
::std::string* NetworkCards_Item::mutable_primary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.primary_wins_server)
  return primary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_primary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.primary_wins_server)
  
  return primary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_primary_wins_server(::std::string* primary_wins_server) {
  if (primary_wins_server != NULL) {
    
  } else {
    
  }
  primary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.primary_wins_server)
}

// string secondary_wins_server = 9;
void NetworkCards_Item::clear_secondary_wins_server() {
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkCards_Item::secondary_wins_server() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  return secondary_wins_server_.GetNoArena();
}
void NetworkCards_Item::set_secondary_wins_server(const ::std::string& value) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
#if LANG_CXX11
void NetworkCards_Item::set_secondary_wins_server(::std::string&& value) {
  
  secondary_wins_server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
#endif
void NetworkCards_Item::set_secondary_wins_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
void NetworkCards_Item::set_secondary_wins_server(const char* value, size_t size) {
  
  secondary_wins_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}
::std::string* NetworkCards_Item::mutable_secondary_wins_server() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  return secondary_wins_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkCards_Item::release_secondary_wins_server() {
  // @@protoc_insertion_point(field_release:aspia.system_info.NetworkCards.Item.secondary_wins_server)
  
  return secondary_wins_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkCards_Item::set_allocated_secondary_wins_server(::std::string* secondary_wins_server) {
  if (secondary_wins_server != NULL) {
    
  } else {
    
  }
  secondary_wins_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secondary_wins_server);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.NetworkCards.Item.secondary_wins_server)
}

// bool is_dhcp_enabled = 10;
void NetworkCards_Item::clear_is_dhcp_enabled() {
  is_dhcp_enabled_ = false;
}
bool NetworkCards_Item::is_dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.is_dhcp_enabled)
  return is_dhcp_enabled_;
}
void NetworkCards_Item::set_is_dhcp_enabled(bool value) {
  
  is_dhcp_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.is_dhcp_enabled)
}

// repeated .aspia.system_info.NetworkCards.Item.IpAddress ip_address = 11;
int NetworkCards_Item::ip_address_size() const {
  return ip_address_.size();
}
void NetworkCards_Item::clear_ip_address() {
  ip_address_.Clear();
}
const ::aspia::system_info::NetworkCards_Item_IpAddress& NetworkCards_Item::ip_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Get(index);
}
::aspia::system_info::NetworkCards_Item_IpAddress* NetworkCards_Item::mutable_ip_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Mutable(index);
}
::aspia::system_info::NetworkCards_Item_IpAddress* NetworkCards_Item::add_ip_address() {
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item_IpAddress >*
NetworkCards_Item::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.ip_address)
  return &ip_address_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item_IpAddress >&
NetworkCards_Item::ip_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.ip_address)
  return ip_address_;
}

// repeated string gateway_address = 12;
int NetworkCards_Item::gateway_address_size() const {
  return gateway_address_.size();
}
void NetworkCards_Item::clear_gateway_address() {
  gateway_address_.Clear();
}
const ::std::string& NetworkCards_Item::gateway_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_gateway_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Mutable(index);
}
void NetworkCards_Item::set_gateway_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_gateway_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.gateway_address)
  gateway_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_gateway_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.gateway_address)
}
void NetworkCards_Item::set_gateway_address(int index, const char* value, size_t size) {
  gateway_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.gateway_address)
}
::std::string* NetworkCards_Item::add_gateway_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_.Add();
}
void NetworkCards_Item::add_gateway_address(const ::std::string& value) {
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.gateway_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_gateway_address(::std::string&& value) {
  gateway_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.gateway_address)
}
#endif
void NetworkCards_Item::add_gateway_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateway_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.gateway_address)
}
void NetworkCards_Item::add_gateway_address(const char* value, size_t size) {
  gateway_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.gateway_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::gateway_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.gateway_address)
  return gateway_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_gateway_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.gateway_address)
  return &gateway_address_;
}

// repeated string dhcp_server_address = 13;
int NetworkCards_Item::dhcp_server_address_size() const {
  return dhcp_server_address_.size();
}
void NetworkCards_Item::clear_dhcp_server_address() {
  dhcp_server_address_.Clear();
}
const ::std::string& NetworkCards_Item::dhcp_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_dhcp_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Mutable(index);
}
void NetworkCards_Item::set_dhcp_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_dhcp_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  dhcp_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_dhcp_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
void NetworkCards_Item::set_dhcp_server_address(int index, const char* value, size_t size) {
  dhcp_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
::std::string* NetworkCards_Item::add_dhcp_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_.Add();
}
void NetworkCards_Item::add_dhcp_server_address(const ::std::string& value) {
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_dhcp_server_address(::std::string&& value) {
  dhcp_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
#endif
void NetworkCards_Item::add_dhcp_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dhcp_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
void NetworkCards_Item::add_dhcp_server_address(const char* value, size_t size) {
  dhcp_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.dhcp_server_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::dhcp_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return dhcp_server_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_dhcp_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.dhcp_server_address)
  return &dhcp_server_address_;
}

// repeated string dns_server_address = 14;
int NetworkCards_Item::dns_server_address_size() const {
  return dns_server_address_.size();
}
void NetworkCards_Item::clear_dns_server_address() {
  dns_server_address_.Clear();
}
const ::std::string& NetworkCards_Item::dns_server_address(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Get(index);
}
::std::string* NetworkCards_Item::mutable_dns_server_address(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Mutable(index);
}
void NetworkCards_Item::set_dns_server_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkCards_Item::set_dns_server_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.system_info.NetworkCards.Item.dns_server_address)
  dns_server_address_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkCards_Item::set_dns_server_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.system_info.NetworkCards.Item.dns_server_address)
}
void NetworkCards_Item::set_dns_server_address(int index, const char* value, size_t size) {
  dns_server_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.NetworkCards.Item.dns_server_address)
}
::std::string* NetworkCards_Item::add_dns_server_address() {
  // @@protoc_insertion_point(field_add_mutable:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_.Add();
}
void NetworkCards_Item::add_dns_server_address(const ::std::string& value) {
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dns_server_address)
}
#if LANG_CXX11
void NetworkCards_Item::add_dns_server_address(::std::string&& value) {
  dns_server_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.Item.dns_server_address)
}
#endif
void NetworkCards_Item::add_dns_server_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dns_server_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.system_info.NetworkCards.Item.dns_server_address)
}
void NetworkCards_Item::add_dns_server_address(const char* value, size_t size) {
  dns_server_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.system_info.NetworkCards.Item.dns_server_address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkCards_Item::dns_server_address() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.Item.dns_server_address)
  return dns_server_address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkCards_Item::mutable_dns_server_address() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.Item.dns_server_address)
  return &dns_server_address_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards::NetworkCards()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.NetworkCards)
}
NetworkCards::NetworkCards(const NetworkCards& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.NetworkCards)
}

void NetworkCards::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCards::~NetworkCards() {
  // @@protoc_insertion_point(destructor:aspia.system_info.NetworkCards)
  SharedDtor();
}

void NetworkCards::SharedDtor() {
}

void NetworkCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards& NetworkCards::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkCards* NetworkCards::New(::google::protobuf::Arena* arena) const {
  NetworkCards* n = new NetworkCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.NetworkCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.NetworkCards.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.NetworkCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.NetworkCards)
  return false;
#undef DO_
}

void NetworkCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.NetworkCards.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.NetworkCards)
}

size_t NetworkCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.NetworkCards)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.NetworkCards.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards*>(&from));
}

void NetworkCards::MergeFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.NetworkCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void NetworkCards::CopyFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.NetworkCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards::IsInitialized() const {
  return true;
}

void NetworkCards::Swap(NetworkCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards::InternalSwap(NetworkCards* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards::GetTypeName() const {
  return "aspia.system_info.NetworkCards";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCards

// repeated .aspia.system_info.NetworkCards.Item item = 1;
int NetworkCards::item_size() const {
  return item_.size();
}
void NetworkCards::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::NetworkCards_Item& NetworkCards::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.NetworkCards.item)
  return item_.Get(index);
}
::aspia::system_info::NetworkCards_Item* NetworkCards::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.NetworkCards.item)
  return item_.Mutable(index);
}
::aspia::system_info::NetworkCards_Item* NetworkCards::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.NetworkCards.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item >*
NetworkCards::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.NetworkCards.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::NetworkCards_Item >&
NetworkCards::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.NetworkCards.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections_Item::kProcessNameFieldNumber;
const int OpenConnections_Item::kLocalAddressFieldNumber;
const int OpenConnections_Item::kRemoteAddressFieldNumber;
const int OpenConnections_Item::kLocalPortFieldNumber;
const int OpenConnections_Item::kRemotePortFieldNumber;
const int OpenConnections_Item::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections_Item::OpenConnections_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.OpenConnections.Item)
}
OpenConnections_Item::OpenConnections_Item(const OpenConnections_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_address().size() > 0) {
    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_address().size() > 0) {
    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_port_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.OpenConnections.Item)
}

void OpenConnections_Item::SharedCtor() {
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_port_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  _cached_size_ = 0;
}

OpenConnections_Item::~OpenConnections_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.OpenConnections.Item)
  SharedDtor();
}

void OpenConnections_Item::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenConnections_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections_Item& OpenConnections_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenConnections_Item* OpenConnections_Item::New(::google::protobuf::Arena* arena) const {
  OpenConnections_Item* n = new OpenConnections_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_port_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(remote_port_));
  _internal_metadata_.Clear();
}

bool OpenConnections_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.OpenConnections.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string process_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), static_cast<int>(this->local_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.local_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_address().data(), static_cast<int>(this->remote_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.remote_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remote_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.OpenConnections.Item.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.OpenConnections.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.OpenConnections.Item)
  return false;
#undef DO_
}

void OpenConnections_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // string local_address = 2;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_address(), output);
  }

  // string remote_address = 3;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), static_cast<int>(this->remote_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.remote_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remote_address(), output);
  }

  // uint32 local_port = 4;
  if (this->local_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->local_port(), output);
  }

  // uint32 remote_port = 5;
  if (this->remote_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remote_port(), output);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.OpenConnections.Item.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.OpenConnections.Item)
}

size_t OpenConnections_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.OpenConnections.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // string local_address = 2;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // string remote_address = 3;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_address());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // uint32 local_port = 4;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_port());
  }

  // uint32 remote_port = 5;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remote_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections_Item*>(&from));
}

void OpenConnections_Item::MergeFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.OpenConnections.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {

    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.local_port() != 0) {
    set_local_port(from.local_port());
  }
  if (from.remote_port() != 0) {
    set_remote_port(from.remote_port());
  }
}

void OpenConnections_Item::CopyFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.OpenConnections.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections_Item::IsInitialized() const {
  return true;
}

void OpenConnections_Item::Swap(OpenConnections_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections_Item::InternalSwap(OpenConnections_Item* other) {
  using std::swap;
  process_name_.Swap(&other->process_name_);
  local_address_.Swap(&other->local_address_);
  remote_address_.Swap(&other->remote_address_);
  state_.Swap(&other->state_);
  swap(local_port_, other->local_port_);
  swap(remote_port_, other->remote_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections_Item::GetTypeName() const {
  return "aspia.system_info.OpenConnections.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenConnections_Item

// string process_name = 1;
void OpenConnections_Item::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::process_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.process_name)
  return process_name_.GetNoArena();
}
void OpenConnections_Item::set_process_name(const ::std::string& value) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.process_name)
}
#if LANG_CXX11
void OpenConnections_Item::set_process_name(::std::string&& value) {
  
  process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.process_name)
}
#endif
void OpenConnections_Item::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.process_name)
}
void OpenConnections_Item::set_process_name(const char* value, size_t size) {
  
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.process_name)
}
::std::string* OpenConnections_Item::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_process_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.process_name)
  
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.process_name)
}

// string local_address = 2;
void OpenConnections_Item::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::local_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.local_address)
  return local_address_.GetNoArena();
}
void OpenConnections_Item::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.local_address)
}
#if LANG_CXX11
void OpenConnections_Item::set_local_address(::std::string&& value) {
  
  local_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.local_address)
}
#endif
void OpenConnections_Item::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.local_address)
}
void OpenConnections_Item::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.local_address)
}
::std::string* OpenConnections_Item::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_local_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.local_address)
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.local_address)
}

// string remote_address = 3;
void OpenConnections_Item::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::remote_address() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.remote_address)
  return remote_address_.GetNoArena();
}
void OpenConnections_Item::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.remote_address)
}
#if LANG_CXX11
void OpenConnections_Item::set_remote_address(::std::string&& value) {
  
  remote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.remote_address)
}
#endif
void OpenConnections_Item::set_remote_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.remote_address)
}
void OpenConnections_Item::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.remote_address)
}
::std::string* OpenConnections_Item::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_remote_address() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.remote_address)
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.remote_address)
}

// uint32 local_port = 4;
void OpenConnections_Item::clear_local_port() {
  local_port_ = 0u;
}
::google::protobuf::uint32 OpenConnections_Item::local_port() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.local_port)
  return local_port_;
}
void OpenConnections_Item::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.local_port)
}

// uint32 remote_port = 5;
void OpenConnections_Item::clear_remote_port() {
  remote_port_ = 0u;
}
::google::protobuf::uint32 OpenConnections_Item::remote_port() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.remote_port)
  return remote_port_;
}
void OpenConnections_Item::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.remote_port)
}

// string state = 6;
void OpenConnections_Item::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpenConnections_Item::state() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.Item.state)
  return state_.GetNoArena();
}
void OpenConnections_Item::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.OpenConnections.Item.state)
}
#if LANG_CXX11
void OpenConnections_Item::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.OpenConnections.Item.state)
}
#endif
void OpenConnections_Item::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.OpenConnections.Item.state)
}
void OpenConnections_Item::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.OpenConnections.Item.state)
}
::std::string* OpenConnections_Item::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.Item.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpenConnections_Item::release_state() {
  // @@protoc_insertion_point(field_release:aspia.system_info.OpenConnections.Item.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpenConnections_Item::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.OpenConnections.Item.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections::OpenConnections()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.OpenConnections)
}
OpenConnections::OpenConnections(const OpenConnections& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.OpenConnections)
}

void OpenConnections::SharedCtor() {
  _cached_size_ = 0;
}

OpenConnections::~OpenConnections() {
  // @@protoc_insertion_point(destructor:aspia.system_info.OpenConnections)
  SharedDtor();
}

void OpenConnections::SharedDtor() {
}

void OpenConnections::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections& OpenConnections::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenConnections* OpenConnections::New(::google::protobuf::Arena* arena) const {
  OpenConnections* n = new OpenConnections;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool OpenConnections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.OpenConnections)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.OpenConnections.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.OpenConnections)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.OpenConnections)
  return false;
#undef DO_
}

void OpenConnections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.OpenConnections.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.OpenConnections)
}

size_t OpenConnections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.OpenConnections)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.OpenConnections.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections*>(&from));
}

void OpenConnections::MergeFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.OpenConnections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void OpenConnections::CopyFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.OpenConnections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections::IsInitialized() const {
  return true;
}

void OpenConnections::Swap(OpenConnections* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections::InternalSwap(OpenConnections* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections::GetTypeName() const {
  return "aspia.system_info.OpenConnections";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenConnections

// repeated .aspia.system_info.OpenConnections.Item item = 1;
int OpenConnections::item_size() const {
  return item_.size();
}
void OpenConnections::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::OpenConnections_Item& OpenConnections::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.OpenConnections.item)
  return item_.Get(index);
}
::aspia::system_info::OpenConnections_Item* OpenConnections::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.OpenConnections.item)
  return item_.Mutable(index);
}
::aspia::system_info::OpenConnections_Item* OpenConnections::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.OpenConnections.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::OpenConnections_Item >*
OpenConnections::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.OpenConnections.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::OpenConnections_Item >&
OpenConnections::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.OpenConnections.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources_Item::kNameFieldNumber;
const int SharedResources_Item::kTypeFieldNumber;
const int SharedResources_Item::kDescriptionFieldNumber;
const int SharedResources_Item::kCurrentUsesFieldNumber;
const int SharedResources_Item::kMaximumUsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources_Item::SharedResources_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.SharedResources.Item)
}
SharedResources_Item::SharedResources_Item(const SharedResources_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_uses_) -
    reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.SharedResources.Item)
}

void SharedResources_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _cached_size_ = 0;
}

SharedResources_Item::~SharedResources_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.SharedResources.Item)
  SharedDtor();
}

void SharedResources_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SharedResources_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources_Item& SharedResources_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedResources_Item* SharedResources_Item::New(::google::protobuf::Arena* arena) const {
  SharedResources_Item* n = new SharedResources_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _internal_metadata_.Clear();
}

bool SharedResources_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.SharedResources.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.SharedResources.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.SharedResources.Item.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::SharedResources_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.SharedResources.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_uses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximum_uses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.SharedResources.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.SharedResources.Item)
  return false;
#undef DO_
}

void SharedResources_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.SharedResources.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.system_info.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.SharedResources.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // uint32 current_uses = 4;
  if (this->current_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_uses(), output);
  }

  // uint32 maximum_uses = 5;
  if (this->maximum_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maximum_uses(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.SharedResources.Item)
}

size_t SharedResources_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.SharedResources.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .aspia.system_info.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 current_uses = 4;
  if (this->current_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_uses());
  }

  // uint32 maximum_uses = 5;
  if (this->maximum_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_uses());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources_Item*>(&from));
}

void SharedResources_Item::MergeFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.SharedResources.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.current_uses() != 0) {
    set_current_uses(from.current_uses());
  }
  if (from.maximum_uses() != 0) {
    set_maximum_uses(from.maximum_uses());
  }
}

void SharedResources_Item::CopyFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.SharedResources.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources_Item::IsInitialized() const {
  return true;
}

void SharedResources_Item::Swap(SharedResources_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources_Item::InternalSwap(SharedResources_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  swap(type_, other->type_);
  swap(current_uses_, other->current_uses_);
  swap(maximum_uses_, other->maximum_uses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources_Item::GetTypeName() const {
  return "aspia.system_info.SharedResources.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedResources_Item

// string name = 1;
void SharedResources_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharedResources_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.name)
  return name_.GetNoArena();
}
void SharedResources_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.name)
}
#if LANG_CXX11
void SharedResources_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.SharedResources.Item.name)
}
#endif
void SharedResources_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.SharedResources.Item.name)
}
void SharedResources_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.SharedResources.Item.name)
}
::std::string* SharedResources_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharedResources_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.SharedResources.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharedResources_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.SharedResources.Item.name)
}

// .aspia.system_info.SharedResources.Item.Type type = 2;
void SharedResources_Item::clear_type() {
  type_ = 0;
}
::aspia::system_info::SharedResources_Item_Type SharedResources_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.type)
  return static_cast< ::aspia::system_info::SharedResources_Item_Type >(type_);
}
void SharedResources_Item::set_type(::aspia::system_info::SharedResources_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.type)
}

// string description = 3;
void SharedResources_Item::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SharedResources_Item::description() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.description)
  return description_.GetNoArena();
}
void SharedResources_Item::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.description)
}
#if LANG_CXX11
void SharedResources_Item::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.SharedResources.Item.description)
}
#endif
void SharedResources_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.SharedResources.Item.description)
}
void SharedResources_Item::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.SharedResources.Item.description)
}
::std::string* SharedResources_Item::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.Item.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SharedResources_Item::release_description() {
  // @@protoc_insertion_point(field_release:aspia.system_info.SharedResources.Item.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SharedResources_Item::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.SharedResources.Item.description)
}

// uint32 current_uses = 4;
void SharedResources_Item::clear_current_uses() {
  current_uses_ = 0u;
}
::google::protobuf::uint32 SharedResources_Item::current_uses() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.current_uses)
  return current_uses_;
}
void SharedResources_Item::set_current_uses(::google::protobuf::uint32 value) {
  
  current_uses_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.current_uses)
}

// uint32 maximum_uses = 5;
void SharedResources_Item::clear_maximum_uses() {
  maximum_uses_ = 0u;
}
::google::protobuf::uint32 SharedResources_Item::maximum_uses() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.Item.maximum_uses)
  return maximum_uses_;
}
void SharedResources_Item::set_maximum_uses(::google::protobuf::uint32 value) {
  
  maximum_uses_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.SharedResources.Item.maximum_uses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources::SharedResources()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.SharedResources)
}
SharedResources::SharedResources(const SharedResources& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.SharedResources)
}

void SharedResources::SharedCtor() {
  _cached_size_ = 0;
}

SharedResources::~SharedResources() {
  // @@protoc_insertion_point(destructor:aspia.system_info.SharedResources)
  SharedDtor();
}

void SharedResources::SharedDtor() {
}

void SharedResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources& SharedResources::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedResources* SharedResources::New(::google::protobuf::Arena* arena) const {
  SharedResources* n = new SharedResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool SharedResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.SharedResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.SharedResources.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.SharedResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.SharedResources)
  return false;
#undef DO_
}

void SharedResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.SharedResources.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.SharedResources)
}

size_t SharedResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.SharedResources)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.SharedResources.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources*>(&from));
}

void SharedResources::MergeFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.SharedResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void SharedResources::CopyFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.SharedResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources::IsInitialized() const {
  return true;
}

void SharedResources::Swap(SharedResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources::InternalSwap(SharedResources* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources::GetTypeName() const {
  return "aspia.system_info.SharedResources";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedResources

// repeated .aspia.system_info.SharedResources.Item item = 1;
int SharedResources::item_size() const {
  return item_.size();
}
void SharedResources::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::SharedResources_Item& SharedResources::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.SharedResources.item)
  return item_.Get(index);
}
::aspia::system_info::SharedResources_Item* SharedResources::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.SharedResources.item)
  return item_.Mutable(index);
}
::aspia::system_info::SharedResources_Item* SharedResources::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.SharedResources.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::SharedResources_Item >*
SharedResources::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.SharedResources.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::SharedResources_Item >&
SharedResources::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.SharedResources.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes_Item::kDestonationFieldNumber;
const int Routes_Item::kMaskFieldNumber;
const int Routes_Item::kGatewayFieldNumber;
const int Routes_Item::kMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes_Item::Routes_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Routes.Item)
}
Routes_Item::Routes_Item(const Routes_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destonation().size() > 0) {
    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway().size() > 0) {
    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Routes.Item)
}

void Routes_Item::SharedCtor() {
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _cached_size_ = 0;
}

Routes_Item::~Routes_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Routes.Item)
  SharedDtor();
}

void Routes_Item::SharedDtor() {
  destonation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Routes_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes_Item& Routes_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Routes_Item* Routes_Item::New(::google::protobuf::Arena* arena) const {
  Routes_Item* n = new Routes_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destonation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _internal_metadata_.Clear();
}

bool Routes_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Routes.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destonation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destonation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destonation().data(), static_cast<int>(this->destonation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.destonation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), static_cast<int>(this->gateway().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Routes.Item.gateway"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 metric = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Routes.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Routes.Item)
  return false;
#undef DO_
}

void Routes_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destonation().data(), static_cast<int>(this->destonation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.destonation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destonation(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), static_cast<int>(this->gateway().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Routes.Item.gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway(), output);
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->metric(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Routes.Item)
}

size_t Routes_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Routes.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destonation());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metric());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes_Item*>(&from));
}

void Routes_Item::MergeFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Routes.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destonation().size() > 0) {

    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from.gateway().size() > 0) {

    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  if (from.metric() != 0) {
    set_metric(from.metric());
  }
}

void Routes_Item::CopyFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Routes.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes_Item::IsInitialized() const {
  return true;
}

void Routes_Item::Swap(Routes_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes_Item::InternalSwap(Routes_Item* other) {
  using std::swap;
  destonation_.Swap(&other->destonation_);
  mask_.Swap(&other->mask_);
  gateway_.Swap(&other->gateway_);
  swap(metric_, other->metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes_Item::GetTypeName() const {
  return "aspia.system_info.Routes.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Routes_Item

// string destonation = 1;
void Routes_Item::clear_destonation() {
  destonation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::destonation() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.destonation)
  return destonation_.GetNoArena();
}
void Routes_Item::set_destonation(const ::std::string& value) {
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.destonation)
}
#if LANG_CXX11
void Routes_Item::set_destonation(::std::string&& value) {
  
  destonation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.destonation)
}
#endif
void Routes_Item::set_destonation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.destonation)
}
void Routes_Item::set_destonation(const char* value, size_t size) {
  
  destonation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.destonation)
}
::std::string* Routes_Item::mutable_destonation() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.destonation)
  return destonation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_destonation() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.destonation)
  
  return destonation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_destonation(::std::string* destonation) {
  if (destonation != NULL) {
    
  } else {
    
  }
  destonation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destonation);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.destonation)
}

// string mask = 2;
void Routes_Item::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::mask() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.mask)
  return mask_.GetNoArena();
}
void Routes_Item::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.mask)
}
#if LANG_CXX11
void Routes_Item::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.mask)
}
#endif
void Routes_Item::set_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.mask)
}
void Routes_Item::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.mask)
}
::std::string* Routes_Item::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_mask() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.mask)
}

// string gateway = 3;
void Routes_Item::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Routes_Item::gateway() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.gateway)
  return gateway_.GetNoArena();
}
void Routes_Item::set_gateway(const ::std::string& value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.gateway)
}
#if LANG_CXX11
void Routes_Item::set_gateway(::std::string&& value) {
  
  gateway_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Routes.Item.gateway)
}
#endif
void Routes_Item::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Routes.Item.gateway)
}
void Routes_Item::set_gateway(const char* value, size_t size) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Routes.Item.gateway)
}
::std::string* Routes_Item::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.Item.gateway)
  return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Routes_Item::release_gateway() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Routes.Item.gateway)
  
  return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Routes_Item::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Routes.Item.gateway)
}

// uint32 metric = 4;
void Routes_Item::clear_metric() {
  metric_ = 0u;
}
::google::protobuf::uint32 Routes_Item::metric() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.Item.metric)
  return metric_;
}
void Routes_Item::set_metric(::google::protobuf::uint32 value) {
  
  metric_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Routes.Item.metric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes::Routes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Routes)
}
Routes::Routes(const Routes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Routes)
}

void Routes::SharedCtor() {
  _cached_size_ = 0;
}

Routes::~Routes() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Routes)
  SharedDtor();
}

void Routes::SharedDtor() {
}

void Routes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes& Routes::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Routes* Routes::New(::google::protobuf::Arena* arena) const {
  Routes* n = new Routes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Routes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Routes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Routes.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Routes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Routes)
  return false;
#undef DO_
}

void Routes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Routes.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Routes)
}

size_t Routes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Routes)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Routes.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes*>(&from));
}

void Routes::MergeFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Routes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Routes::CopyFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Routes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes::IsInitialized() const {
  return true;
}

void Routes::Swap(Routes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes::InternalSwap(Routes* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes::GetTypeName() const {
  return "aspia.system_info.Routes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Routes

// repeated .aspia.system_info.Routes.Item item = 1;
int Routes::item_size() const {
  return item_.size();
}
void Routes::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Routes_Item& Routes::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Routes.item)
  return item_.Get(index);
}
::aspia::system_info::Routes_Item* Routes::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Routes.item)
  return item_.Mutable(index);
}
::aspia::system_info::Routes_Item* Routes::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Routes.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Routes_Item >*
Routes::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Routes.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Routes_Item >&
Routes::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Routes.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users_Item::kFullNameFieldNumber;
const int Users_Item::kCommentFieldNumber;
const int Users_Item::kIsDisabledFieldNumber;
const int Users_Item::kIsPasswordCantChangeFieldNumber;
const int Users_Item::kIsPasswordExpiredFieldNumber;
const int Users_Item::kIsDontExpirePasswordFieldNumber;
const int Users_Item::kIsLockoutFieldNumber;
const int Users_Item::kNumberLogonsFieldNumber;
const int Users_Item::kBadPasswordCountFieldNumber;
const int Users_Item::kLastLogonTimeFieldNumber;
const int Users_Item::kUserIdFieldNumber;
const int Users_Item::kProfileDirectoryFieldNumber;
const int Users_Item::kHomeDirectoryFieldNumber;
const int Users_Item::kScriptPathFieldNumber;
const int Users_Item::kCountryCodeFieldNumber;
const int Users_Item::kCodepageFieldNumber;
const int Users_Item::kPrimaryGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users_Item::Users_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Users.Item)
}
Users_Item::Users_Item(const Users_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_name().size() > 0) {
    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  profile_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.profile_directory().size() > 0) {
    profile_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_directory_);
  }
  home_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.home_directory().size() > 0) {
    home_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_directory_);
  }
  script_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script_path().size() > 0) {
    script_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_path_);
  }
  ::memcpy(&is_disabled_, &from.is_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_group_id_) -
    reinterpret_cast<char*>(&is_disabled_)) + sizeof(primary_group_id_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Users.Item)
}

void Users_Item::SharedCtor() {
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_group_id_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(primary_group_id_));
  _cached_size_ = 0;
}

Users_Item::~Users_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Users.Item)
  SharedDtor();
}

void Users_Item::SharedDtor() {
  full_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Users_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users_Item& Users_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Users_Item* Users_Item::New(::google::protobuf::Arena* arena) const {
  Users_Item* n = new Users_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  script_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_group_id_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(primary_group_id_));
  _internal_metadata_.Clear();
}

bool Users_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Users.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string full_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), static_cast<int>(this->full_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.full_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_disabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_cant_change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_cant_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_expired = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dont_expire_password = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dont_expire_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_lockout = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_logons = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_logons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bad_password_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bad_password_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_logon_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logon_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string profile_directory = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile_directory().data(), static_cast<int>(this->profile_directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.profile_directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string home_directory = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->home_directory().data(), static_cast<int>(this->home_directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.home_directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string script_path = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->script_path().data(), static_cast<int>(this->script_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Users.Item.script_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 country_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 codepage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codepage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 primary_group_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primary_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Users.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Users.Item)
  return false;
#undef DO_
}

void Users_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_name = 1;
  if (this->full_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_name(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // bool is_disabled = 3;
  if (this->is_disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_disabled(), output);
  }

  // bool is_password_cant_change = 4;
  if (this->is_password_cant_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_password_cant_change(), output);
  }

  // bool is_password_expired = 5;
  if (this->is_password_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_password_expired(), output);
  }

  // bool is_dont_expire_password = 6;
  if (this->is_dont_expire_password() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_dont_expire_password(), output);
  }

  // bool is_lockout = 7;
  if (this->is_lockout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_lockout(), output);
  }

  // uint32 number_logons = 8;
  if (this->number_logons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->number_logons(), output);
  }

  // uint32 bad_password_count = 9;
  if (this->bad_password_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bad_password_count(), output);
  }

  // int64 last_logon_time = 10;
  if (this->last_logon_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->last_logon_time(), output);
  }

  // uint32 user_id = 11;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->user_id(), output);
  }

  // string profile_directory = 12;
  if (this->profile_directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile_directory().data(), static_cast<int>(this->profile_directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.profile_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->profile_directory(), output);
  }

  // string home_directory = 13;
  if (this->home_directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->home_directory().data(), static_cast<int>(this->home_directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.home_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->home_directory(), output);
  }

  // string script_path = 14;
  if (this->script_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->script_path().data(), static_cast<int>(this->script_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Users.Item.script_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->script_path(), output);
  }

  // uint32 country_code = 15;
  if (this->country_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->country_code(), output);
  }

  // uint32 codepage = 16;
  if (this->codepage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->codepage(), output);
  }

  // uint32 primary_group_id = 17;
  if (this->primary_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->primary_group_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Users.Item)
}

size_t Users_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Users.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string full_name = 1;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string profile_directory = 12;
  if (this->profile_directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile_directory());
  }

  // string home_directory = 13;
  if (this->home_directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->home_directory());
  }

  // string script_path = 14;
  if (this->script_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script_path());
  }

  // bool is_disabled = 3;
  if (this->is_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_cant_change = 4;
  if (this->is_password_cant_change() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_expired = 5;
  if (this->is_password_expired() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dont_expire_password = 6;
  if (this->is_dont_expire_password() != 0) {
    total_size += 1 + 1;
  }

  // bool is_lockout = 7;
  if (this->is_lockout() != 0) {
    total_size += 1 + 1;
  }

  // uint32 number_logons = 8;
  if (this->number_logons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_logons());
  }

  // uint32 bad_password_count = 9;
  if (this->bad_password_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bad_password_count());
  }

  // int64 last_logon_time = 10;
  if (this->last_logon_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_logon_time());
  }

  // uint32 user_id = 11;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 country_code = 15;
  if (this->country_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->country_code());
  }

  // uint32 codepage = 16;
  if (this->codepage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->codepage());
  }

  // uint32 primary_group_id = 17;
  if (this->primary_group_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->primary_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users_Item*>(&from));
}

void Users_Item::MergeFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Users.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_name().size() > 0) {

    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.profile_directory().size() > 0) {

    profile_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_directory_);
  }
  if (from.home_directory().size() > 0) {

    home_directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_directory_);
  }
  if (from.script_path().size() > 0) {

    script_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_path_);
  }
  if (from.is_disabled() != 0) {
    set_is_disabled(from.is_disabled());
  }
  if (from.is_password_cant_change() != 0) {
    set_is_password_cant_change(from.is_password_cant_change());
  }
  if (from.is_password_expired() != 0) {
    set_is_password_expired(from.is_password_expired());
  }
  if (from.is_dont_expire_password() != 0) {
    set_is_dont_expire_password(from.is_dont_expire_password());
  }
  if (from.is_lockout() != 0) {
    set_is_lockout(from.is_lockout());
  }
  if (from.number_logons() != 0) {
    set_number_logons(from.number_logons());
  }
  if (from.bad_password_count() != 0) {
    set_bad_password_count(from.bad_password_count());
  }
  if (from.last_logon_time() != 0) {
    set_last_logon_time(from.last_logon_time());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.country_code() != 0) {
    set_country_code(from.country_code());
  }
  if (from.codepage() != 0) {
    set_codepage(from.codepage());
  }
  if (from.primary_group_id() != 0) {
    set_primary_group_id(from.primary_group_id());
  }
}

void Users_Item::CopyFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Users.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users_Item::IsInitialized() const {
  return true;
}

void Users_Item::Swap(Users_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users_Item::InternalSwap(Users_Item* other) {
  using std::swap;
  full_name_.Swap(&other->full_name_);
  comment_.Swap(&other->comment_);
  profile_directory_.Swap(&other->profile_directory_);
  home_directory_.Swap(&other->home_directory_);
  script_path_.Swap(&other->script_path_);
  swap(is_disabled_, other->is_disabled_);
  swap(is_password_cant_change_, other->is_password_cant_change_);
  swap(is_password_expired_, other->is_password_expired_);
  swap(is_dont_expire_password_, other->is_dont_expire_password_);
  swap(is_lockout_, other->is_lockout_);
  swap(number_logons_, other->number_logons_);
  swap(bad_password_count_, other->bad_password_count_);
  swap(last_logon_time_, other->last_logon_time_);
  swap(user_id_, other->user_id_);
  swap(country_code_, other->country_code_);
  swap(codepage_, other->codepage_);
  swap(primary_group_id_, other->primary_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users_Item::GetTypeName() const {
  return "aspia.system_info.Users.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Users_Item

// string full_name = 1;
void Users_Item::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::full_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.full_name)
  return full_name_.GetNoArena();
}
void Users_Item::set_full_name(const ::std::string& value) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.full_name)
}
#if LANG_CXX11
void Users_Item::set_full_name(::std::string&& value) {
  
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.full_name)
}
#endif
void Users_Item::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.full_name)
}
void Users_Item::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.full_name)
}
::std::string* Users_Item::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_full_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.full_name)
  
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.full_name)
}

// string comment = 2;
void Users_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.comment)
  return comment_.GetNoArena();
}
void Users_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.comment)
}
#if LANG_CXX11
void Users_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.comment)
}
#endif
void Users_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.comment)
}
void Users_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.comment)
}
::std::string* Users_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.comment)
}

// bool is_disabled = 3;
void Users_Item::clear_is_disabled() {
  is_disabled_ = false;
}
bool Users_Item::is_disabled() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_disabled)
  return is_disabled_;
}
void Users_Item::set_is_disabled(bool value) {
  
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_disabled)
}

// bool is_password_cant_change = 4;
void Users_Item::clear_is_password_cant_change() {
  is_password_cant_change_ = false;
}
bool Users_Item::is_password_cant_change() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_password_cant_change)
  return is_password_cant_change_;
}
void Users_Item::set_is_password_cant_change(bool value) {
  
  is_password_cant_change_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_password_cant_change)
}

// bool is_password_expired = 5;
void Users_Item::clear_is_password_expired() {
  is_password_expired_ = false;
}
bool Users_Item::is_password_expired() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_password_expired)
  return is_password_expired_;
}
void Users_Item::set_is_password_expired(bool value) {
  
  is_password_expired_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_password_expired)
}

// bool is_dont_expire_password = 6;
void Users_Item::clear_is_dont_expire_password() {
  is_dont_expire_password_ = false;
}
bool Users_Item::is_dont_expire_password() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_dont_expire_password)
  return is_dont_expire_password_;
}
void Users_Item::set_is_dont_expire_password(bool value) {
  
  is_dont_expire_password_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_dont_expire_password)
}

// bool is_lockout = 7;
void Users_Item::clear_is_lockout() {
  is_lockout_ = false;
}
bool Users_Item::is_lockout() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.is_lockout)
  return is_lockout_;
}
void Users_Item::set_is_lockout(bool value) {
  
  is_lockout_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.is_lockout)
}

// uint32 number_logons = 8;
void Users_Item::clear_number_logons() {
  number_logons_ = 0u;
}
::google::protobuf::uint32 Users_Item::number_logons() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.number_logons)
  return number_logons_;
}
void Users_Item::set_number_logons(::google::protobuf::uint32 value) {
  
  number_logons_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.number_logons)
}

// uint32 bad_password_count = 9;
void Users_Item::clear_bad_password_count() {
  bad_password_count_ = 0u;
}
::google::protobuf::uint32 Users_Item::bad_password_count() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.bad_password_count)
  return bad_password_count_;
}
void Users_Item::set_bad_password_count(::google::protobuf::uint32 value) {
  
  bad_password_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.bad_password_count)
}

// int64 last_logon_time = 10;
void Users_Item::clear_last_logon_time() {
  last_logon_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Users_Item::last_logon_time() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.last_logon_time)
  return last_logon_time_;
}
void Users_Item::set_last_logon_time(::google::protobuf::int64 value) {
  
  last_logon_time_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.last_logon_time)
}

// uint32 user_id = 11;
void Users_Item::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 Users_Item::user_id() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.user_id)
  return user_id_;
}
void Users_Item::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.user_id)
}

// string profile_directory = 12;
void Users_Item::clear_profile_directory() {
  profile_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::profile_directory() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.profile_directory)
  return profile_directory_.GetNoArena();
}
void Users_Item::set_profile_directory(const ::std::string& value) {
  
  profile_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.profile_directory)
}
#if LANG_CXX11
void Users_Item::set_profile_directory(::std::string&& value) {
  
  profile_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.profile_directory)
}
#endif
void Users_Item::set_profile_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profile_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.profile_directory)
}
void Users_Item::set_profile_directory(const char* value, size_t size) {
  
  profile_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.profile_directory)
}
::std::string* Users_Item::mutable_profile_directory() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.profile_directory)
  return profile_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_profile_directory() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.profile_directory)
  
  return profile_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_profile_directory(::std::string* profile_directory) {
  if (profile_directory != NULL) {
    
  } else {
    
  }
  profile_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile_directory);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.profile_directory)
}

// string home_directory = 13;
void Users_Item::clear_home_directory() {
  home_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::home_directory() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.home_directory)
  return home_directory_.GetNoArena();
}
void Users_Item::set_home_directory(const ::std::string& value) {
  
  home_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.home_directory)
}
#if LANG_CXX11
void Users_Item::set_home_directory(::std::string&& value) {
  
  home_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.home_directory)
}
#endif
void Users_Item::set_home_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  home_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.home_directory)
}
void Users_Item::set_home_directory(const char* value, size_t size) {
  
  home_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.home_directory)
}
::std::string* Users_Item::mutable_home_directory() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.home_directory)
  return home_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_home_directory() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.home_directory)
  
  return home_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_home_directory(::std::string* home_directory) {
  if (home_directory != NULL) {
    
  } else {
    
  }
  home_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home_directory);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.home_directory)
}

// string script_path = 14;
void Users_Item::clear_script_path() {
  script_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Users_Item::script_path() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.script_path)
  return script_path_.GetNoArena();
}
void Users_Item::set_script_path(const ::std::string& value) {
  
  script_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.script_path)
}
#if LANG_CXX11
void Users_Item::set_script_path(::std::string&& value) {
  
  script_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Users.Item.script_path)
}
#endif
void Users_Item::set_script_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  script_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Users.Item.script_path)
}
void Users_Item::set_script_path(const char* value, size_t size) {
  
  script_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Users.Item.script_path)
}
::std::string* Users_Item::mutable_script_path() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.Item.script_path)
  return script_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Users_Item::release_script_path() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Users.Item.script_path)
  
  return script_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Users_Item::set_allocated_script_path(::std::string* script_path) {
  if (script_path != NULL) {
    
  } else {
    
  }
  script_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_path);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Users.Item.script_path)
}

// uint32 country_code = 15;
void Users_Item::clear_country_code() {
  country_code_ = 0u;
}
::google::protobuf::uint32 Users_Item::country_code() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.country_code)
  return country_code_;
}
void Users_Item::set_country_code(::google::protobuf::uint32 value) {
  
  country_code_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.country_code)
}

// uint32 codepage = 16;
void Users_Item::clear_codepage() {
  codepage_ = 0u;
}
::google::protobuf::uint32 Users_Item::codepage() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.codepage)
  return codepage_;
}
void Users_Item::set_codepage(::google::protobuf::uint32 value) {
  
  codepage_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.codepage)
}

// uint32 primary_group_id = 17;
void Users_Item::clear_primary_group_id() {
  primary_group_id_ = 0u;
}
::google::protobuf::uint32 Users_Item::primary_group_id() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.Item.primary_group_id)
  return primary_group_id_;
}
void Users_Item::set_primary_group_id(::google::protobuf::uint32 value) {
  
  primary_group_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Users.Item.primary_group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users::Users()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Users)
}
Users::Users(const Users& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Users)
}

void Users::SharedCtor() {
  _cached_size_ = 0;
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Users)
  SharedDtor();
}

void Users::SharedDtor() {
}

void Users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users& Users::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Users* Users::New(::google::protobuf::Arena* arena) const {
  Users* n = new Users;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Users)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Users.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Users)
  return false;
#undef DO_
}

void Users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Users.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Users)
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Users)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Users.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users*>(&from));
}

void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::Swap(Users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users::InternalSwap(Users* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users::GetTypeName() const {
  return "aspia.system_info.Users";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Users

// repeated .aspia.system_info.Users.Item item = 1;
int Users::item_size() const {
  return item_.size();
}
void Users::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Users_Item& Users::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Users.item)
  return item_.Get(index);
}
::aspia::system_info::Users_Item* Users::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Users.item)
  return item_.Mutable(index);
}
::aspia::system_info::Users_Item* Users::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Users.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Users_Item >*
Users::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Users.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Users_Item >&
Users::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Users.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups_Item::kNameFieldNumber;
const int UserGroups_Item::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups_Item::UserGroups_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.UserGroups.Item)
}
UserGroups_Item::UserGroups_Item(const UserGroups_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.UserGroups.Item)
}

void UserGroups_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserGroups_Item::~UserGroups_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.UserGroups.Item)
  SharedDtor();
}

void UserGroups_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserGroups_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups_Item& UserGroups_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGroups_Item* UserGroups_Item::New(::google::protobuf::Arena* arena) const {
  UserGroups_Item* n = new UserGroups_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserGroups_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.UserGroups.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.UserGroups.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.UserGroups.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.UserGroups.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.UserGroups.Item)
  return false;
#undef DO_
}

void UserGroups_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.UserGroups.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.UserGroups.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.UserGroups.Item)
}

size_t UserGroups_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.UserGroups.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups_Item*>(&from));
}

void UserGroups_Item::MergeFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.UserGroups.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
}

void UserGroups_Item::CopyFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.UserGroups.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups_Item::IsInitialized() const {
  return true;
}

void UserGroups_Item::Swap(UserGroups_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups_Item::InternalSwap(UserGroups_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  comment_.Swap(&other->comment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups_Item::GetTypeName() const {
  return "aspia.system_info.UserGroups.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGroups_Item

// string name = 1;
void UserGroups_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserGroups_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.Item.name)
  return name_.GetNoArena();
}
void UserGroups_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.UserGroups.Item.name)
}
#if LANG_CXX11
void UserGroups_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.UserGroups.Item.name)
}
#endif
void UserGroups_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.UserGroups.Item.name)
}
void UserGroups_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.UserGroups.Item.name)
}
::std::string* UserGroups_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGroups_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.UserGroups.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGroups_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.UserGroups.Item.name)
}

// string comment = 2;
void UserGroups_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserGroups_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.Item.comment)
  return comment_.GetNoArena();
}
void UserGroups_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.UserGroups.Item.comment)
}
#if LANG_CXX11
void UserGroups_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.UserGroups.Item.comment)
}
#endif
void UserGroups_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.UserGroups.Item.comment)
}
void UserGroups_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.UserGroups.Item.comment)
}
::std::string* UserGroups_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserGroups_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.system_info.UserGroups.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserGroups_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.UserGroups.Item.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups::UserGroups()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.UserGroups)
}
UserGroups::UserGroups(const UserGroups& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.UserGroups)
}

void UserGroups::SharedCtor() {
  _cached_size_ = 0;
}

UserGroups::~UserGroups() {
  // @@protoc_insertion_point(destructor:aspia.system_info.UserGroups)
  SharedDtor();
}

void UserGroups::SharedDtor() {
}

void UserGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups& UserGroups::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserGroups* UserGroups::New(::google::protobuf::Arena* arena) const {
  UserGroups* n = new UserGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool UserGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.UserGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.UserGroups.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.UserGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.UserGroups)
  return false;
#undef DO_
}

void UserGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.UserGroups.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.UserGroups)
}

size_t UserGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.UserGroups)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.UserGroups.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups*>(&from));
}

void UserGroups::MergeFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.UserGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void UserGroups::CopyFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.UserGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups::IsInitialized() const {
  return true;
}

void UserGroups::Swap(UserGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups::InternalSwap(UserGroups* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups::GetTypeName() const {
  return "aspia.system_info.UserGroups";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGroups

// repeated .aspia.system_info.UserGroups.Item item = 1;
int UserGroups::item_size() const {
  return item_.size();
}
void UserGroups::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::UserGroups_Item& UserGroups::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.UserGroups.item)
  return item_.Get(index);
}
::aspia::system_info::UserGroups_Item* UserGroups::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.UserGroups.item)
  return item_.Mutable(index);
}
::aspia::system_info::UserGroups_Item* UserGroups::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.UserGroups.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::UserGroups_Item >*
UserGroups::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.UserGroups.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::UserGroups_Item >&
UserGroups::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.UserGroups.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions_Item::kUserNameFieldNumber;
const int Sessions_Item::kDomainNameFieldNumber;
const int Sessions_Item::kSessionIdFieldNumber;
const int Sessions_Item::kConnectStateFieldNumber;
const int Sessions_Item::kClientNameFieldNumber;
const int Sessions_Item::kWinstationNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions_Item::Sessions_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Sessions.Item)
}
Sessions_Item::Sessions_Item(const Sessions_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_name().size() > 0) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  connect_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connect_state().size() > 0) {
    connect_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_state_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_name().size() > 0) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.winstation_name().size() > 0) {
    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Sessions.Item)
}

void Sessions_Item::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  _cached_size_ = 0;
}

Sessions_Item::~Sessions_Item() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Sessions.Item)
  SharedDtor();
}

void Sessions_Item::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sessions_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions_Item& Sessions_Item::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sessions_Item* Sessions_Item::New(::google::protobuf::Arena* arena) const {
  Sessions_Item* n = new Sessions_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Sessions_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Sessions.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_name().data(), static_cast<int>(this->domain_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connect_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connect_state().data(), static_cast<int>(this->connect_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.connect_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_name().data(), static_cast<int>(this->client_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.client_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string winstation_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winstation_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.Sessions.Item.winstation_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Sessions.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Sessions.Item)
  return false;
#undef DO_
}

void Sessions_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), static_cast<int>(this->domain_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_name(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // string connect_state = 4;
  if (this->connect_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_state().data(), static_cast<int>(this->connect_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.connect_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connect_state(), output);
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_name(), output);
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.Sessions.Item.winstation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->winstation_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Sessions.Item)
}

size_t Sessions_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Sessions.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_name());
  }

  // string connect_state = 4;
  if (this->connect_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connect_state());
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_name());
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->winstation_name());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions_Item*>(&from));
}

void Sessions_Item::MergeFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Sessions.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.domain_name().size() > 0) {

    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  if (from.connect_state().size() > 0) {

    connect_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_state_);
  }
  if (from.client_name().size() > 0) {

    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  if (from.winstation_name().size() > 0) {

    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void Sessions_Item::CopyFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Sessions.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions_Item::IsInitialized() const {
  return true;
}

void Sessions_Item::Swap(Sessions_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions_Item::InternalSwap(Sessions_Item* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  domain_name_.Swap(&other->domain_name_);
  connect_state_.Swap(&other->connect_state_);
  client_name_.Swap(&other->client_name_);
  winstation_name_.Swap(&other->winstation_name_);
  swap(session_id_, other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions_Item::GetTypeName() const {
  return "aspia.system_info.Sessions.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sessions_Item

// string user_name = 1;
void Sessions_Item::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::user_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.user_name)
  return user_name_.GetNoArena();
}
void Sessions_Item::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.user_name)
}
#if LANG_CXX11
void Sessions_Item::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.user_name)
}
#endif
void Sessions_Item::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.user_name)
}
void Sessions_Item::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.user_name)
}
::std::string* Sessions_Item::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_user_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.user_name)
}

// string domain_name = 2;
void Sessions_Item::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::domain_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.domain_name)
  return domain_name_.GetNoArena();
}
void Sessions_Item::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.domain_name)
}
#if LANG_CXX11
void Sessions_Item::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.domain_name)
}
#endif
void Sessions_Item::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.domain_name)
}
void Sessions_Item::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.domain_name)
}
::std::string* Sessions_Item::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_domain_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.domain_name)
}

// uint32 session_id = 3;
void Sessions_Item::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 Sessions_Item::session_id() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.session_id)
  return session_id_;
}
void Sessions_Item::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.session_id)
}

// string connect_state = 4;
void Sessions_Item::clear_connect_state() {
  connect_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::connect_state() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.connect_state)
  return connect_state_.GetNoArena();
}
void Sessions_Item::set_connect_state(const ::std::string& value) {
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.connect_state)
}
#if LANG_CXX11
void Sessions_Item::set_connect_state(::std::string&& value) {
  
  connect_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.connect_state)
}
#endif
void Sessions_Item::set_connect_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.connect_state)
}
void Sessions_Item::set_connect_state(const char* value, size_t size) {
  
  connect_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.connect_state)
}
::std::string* Sessions_Item::mutable_connect_state() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.connect_state)
  return connect_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_connect_state() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.connect_state)
  
  return connect_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_connect_state(::std::string* connect_state) {
  if (connect_state != NULL) {
    
  } else {
    
  }
  connect_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_state);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.connect_state)
}

// string client_name = 5;
void Sessions_Item::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::client_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.client_name)
  return client_name_.GetNoArena();
}
void Sessions_Item::set_client_name(const ::std::string& value) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.client_name)
}
#if LANG_CXX11
void Sessions_Item::set_client_name(::std::string&& value) {
  
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.client_name)
}
#endif
void Sessions_Item::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.client_name)
}
void Sessions_Item::set_client_name(const char* value, size_t size) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.client_name)
}
::std::string* Sessions_Item::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_client_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.client_name)
  
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.client_name)
}

// string winstation_name = 6;
void Sessions_Item::clear_winstation_name() {
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Sessions_Item::winstation_name() const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.Item.winstation_name)
  return winstation_name_.GetNoArena();
}
void Sessions_Item::set_winstation_name(const ::std::string& value) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.system_info.Sessions.Item.winstation_name)
}
#if LANG_CXX11
void Sessions_Item::set_winstation_name(::std::string&& value) {
  
  winstation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.system_info.Sessions.Item.winstation_name)
}
#endif
void Sessions_Item::set_winstation_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.system_info.Sessions.Item.winstation_name)
}
void Sessions_Item::set_winstation_name(const char* value, size_t size) {
  
  winstation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.system_info.Sessions.Item.winstation_name)
}
::std::string* Sessions_Item::mutable_winstation_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.Item.winstation_name)
  return winstation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sessions_Item::release_winstation_name() {
  // @@protoc_insertion_point(field_release:aspia.system_info.Sessions.Item.winstation_name)
  
  return winstation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sessions_Item::set_allocated_winstation_name(::std::string* winstation_name) {
  if (winstation_name != NULL) {
    
  } else {
    
  }
  winstation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winstation_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.system_info.Sessions.Item.winstation_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions::Sessions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.Sessions)
}
Sessions::Sessions(const Sessions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.Sessions)
}

void Sessions::SharedCtor() {
  _cached_size_ = 0;
}

Sessions::~Sessions() {
  // @@protoc_insertion_point(destructor:aspia.system_info.Sessions)
  SharedDtor();
}

void Sessions::SharedDtor() {
}

void Sessions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions& Sessions::default_instance() {
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sessions* Sessions::New(::google::protobuf::Arena* arena) const {
  Sessions* n = new Sessions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Sessions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.Sessions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.Sessions.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.Sessions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.Sessions)
  return false;
#undef DO_
}

void Sessions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.Sessions.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.Sessions)
}

size_t Sessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.Sessions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.Sessions.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions*>(&from));
}

void Sessions::MergeFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.Sessions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Sessions::CopyFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.Sessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions::IsInitialized() const {
  return true;
}

void Sessions::Swap(Sessions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions::InternalSwap(Sessions* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions::GetTypeName() const {
  return "aspia.system_info.Sessions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sessions

// repeated .aspia.system_info.Sessions.Item item = 1;
int Sessions::item_size() const {
  return item_.size();
}
void Sessions::clear_item() {
  item_.Clear();
}
const ::aspia::system_info::Sessions_Item& Sessions::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.system_info.Sessions.item)
  return item_.Get(index);
}
::aspia::system_info::Sessions_Item* Sessions::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.system_info.Sessions.item)
  return item_.Mutable(index);
}
::aspia::system_info::Sessions_Item* Sessions::add_item() {
  // @@protoc_insertion_point(field_add:aspia.system_info.Sessions.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::aspia::system_info::Sessions_Item >*
Sessions::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.system_info.Sessions.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::aspia::system_info::Sessions_Item >&
Sessions::item() const {
  // @@protoc_insertion_point(field_list:aspia.system_info.Sessions.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace system_info
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

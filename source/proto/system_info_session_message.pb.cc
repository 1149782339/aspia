// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info_session_message.proto

#include "system_info_session_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiChassis_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis_Item>
      _instance;
} _DmiChassis_Item_default_instance_;
class DmiChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis>
      _instance;
} _DmiChassis_default_instance_;
class DmiCaches_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiCaches_Item>
      _instance;
} _DmiCaches_Item_default_instance_;
class DmiCachesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiCaches>
      _instance;
} _DmiCaches_default_instance_;
class DmiProcessors_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessors_Item>
      _instance;
} _DmiProcessors_Item_default_instance_;
class DmiProcessorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiProcessors>
      _instance;
} _DmiProcessors_default_instance_;
class DmiMemoryDevices_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiMemoryDevices_Item>
      _instance;
} _DmiMemoryDevices_Item_default_instance_;
class DmiMemoryDevicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiMemoryDevices>
      _instance;
} _DmiMemoryDevices_default_instance_;
class DmiSystemSlots_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiSystemSlots_Item>
      _instance;
} _DmiSystemSlots_Item_default_instance_;
class DmiSystemSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiSystemSlots>
      _instance;
} _DmiSystemSlots_default_instance_;
class DmiPortConnectors_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnectors_Item>
      _instance;
} _DmiPortConnectors_Item_default_instance_;
class DmiPortConnectorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortConnectors>
      _instance;
} _DmiPortConnectors_default_instance_;
class DmiOnBoardDevices_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiOnBoardDevices_Item>
      _instance;
} _DmiOnBoardDevices_Item_default_instance_;
class DmiOnBoardDevicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiOnBoardDevices>
      _instance;
} _DmiOnBoardDevices_default_instance_;
class DmiPointingDevices_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPointingDevices_Item>
      _instance;
} _DmiPointingDevices_Item_default_instance_;
class DmiPointingDevicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPointingDevices>
      _instance;
} _DmiPointingDevices_default_instance_;
class DmiPortableBattery_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortableBattery_Item>
      _instance;
} _DmiPortableBattery_Item_default_instance_;
class DmiPortableBatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiPortableBattery>
      _instance;
} _DmiPortableBattery_default_instance_;
class Programs_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Programs_Item>
      _instance;
} _Programs_Item_default_instance_;
class ProgramsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Programs>
      _instance;
} _Programs_default_instance_;
class Services_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Services_Item>
      _instance;
} _Services_Item_default_instance_;
class ServicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Services>
      _instance;
} _Services_default_instance_;
class NetworkCards_Item_IpAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item_IpAddress>
      _instance;
} _NetworkCards_Item_IpAddress_default_instance_;
class NetworkCards_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards_Item>
      _instance;
} _NetworkCards_Item_default_instance_;
class NetworkCardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkCards>
      _instance;
} _NetworkCards_default_instance_;
class OpenConnections_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections_Item>
      _instance;
} _OpenConnections_Item_default_instance_;
class OpenConnectionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenConnections>
      _instance;
} _OpenConnections_default_instance_;
class SharedResources_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SharedResources_Item>
      _instance;
} _SharedResources_Item_default_instance_;
class SharedResourcesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SharedResources>
      _instance;
} _SharedResources_default_instance_;
class Routes_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Routes_Item>
      _instance;
} _Routes_Item_default_instance_;
class RoutesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Routes>
      _instance;
} _Routes_default_instance_;
class Users_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Users_Item>
      _instance;
} _Users_Item_default_instance_;
class UsersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Users>
      _instance;
} _Users_default_instance_;
class UserGroups_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGroups_Item>
      _instance;
} _UserGroups_Item_default_instance_;
class UserGroupsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGroups>
      _instance;
} _UserGroups_default_instance_;
class Sessions_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sessions_Item>
      _instance;
} _Sessions_Item_default_instance_;
class SessionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sessions>
      _instance;
} _Sessions_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto {
void InitDefaultsDmiChassis_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiChassis_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiChassis_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiChassis_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiChassis_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiChassis_ItemImpl);
}

void InitDefaultsDmiChassisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiChassis_Item();
  {
    void* ptr = &::aspia::proto::_DmiChassis_default_instance_;
    new (ptr) ::aspia::proto::DmiChassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiChassis::InitAsDefaultInstance();
}

void InitDefaultsDmiChassis() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiChassisImpl);
}

void InitDefaultsDmiCaches_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiCaches_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiCaches_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiCaches_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiCaches_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiCaches_ItemImpl);
}

void InitDefaultsDmiCachesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiCaches_Item();
  {
    void* ptr = &::aspia::proto::_DmiCaches_default_instance_;
    new (ptr) ::aspia::proto::DmiCaches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiCaches::InitAsDefaultInstance();
}

void InitDefaultsDmiCaches() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiCachesImpl);
}

void InitDefaultsDmiProcessors_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiProcessors_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiProcessors_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiProcessors_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiProcessors_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiProcessors_ItemImpl);
}

void InitDefaultsDmiProcessorsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiProcessors_Item();
  {
    void* ptr = &::aspia::proto::_DmiProcessors_default_instance_;
    new (ptr) ::aspia::proto::DmiProcessors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiProcessors::InitAsDefaultInstance();
}

void InitDefaultsDmiProcessors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiProcessorsImpl);
}

void InitDefaultsDmiMemoryDevices_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiMemoryDevices_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiMemoryDevices_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiMemoryDevices_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiMemoryDevices_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiMemoryDevices_ItemImpl);
}

void InitDefaultsDmiMemoryDevicesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiMemoryDevices_Item();
  {
    void* ptr = &::aspia::proto::_DmiMemoryDevices_default_instance_;
    new (ptr) ::aspia::proto::DmiMemoryDevices();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiMemoryDevices::InitAsDefaultInstance();
}

void InitDefaultsDmiMemoryDevices() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiMemoryDevicesImpl);
}

void InitDefaultsDmiSystemSlots_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiSystemSlots_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiSystemSlots_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiSystemSlots_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiSystemSlots_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiSystemSlots_ItemImpl);
}

void InitDefaultsDmiSystemSlotsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiSystemSlots_Item();
  {
    void* ptr = &::aspia::proto::_DmiSystemSlots_default_instance_;
    new (ptr) ::aspia::proto::DmiSystemSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiSystemSlots::InitAsDefaultInstance();
}

void InitDefaultsDmiSystemSlots() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiSystemSlotsImpl);
}

void InitDefaultsDmiPortConnectors_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiPortConnectors_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiPortConnectors_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortConnectors_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiPortConnectors_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortConnectors_ItemImpl);
}

void InitDefaultsDmiPortConnectorsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortConnectors_Item();
  {
    void* ptr = &::aspia::proto::_DmiPortConnectors_default_instance_;
    new (ptr) ::aspia::proto::DmiPortConnectors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortConnectors::InitAsDefaultInstance();
}

void InitDefaultsDmiPortConnectors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortConnectorsImpl);
}

void InitDefaultsDmiOnBoardDevices_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiOnBoardDevices_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiOnBoardDevices_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiOnBoardDevices_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiOnBoardDevices_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiOnBoardDevices_ItemImpl);
}

void InitDefaultsDmiOnBoardDevicesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiOnBoardDevices_Item();
  {
    void* ptr = &::aspia::proto::_DmiOnBoardDevices_default_instance_;
    new (ptr) ::aspia::proto::DmiOnBoardDevices();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiOnBoardDevices::InitAsDefaultInstance();
}

void InitDefaultsDmiOnBoardDevices() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiOnBoardDevicesImpl);
}

void InitDefaultsDmiPointingDevices_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiPointingDevices_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiPointingDevices_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPointingDevices_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiPointingDevices_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPointingDevices_ItemImpl);
}

void InitDefaultsDmiPointingDevicesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPointingDevices_Item();
  {
    void* ptr = &::aspia::proto::_DmiPointingDevices_default_instance_;
    new (ptr) ::aspia::proto::DmiPointingDevices();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPointingDevices::InitAsDefaultInstance();
}

void InitDefaultsDmiPointingDevices() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPointingDevicesImpl);
}

void InitDefaultsDmiPortableBattery_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiPortableBattery_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiPortableBattery_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortableBattery_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiPortableBattery_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortableBattery_ItemImpl);
}

void InitDefaultsDmiPortableBatteryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortableBattery_Item();
  {
    void* ptr = &::aspia::proto::_DmiPortableBattery_default_instance_;
    new (ptr) ::aspia::proto::DmiPortableBattery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiPortableBattery::InitAsDefaultInstance();
}

void InitDefaultsDmiPortableBattery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiPortableBatteryImpl);
}

void InitDefaultsPrograms_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Programs_Item_default_instance_;
    new (ptr) ::aspia::proto::Programs_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Programs_Item::InitAsDefaultInstance();
}

void InitDefaultsPrograms_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrograms_ItemImpl);
}

void InitDefaultsProgramsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsPrograms_Item();
  {
    void* ptr = &::aspia::proto::_Programs_default_instance_;
    new (ptr) ::aspia::proto::Programs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Programs::InitAsDefaultInstance();
}

void InitDefaultsPrograms() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProgramsImpl);
}

void InitDefaultsServices_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Services_Item_default_instance_;
    new (ptr) ::aspia::proto::Services_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Services_Item::InitAsDefaultInstance();
}

void InitDefaultsServices_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServices_ItemImpl);
}

void InitDefaultsServicesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsServices_Item();
  {
    void* ptr = &::aspia::proto::_Services_default_instance_;
    new (ptr) ::aspia::proto::Services();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Services::InitAsDefaultInstance();
}

void InitDefaultsServices() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServicesImpl);
}

void InitDefaultsNetworkCards_Item_IpAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_NetworkCards_Item_IpAddress_default_instance_;
    new (ptr) ::aspia::proto::NetworkCards_Item_IpAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCards_Item_IpAddress::InitAsDefaultInstance();
}

void InitDefaultsNetworkCards_Item_IpAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCards_Item_IpAddressImpl);
}

void InitDefaultsNetworkCards_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item_IpAddress();
  {
    void* ptr = &::aspia::proto::_NetworkCards_Item_default_instance_;
    new (ptr) ::aspia::proto::NetworkCards_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCards_Item::InitAsDefaultInstance();
}

void InitDefaultsNetworkCards_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCards_ItemImpl);
}

void InitDefaultsNetworkCardsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item();
  {
    void* ptr = &::aspia::proto::_NetworkCards_default_instance_;
    new (ptr) ::aspia::proto::NetworkCards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::NetworkCards::InitAsDefaultInstance();
}

void InitDefaultsNetworkCards() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNetworkCardsImpl);
}

void InitDefaultsOpenConnections_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_OpenConnections_Item_default_instance_;
    new (ptr) ::aspia::proto::OpenConnections_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpenConnections_Item::InitAsDefaultInstance();
}

void InitDefaultsOpenConnections_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpenConnections_ItemImpl);
}

void InitDefaultsOpenConnectionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsOpenConnections_Item();
  {
    void* ptr = &::aspia::proto::_OpenConnections_default_instance_;
    new (ptr) ::aspia::proto::OpenConnections();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::OpenConnections::InitAsDefaultInstance();
}

void InitDefaultsOpenConnections() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpenConnectionsImpl);
}

void InitDefaultsSharedResources_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_SharedResources_Item_default_instance_;
    new (ptr) ::aspia::proto::SharedResources_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SharedResources_Item::InitAsDefaultInstance();
}

void InitDefaultsSharedResources_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSharedResources_ItemImpl);
}

void InitDefaultsSharedResourcesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSharedResources_Item();
  {
    void* ptr = &::aspia::proto::_SharedResources_default_instance_;
    new (ptr) ::aspia::proto::SharedResources();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SharedResources::InitAsDefaultInstance();
}

void InitDefaultsSharedResources() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSharedResourcesImpl);
}

void InitDefaultsRoutes_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Routes_Item_default_instance_;
    new (ptr) ::aspia::proto::Routes_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Routes_Item::InitAsDefaultInstance();
}

void InitDefaultsRoutes_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoutes_ItemImpl);
}

void InitDefaultsRoutesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsRoutes_Item();
  {
    void* ptr = &::aspia::proto::_Routes_default_instance_;
    new (ptr) ::aspia::proto::Routes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Routes::InitAsDefaultInstance();
}

void InitDefaultsRoutes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoutesImpl);
}

void InitDefaultsUsers_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Users_Item_default_instance_;
    new (ptr) ::aspia::proto::Users_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Users_Item::InitAsDefaultInstance();
}

void InitDefaultsUsers_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUsers_ItemImpl);
}

void InitDefaultsUsersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUsers_Item();
  {
    void* ptr = &::aspia::proto::_Users_default_instance_;
    new (ptr) ::aspia::proto::Users();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Users::InitAsDefaultInstance();
}

void InitDefaultsUsers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUsersImpl);
}

void InitDefaultsUserGroups_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_UserGroups_Item_default_instance_;
    new (ptr) ::aspia::proto::UserGroups_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::UserGroups_Item::InitAsDefaultInstance();
}

void InitDefaultsUserGroups_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGroups_ItemImpl);
}

void InitDefaultsUserGroupsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUserGroups_Item();
  {
    void* ptr = &::aspia::proto::_UserGroups_default_instance_;
    new (ptr) ::aspia::proto::UserGroups();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::UserGroups::InitAsDefaultInstance();
}

void InitDefaultsUserGroups() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGroupsImpl);
}

void InitDefaultsSessions_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Sessions_Item_default_instance_;
    new (ptr) ::aspia::proto::Sessions_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Sessions_Item::InitAsDefaultInstance();
}

void InitDefaultsSessions_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessions_ItemImpl);
}

void InitDefaultsSessionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSessions_Item();
  {
    void* ptr = &::aspia::proto::_Sessions_default_instance_;
    new (ptr) ::aspia::proto::Sessions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Sessions::InitAsDefaultInstance();
}

void InitDefaultsSessions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionsImpl);
}

}  // namespace protobuf_system_5finfo_5fsession_5fmessage_2eproto
namespace aspia {
namespace proto {
bool DmiChassis_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Type DmiChassis::TYPE_UNKNOWN;
const DmiChassis_Type DmiChassis::TYPE_OTHER;
const DmiChassis_Type DmiChassis::TYPE_DESKTOP;
const DmiChassis_Type DmiChassis::TYPE_LOW_PROFILE_DESKTOP;
const DmiChassis_Type DmiChassis::TYPE_PIZZA_BOX;
const DmiChassis_Type DmiChassis::TYPE_MINI_TOWER;
const DmiChassis_Type DmiChassis::TYPE_TOWER;
const DmiChassis_Type DmiChassis::TYPE_PORTABLE;
const DmiChassis_Type DmiChassis::TYPE_LAPTOP;
const DmiChassis_Type DmiChassis::TYPE_NOTEBOOK;
const DmiChassis_Type DmiChassis::TYPE_HAND_HELD;
const DmiChassis_Type DmiChassis::TYPE_DOCKING_STATION;
const DmiChassis_Type DmiChassis::TYPE_ALL_IN_ONE;
const DmiChassis_Type DmiChassis::TYPE_SUB_NOTEBOOK;
const DmiChassis_Type DmiChassis::TYPE_SPACE_SAVING;
const DmiChassis_Type DmiChassis::TYPE_LUNCH_BOX;
const DmiChassis_Type DmiChassis::TYPE_MAIN_SERVER_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_EXPANSION_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_SUB_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_BUS_EXPANSION_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_PERIPHERIAL_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_RAID_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_RACK_MOUNT_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_SEALED_CASE_PC;
const DmiChassis_Type DmiChassis::TYPE_MULTI_SYSTEM_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_COMPACT_PCI;
const DmiChassis_Type DmiChassis::TYPE_ADVANCED_TCA;
const DmiChassis_Type DmiChassis::TYPE_BLADE;
const DmiChassis_Type DmiChassis::TYPE_BLADE_ENCLOSURE;
const DmiChassis_Type DmiChassis::Type_MIN;
const DmiChassis_Type DmiChassis::Type_MAX;
const int DmiChassis::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Status DmiChassis::STATUS_UNKNOWN;
const DmiChassis_Status DmiChassis::STATUS_OTHER;
const DmiChassis_Status DmiChassis::STATUS_SAFE;
const DmiChassis_Status DmiChassis::STATUS_WARNING;
const DmiChassis_Status DmiChassis::STATUS_CRITICAL;
const DmiChassis_Status DmiChassis::STATUS_NON_RECOVERABLE;
const DmiChassis_Status DmiChassis::Status_MIN;
const DmiChassis_Status DmiChassis::Status_MAX;
const int DmiChassis::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_SecurityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_UNKNOWN;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_OTHER;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_NONE;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
const DmiChassis_SecurityStatus DmiChassis::SecurityStatus_MIN;
const DmiChassis_SecurityStatus DmiChassis::SecurityStatus_MAX;
const int DmiChassis::SecurityStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Location_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Location DmiCaches::LOCATION_UNKNOWN;
const DmiCaches_Location DmiCaches::LOCATION_INTERNAL;
const DmiCaches_Location DmiCaches::LOCATION_EXTERNAL;
const DmiCaches_Location DmiCaches::LOCATION_RESERVED;
const DmiCaches_Location DmiCaches::Location_MIN;
const DmiCaches_Location DmiCaches::Location_MAX;
const int DmiCaches::Location_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Status DmiCaches::STATUS_UNKNOWN;
const DmiCaches_Status DmiCaches::STATUS_ENABLED;
const DmiCaches_Status DmiCaches::STATUS_DISABLED;
const DmiCaches_Status DmiCaches::Status_MIN;
const DmiCaches_Status DmiCaches::Status_MAX;
const int DmiCaches::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Mode DmiCaches::MODE_UNKNOWN;
const DmiCaches_Mode DmiCaches::MODE_WRITE_THRU;
const DmiCaches_Mode DmiCaches::MODE_WRITE_BACK;
const DmiCaches_Mode DmiCaches::MODE_WRITE_WITH_MEMORY_ADDRESS;
const DmiCaches_Mode DmiCaches::Mode_MIN;
const DmiCaches_Mode DmiCaches::Mode_MAX;
const int DmiCaches::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_SRAMType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_BAD;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_OTHER;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_UNKNOWN;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_NON_BURST;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_BURST;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_PIPELINE_BURST;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_SYNCHRONOUS;
const DmiCaches_SRAMType DmiCaches::SRAM_TYPE_ASYNCHRONOUS;
const DmiCaches_SRAMType DmiCaches::SRAMType_MIN;
const DmiCaches_SRAMType DmiCaches::SRAMType_MAX;
const int DmiCaches::SRAMType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_ErrorCorrectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_UNKNOWN;
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_OTHER;
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_NONE;
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_PARITY;
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_SINGLE_BIT_ECC;
const DmiCaches_ErrorCorrectionType DmiCaches::ERROR_CORRECTION_TYPE_MULTI_BIT_ECC;
const DmiCaches_ErrorCorrectionType DmiCaches::ErrorCorrectionType_MIN;
const DmiCaches_ErrorCorrectionType DmiCaches::ErrorCorrectionType_MAX;
const int DmiCaches::ErrorCorrectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Type DmiCaches::TYPE_UNKNOWN;
const DmiCaches_Type DmiCaches::TYPE_OTHER;
const DmiCaches_Type DmiCaches::TYPE_INSTRUCTION;
const DmiCaches_Type DmiCaches::TYPE_DATA;
const DmiCaches_Type DmiCaches::TYPE_UNIFIED;
const DmiCaches_Type DmiCaches::Type_MIN;
const DmiCaches_Type DmiCaches::Type_MAX;
const int DmiCaches::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiCaches_Associativity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_UNKNOWN;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_OTHER;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_DIRECT_MAPPED;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_2_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_4_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_FULLY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_8_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_16_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_12_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_24_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_32_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_48_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_64_WAY;
const DmiCaches_Associativity DmiCaches::ASSOCIATIVITY_20_WAY;
const DmiCaches_Associativity DmiCaches::Associativity_MIN;
const DmiCaches_Associativity DmiCaches::Associativity_MAX;
const int DmiCaches::Associativity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Family_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Family DmiProcessors::FAMILY_UNKNOWN;
const DmiProcessors_Family DmiProcessors::FAMILY_OTHER;
const DmiProcessors_Family DmiProcessors::FAMILY_8086;
const DmiProcessors_Family DmiProcessors::FAMILY_80286;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_386_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_486_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_8087;
const DmiProcessors_Family DmiProcessors::FAMILY_80287;
const DmiProcessors_Family DmiProcessors::FAMILY_80387;
const DmiProcessors_Family DmiProcessors::FAMILY_80487;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_PRO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_2_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_PENTIUM_PROCESSOR_WITH_MMX;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CELERON_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_2_XEON_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_3_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_M1_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_M2_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CELEROM_M_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_DURON_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K5_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K6_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K6_2;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K6_3;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_29000_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K6_2_PLUS;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_601;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_603;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_603_PLUS;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_604;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_620;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_X704;
const DmiProcessors_Family DmiProcessors::FAMILY_POWER_PC_750;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_DUO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_ATOM_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_M_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_M3_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_M5_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_M7_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21064;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21066;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21164;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21164PC;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21164A;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21264;
const DmiProcessors_Family DmiProcessors::FAMILY_ALPHA_21364;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_2_ULTRA_DUAL_CORE_MOBILE_M_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_2_DUAL_CORE_MOBILE_M_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_2_DUAL_CORE_M_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_FX_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_R4000;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_R4200;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_R4400;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_R4600;
const DmiProcessors_Family DmiProcessors::FAMILY_MIPS_R10000;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_C_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_E_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_A_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_G_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_Z_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_R_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_FIREPRO_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_SPARC_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_SUPER_SPARC;
const DmiProcessors_Family DmiProcessors::FAMILY_MICRO_SPARC_2;
const DmiProcessors_Family DmiProcessors::FAMILY_MICRO_SPARC_2EP;
const DmiProcessors_Family DmiProcessors::FAMILY_ULTRA_SPARC;
const DmiProcessors_Family DmiProcessors::FAMILY_ULTRA_SPARC_2;
const DmiProcessors_Family DmiProcessors::FAMILY_ULTRA_SPARC_2I;
const DmiProcessors_Family DmiProcessors::FAMILY_ULTRA_SPARC_3;
const DmiProcessors_Family DmiProcessors::FAMILY_ULTRA_SPARC_3I;
const DmiProcessors_Family DmiProcessors::FAMILY_68040_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_68XXX;
const DmiProcessors_Family DmiProcessors::FAMILY_68000;
const DmiProcessors_Family DmiProcessors::FAMILY_68010;
const DmiProcessors_Family DmiProcessors::FAMILY_68020;
const DmiProcessors_Family DmiProcessors::FAMILY_68030;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_X2000_SERIES_APU;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_X3000_SERIES_APU;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ZEN_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_HOBBIT_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_CRUSOE_TM5000_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_CRUSOE_TM3000_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_EFFICEON_TM8000_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_WEITEK;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_ITANIUM_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_THIRD_GEN_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_8500;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_8000;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_7300LC;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_7200;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_7100LC;
const DmiProcessors_Family DmiProcessors::FAMILY_PA_RISC_7100;
const DmiProcessors_Family DmiProcessors::FAMILY_V30_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_3200_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_3000_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_5300_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_5100_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_5000_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_LV_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_ULV_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_7100_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_5400_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_5200_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_7200_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_7300_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_7400_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_MULTI_CORE_7400_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_3_XEON_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_3_PROCESSOR_WITH_SPEED_STEP;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_4_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AS400_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_MP_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_ITANIUM_2_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_M_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CELERON_D_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_D_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_SOLO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_DUO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_SOLO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_QUAD_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_I7_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CELERON_DUAL_CORE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_IBM390_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_G4;
const DmiProcessors_Family DmiProcessors::FAMILY_G5;
const DmiProcessors_Family DmiProcessors::FAMILY_ESA_390_G6;
const DmiProcessors_Family DmiProcessors::FAMILY_Z_ARCHITECTURE_BASE;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_I5_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_I3_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_VIA_C7_M_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_VIA_C7_D_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_VIA_C7_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_VIA_EDEN_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_MULTI_CORE_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_3XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_3XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_VIA_NANO_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_5XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_5XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_DUAL_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_QUAD_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_MULTI_CORE_7XXX_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_XEON_MULTI_CORE_3400_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_3000_PROCESSOR_SERIES;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_SEMPRON_II_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_QUAD_CORE_EMBEDDED_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_PHENOM_2_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_ATHLON_2_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_OPTERON_SIX_CORE_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_I860;
const DmiProcessors_Family DmiProcessors::FAMILY_I960;
const DmiProcessors_Family DmiProcessors::FAMILY_ARM_V7;
const DmiProcessors_Family DmiProcessors::FAMILY_ARM_V8;
const DmiProcessors_Family DmiProcessors::FAMILY_SH_3;
const DmiProcessors_Family DmiProcessors::FAMILY_SH_4;
const DmiProcessors_Family DmiProcessors::FAMILY_ARM;
const DmiProcessors_Family DmiProcessors::FAMILY_STRONG_ARM;
const DmiProcessors_Family DmiProcessors::FAMILY_6X86;
const DmiProcessors_Family DmiProcessors::FAMILY_MEDIA_GX;
const DmiProcessors_Family DmiProcessors::FAMILY_MII;
const DmiProcessors_Family DmiProcessors::FAMILY_WIN_CHIP;
const DmiProcessors_Family DmiProcessors::FAMILY_DSP;
const DmiProcessors_Family DmiProcessors::FAMILY_VIDEO_PROCESSOR;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_AMD_K7_FAMILY;
const DmiProcessors_Family DmiProcessors::FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY;
const DmiProcessors_Family DmiProcessors::Family_MIN;
const DmiProcessors_Family DmiProcessors::Family_MAX;
const int DmiProcessors::Family_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Type DmiProcessors::TYPE_UNKNOWN;
const DmiProcessors_Type DmiProcessors::TYPE_OTHER;
const DmiProcessors_Type DmiProcessors::TYPE_CENTRAL_PROCESSOR;
const DmiProcessors_Type DmiProcessors::TYPE_MATH_PROCESSOR;
const DmiProcessors_Type DmiProcessors::TYPE_DSP_PROCESSOR;
const DmiProcessors_Type DmiProcessors::TYPE_VIDEO_PROCESSOR;
const DmiProcessors_Type DmiProcessors::Type_MIN;
const DmiProcessors_Type DmiProcessors::Type_MAX;
const int DmiProcessors::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Status DmiProcessors::STATUS_UNKNOWN;
const DmiProcessors_Status DmiProcessors::STATUS_ENABLED;
const DmiProcessors_Status DmiProcessors::STATUS_DISABLED_BY_USER;
const DmiProcessors_Status DmiProcessors::STATUS_DISABLED_BY_BIOS;
const DmiProcessors_Status DmiProcessors::STATUS_IDLE;
const DmiProcessors_Status DmiProcessors::STATUS_OTHER;
const DmiProcessors_Status DmiProcessors::Status_MIN;
const DmiProcessors_Status DmiProcessors::Status_MAX;
const int DmiProcessors::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Upgrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_UNKNOWN;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_OTHER;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_DAUGHTER_BOARD;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_ZIF_SOCKET;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_REPLACEABLE_PIGGY_BACK;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_NONE;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_LIF_SOCKET;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SLOT_1;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SLOT_2;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_370_PIN_SOCKET;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SLOT_A;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SLOT_M;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_423;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_462;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_478;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_754;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_940;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_939;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_MPGA604;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA771;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA775;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_S1;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_AM2;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_F;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1366;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_G34;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_AM3;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_C32;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1156;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1567;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_PGA988A;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1288;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_RPGA988B;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1023;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1224;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1155;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1356;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA2011;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_FS1;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_FS2;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_FM1;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_FM2;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA2011_3;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1356_3;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1150;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1168;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1234;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1364;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_AM4;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA1151;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1356;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1440;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_BGA1515;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_LGA3647_1;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_SP3;
const DmiProcessors_Upgrade DmiProcessors::UPGRADE_SOCKET_SP3_R2;
const DmiProcessors_Upgrade DmiProcessors::Upgrade_MIN;
const DmiProcessors_Upgrade DmiProcessors::Upgrade_MAX;
const int DmiProcessors::Upgrade_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiProcessors_Characteristics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_NONE;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_64BIT_CAPABLE;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_MULTI_CORE;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_HARDWARE_THREAD;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_EXECUTE_PROTECTION;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_ENHANCED_VIRTUALIZATION;
const DmiProcessors_Characteristics DmiProcessors::CHARACTERISTIC_POWER_CONTROL;
const DmiProcessors_Characteristics DmiProcessors::Characteristics_MIN;
const DmiProcessors_Characteristics DmiProcessors::Characteristics_MAX;
const int DmiProcessors::Characteristics_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiMemoryDevices_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_UNKNOWN;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_OTHER;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_EDRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_VRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_SRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_RAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_ROM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_FLASH;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_EEPROM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_FEPROM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_EPROM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_CDRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_3DRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_SDRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_SGRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_RDRAM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DDR;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DDR2;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DDR2_FB_DIMM;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DDR3;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_FBD2;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_DDR4;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_LPDDR;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_LPDDR2;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_LPDDR3;
const DmiMemoryDevices_Type DmiMemoryDevices::TYPE_LPDDR4;
const DmiMemoryDevices_Type DmiMemoryDevices::Type_MIN;
const DmiMemoryDevices_Type DmiMemoryDevices::Type_MAX;
const int DmiMemoryDevices::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiMemoryDevices_FormFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_UNKNOWN;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_OTHER;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_SIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_SIP;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_CHIP;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_DIP;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_ZIP;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_PROPRIETARY_CARD;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_DIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_TSOP;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_ROW_OF_CHIPS;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_RIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_SODIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_SRIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FORM_FACTOR_FB_DIMM;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FormFactor_MIN;
const DmiMemoryDevices_FormFactor DmiMemoryDevices::FormFactor_MAX;
const int DmiMemoryDevices::FormFactor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_Type DmiSystemSlots::TYPE_UNKNOWN;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_OTHER;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_ISA;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MCA;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_EISA;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC_CARD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_VLB;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PROPRIETARY;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PROCESSOR_CARD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PROPRIETARY_MEMORY_CARD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_IO_RISER_CARD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_NUBUS;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_66;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_AGP;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_AGP_2X;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_AGP_4X;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_X;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_AGP_8X;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_M2_SOCKET_1DP;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_M2_SOCKET_1SD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_M2_SOCKET_2;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_M2_SOCKET_3;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_TYPE_I;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_TYPE_II;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_TYPE_III;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_TYPE_III_HE;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_TYPE_IV;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_30_TYPE_A;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_MXM_30_TYPE_B;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_SFF_8639;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_SFF_8639;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_MINI_52PIN_WITH_BOTTOM_SIDE;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_MINI_52PIN;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_MINI_76PIN;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC98_C20;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC98_C24;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC98_E;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC98_LOCAL_BUS;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PC98_CARD;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_X1;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_X2;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_X4;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_X8;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_X16;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_X1;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_X2;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_X4;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_X8;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_2_X16;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_X1;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_X2;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_X4;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_X8;
const DmiSystemSlots_Type DmiSystemSlots::TYPE_PCI_EXPRESS_3_X16;
const DmiSystemSlots_Type DmiSystemSlots::Type_MIN;
const DmiSystemSlots_Type DmiSystemSlots::Type_MAX;
const int DmiSystemSlots::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_Usage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_Usage DmiSystemSlots::USAGE_UNKNOWN;
const DmiSystemSlots_Usage DmiSystemSlots::USAGE_OTHER;
const DmiSystemSlots_Usage DmiSystemSlots::USAGE_AVAILABLE;
const DmiSystemSlots_Usage DmiSystemSlots::USAGE_IN_USE;
const DmiSystemSlots_Usage DmiSystemSlots::Usage_MIN;
const DmiSystemSlots_Usage DmiSystemSlots::Usage_MAX;
const int DmiSystemSlots::Usage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_BusWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_UNKNOWN;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_OTHER;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_8_BIT;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_16_BIT;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_32_BIT;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_64_BIT;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_128_BIT;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X1;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X2;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X4;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X8;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X12;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X16;
const DmiSystemSlots_BusWidth DmiSystemSlots::BUS_WIDTH_X32;
const DmiSystemSlots_BusWidth DmiSystemSlots::BusWidth_MIN;
const DmiSystemSlots_BusWidth DmiSystemSlots::BusWidth_MAX;
const int DmiSystemSlots::BusWidth_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiSystemSlots_Length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiSystemSlots_Length DmiSystemSlots::LENGTH_UNKNOWN;
const DmiSystemSlots_Length DmiSystemSlots::LENGTH_OTHER;
const DmiSystemSlots_Length DmiSystemSlots::LENGTH_SHORT;
const DmiSystemSlots_Length DmiSystemSlots::LENGTH_LONG;
const DmiSystemSlots_Length DmiSystemSlots::Length_MIN;
const DmiSystemSlots_Length DmiSystemSlots::Length_MAX;
const int DmiSystemSlots::Length_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPortConnectors_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPortConnectors_Type DmiPortConnectors::TYPE_UNKNOWN;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_NONE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PARALLEL_PORT_XT_AT_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PARALLEL_PORT_PS_2;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PARALLEL_PORT_ECP;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PARALLEL_PORT_EPP;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PARALLEL_PORT_ECP_EPP;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SERIAL_PORT_XT_AT_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SERIAL_PORT_16450_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SERIAL_PORT_16550_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SERIAL_PORT_16550A_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SCSI_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_MIDI_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_JOYSTICK_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_KEYBOARD_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_MOUSE_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SSA_SCSI;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_USB;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_FIREWIRE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PCMCIA_TYPE_I;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PCMCIA_TYPE_II;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PCMCIA_TYPE_III;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_CARDBUS;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_ACCESS_BUS_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SCSI_II;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SCSI_WIDE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PC_98;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PC_98_HIRESO;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_PC_H98;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_VIDEO_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_AUDIO_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_MODEM_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_NETWORK_PORT;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SATA;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_SAS;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_8251_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::TYPE_8251_FIFO_COMPATIBLE;
const DmiPortConnectors_Type DmiPortConnectors::Type_MIN;
const DmiPortConnectors_Type DmiPortConnectors::Type_MAX;
const int DmiPortConnectors::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPortConnectors_ConnectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_UNKNOWN;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_NONE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_OTHER;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_CENTRONICS;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MINI_CENTRONICS;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PROPRIETARY;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_25_MALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_25_FEMALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_15_MALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_15_FEMALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_9_MALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_DB_9_FEMALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_RJ_11;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_RJ_45;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_50_PIN_MINISCSI;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MINI_DIN;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MICRO_DIN;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PS_2;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_INFRARED;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_HP_HIL;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_ACCESS_BUS_USB;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_SSA_SCSI;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_CIRCULAR_DIN_8_MALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_CIRCULAR_DIN_8_FEMALE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_ONBOARD_IDE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_ONBOARD_FLOPPY;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_9_PIN_DUAL_INLINE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_25_PIN_DUAL_INLINE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_50_PIN_DUAL_INLINE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_68_PIN_DUAL_INLINE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_ONBOARD_SOUND_INPUT_FROM_CDROM;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_14;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_26;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_MINI_JACK;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_BNC;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_IEEE_1394;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_SAS_SATE_PLUG_RECEPTACLE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PC_98;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PC_98_HIRESO;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PC_H98;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PC_98_NOTE;
const DmiPortConnectors_ConnectorType DmiPortConnectors::CONNECTOR_TYPE_PC_98_FULL;
const DmiPortConnectors_ConnectorType DmiPortConnectors::ConnectorType_MIN;
const DmiPortConnectors_ConnectorType DmiPortConnectors::ConnectorType_MAX;
const int DmiPortConnectors::ConnectorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiOnBoardDevices_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_UNKNOWN;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_OTHER;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_VIDEO;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_SCSI_CONTROLLER;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_ETHERNET;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_TOKEN_RING;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_SOUND;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_PATA_CONTROLLER;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_SATA_CONTROLLER;
const DmiOnBoardDevices_Type DmiOnBoardDevices::TYPE_SAS_CONTROLLER;
const DmiOnBoardDevices_Type DmiOnBoardDevices::Type_MIN;
const DmiOnBoardDevices_Type DmiOnBoardDevices::Type_MAX;
const int DmiOnBoardDevices::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPointingDevices_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPointingDevices_Type DmiPointingDevices::TYPE_UNKNOWN;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_OTHER;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_MOUSE;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_TRACK_BALL;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_TRACK_POINT;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_GLIDE_POINT;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_TOUCH_PAD;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_TOUCH_SCREEN;
const DmiPointingDevices_Type DmiPointingDevices::TYPE_OPTICAL_SENSOR;
const DmiPointingDevices_Type DmiPointingDevices::Type_MIN;
const DmiPointingDevices_Type DmiPointingDevices::Type_MAX;
const int DmiPointingDevices::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPointingDevices_Interface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_UNKNOWN;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_OTHER;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_SERIAL;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_PS_2;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_INFRARED;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_HP_HIL;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_BUS_MOUSE;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_ADB;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_BUS_MOUSE_DB_9;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_BUS_MOUSE_MICRO_DIN;
const DmiPointingDevices_Interface DmiPointingDevices::INTERFACE_USB;
const DmiPointingDevices_Interface DmiPointingDevices::Interface_MIN;
const DmiPointingDevices_Interface DmiPointingDevices::Interface_MAX;
const int DmiPointingDevices::Interface_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiPortableBattery_Chemistry_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_UNKNOWN;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_OTHER;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_LEAD_ACID;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_NICKEL_CADMIUM;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_NICKEL_METAL_HYDRIDE;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_LITHIUM_ION;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_ZINC_AIR;
const DmiPortableBattery_Chemistry DmiPortableBattery::CHEMISTRY_LITHIUM_POLYMER;
const DmiPortableBattery_Chemistry DmiPortableBattery::Chemistry_MIN;
const DmiPortableBattery_Chemistry DmiPortableBattery::Chemistry_MAX;
const int DmiPortableBattery::Chemistry_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_Status Services_Item::STATUS_UNKNOWN;
const Services_Item_Status Services_Item::STATUS_CONTINUE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSE_PENDING;
const Services_Item_Status Services_Item::STATUS_PAUSED;
const Services_Item_Status Services_Item::STATUS_RUNNING;
const Services_Item_Status Services_Item::STATUS_START_PENDING;
const Services_Item_Status Services_Item::STATUS_STOP_PENDING;
const Services_Item_Status Services_Item::STATUS_STOPPED;
const Services_Item_Status Services_Item::Status_MIN;
const Services_Item_Status Services_Item::Status_MAX;
const int Services_Item::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Services_Item_StartupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Services_Item_StartupType Services_Item::STARTUP_TYPE_UNKNOWN;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_AUTO_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DEMAND_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_DISABLED;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_BOOT_START;
const Services_Item_StartupType Services_Item::STARTUP_TYPE_SYSTEM_START;
const Services_Item_StartupType Services_Item::StartupType_MIN;
const Services_Item_StartupType Services_Item::StartupType_MAX;
const int Services_Item::StartupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OpenConnections_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpenConnections_Protocol OpenConnections::PROTOCOL_UNKNOWN;
const OpenConnections_Protocol OpenConnections::PROTOCOL_TCP;
const OpenConnections_Protocol OpenConnections::PROTOCOL_UDP;
const OpenConnections_Protocol OpenConnections::Protocol_MIN;
const OpenConnections_Protocol OpenConnections::Protocol_MAX;
const int OpenConnections::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OpenConnections_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpenConnections_State OpenConnections::STATE_UNKNOWN;
const OpenConnections_State OpenConnections::STATE_CLOSED;
const OpenConnections_State OpenConnections::STATE_LISTENING;
const OpenConnections_State OpenConnections::STATE_SYN_SENT;
const OpenConnections_State OpenConnections::STATE_SYN_RCVD;
const OpenConnections_State OpenConnections::STATE_ESTABLISHED;
const OpenConnections_State OpenConnections::STATE_FIN_WAIT1;
const OpenConnections_State OpenConnections::STATE_FIN_WAIT2;
const OpenConnections_State OpenConnections::STATE_CLOSE_WAIT;
const OpenConnections_State OpenConnections::STATE_CLOSING;
const OpenConnections_State OpenConnections::STATE_LAST_ACK;
const OpenConnections_State OpenConnections::STATE_TIME_WAIT;
const OpenConnections_State OpenConnections::STATE_DELETE_TCB;
const OpenConnections_State OpenConnections::State_MIN;
const OpenConnections_State OpenConnections::State_MAX;
const int OpenConnections::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SharedResources_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SharedResources_Item_Type SharedResources_Item::TYPE_UNKNOWN;
const SharedResources_Item_Type SharedResources_Item::TYPE_DISK;
const SharedResources_Item_Type SharedResources_Item::TYPE_PRINTER;
const SharedResources_Item_Type SharedResources_Item::TYPE_DEVICE;
const SharedResources_Item_Type SharedResources_Item::TYPE_IPC;
const SharedResources_Item_Type SharedResources_Item::TYPE_SPECIAL;
const SharedResources_Item_Type SharedResources_Item::TYPE_TEMPORARY;
const SharedResources_Item_Type SharedResources_Item::Type_MIN;
const SharedResources_Item_Type SharedResources_Item::Type_MAX;
const int SharedResources_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Sessions_ConnectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sessions_ConnectState Sessions::CONNECT_STATE_UNKNOWN;
const Sessions_ConnectState Sessions::CONNECT_STATE_ACTIVE;
const Sessions_ConnectState Sessions::CONNECT_STATE_CONNECTED;
const Sessions_ConnectState Sessions::CONNECT_STATE_CONNECT_QUERY;
const Sessions_ConnectState Sessions::CONNECT_STATE_SHADOW;
const Sessions_ConnectState Sessions::CONNECT_STATE_DISCONNECTED;
const Sessions_ConnectState Sessions::CONNECT_STATE_IDLE;
const Sessions_ConnectState Sessions::CONNECT_STATE_LISTEN;
const Sessions_ConnectState Sessions::CONNECT_STATE_RESET;
const Sessions_ConnectState Sessions::CONNECT_STATE_DOWN;
const Sessions_ConnectState Sessions::CONNECT_STATE_INIT;
const Sessions_ConnectState Sessions::ConnectState_MIN;
const Sessions_ConnectState Sessions::ConnectState_MAX;
const int Sessions::ConnectState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiChassis_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis_Item::kManufacturerFieldNumber;
const int DmiChassis_Item::kVersionFieldNumber;
const int DmiChassis_Item::kSerialNumberFieldNumber;
const int DmiChassis_Item::kAssetTagFieldNumber;
const int DmiChassis_Item::kTypeFieldNumber;
const int DmiChassis_Item::kOsLoadStatusFieldNumber;
const int DmiChassis_Item::kPowerSourceStatusFieldNumber;
const int DmiChassis_Item::kTemparatureStatusFieldNumber;
const int DmiChassis_Item::kSecurityStatusFieldNumber;
const int DmiChassis_Item::kHeightFieldNumber;
const int DmiChassis_Item::kNumberOfPowerCordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis_Item::DmiChassis_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiChassis_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiChassis.Item)
}
DmiChassis_Item::DmiChassis_Item(const DmiChassis_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_power_cords_) -
    reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiChassis.Item)
}

void DmiChassis_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _cached_size_ = 0;
}

DmiChassis_Item::~DmiChassis_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiChassis.Item)
  SharedDtor();
}

void DmiChassis_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiChassis_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis_Item& DmiChassis_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiChassis_Item();
  return *internal_default_instance();
}

DmiChassis_Item* DmiChassis_Item::New(::google::protobuf::Arena* arena) const {
  DmiChassis_Item* n = new DmiChassis_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _internal_metadata_.Clear();
}

bool DmiChassis_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiChassis.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiChassis_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status os_load_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_load_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status power_source_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_source_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status temparature_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_temparature_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_security_status(static_cast< ::aspia::proto::DmiChassis_SecurityStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_of_power_cords = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_power_cords_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiChassis.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiChassis.Item)
  return false;
#undef DO_
}

void DmiChassis_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serial_number(), output);
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset_tag(), output);
  }

  // .aspia.proto.DmiChassis.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .aspia.proto.DmiChassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->os_load_status(), output);
  }

  // .aspia.proto.DmiChassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->power_source_status(), output);
  }

  // .aspia.proto.DmiChassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->temparature_status(), output);
  }

  // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->security_status(), output);
  }

  // int32 height = 10;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->number_of_power_cords(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiChassis.Item)
}

size_t DmiChassis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiChassis.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // .aspia.proto.DmiChassis.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiChassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_load_status());
  }

  // .aspia.proto.DmiChassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_source_status());
  }

  // .aspia.proto.DmiChassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->temparature_status());
  }

  // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_status());
  }

  // int32 height = 10;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_power_cords());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis_Item*>(&from));
}

void DmiChassis_Item::MergeFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiChassis.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.os_load_status() != 0) {
    set_os_load_status(from.os_load_status());
  }
  if (from.power_source_status() != 0) {
    set_power_source_status(from.power_source_status());
  }
  if (from.temparature_status() != 0) {
    set_temparature_status(from.temparature_status());
  }
  if (from.security_status() != 0) {
    set_security_status(from.security_status());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.number_of_power_cords() != 0) {
    set_number_of_power_cords(from.number_of_power_cords());
  }
}

void DmiChassis_Item::CopyFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiChassis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis_Item::IsInitialized() const {
  return true;
}

void DmiChassis_Item::Swap(DmiChassis_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis_Item::InternalSwap(DmiChassis_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  swap(type_, other->type_);
  swap(os_load_status_, other->os_load_status_);
  swap(power_source_status_, other->power_source_status_);
  swap(temparature_status_, other->temparature_status_);
  swap(security_status_, other->security_status_);
  swap(height_, other->height_);
  swap(number_of_power_cords_, other->number_of_power_cords_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis_Item::GetTypeName() const {
  return "aspia.proto.DmiChassis.Item";
}


// ===================================================================

void DmiChassis::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis::DmiChassis()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiChassis();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiChassis)
}
DmiChassis::DmiChassis(const DmiChassis& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiChassis)
}

void DmiChassis::SharedCtor() {
  _cached_size_ = 0;
}

DmiChassis::~DmiChassis() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiChassis)
  SharedDtor();
}

void DmiChassis::SharedDtor() {
}

void DmiChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis& DmiChassis::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiChassis();
  return *internal_default_instance();
}

DmiChassis* DmiChassis::New(::google::protobuf::Arena* arena) const {
  DmiChassis* n = new DmiChassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiChassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiChassis.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiChassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiChassis)
  return false;
#undef DO_
}

void DmiChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiChassis.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiChassis)
}

size_t DmiChassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiChassis)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiChassis.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis*>(&from));
}

void DmiChassis::MergeFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiChassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiChassis::CopyFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiChassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis::IsInitialized() const {
  return true;
}

void DmiChassis::Swap(DmiChassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis::InternalSwap(DmiChassis* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis::GetTypeName() const {
  return "aspia.proto.DmiChassis";
}


// ===================================================================

void DmiCaches_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiCaches_Item::kNameFieldNumber;
const int DmiCaches_Item::kLocationFieldNumber;
const int DmiCaches_Item::kStatusFieldNumber;
const int DmiCaches_Item::kModeFieldNumber;
const int DmiCaches_Item::kLevelFieldNumber;
const int DmiCaches_Item::kMaximumSizeFieldNumber;
const int DmiCaches_Item::kCurrentSizeFieldNumber;
const int DmiCaches_Item::kSupportedSramTypesFieldNumber;
const int DmiCaches_Item::kCurrentSramTypeFieldNumber;
const int DmiCaches_Item::kSpeedFieldNumber;
const int DmiCaches_Item::kErrorCorrectionTypeFieldNumber;
const int DmiCaches_Item::kTypeFieldNumber;
const int DmiCaches_Item::kAssociativityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiCaches_Item::DmiCaches_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiCaches_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiCaches.Item)
}
DmiCaches_Item::DmiCaches_Item(const DmiCaches_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&associativity_) -
    reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiCaches.Item)
}

void DmiCaches_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  _cached_size_ = 0;
}

DmiCaches_Item::~DmiCaches_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiCaches.Item)
  SharedDtor();
}

void DmiCaches_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiCaches_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiCaches_Item& DmiCaches_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiCaches_Item();
  return *internal_default_instance();
}

DmiCaches_Item* DmiCaches_Item::New(::google::protobuf::Arena* arena) const {
  DmiCaches_Item* n = new DmiCaches_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiCaches_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiCaches.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  _internal_metadata_.Clear();
}

bool DmiCaches_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiCaches.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiCaches.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location(static_cast< ::aspia::proto::DmiCaches_Location >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::DmiCaches_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::aspia::proto::DmiCaches_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 supported_sram_types = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supported_sram_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.SRAMType current_sram_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_sram_type(static_cast< ::aspia::proto::DmiCaches_SRAMType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.ErrorCorrectionType error_correction_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_correction_type(static_cast< ::aspia::proto::DmiCaches_ErrorCorrectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.Type type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiCaches_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiCaches.Associativity associativity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_associativity(static_cast< ::aspia::proto::DmiCaches_Associativity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiCaches.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiCaches.Item)
  return false;
#undef DO_
}

void DmiCaches_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiCaches.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiCaches.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.proto.DmiCaches.Location location = 2;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->location(), output);
  }

  // .aspia.proto.DmiCaches.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // .aspia.proto.DmiCaches.Mode mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maximum_size(), output);
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_size(), output);
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->supported_sram_types(), output);
  }

  // .aspia.proto.DmiCaches.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->current_sram_type(), output);
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->speed(), output);
  }

  // .aspia.proto.DmiCaches.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_correction_type(), output);
  }

  // .aspia.proto.DmiCaches.Type type = 12;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // .aspia.proto.DmiCaches.Associativity associativity = 13;
  if (this->associativity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->associativity(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiCaches.Item)
}

size_t DmiCaches_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiCaches.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aspia.proto.DmiCaches.Location location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
  }

  // .aspia.proto.DmiCaches.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.proto.DmiCaches.Mode mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_size());
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_size());
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->supported_sram_types());
  }

  // .aspia.proto.DmiCaches.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_sram_type());
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // .aspia.proto.DmiCaches.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_correction_type());
  }

  // .aspia.proto.DmiCaches.Type type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiCaches.Associativity associativity = 13;
  if (this->associativity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->associativity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiCaches_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiCaches_Item*>(&from));
}

void DmiCaches_Item::MergeFrom(const DmiCaches_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiCaches.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.location() != 0) {
    set_location(from.location());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.maximum_size() != 0) {
    set_maximum_size(from.maximum_size());
  }
  if (from.current_size() != 0) {
    set_current_size(from.current_size());
  }
  if (from.supported_sram_types() != 0) {
    set_supported_sram_types(from.supported_sram_types());
  }
  if (from.current_sram_type() != 0) {
    set_current_sram_type(from.current_sram_type());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.error_correction_type() != 0) {
    set_error_correction_type(from.error_correction_type());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.associativity() != 0) {
    set_associativity(from.associativity());
  }
}

void DmiCaches_Item::CopyFrom(const DmiCaches_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiCaches.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiCaches_Item::IsInitialized() const {
  return true;
}

void DmiCaches_Item::Swap(DmiCaches_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiCaches_Item::InternalSwap(DmiCaches_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(status_, other->status_);
  swap(mode_, other->mode_);
  swap(level_, other->level_);
  swap(maximum_size_, other->maximum_size_);
  swap(current_size_, other->current_size_);
  swap(supported_sram_types_, other->supported_sram_types_);
  swap(current_sram_type_, other->current_sram_type_);
  swap(speed_, other->speed_);
  swap(error_correction_type_, other->error_correction_type_);
  swap(type_, other->type_);
  swap(associativity_, other->associativity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiCaches_Item::GetTypeName() const {
  return "aspia.proto.DmiCaches.Item";
}


// ===================================================================

void DmiCaches::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiCaches::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiCaches::DmiCaches()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiCaches();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiCaches)
}
DmiCaches::DmiCaches(const DmiCaches& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiCaches)
}

void DmiCaches::SharedCtor() {
  _cached_size_ = 0;
}

DmiCaches::~DmiCaches() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiCaches)
  SharedDtor();
}

void DmiCaches::SharedDtor() {
}

void DmiCaches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiCaches& DmiCaches::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiCaches();
  return *internal_default_instance();
}

DmiCaches* DmiCaches::New(::google::protobuf::Arena* arena) const {
  DmiCaches* n = new DmiCaches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiCaches::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiCaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiCaches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiCaches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiCaches.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiCaches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiCaches)
  return false;
#undef DO_
}

void DmiCaches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiCaches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiCaches.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiCaches)
}

size_t DmiCaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiCaches)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiCaches.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiCaches::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiCaches*>(&from));
}

void DmiCaches::MergeFrom(const DmiCaches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiCaches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiCaches::CopyFrom(const DmiCaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiCaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiCaches::IsInitialized() const {
  return true;
}

void DmiCaches::Swap(DmiCaches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiCaches::InternalSwap(DmiCaches* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiCaches::GetTypeName() const {
  return "aspia.proto.DmiCaches";
}


// ===================================================================

void DmiProcessors_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessors_Item::kManufacturerFieldNumber;
const int DmiProcessors_Item::kVersionFieldNumber;
const int DmiProcessors_Item::kFamilyFieldNumber;
const int DmiProcessors_Item::kTypeFieldNumber;
const int DmiProcessors_Item::kStatusFieldNumber;
const int DmiProcessors_Item::kSocketFieldNumber;
const int DmiProcessors_Item::kUpgradeFieldNumber;
const int DmiProcessors_Item::kExternalClockFieldNumber;
const int DmiProcessors_Item::kCurrentSpeedFieldNumber;
const int DmiProcessors_Item::kMaximumSpeedFieldNumber;
const int DmiProcessors_Item::kVoltageFieldNumber;
const int DmiProcessors_Item::kSerialNumberFieldNumber;
const int DmiProcessors_Item::kAssetTagFieldNumber;
const int DmiProcessors_Item::kPartNumberFieldNumber;
const int DmiProcessors_Item::kCoreCountFieldNumber;
const int DmiProcessors_Item::kCoreEnabledFieldNumber;
const int DmiProcessors_Item::kThreadCountFieldNumber;
const int DmiProcessors_Item::kCharacteristicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessors_Item::DmiProcessors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiProcessors_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiProcessors.Item)
}
DmiProcessors_Item::DmiProcessors_Item(const DmiProcessors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket().size() > 0) {
    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  ::memcpy(&family_, &from.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&characteristics_) -
    reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiProcessors.Item)
}

void DmiProcessors_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  _cached_size_ = 0;
}

DmiProcessors_Item::~DmiProcessors_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiProcessors.Item)
  SharedDtor();
}

void DmiProcessors_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiProcessors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessors_Item& DmiProcessors_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiProcessors_Item();
  return *internal_default_instance();
}

DmiProcessors_Item* DmiProcessors_Item::New(::google::protobuf::Arena* arena) const {
  DmiProcessors_Item* n = new DmiProcessors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiProcessors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&family_)) + sizeof(characteristics_));
  _internal_metadata_.Clear();
}

bool DmiProcessors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiProcessors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessors.Family family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_family(static_cast< ::aspia::proto::DmiProcessors_Family >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessors.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiProcessors_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessors.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::DmiProcessors_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string socket = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket().data(), static_cast<int>(this->socket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.socket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiProcessors.Upgrade upgrade = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_upgrade(static_cast< ::aspia::proto::DmiProcessors_Upgrade >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 external_clock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiProcessors.Item.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thread_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 characteristics = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characteristics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiProcessors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiProcessors.Item)
  return false;
#undef DO_
}

void DmiProcessors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiProcessors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .aspia.proto.DmiProcessors.Family family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->family(), output);
  }

  // .aspia.proto.DmiProcessors.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .aspia.proto.DmiProcessors.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket().data(), static_cast<int>(this->socket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.socket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket(), output);
  }

  // .aspia.proto.DmiProcessors.Upgrade upgrade = 7;
  if (this->upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->upgrade(), output);
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->external_clock(), output);
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->current_speed(), output);
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maximum_speed(), output);
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voltage(), output);
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->serial_number(), output);
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->asset_tag(), output);
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiProcessors.Item.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->part_number(), output);
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->core_count(), output);
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->core_enabled(), output);
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->thread_count(), output);
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->characteristics(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiProcessors.Item)
}

size_t DmiProcessors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiProcessors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket());
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // .aspia.proto.DmiProcessors.Family family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->family());
  }

  // .aspia.proto.DmiProcessors.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiProcessors.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.proto.DmiProcessors.Upgrade upgrade = 7;
  if (this->upgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->upgrade());
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->external_clock());
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_speed());
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    total_size += 1 + 8;
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_speed());
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_count());
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_enabled());
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_count());
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->characteristics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessors_Item*>(&from));
}

void DmiProcessors_Item::MergeFrom(const DmiProcessors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiProcessors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.socket().size() > 0) {

    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.upgrade() != 0) {
    set_upgrade(from.upgrade());
  }
  if (from.external_clock() != 0) {
    set_external_clock(from.external_clock());
  }
  if (from.current_speed() != 0) {
    set_current_speed(from.current_speed());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.maximum_speed() != 0) {
    set_maximum_speed(from.maximum_speed());
  }
  if (from.core_count() != 0) {
    set_core_count(from.core_count());
  }
  if (from.core_enabled() != 0) {
    set_core_enabled(from.core_enabled());
  }
  if (from.thread_count() != 0) {
    set_thread_count(from.thread_count());
  }
  if (from.characteristics() != 0) {
    set_characteristics(from.characteristics());
  }
}

void DmiProcessors_Item::CopyFrom(const DmiProcessors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiProcessors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessors_Item::IsInitialized() const {
  return true;
}

void DmiProcessors_Item::Swap(DmiProcessors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessors_Item::InternalSwap(DmiProcessors_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  socket_.Swap(&other->socket_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  part_number_.Swap(&other->part_number_);
  swap(family_, other->family_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(upgrade_, other->upgrade_);
  swap(external_clock_, other->external_clock_);
  swap(current_speed_, other->current_speed_);
  swap(voltage_, other->voltage_);
  swap(maximum_speed_, other->maximum_speed_);
  swap(core_count_, other->core_count_);
  swap(core_enabled_, other->core_enabled_);
  swap(thread_count_, other->thread_count_);
  swap(characteristics_, other->characteristics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessors_Item::GetTypeName() const {
  return "aspia.proto.DmiProcessors.Item";
}


// ===================================================================

void DmiProcessors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiProcessors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiProcessors::DmiProcessors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiProcessors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiProcessors)
}
DmiProcessors::DmiProcessors(const DmiProcessors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiProcessors)
}

void DmiProcessors::SharedCtor() {
  _cached_size_ = 0;
}

DmiProcessors::~DmiProcessors() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiProcessors)
  SharedDtor();
}

void DmiProcessors::SharedDtor() {
}

void DmiProcessors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiProcessors& DmiProcessors::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiProcessors();
  return *internal_default_instance();
}

DmiProcessors* DmiProcessors::New(::google::protobuf::Arena* arena) const {
  DmiProcessors* n = new DmiProcessors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiProcessors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiProcessors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiProcessors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiProcessors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiProcessors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiProcessors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiProcessors)
  return false;
#undef DO_
}

void DmiProcessors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiProcessors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiProcessors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiProcessors)
}

size_t DmiProcessors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiProcessors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiProcessors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiProcessors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiProcessors*>(&from));
}

void DmiProcessors::MergeFrom(const DmiProcessors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiProcessors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiProcessors::CopyFrom(const DmiProcessors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiProcessors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiProcessors::IsInitialized() const {
  return true;
}

void DmiProcessors::Swap(DmiProcessors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiProcessors::InternalSwap(DmiProcessors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiProcessors::GetTypeName() const {
  return "aspia.proto.DmiProcessors";
}


// ===================================================================

void DmiMemoryDevices_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiMemoryDevices_Item::kDeviceLocatorFieldNumber;
const int DmiMemoryDevices_Item::kSizeFieldNumber;
const int DmiMemoryDevices_Item::kTypeFieldNumber;
const int DmiMemoryDevices_Item::kSpeedFieldNumber;
const int DmiMemoryDevices_Item::kFormFactorFieldNumber;
const int DmiMemoryDevices_Item::kSerialNumberFieldNumber;
const int DmiMemoryDevices_Item::kPartNumberFieldNumber;
const int DmiMemoryDevices_Item::kManufactorerFieldNumber;
const int DmiMemoryDevices_Item::kBankFieldNumber;
const int DmiMemoryDevices_Item::kTotalWidthFieldNumber;
const int DmiMemoryDevices_Item::kDataWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiMemoryDevices_Item::DmiMemoryDevices_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiMemoryDevices_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiMemoryDevices.Item)
}
DmiMemoryDevices_Item::DmiMemoryDevices_Item(const DmiMemoryDevices_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_locator().size() > 0) {
    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufactorer().size() > 0) {
    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank().size() > 0) {
    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_width_) -
    reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiMemoryDevices.Item)
}

void DmiMemoryDevices_Item::SharedCtor() {
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  _cached_size_ = 0;
}

DmiMemoryDevices_Item::~DmiMemoryDevices_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiMemoryDevices.Item)
  SharedDtor();
}

void DmiMemoryDevices_Item::SharedDtor() {
  device_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiMemoryDevices_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiMemoryDevices_Item& DmiMemoryDevices_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiMemoryDevices_Item();
  return *internal_default_instance();
}

DmiMemoryDevices_Item* DmiMemoryDevices_Item::New(::google::protobuf::Arena* arena) const {
  DmiMemoryDevices_Item* n = new DmiMemoryDevices_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiMemoryDevices_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiMemoryDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  _internal_metadata_.Clear();
}

bool DmiMemoryDevices_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiMemoryDevices.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_locator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_locator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_locator().data(), static_cast<int>(this->device_locator().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiMemoryDevices.Item.device_locator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiMemoryDevices.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiMemoryDevices_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiMemoryDevices.FormFactor form_factor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_form_factor(static_cast< ::aspia::proto::DmiMemoryDevices_FormFactor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiMemoryDevices.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiMemoryDevices.Item.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufactorer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactorer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiMemoryDevices.Item.manufactorer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank().data(), static_cast<int>(this->bank().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiMemoryDevices.Item.bank"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 data_width = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiMemoryDevices.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiMemoryDevices.Item)
  return false;
#undef DO_
}

void DmiMemoryDevices_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiMemoryDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_locator().data(), static_cast<int>(this->device_locator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiMemoryDevices.Item.device_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_locator(), output);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // .aspia.proto.DmiMemoryDevices.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // .aspia.proto.DmiMemoryDevices.FormFactor form_factor = 5;
  if (this->form_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->form_factor(), output);
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiMemoryDevices.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serial_number(), output);
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiMemoryDevices.Item.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->part_number(), output);
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiMemoryDevices.Item.manufactorer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manufactorer(), output);
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank().data(), static_cast<int>(this->bank().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiMemoryDevices.Item.bank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bank(), output);
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_width(), output);
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->data_width(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiMemoryDevices.Item)
}

size_t DmiMemoryDevices_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiMemoryDevices.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_locator());
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufactorer());
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // .aspia.proto.DmiMemoryDevices.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // .aspia.proto.DmiMemoryDevices.FormFactor form_factor = 5;
  if (this->form_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->form_factor());
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_width());
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiMemoryDevices_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiMemoryDevices_Item*>(&from));
}

void DmiMemoryDevices_Item::MergeFrom(const DmiMemoryDevices_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiMemoryDevices.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_locator().size() > 0) {

    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.manufactorer().size() > 0) {

    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  if (from.bank().size() > 0) {

    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.form_factor() != 0) {
    set_form_factor(from.form_factor());
  }
  if (from.total_width() != 0) {
    set_total_width(from.total_width());
  }
  if (from.data_width() != 0) {
    set_data_width(from.data_width());
  }
}

void DmiMemoryDevices_Item::CopyFrom(const DmiMemoryDevices_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiMemoryDevices.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiMemoryDevices_Item::IsInitialized() const {
  return true;
}

void DmiMemoryDevices_Item::Swap(DmiMemoryDevices_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiMemoryDevices_Item::InternalSwap(DmiMemoryDevices_Item* other) {
  using std::swap;
  device_locator_.Swap(&other->device_locator_);
  serial_number_.Swap(&other->serial_number_);
  part_number_.Swap(&other->part_number_);
  manufactorer_.Swap(&other->manufactorer_);
  bank_.Swap(&other->bank_);
  swap(size_, other->size_);
  swap(type_, other->type_);
  swap(speed_, other->speed_);
  swap(form_factor_, other->form_factor_);
  swap(total_width_, other->total_width_);
  swap(data_width_, other->data_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiMemoryDevices_Item::GetTypeName() const {
  return "aspia.proto.DmiMemoryDevices.Item";
}


// ===================================================================

void DmiMemoryDevices::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiMemoryDevices::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiMemoryDevices::DmiMemoryDevices()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiMemoryDevices();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiMemoryDevices)
}
DmiMemoryDevices::DmiMemoryDevices(const DmiMemoryDevices& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiMemoryDevices)
}

void DmiMemoryDevices::SharedCtor() {
  _cached_size_ = 0;
}

DmiMemoryDevices::~DmiMemoryDevices() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiMemoryDevices)
  SharedDtor();
}

void DmiMemoryDevices::SharedDtor() {
}

void DmiMemoryDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiMemoryDevices& DmiMemoryDevices::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiMemoryDevices();
  return *internal_default_instance();
}

DmiMemoryDevices* DmiMemoryDevices::New(::google::protobuf::Arena* arena) const {
  DmiMemoryDevices* n = new DmiMemoryDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiMemoryDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiMemoryDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiMemoryDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiMemoryDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiMemoryDevices.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiMemoryDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiMemoryDevices)
  return false;
#undef DO_
}

void DmiMemoryDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiMemoryDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiMemoryDevices.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiMemoryDevices)
}

size_t DmiMemoryDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiMemoryDevices)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiMemoryDevices.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiMemoryDevices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiMemoryDevices*>(&from));
}

void DmiMemoryDevices::MergeFrom(const DmiMemoryDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiMemoryDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiMemoryDevices::CopyFrom(const DmiMemoryDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiMemoryDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiMemoryDevices::IsInitialized() const {
  return true;
}

void DmiMemoryDevices::Swap(DmiMemoryDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiMemoryDevices::InternalSwap(DmiMemoryDevices* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiMemoryDevices::GetTypeName() const {
  return "aspia.proto.DmiMemoryDevices";
}


// ===================================================================

void DmiSystemSlots_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiSystemSlots_Item::kSlotDesignationFieldNumber;
const int DmiSystemSlots_Item::kTypeFieldNumber;
const int DmiSystemSlots_Item::kUsageFieldNumber;
const int DmiSystemSlots_Item::kBusWidthFieldNumber;
const int DmiSystemSlots_Item::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiSystemSlots_Item::DmiSystemSlots_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiSystemSlots_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiSystemSlots.Item)
}
DmiSystemSlots_Item::DmiSystemSlots_Item(const DmiSystemSlots_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slot_designation().size() > 0) {
    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiSystemSlots.Item)
}

void DmiSystemSlots_Item::SharedCtor() {
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _cached_size_ = 0;
}

DmiSystemSlots_Item::~DmiSystemSlots_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiSystemSlots.Item)
  SharedDtor();
}

void DmiSystemSlots_Item::SharedDtor() {
  slot_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiSystemSlots_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiSystemSlots_Item& DmiSystemSlots_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiSystemSlots_Item();
  return *internal_default_instance();
}

DmiSystemSlots_Item* DmiSystemSlots_Item::New(::google::protobuf::Arena* arena) const {
  DmiSystemSlots_Item* n = new DmiSystemSlots_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiSystemSlots_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiSystemSlots.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool DmiSystemSlots_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiSystemSlots.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string slot_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiSystemSlots.Item.slot_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiSystemSlots.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiSystemSlots_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiSystemSlots.Usage usage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_usage(static_cast< ::aspia::proto::DmiSystemSlots_Usage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiSystemSlots.BusWidth bus_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bus_width(static_cast< ::aspia::proto::DmiSystemSlots_BusWidth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiSystemSlots.Length length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_length(static_cast< ::aspia::proto::DmiSystemSlots_Length >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiSystemSlots.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiSystemSlots.Item)
  return false;
#undef DO_
}

void DmiSystemSlots_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiSystemSlots.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiSystemSlots.Item.slot_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slot_designation(), output);
  }

  // .aspia.proto.DmiSystemSlots.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .aspia.proto.DmiSystemSlots.Usage usage = 3;
  if (this->usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usage(), output);
  }

  // .aspia.proto.DmiSystemSlots.BusWidth bus_width = 4;
  if (this->bus_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bus_width(), output);
  }

  // .aspia.proto.DmiSystemSlots.Length length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->length(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiSystemSlots.Item)
}

size_t DmiSystemSlots_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiSystemSlots.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slot_designation());
  }

  // .aspia.proto.DmiSystemSlots.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiSystemSlots.Usage usage = 3;
  if (this->usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
  }

  // .aspia.proto.DmiSystemSlots.BusWidth bus_width = 4;
  if (this->bus_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bus_width());
  }

  // .aspia.proto.DmiSystemSlots.Length length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiSystemSlots_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiSystemSlots_Item*>(&from));
}

void DmiSystemSlots_Item::MergeFrom(const DmiSystemSlots_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiSystemSlots.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_designation().size() > 0) {

    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.usage() != 0) {
    set_usage(from.usage());
  }
  if (from.bus_width() != 0) {
    set_bus_width(from.bus_width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void DmiSystemSlots_Item::CopyFrom(const DmiSystemSlots_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiSystemSlots.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiSystemSlots_Item::IsInitialized() const {
  return true;
}

void DmiSystemSlots_Item::Swap(DmiSystemSlots_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiSystemSlots_Item::InternalSwap(DmiSystemSlots_Item* other) {
  using std::swap;
  slot_designation_.Swap(&other->slot_designation_);
  swap(type_, other->type_);
  swap(usage_, other->usage_);
  swap(bus_width_, other->bus_width_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiSystemSlots_Item::GetTypeName() const {
  return "aspia.proto.DmiSystemSlots.Item";
}


// ===================================================================

void DmiSystemSlots::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiSystemSlots::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiSystemSlots::DmiSystemSlots()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiSystemSlots();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiSystemSlots)
}
DmiSystemSlots::DmiSystemSlots(const DmiSystemSlots& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiSystemSlots)
}

void DmiSystemSlots::SharedCtor() {
  _cached_size_ = 0;
}

DmiSystemSlots::~DmiSystemSlots() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiSystemSlots)
  SharedDtor();
}

void DmiSystemSlots::SharedDtor() {
}

void DmiSystemSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiSystemSlots& DmiSystemSlots::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiSystemSlots();
  return *internal_default_instance();
}

DmiSystemSlots* DmiSystemSlots::New(::google::protobuf::Arena* arena) const {
  DmiSystemSlots* n = new DmiSystemSlots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiSystemSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiSystemSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiSystemSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiSystemSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiSystemSlots.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiSystemSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiSystemSlots)
  return false;
#undef DO_
}

void DmiSystemSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiSystemSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiSystemSlots.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiSystemSlots)
}

size_t DmiSystemSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiSystemSlots)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiSystemSlots.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiSystemSlots::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiSystemSlots*>(&from));
}

void DmiSystemSlots::MergeFrom(const DmiSystemSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiSystemSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiSystemSlots::CopyFrom(const DmiSystemSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiSystemSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiSystemSlots::IsInitialized() const {
  return true;
}

void DmiSystemSlots::Swap(DmiSystemSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiSystemSlots::InternalSwap(DmiSystemSlots* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiSystemSlots::GetTypeName() const {
  return "aspia.proto.DmiSystemSlots";
}


// ===================================================================

void DmiPortConnectors_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnectors_Item::kInternalDesignationFieldNumber;
const int DmiPortConnectors_Item::kExternalDesignationFieldNumber;
const int DmiPortConnectors_Item::kTypeFieldNumber;
const int DmiPortConnectors_Item::kInternalConnectorTypeFieldNumber;
const int DmiPortConnectors_Item::kExternalConnectorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnectors_Item::DmiPortConnectors_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortConnectors_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortConnectors.Item)
}
DmiPortConnectors_Item::DmiPortConnectors_Item(const DmiPortConnectors_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_designation().size() > 0) {
    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_designation().size() > 0) {
    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_connector_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortConnectors.Item)
}

void DmiPortConnectors_Item::SharedCtor() {
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_connector_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  _cached_size_ = 0;
}

DmiPortConnectors_Item::~DmiPortConnectors_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortConnectors.Item)
  SharedDtor();
}

void DmiPortConnectors_Item::SharedDtor() {
  internal_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiPortConnectors_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnectors_Item& DmiPortConnectors_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortConnectors_Item();
  return *internal_default_instance();
}

DmiPortConnectors_Item* DmiPortConnectors_Item::New(::google::protobuf::Arena* arena) const {
  DmiPortConnectors_Item* n = new DmiPortConnectors_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnectors_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortConnectors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_connector_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(external_connector_type_));
  _internal_metadata_.Clear();
}

bool DmiPortConnectors_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortConnectors.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string internal_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortConnectors.Item.internal_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_designation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_designation().data(), static_cast<int>(this->external_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortConnectors.Item.external_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnectors.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiPortConnectors_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnectors.ConnectorType internal_connector_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_internal_connector_type(static_cast< ::aspia::proto::DmiPortConnectors_ConnectorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortConnectors.ConnectorType external_connector_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_external_connector_type(static_cast< ::aspia::proto::DmiPortConnectors_ConnectorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortConnectors.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortConnectors.Item)
  return false;
#undef DO_
}

void DmiPortConnectors_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortConnectors.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortConnectors.Item.internal_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->internal_designation(), output);
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_designation().data(), static_cast<int>(this->external_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortConnectors.Item.external_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_designation(), output);
  }

  // .aspia.proto.DmiPortConnectors.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .aspia.proto.DmiPortConnectors.ConnectorType internal_connector_type = 4;
  if (this->internal_connector_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->internal_connector_type(), output);
  }

  // .aspia.proto.DmiPortConnectors.ConnectorType external_connector_type = 5;
  if (this->external_connector_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->external_connector_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortConnectors.Item)
}

size_t DmiPortConnectors_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortConnectors.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_designation());
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_designation());
  }

  // .aspia.proto.DmiPortConnectors.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiPortConnectors.ConnectorType internal_connector_type = 4;
  if (this->internal_connector_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->internal_connector_type());
  }

  // .aspia.proto.DmiPortConnectors.ConnectorType external_connector_type = 5;
  if (this->external_connector_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->external_connector_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnectors_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnectors_Item*>(&from));
}

void DmiPortConnectors_Item::MergeFrom(const DmiPortConnectors_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortConnectors.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_designation().size() > 0) {

    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  if (from.external_designation().size() > 0) {

    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.internal_connector_type() != 0) {
    set_internal_connector_type(from.internal_connector_type());
  }
  if (from.external_connector_type() != 0) {
    set_external_connector_type(from.external_connector_type());
  }
}

void DmiPortConnectors_Item::CopyFrom(const DmiPortConnectors_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortConnectors.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnectors_Item::IsInitialized() const {
  return true;
}

void DmiPortConnectors_Item::Swap(DmiPortConnectors_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnectors_Item::InternalSwap(DmiPortConnectors_Item* other) {
  using std::swap;
  internal_designation_.Swap(&other->internal_designation_);
  external_designation_.Swap(&other->external_designation_);
  swap(type_, other->type_);
  swap(internal_connector_type_, other->internal_connector_type_);
  swap(external_connector_type_, other->external_connector_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnectors_Item::GetTypeName() const {
  return "aspia.proto.DmiPortConnectors.Item";
}


// ===================================================================

void DmiPortConnectors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortConnectors::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortConnectors::DmiPortConnectors()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortConnectors();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortConnectors)
}
DmiPortConnectors::DmiPortConnectors(const DmiPortConnectors& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortConnectors)
}

void DmiPortConnectors::SharedCtor() {
  _cached_size_ = 0;
}

DmiPortConnectors::~DmiPortConnectors() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortConnectors)
  SharedDtor();
}

void DmiPortConnectors::SharedDtor() {
}

void DmiPortConnectors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortConnectors& DmiPortConnectors::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortConnectors();
  return *internal_default_instance();
}

DmiPortConnectors* DmiPortConnectors::New(::google::protobuf::Arena* arena) const {
  DmiPortConnectors* n = new DmiPortConnectors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortConnectors::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortConnectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPortConnectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortConnectors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiPortConnectors.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortConnectors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortConnectors)
  return false;
#undef DO_
}

void DmiPortConnectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortConnectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiPortConnectors.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortConnectors)
}

size_t DmiPortConnectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortConnectors)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiPortConnectors.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortConnectors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortConnectors*>(&from));
}

void DmiPortConnectors::MergeFrom(const DmiPortConnectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortConnectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPortConnectors::CopyFrom(const DmiPortConnectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortConnectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortConnectors::IsInitialized() const {
  return true;
}

void DmiPortConnectors::Swap(DmiPortConnectors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortConnectors::InternalSwap(DmiPortConnectors* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortConnectors::GetTypeName() const {
  return "aspia.proto.DmiPortConnectors";
}


// ===================================================================

void DmiOnBoardDevices_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiOnBoardDevices_Item::kDescriptionFieldNumber;
const int DmiOnBoardDevices_Item::kTypeFieldNumber;
const int DmiOnBoardDevices_Item::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiOnBoardDevices_Item::DmiOnBoardDevices_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiOnBoardDevices_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiOnBoardDevices.Item)
}
DmiOnBoardDevices_Item::DmiOnBoardDevices_Item(const DmiOnBoardDevices_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiOnBoardDevices.Item)
}

void DmiOnBoardDevices_Item::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  _cached_size_ = 0;
}

DmiOnBoardDevices_Item::~DmiOnBoardDevices_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiOnBoardDevices.Item)
  SharedDtor();
}

void DmiOnBoardDevices_Item::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiOnBoardDevices_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiOnBoardDevices_Item& DmiOnBoardDevices_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiOnBoardDevices_Item();
  return *internal_default_instance();
}

DmiOnBoardDevices_Item* DmiOnBoardDevices_Item::New(::google::protobuf::Arena* arena) const {
  DmiOnBoardDevices_Item* n = new DmiOnBoardDevices_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiOnBoardDevices_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiOnBoardDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

bool DmiOnBoardDevices_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiOnBoardDevices.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiOnBoardDevices.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiOnBoardDevices.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiOnBoardDevices_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiOnBoardDevices.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiOnBoardDevices.Item)
  return false;
#undef DO_
}

void DmiOnBoardDevices_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiOnBoardDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiOnBoardDevices.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // .aspia.proto.DmiOnBoardDevices.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiOnBoardDevices.Item)
}

size_t DmiOnBoardDevices_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiOnBoardDevices.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .aspia.proto.DmiOnBoardDevices.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiOnBoardDevices_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiOnBoardDevices_Item*>(&from));
}

void DmiOnBoardDevices_Item::MergeFrom(const DmiOnBoardDevices_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiOnBoardDevices.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void DmiOnBoardDevices_Item::CopyFrom(const DmiOnBoardDevices_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiOnBoardDevices.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiOnBoardDevices_Item::IsInitialized() const {
  return true;
}

void DmiOnBoardDevices_Item::Swap(DmiOnBoardDevices_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiOnBoardDevices_Item::InternalSwap(DmiOnBoardDevices_Item* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(type_, other->type_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiOnBoardDevices_Item::GetTypeName() const {
  return "aspia.proto.DmiOnBoardDevices.Item";
}


// ===================================================================

void DmiOnBoardDevices::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiOnBoardDevices::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiOnBoardDevices::DmiOnBoardDevices()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiOnBoardDevices();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiOnBoardDevices)
}
DmiOnBoardDevices::DmiOnBoardDevices(const DmiOnBoardDevices& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiOnBoardDevices)
}

void DmiOnBoardDevices::SharedCtor() {
  _cached_size_ = 0;
}

DmiOnBoardDevices::~DmiOnBoardDevices() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiOnBoardDevices)
  SharedDtor();
}

void DmiOnBoardDevices::SharedDtor() {
}

void DmiOnBoardDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiOnBoardDevices& DmiOnBoardDevices::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiOnBoardDevices();
  return *internal_default_instance();
}

DmiOnBoardDevices* DmiOnBoardDevices::New(::google::protobuf::Arena* arena) const {
  DmiOnBoardDevices* n = new DmiOnBoardDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiOnBoardDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiOnBoardDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiOnBoardDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiOnBoardDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiOnBoardDevices.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiOnBoardDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiOnBoardDevices)
  return false;
#undef DO_
}

void DmiOnBoardDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiOnBoardDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiOnBoardDevices.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiOnBoardDevices)
}

size_t DmiOnBoardDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiOnBoardDevices)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiOnBoardDevices.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiOnBoardDevices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiOnBoardDevices*>(&from));
}

void DmiOnBoardDevices::MergeFrom(const DmiOnBoardDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiOnBoardDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiOnBoardDevices::CopyFrom(const DmiOnBoardDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiOnBoardDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiOnBoardDevices::IsInitialized() const {
  return true;
}

void DmiOnBoardDevices::Swap(DmiOnBoardDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiOnBoardDevices::InternalSwap(DmiOnBoardDevices* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiOnBoardDevices::GetTypeName() const {
  return "aspia.proto.DmiOnBoardDevices";
}


// ===================================================================

void DmiPointingDevices_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPointingDevices_Item::kDeviceTypeFieldNumber;
const int DmiPointingDevices_Item::kDeviceInterfaceFieldNumber;
const int DmiPointingDevices_Item::kButtonCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPointingDevices_Item::DmiPointingDevices_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPointingDevices_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPointingDevices.Item)
}
DmiPointingDevices_Item::DmiPointingDevices_Item(const DmiPointingDevices_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_count_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPointingDevices.Item)
}

void DmiPointingDevices_Item::SharedCtor() {
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  _cached_size_ = 0;
}

DmiPointingDevices_Item::~DmiPointingDevices_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPointingDevices.Item)
  SharedDtor();
}

void DmiPointingDevices_Item::SharedDtor() {
}

void DmiPointingDevices_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPointingDevices_Item& DmiPointingDevices_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPointingDevices_Item();
  return *internal_default_instance();
}

DmiPointingDevices_Item* DmiPointingDevices_Item::New(::google::protobuf::Arena* arena) const {
  DmiPointingDevices_Item* n = new DmiPointingDevices_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPointingDevices_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPointingDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  _internal_metadata_.Clear();
}

bool DmiPointingDevices_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPointingDevices.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.DmiPointingDevices.Type device_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::aspia::proto::DmiPointingDevices_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPointingDevices.Interface device_interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_interface(static_cast< ::aspia::proto::DmiPointingDevices_Interface >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 button_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &button_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPointingDevices.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPointingDevices.Item)
  return false;
#undef DO_
}

void DmiPointingDevices_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPointingDevices.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.DmiPointingDevices.Type device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // .aspia.proto.DmiPointingDevices.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_interface(), output);
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->button_count(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPointingDevices.Item)
}

size_t DmiPointingDevices_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPointingDevices.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.DmiPointingDevices.Type device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // .aspia.proto.DmiPointingDevices.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_interface());
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->button_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPointingDevices_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPointingDevices_Item*>(&from));
}

void DmiPointingDevices_Item::MergeFrom(const DmiPointingDevices_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPointingDevices.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_interface() != 0) {
    set_device_interface(from.device_interface());
  }
  if (from.button_count() != 0) {
    set_button_count(from.button_count());
  }
}

void DmiPointingDevices_Item::CopyFrom(const DmiPointingDevices_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPointingDevices.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPointingDevices_Item::IsInitialized() const {
  return true;
}

void DmiPointingDevices_Item::Swap(DmiPointingDevices_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPointingDevices_Item::InternalSwap(DmiPointingDevices_Item* other) {
  using std::swap;
  swap(device_type_, other->device_type_);
  swap(device_interface_, other->device_interface_);
  swap(button_count_, other->button_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPointingDevices_Item::GetTypeName() const {
  return "aspia.proto.DmiPointingDevices.Item";
}


// ===================================================================

void DmiPointingDevices::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPointingDevices::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPointingDevices::DmiPointingDevices()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPointingDevices();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPointingDevices)
}
DmiPointingDevices::DmiPointingDevices(const DmiPointingDevices& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPointingDevices)
}

void DmiPointingDevices::SharedCtor() {
  _cached_size_ = 0;
}

DmiPointingDevices::~DmiPointingDevices() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPointingDevices)
  SharedDtor();
}

void DmiPointingDevices::SharedDtor() {
}

void DmiPointingDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPointingDevices& DmiPointingDevices::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPointingDevices();
  return *internal_default_instance();
}

DmiPointingDevices* DmiPointingDevices::New(::google::protobuf::Arena* arena) const {
  DmiPointingDevices* n = new DmiPointingDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPointingDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPointingDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPointingDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPointingDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiPointingDevices.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPointingDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPointingDevices)
  return false;
#undef DO_
}

void DmiPointingDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPointingDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiPointingDevices.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPointingDevices)
}

size_t DmiPointingDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPointingDevices)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiPointingDevices.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPointingDevices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPointingDevices*>(&from));
}

void DmiPointingDevices::MergeFrom(const DmiPointingDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPointingDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPointingDevices::CopyFrom(const DmiPointingDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPointingDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPointingDevices::IsInitialized() const {
  return true;
}

void DmiPointingDevices::Swap(DmiPointingDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPointingDevices::InternalSwap(DmiPointingDevices* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPointingDevices::GetTypeName() const {
  return "aspia.proto.DmiPointingDevices";
}


// ===================================================================

void DmiPortableBattery_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortableBattery_Item::kLocationFieldNumber;
const int DmiPortableBattery_Item::kManufacturerFieldNumber;
const int DmiPortableBattery_Item::kManufactureDateFieldNumber;
const int DmiPortableBattery_Item::kSerialNumberFieldNumber;
const int DmiPortableBattery_Item::kDeviceNameFieldNumber;
const int DmiPortableBattery_Item::kChemistryFieldNumber;
const int DmiPortableBattery_Item::kDesignCapacityFieldNumber;
const int DmiPortableBattery_Item::kDesignVoltageFieldNumber;
const int DmiPortableBattery_Item::kSbdsVersionNumberFieldNumber;
const int DmiPortableBattery_Item::kMaxErrorInBatteryDataFieldNumber;
const int DmiPortableBattery_Item::kSbdsSerialNumberFieldNumber;
const int DmiPortableBattery_Item::kSbdsManufactureDateFieldNumber;
const int DmiPortableBattery_Item::kSbdsDeviceChemistryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortableBattery_Item::DmiPortableBattery_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortableBattery_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortableBattery.Item)
}
DmiPortableBattery_Item::DmiPortableBattery_Item(const DmiPortableBattery_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacture_date().size() > 0) {
    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_version_number().size() > 0) {
    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_serial_number().size() > 0) {
    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_manufacture_date().size() > 0) {
    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_device_chemistry().size() > 0) {
    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  ::memcpy(&chemistry_, &from.chemistry_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_error_in_battery_data_) -
    reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortableBattery.Item)
}

void DmiPortableBattery_Item::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chemistry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
  _cached_size_ = 0;
}

DmiPortableBattery_Item::~DmiPortableBattery_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortableBattery.Item)
  SharedDtor();
}

void DmiPortableBattery_Item::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiPortableBattery_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortableBattery_Item& DmiPortableBattery_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortableBattery_Item();
  return *internal_default_instance();
}

DmiPortableBattery_Item* DmiPortableBattery_Item::New(::google::protobuf::Arena* arena) const {
  DmiPortableBattery_Item* n = new DmiPortableBattery_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortableBattery_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortableBattery.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chemistry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
  _internal_metadata_.Clear();
}

bool DmiPortableBattery_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortableBattery.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacture_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiPortableBattery.Chemistry chemistry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chemistry(static_cast< ::aspia::proto::DmiPortableBattery_Chemistry >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_version_number = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_version_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.sbds_version_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_error_in_battery_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_error_in_battery_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_serial_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.sbds_serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_manufacture_date = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.sbds_manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_device_chemistry = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_device_chemistry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiPortableBattery.Item.sbds_device_chemistry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortableBattery.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortableBattery.Item)
  return false;
#undef DO_
}

void DmiPortableBattery_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortableBattery.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacture_date(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_name(), output);
  }

  // .aspia.proto.DmiPortableBattery.Chemistry chemistry = 6;
  if (this->chemistry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->chemistry(), output);
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->design_capacity(), output);
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->design_voltage(), output);
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.sbds_version_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sbds_version_number(), output);
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_error_in_battery_data(), output);
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.sbds_serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sbds_serial_number(), output);
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.sbds_manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sbds_manufacture_date(), output);
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiPortableBattery.Item.sbds_device_chemistry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sbds_device_chemistry(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortableBattery.Item)
}

size_t DmiPortableBattery_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortableBattery.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacture_date());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_version_number());
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_serial_number());
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_manufacture_date());
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_device_chemistry());
  }

  // .aspia.proto.DmiPortableBattery.Chemistry chemistry = 6;
  if (this->chemistry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chemistry());
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_capacity());
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_voltage());
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_error_in_battery_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortableBattery_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortableBattery_Item*>(&from));
}

void DmiPortableBattery_Item::MergeFrom(const DmiPortableBattery_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortableBattery.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.manufacture_date().size() > 0) {

    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.sbds_version_number().size() > 0) {

    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  if (from.sbds_serial_number().size() > 0) {

    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  if (from.sbds_manufacture_date().size() > 0) {

    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  if (from.sbds_device_chemistry().size() > 0) {

    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  if (from.chemistry() != 0) {
    set_chemistry(from.chemistry());
  }
  if (from.design_capacity() != 0) {
    set_design_capacity(from.design_capacity());
  }
  if (from.design_voltage() != 0) {
    set_design_voltage(from.design_voltage());
  }
  if (from.max_error_in_battery_data() != 0) {
    set_max_error_in_battery_data(from.max_error_in_battery_data());
  }
}

void DmiPortableBattery_Item::CopyFrom(const DmiPortableBattery_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortableBattery.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortableBattery_Item::IsInitialized() const {
  return true;
}

void DmiPortableBattery_Item::Swap(DmiPortableBattery_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortableBattery_Item::InternalSwap(DmiPortableBattery_Item* other) {
  using std::swap;
  location_.Swap(&other->location_);
  manufacturer_.Swap(&other->manufacturer_);
  manufacture_date_.Swap(&other->manufacture_date_);
  serial_number_.Swap(&other->serial_number_);
  device_name_.Swap(&other->device_name_);
  sbds_version_number_.Swap(&other->sbds_version_number_);
  sbds_serial_number_.Swap(&other->sbds_serial_number_);
  sbds_manufacture_date_.Swap(&other->sbds_manufacture_date_);
  sbds_device_chemistry_.Swap(&other->sbds_device_chemistry_);
  swap(chemistry_, other->chemistry_);
  swap(design_capacity_, other->design_capacity_);
  swap(design_voltage_, other->design_voltage_);
  swap(max_error_in_battery_data_, other->max_error_in_battery_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortableBattery_Item::GetTypeName() const {
  return "aspia.proto.DmiPortableBattery.Item";
}


// ===================================================================

void DmiPortableBattery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiPortableBattery::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiPortableBattery::DmiPortableBattery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortableBattery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiPortableBattery)
}
DmiPortableBattery::DmiPortableBattery(const DmiPortableBattery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiPortableBattery)
}

void DmiPortableBattery::SharedCtor() {
  _cached_size_ = 0;
}

DmiPortableBattery::~DmiPortableBattery() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiPortableBattery)
  SharedDtor();
}

void DmiPortableBattery::SharedDtor() {
}

void DmiPortableBattery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiPortableBattery& DmiPortableBattery::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsDmiPortableBattery();
  return *internal_default_instance();
}

DmiPortableBattery* DmiPortableBattery::New(::google::protobuf::Arena* arena) const {
  DmiPortableBattery* n = new DmiPortableBattery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiPortableBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiPortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiPortableBattery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiPortableBattery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiPortableBattery.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiPortableBattery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiPortableBattery)
  return false;
#undef DO_
}

void DmiPortableBattery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiPortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiPortableBattery.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiPortableBattery)
}

size_t DmiPortableBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiPortableBattery)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiPortableBattery.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiPortableBattery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiPortableBattery*>(&from));
}

void DmiPortableBattery::MergeFrom(const DmiPortableBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiPortableBattery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiPortableBattery::CopyFrom(const DmiPortableBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiPortableBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiPortableBattery::IsInitialized() const {
  return true;
}

void DmiPortableBattery::Swap(DmiPortableBattery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiPortableBattery::InternalSwap(DmiPortableBattery* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiPortableBattery::GetTypeName() const {
  return "aspia.proto.DmiPortableBattery";
}


// ===================================================================

void Programs_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Programs_Item::kNameFieldNumber;
const int Programs_Item::kVersionFieldNumber;
const int Programs_Item::kPublisherFieldNumber;
const int Programs_Item::kInstallDateFieldNumber;
const int Programs_Item::kInstallLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Programs_Item::Programs_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsPrograms_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Programs.Item)
}
Programs_Item::Programs_Item(const Programs_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  publisher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publisher().size() > 0) {
    publisher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_);
  }
  install_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.install_date().size() > 0) {
    install_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_date_);
  }
  install_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.install_location().size() > 0) {
    install_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_location_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Programs.Item)
}

void Programs_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Programs_Item::~Programs_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Programs.Item)
  SharedDtor();
}

void Programs_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Programs_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Programs_Item& Programs_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsPrograms_Item();
  return *internal_default_instance();
}

Programs_Item* Programs_Item::New(::google::protobuf::Arena* arena) const {
  Programs_Item* n = new Programs_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Programs_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Programs.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  install_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Programs_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Programs.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Programs.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Programs.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string publisher = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publisher().data(), static_cast<int>(this->publisher().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Programs.Item.publisher"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string install_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_install_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->install_date().data(), static_cast<int>(this->install_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Programs.Item.install_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string install_location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_install_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->install_location().data(), static_cast<int>(this->install_location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Programs.Item.install_location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Programs.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Programs.Item)
  return false;
#undef DO_
}

void Programs_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Programs.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Programs.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Programs.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string publisher = 3;
  if (this->publisher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publisher().data(), static_cast<int>(this->publisher().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Programs.Item.publisher");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->publisher(), output);
  }

  // string install_date = 4;
  if (this->install_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->install_date().data(), static_cast<int>(this->install_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Programs.Item.install_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->install_date(), output);
  }

  // string install_location = 5;
  if (this->install_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->install_location().data(), static_cast<int>(this->install_location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Programs.Item.install_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->install_location(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Programs.Item)
}

size_t Programs_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Programs.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string publisher = 3;
  if (this->publisher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publisher());
  }

  // string install_date = 4;
  if (this->install_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->install_date());
  }

  // string install_location = 5;
  if (this->install_location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->install_location());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Programs_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Programs_Item*>(&from));
}

void Programs_Item::MergeFrom(const Programs_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Programs.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.publisher().size() > 0) {

    publisher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_);
  }
  if (from.install_date().size() > 0) {

    install_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_date_);
  }
  if (from.install_location().size() > 0) {

    install_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_location_);
  }
}

void Programs_Item::CopyFrom(const Programs_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Programs.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Programs_Item::IsInitialized() const {
  return true;
}

void Programs_Item::Swap(Programs_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Programs_Item::InternalSwap(Programs_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  publisher_.Swap(&other->publisher_);
  install_date_.Swap(&other->install_date_);
  install_location_.Swap(&other->install_location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Programs_Item::GetTypeName() const {
  return "aspia.proto.Programs.Item";
}


// ===================================================================

void Programs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Programs::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Programs::Programs()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsPrograms();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Programs)
}
Programs::Programs(const Programs& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Programs)
}

void Programs::SharedCtor() {
  _cached_size_ = 0;
}

Programs::~Programs() {
  // @@protoc_insertion_point(destructor:aspia.proto.Programs)
  SharedDtor();
}

void Programs::SharedDtor() {
}

void Programs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Programs& Programs::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsPrograms();
  return *internal_default_instance();
}

Programs* Programs::New(::google::protobuf::Arena* arena) const {
  Programs* n = new Programs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Programs::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Programs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Programs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Programs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Programs.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Programs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Programs)
  return false;
#undef DO_
}

void Programs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Programs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Programs.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Programs)
}

size_t Programs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Programs)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Programs.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Programs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Programs*>(&from));
}

void Programs::MergeFrom(const Programs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Programs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Programs::CopyFrom(const Programs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Programs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Programs::IsInitialized() const {
  return true;
}

void Programs::Swap(Programs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Programs::InternalSwap(Programs* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Programs::GetTypeName() const {
  return "aspia.proto.Programs";
}


// ===================================================================

void Services_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services_Item::kNameFieldNumber;
const int Services_Item::kDisplayNameFieldNumber;
const int Services_Item::kDescriptionFieldNumber;
const int Services_Item::kStatusFieldNumber;
const int Services_Item::kStartupTypeFieldNumber;
const int Services_Item::kBinaryPathFieldNumber;
const int Services_Item::kStartNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services_Item::Services_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsServices_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Services.Item)
}
Services_Item::Services_Item(const Services_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binary_path().size() > 0) {
    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_name().size() > 0) {
    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&startup_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Services.Item)
}

void Services_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _cached_size_ = 0;
}

Services_Item::~Services_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Services.Item)
  SharedDtor();
}

void Services_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Services_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services_Item& Services_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsServices_Item();
  return *internal_default_instance();
}

Services_Item* Services_Item::New(::google::protobuf::Arena* arena) const {
  Services_Item* n = new Services_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(startup_type_));
  _internal_metadata_.Clear();
}

bool Services_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Services.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Services.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Services.Item.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Services.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Services.Item.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::Services_Item_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Services.Item.StartupType startup_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_startup_type(static_cast< ::aspia::proto::Services_Item_StartupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string binary_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binary_path().data(), static_cast<int>(this->binary_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Services.Item.binary_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_name().data(), static_cast<int>(this->start_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Services.Item.start_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Services.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Services.Item)
  return false;
#undef DO_
}

void Services_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Services.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Services.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Services.Item.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Services.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .aspia.proto.Services.Item.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // .aspia.proto.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->startup_type(), output);
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binary_path().data(), static_cast<int>(this->binary_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Services.Item.binary_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->binary_path(), output);
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_name().data(), static_cast<int>(this->start_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Services.Item.start_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->start_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Services.Item)
}

size_t Services_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Services.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string binary_path = 6;
  if (this->binary_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binary_path());
  }

  // string start_name = 7;
  if (this->start_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_name());
  }

  // .aspia.proto.Services.Item.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.proto.Services.Item.StartupType startup_type = 5;
  if (this->startup_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->startup_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services_Item*>(&from));
}

void Services_Item::MergeFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Services.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.binary_path().size() > 0) {

    binary_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_path_);
  }
  if (from.start_name().size() > 0) {

    start_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.startup_type() != 0) {
    set_startup_type(from.startup_type());
  }
}

void Services_Item::CopyFrom(const Services_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Services.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services_Item::IsInitialized() const {
  return true;
}

void Services_Item::Swap(Services_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services_Item::InternalSwap(Services_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  description_.Swap(&other->description_);
  binary_path_.Swap(&other->binary_path_);
  start_name_.Swap(&other->start_name_);
  swap(status_, other->status_);
  swap(startup_type_, other->startup_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services_Item::GetTypeName() const {
  return "aspia.proto.Services.Item";
}


// ===================================================================

void Services::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services::Services()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsServices();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Services)
}
Services::Services(const Services& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Services)
}

void Services::SharedCtor() {
  _cached_size_ = 0;
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:aspia.proto.Services)
  SharedDtor();
}

void Services::SharedDtor() {
}

void Services::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Services& Services::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsServices();
  return *internal_default_instance();
}

Services* Services::New(::google::protobuf::Arena* arena) const {
  Services* n = new Services;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Services)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Services.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Services.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Services)
}

size_t Services::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Services)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Services.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Services*>(&from));
}

void Services::MergeFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Services)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Services::CopyFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {
  return true;
}

void Services::Swap(Services* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services::InternalSwap(Services* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Services::GetTypeName() const {
  return "aspia.proto.Services";
}


// ===================================================================

void NetworkCards_Item_IpAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item_IpAddress::kAddressFieldNumber;
const int NetworkCards_Item_IpAddress::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item_IpAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCards.Item.IpAddress)
}
NetworkCards_Item_IpAddress::NetworkCards_Item_IpAddress(const NetworkCards_Item_IpAddress& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCards.Item.IpAddress)
}

void NetworkCards_Item_IpAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkCards_Item_IpAddress::~NetworkCards_Item_IpAddress() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCards.Item.IpAddress)
  SharedDtor();
}

void NetworkCards_Item_IpAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item_IpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item_IpAddress& NetworkCards_Item_IpAddress::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item_IpAddress();
  return *internal_default_instance();
}

NetworkCards_Item_IpAddress* NetworkCards_Item_IpAddress::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item_IpAddress* n = new NetworkCards_Item_IpAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item_IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NetworkCards_Item_IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCards.Item.IpAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.IpAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.IpAddress.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCards.Item.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCards.Item.IpAddress)
  return false;
#undef DO_
}

void NetworkCards_Item_IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCards.Item.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.IpAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.IpAddress.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCards.Item.IpAddress)
}

size_t NetworkCards_Item_IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCards.Item.IpAddress)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item_IpAddress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item_IpAddress*>(&from));
}

void NetworkCards_Item_IpAddress::MergeFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCards.Item.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void NetworkCards_Item_IpAddress::CopyFrom(const NetworkCards_Item_IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCards.Item.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item_IpAddress::IsInitialized() const {
  return true;
}

void NetworkCards_Item_IpAddress::Swap(NetworkCards_Item_IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item_IpAddress::InternalSwap(NetworkCards_Item_IpAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  mask_.Swap(&other->mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item_IpAddress::GetTypeName() const {
  return "aspia.proto.NetworkCards.Item.IpAddress";
}


// ===================================================================

void NetworkCards_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards_Item::kAdapterNameFieldNumber;
const int NetworkCards_Item::kConnectionNameFieldNumber;
const int NetworkCards_Item::kInterfaceTypeFieldNumber;
const int NetworkCards_Item::kMtuFieldNumber;
const int NetworkCards_Item::kSpeedFieldNumber;
const int NetworkCards_Item::kMacAddressFieldNumber;
const int NetworkCards_Item::kIsWinsEnabledFieldNumber;
const int NetworkCards_Item::kPrimaryWinsServerFieldNumber;
const int NetworkCards_Item::kSecondaryWinsServerFieldNumber;
const int NetworkCards_Item::kIsDhcpEnabledFieldNumber;
const int NetworkCards_Item::kIpAddressFieldNumber;
const int NetworkCards_Item::kGatewayAddressFieldNumber;
const int NetworkCards_Item::kDhcpServerAddressFieldNumber;
const int NetworkCards_Item::kDnsServerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards_Item::NetworkCards_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCards.Item)
}
NetworkCards_Item::NetworkCards_Item(const NetworkCards_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ip_address_(from.ip_address_),
      gateway_address_(from.gateway_address_),
      dhcp_server_address_(from.dhcp_server_address_),
      dns_server_address_(from.dns_server_address_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter_name().size() > 0) {
    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_name().size() > 0) {
    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_address().size() > 0) {
    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_wins_server().size() > 0) {
    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secondary_wins_server().size() > 0) {
    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  ::memcpy(&mtu_, &from.mtu_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dhcp_enabled_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCards.Item)
}

void NetworkCards_Item::SharedCtor() {
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _cached_size_ = 0;
}

NetworkCards_Item::~NetworkCards_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCards.Item)
  SharedDtor();
}

void NetworkCards_Item::SharedDtor() {
  adapter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkCards_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards_Item& NetworkCards_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards_Item();
  return *internal_default_instance();
}

NetworkCards_Item* NetworkCards_Item::New(::google::protobuf::Arena* arena) const {
  NetworkCards_Item* n = new NetworkCards_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.Clear();
  gateway_address_.Clear();
  dhcp_server_address_.Clear();
  dns_server_address_.Clear();
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_wins_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dhcp_enabled_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(is_dhcp_enabled_));
  _internal_metadata_.Clear();
}

bool NetworkCards_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCards.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adapter_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.adapter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_name().data(), static_cast<int>(this->connection_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.connection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), static_cast<int>(this->mac_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.mac_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_wins_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wins_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_wins_server = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.primary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secondary_wins_server = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_wins_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.secondary_wins_server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dhcp_enabled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.NetworkCards.Item.IpAddress ip_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateway_address = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateway_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway_address(this->gateway_address_size() - 1).data(),
            static_cast<int>(this->gateway_address(this->gateway_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.gateway_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dhcp_server_address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dhcp_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dhcp_server_address(this->dhcp_server_address_size() - 1).data(),
            static_cast<int>(this->dhcp_server_address(this->dhcp_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.dhcp_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dns_server_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns_server_address(this->dns_server_address_size() - 1).data(),
            static_cast<int>(this->dns_server_address(this->dns_server_address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.NetworkCards.Item.dns_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCards.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCards.Item)
  return false;
#undef DO_
}

void NetworkCards_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCards.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter_name().data(), static_cast<int>(this->adapter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.adapter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adapter_name(), output);
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_name().data(), static_cast<int>(this->connection_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.connection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->interface_type(), output);
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mtu(), output);
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), static_cast<int>(this->mac_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mac_address(), output);
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wins_enabled(), output);
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_wins_server().data(), static_cast<int>(this->primary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.primary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->primary_wins_server(), output);
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secondary_wins_server().data(), static_cast<int>(this->secondary_wins_server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.secondary_wins_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->secondary_wins_server(), output);
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dhcp_enabled(), output);
  }

  // repeated .aspia.proto.NetworkCards.Item.IpAddress ip_address = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_address_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->ip_address(static_cast<int>(i)), output);
  }

  // repeated string gateway_address = 12;
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway_address(i).data(), static_cast<int>(this->gateway_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.gateway_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gateway_address(i), output);
  }

  // repeated string dhcp_server_address = 13;
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dhcp_server_address(i).data(), static_cast<int>(this->dhcp_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.dhcp_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->dhcp_server_address(i), output);
  }

  // repeated string dns_server_address = 14;
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns_server_address(i).data(), static_cast<int>(this->dns_server_address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.NetworkCards.Item.dns_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->dns_server_address(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCards.Item)
}

size_t NetworkCards_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCards.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.NetworkCards.Item.IpAddress ip_address = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_address_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ip_address(static_cast<int>(i)));
    }
  }

  // repeated string gateway_address = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateway_address_size());
  for (int i = 0, n = this->gateway_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateway_address(i));
  }

  // repeated string dhcp_server_address = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dhcp_server_address_size());
  for (int i = 0, n = this->dhcp_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dhcp_server_address(i));
  }

  // repeated string dns_server_address = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dns_server_address_size());
  for (int i = 0, n = this->dns_server_address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_server_address(i));
  }

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter_name());
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  // string interface_type = 3;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // string mac_address = 6;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // string primary_wins_server = 8;
  if (this->primary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_wins_server());
  }

  // string secondary_wins_server = 9;
  if (this->secondary_wins_server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secondary_wins_server());
  }

  // uint32 mtu = 4;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtu());
  }

  // uint32 speed = 5;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // bool is_wins_enabled = 7;
  if (this->is_wins_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dhcp_enabled = 10;
  if (this->is_dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards_Item*>(&from));
}

void NetworkCards_Item::MergeFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCards.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_address_.MergeFrom(from.ip_address_);
  gateway_address_.MergeFrom(from.gateway_address_);
  dhcp_server_address_.MergeFrom(from.dhcp_server_address_);
  dns_server_address_.MergeFrom(from.dns_server_address_);
  if (from.adapter_name().size() > 0) {

    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  if (from.connection_name().size() > 0) {

    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.primary_wins_server().size() > 0) {

    primary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_wins_server_);
  }
  if (from.secondary_wins_server().size() > 0) {

    secondary_wins_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_wins_server_);
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_wins_enabled() != 0) {
    set_is_wins_enabled(from.is_wins_enabled());
  }
  if (from.is_dhcp_enabled() != 0) {
    set_is_dhcp_enabled(from.is_dhcp_enabled());
  }
}

void NetworkCards_Item::CopyFrom(const NetworkCards_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCards.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards_Item::IsInitialized() const {
  return true;
}

void NetworkCards_Item::Swap(NetworkCards_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards_Item::InternalSwap(NetworkCards_Item* other) {
  using std::swap;
  ip_address_.InternalSwap(&other->ip_address_);
  gateway_address_.InternalSwap(&other->gateway_address_);
  dhcp_server_address_.InternalSwap(&other->dhcp_server_address_);
  dns_server_address_.InternalSwap(&other->dns_server_address_);
  adapter_name_.Swap(&other->adapter_name_);
  connection_name_.Swap(&other->connection_name_);
  interface_type_.Swap(&other->interface_type_);
  mac_address_.Swap(&other->mac_address_);
  primary_wins_server_.Swap(&other->primary_wins_server_);
  secondary_wins_server_.Swap(&other->secondary_wins_server_);
  swap(mtu_, other->mtu_);
  swap(speed_, other->speed_);
  swap(is_wins_enabled_, other->is_wins_enabled_);
  swap(is_dhcp_enabled_, other->is_dhcp_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards_Item::GetTypeName() const {
  return "aspia.proto.NetworkCards.Item";
}


// ===================================================================

void NetworkCards::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCards::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCards::NetworkCards()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.NetworkCards)
}
NetworkCards::NetworkCards(const NetworkCards& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.NetworkCards)
}

void NetworkCards::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCards::~NetworkCards() {
  // @@protoc_insertion_point(destructor:aspia.proto.NetworkCards)
  SharedDtor();
}

void NetworkCards::SharedDtor() {
}

void NetworkCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkCards& NetworkCards::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsNetworkCards();
  return *internal_default_instance();
}

NetworkCards* NetworkCards::New(::google::protobuf::Arena* arena) const {
  NetworkCards* n = new NetworkCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCards::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.NetworkCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.NetworkCards.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.NetworkCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.NetworkCards)
  return false;
#undef DO_
}

void NetworkCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.NetworkCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.NetworkCards.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.NetworkCards)
}

size_t NetworkCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.NetworkCards)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.NetworkCards.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkCards*>(&from));
}

void NetworkCards::MergeFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.NetworkCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void NetworkCards::CopyFrom(const NetworkCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.NetworkCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkCards::IsInitialized() const {
  return true;
}

void NetworkCards::Swap(NetworkCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCards::InternalSwap(NetworkCards* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkCards::GetTypeName() const {
  return "aspia.proto.NetworkCards";
}


// ===================================================================

void OpenConnections_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections_Item::kProcessNameFieldNumber;
const int OpenConnections_Item::kProtocolFieldNumber;
const int OpenConnections_Item::kLocalAddressFieldNumber;
const int OpenConnections_Item::kRemoteAddressFieldNumber;
const int OpenConnections_Item::kLocalPortFieldNumber;
const int OpenConnections_Item::kRemotePortFieldNumber;
const int OpenConnections_Item::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections_Item::OpenConnections_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsOpenConnections_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpenConnections.Item)
}
OpenConnections_Item::OpenConnections_Item(const OpenConnections_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_address().size() > 0) {
    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_address().size() > 0) {
    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpenConnections.Item)
}

void OpenConnections_Item::SharedCtor() {
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(state_));
  _cached_size_ = 0;
}

OpenConnections_Item::~OpenConnections_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpenConnections.Item)
  SharedDtor();
}

void OpenConnections_Item::SharedDtor() {
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenConnections_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections_Item& OpenConnections_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsOpenConnections_Item();
  return *internal_default_instance();
}

OpenConnections_Item* OpenConnections_Item::New(::google::protobuf::Arena* arena) const {
  OpenConnections_Item* n = new OpenConnections_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool OpenConnections_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpenConnections.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string process_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpenConnections.Item.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpenConnections.Protocol protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::aspia::proto::OpenConnections_Protocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), static_cast<int>(this->local_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpenConnections.Item.local_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_address().data(), static_cast<int>(this->remote_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.OpenConnections.Item.remote_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 local_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remote_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.OpenConnections.State state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::aspia::proto::OpenConnections_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpenConnections.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpenConnections.Item)
  return false;
#undef DO_
}

void OpenConnections_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpenConnections.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpenConnections.Item.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->process_name(), output);
  }

  // .aspia.proto.OpenConnections.Protocol protocol = 2;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol(), output);
  }

  // string local_address = 3;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), static_cast<int>(this->local_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpenConnections.Item.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->local_address(), output);
  }

  // string remote_address = 4;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), static_cast<int>(this->remote_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.OpenConnections.Item.remote_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remote_address(), output);
  }

  // uint32 local_port = 5;
  if (this->local_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->local_port(), output);
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remote_port(), output);
  }

  // .aspia.proto.OpenConnections.State state = 7;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpenConnections.Item)
}

size_t OpenConnections_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpenConnections.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // string local_address = 3;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // string remote_address = 4;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_address());
  }

  // .aspia.proto.OpenConnections.Protocol protocol = 2;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  // uint32 local_port = 5;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_port());
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remote_port());
  }

  // .aspia.proto.OpenConnections.State state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections_Item*>(&from));
}

void OpenConnections_Item::MergeFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpenConnections.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {

    process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.local_port() != 0) {
    set_local_port(from.local_port());
  }
  if (from.remote_port() != 0) {
    set_remote_port(from.remote_port());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void OpenConnections_Item::CopyFrom(const OpenConnections_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpenConnections.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections_Item::IsInitialized() const {
  return true;
}

void OpenConnections_Item::Swap(OpenConnections_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections_Item::InternalSwap(OpenConnections_Item* other) {
  using std::swap;
  process_name_.Swap(&other->process_name_);
  local_address_.Swap(&other->local_address_);
  remote_address_.Swap(&other->remote_address_);
  swap(protocol_, other->protocol_);
  swap(local_port_, other->local_port_);
  swap(remote_port_, other->remote_port_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections_Item::GetTypeName() const {
  return "aspia.proto.OpenConnections.Item";
}


// ===================================================================

void OpenConnections::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenConnections::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenConnections::OpenConnections()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsOpenConnections();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.OpenConnections)
}
OpenConnections::OpenConnections(const OpenConnections& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.OpenConnections)
}

void OpenConnections::SharedCtor() {
  _cached_size_ = 0;
}

OpenConnections::~OpenConnections() {
  // @@protoc_insertion_point(destructor:aspia.proto.OpenConnections)
  SharedDtor();
}

void OpenConnections::SharedDtor() {
}

void OpenConnections::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenConnections& OpenConnections::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsOpenConnections();
  return *internal_default_instance();
}

OpenConnections* OpenConnections::New(::google::protobuf::Arena* arena) const {
  OpenConnections* n = new OpenConnections;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConnections::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool OpenConnections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.OpenConnections)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.OpenConnections.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.OpenConnections)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.OpenConnections)
  return false;
#undef DO_
}

void OpenConnections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.OpenConnections)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.OpenConnections.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.OpenConnections)
}

size_t OpenConnections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.OpenConnections)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.OpenConnections.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConnections::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenConnections*>(&from));
}

void OpenConnections::MergeFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.OpenConnections)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void OpenConnections::CopyFrom(const OpenConnections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.OpenConnections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConnections::IsInitialized() const {
  return true;
}

void OpenConnections::Swap(OpenConnections* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConnections::InternalSwap(OpenConnections* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string OpenConnections::GetTypeName() const {
  return "aspia.proto.OpenConnections";
}


// ===================================================================

void SharedResources_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources_Item::kNameFieldNumber;
const int SharedResources_Item::kTypeFieldNumber;
const int SharedResources_Item::kDescriptionFieldNumber;
const int SharedResources_Item::kLocalPathFieldNumber;
const int SharedResources_Item::kCurrentUsesFieldNumber;
const int SharedResources_Item::kMaximumUsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources_Item::SharedResources_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSharedResources_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SharedResources.Item)
}
SharedResources_Item::SharedResources_Item(const SharedResources_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_uses_) -
    reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SharedResources.Item)
}

void SharedResources_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _cached_size_ = 0;
}

SharedResources_Item::~SharedResources_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.SharedResources.Item)
  SharedDtor();
}

void SharedResources_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SharedResources_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources_Item& SharedResources_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSharedResources_Item();
  return *internal_default_instance();
}

SharedResources_Item* SharedResources_Item::New(::google::protobuf::Arena* arena) const {
  SharedResources_Item* n = new SharedResources_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_uses_) -
      reinterpret_cast<char*>(&type_)) + sizeof(maximum_uses_));
  _internal_metadata_.Clear();
}

bool SharedResources_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SharedResources.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.SharedResources.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.SharedResources.Item.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::SharedResources_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.SharedResources.Item.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.SharedResources.Item.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_uses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maximum_uses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_uses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SharedResources.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SharedResources.Item)
  return false;
#undef DO_
}

void SharedResources_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SharedResources.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.SharedResources.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.proto.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.SharedResources.Item.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string local_path = 4;
  if (this->local_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.SharedResources.Item.local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->local_path(), output);
  }

  // uint32 current_uses = 5;
  if (this->current_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_uses(), output);
  }

  // uint32 maximum_uses = 6;
  if (this->maximum_uses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maximum_uses(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SharedResources.Item)
}

size_t SharedResources_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SharedResources.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string local_path = 4;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // .aspia.proto.SharedResources.Item.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 current_uses = 5;
  if (this->current_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_uses());
  }

  // uint32 maximum_uses = 6;
  if (this->maximum_uses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maximum_uses());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources_Item*>(&from));
}

void SharedResources_Item::MergeFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SharedResources.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.current_uses() != 0) {
    set_current_uses(from.current_uses());
  }
  if (from.maximum_uses() != 0) {
    set_maximum_uses(from.maximum_uses());
  }
}

void SharedResources_Item::CopyFrom(const SharedResources_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SharedResources.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources_Item::IsInitialized() const {
  return true;
}

void SharedResources_Item::Swap(SharedResources_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources_Item::InternalSwap(SharedResources_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  local_path_.Swap(&other->local_path_);
  swap(type_, other->type_);
  swap(current_uses_, other->current_uses_);
  swap(maximum_uses_, other->maximum_uses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources_Item::GetTypeName() const {
  return "aspia.proto.SharedResources.Item";
}


// ===================================================================

void SharedResources::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedResources::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedResources::SharedResources()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSharedResources();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SharedResources)
}
SharedResources::SharedResources(const SharedResources& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SharedResources)
}

void SharedResources::SharedCtor() {
  _cached_size_ = 0;
}

SharedResources::~SharedResources() {
  // @@protoc_insertion_point(destructor:aspia.proto.SharedResources)
  SharedDtor();
}

void SharedResources::SharedDtor() {
}

void SharedResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedResources& SharedResources::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSharedResources();
  return *internal_default_instance();
}

SharedResources* SharedResources::New(::google::protobuf::Arena* arena) const {
  SharedResources* n = new SharedResources;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedResources::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool SharedResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SharedResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.SharedResources.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SharedResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SharedResources)
  return false;
#undef DO_
}

void SharedResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SharedResources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.SharedResources.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SharedResources)
}

size_t SharedResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SharedResources)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.SharedResources.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedResources::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedResources*>(&from));
}

void SharedResources::MergeFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SharedResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void SharedResources::CopyFrom(const SharedResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SharedResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedResources::IsInitialized() const {
  return true;
}

void SharedResources::Swap(SharedResources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedResources::InternalSwap(SharedResources* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SharedResources::GetTypeName() const {
  return "aspia.proto.SharedResources";
}


// ===================================================================

void Routes_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes_Item::kDestonationFieldNumber;
const int Routes_Item::kMaskFieldNumber;
const int Routes_Item::kGatewayFieldNumber;
const int Routes_Item::kMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes_Item::Routes_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsRoutes_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Routes.Item)
}
Routes_Item::Routes_Item(const Routes_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destonation().size() > 0) {
    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gateway().size() > 0) {
    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Routes.Item)
}

void Routes_Item::SharedCtor() {
  destonation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _cached_size_ = 0;
}

Routes_Item::~Routes_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Routes.Item)
  SharedDtor();
}

void Routes_Item::SharedDtor() {
  destonation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Routes_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes_Item& Routes_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsRoutes_Item();
  return *internal_default_instance();
}

Routes_Item* Routes_Item::New(::google::protobuf::Arena* arena) const {
  Routes_Item* n = new Routes_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destonation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_ = 0u;
  _internal_metadata_.Clear();
}

bool Routes_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Routes.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destonation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destonation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destonation().data(), static_cast<int>(this->destonation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Routes.Item.destonation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), static_cast<int>(this->mask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Routes.Item.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), static_cast<int>(this->gateway().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Routes.Item.gateway"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 metric = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Routes.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Routes.Item)
  return false;
#undef DO_
}

void Routes_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Routes.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destonation().data(), static_cast<int>(this->destonation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Routes.Item.destonation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destonation(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), static_cast<int>(this->mask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Routes.Item.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), static_cast<int>(this->gateway().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Routes.Item.gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway(), output);
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->metric(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Routes.Item)
}

size_t Routes_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Routes.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string destonation = 1;
  if (this->destonation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destonation());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  // uint32 metric = 4;
  if (this->metric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metric());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes_Item*>(&from));
}

void Routes_Item::MergeFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Routes.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destonation().size() > 0) {

    destonation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destonation_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from.gateway().size() > 0) {

    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  if (from.metric() != 0) {
    set_metric(from.metric());
  }
}

void Routes_Item::CopyFrom(const Routes_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Routes.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes_Item::IsInitialized() const {
  return true;
}

void Routes_Item::Swap(Routes_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes_Item::InternalSwap(Routes_Item* other) {
  using std::swap;
  destonation_.Swap(&other->destonation_);
  mask_.Swap(&other->mask_);
  gateway_.Swap(&other->gateway_);
  swap(metric_, other->metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes_Item::GetTypeName() const {
  return "aspia.proto.Routes.Item";
}


// ===================================================================

void Routes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Routes::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Routes::Routes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsRoutes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Routes)
}
Routes::Routes(const Routes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Routes)
}

void Routes::SharedCtor() {
  _cached_size_ = 0;
}

Routes::~Routes() {
  // @@protoc_insertion_point(destructor:aspia.proto.Routes)
  SharedDtor();
}

void Routes::SharedDtor() {
}

void Routes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Routes& Routes::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsRoutes();
  return *internal_default_instance();
}

Routes* Routes::New(::google::protobuf::Arena* arena) const {
  Routes* n = new Routes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Routes::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Routes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Routes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Routes.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Routes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Routes)
  return false;
#undef DO_
}

void Routes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Routes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Routes.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Routes)
}

size_t Routes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Routes)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Routes.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Routes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Routes*>(&from));
}

void Routes::MergeFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Routes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Routes::CopyFrom(const Routes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Routes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routes::IsInitialized() const {
  return true;
}

void Routes::Swap(Routes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Routes::InternalSwap(Routes* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Routes::GetTypeName() const {
  return "aspia.proto.Routes";
}


// ===================================================================

void Users_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users_Item::kNameFieldNumber;
const int Users_Item::kFullNameFieldNumber;
const int Users_Item::kCommentFieldNumber;
const int Users_Item::kIsDisabledFieldNumber;
const int Users_Item::kIsPasswordCantChangeFieldNumber;
const int Users_Item::kIsPasswordExpiredFieldNumber;
const int Users_Item::kIsDontExpirePasswordFieldNumber;
const int Users_Item::kIsLockoutFieldNumber;
const int Users_Item::kNumberLogonsFieldNumber;
const int Users_Item::kBadPasswordCountFieldNumber;
const int Users_Item::kLastLogonTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users_Item::Users_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUsers_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Users.Item)
}
Users_Item::Users_Item(const Users_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_name().size() > 0) {
    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&is_disabled_, &from.is_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_logon_time_) -
    reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Users.Item)
}

void Users_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_logon_time_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  _cached_size_ = 0;
}

Users_Item::~Users_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Users.Item)
  SharedDtor();
}

void Users_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Users_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users_Item& Users_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUsers_Item();
  return *internal_default_instance();
}

Users_Item* Users_Item::New(::google::protobuf::Arena* arena) const {
  Users_Item* n = new Users_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_logon_time_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(last_logon_time_));
  _internal_metadata_.Clear();
}

bool Users_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Users.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Users.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string full_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), static_cast<int>(this->full_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Users.Item.full_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Users.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_disabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_cant_change = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_cant_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_password_expired = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_password_expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dont_expire_password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dont_expire_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_lockout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_logons = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_logons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bad_password_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bad_password_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_logon_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logon_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Users.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Users.Item)
  return false;
#undef DO_
}

void Users_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Users.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Users.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Users.Item.full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_name(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Users.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // bool is_disabled = 4;
  if (this->is_disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
  }

  // bool is_password_cant_change = 5;
  if (this->is_password_cant_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_password_cant_change(), output);
  }

  // bool is_password_expired = 6;
  if (this->is_password_expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_password_expired(), output);
  }

  // bool is_dont_expire_password = 7;
  if (this->is_dont_expire_password() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_dont_expire_password(), output);
  }

  // bool is_lockout = 8;
  if (this->is_lockout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_lockout(), output);
  }

  // uint32 number_logons = 9;
  if (this->number_logons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->number_logons(), output);
  }

  // uint32 bad_password_count = 10;
  if (this->bad_password_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bad_password_count(), output);
  }

  // int64 last_logon_time = 11;
  if (this->last_logon_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_logon_time(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Users.Item)
}

size_t Users_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Users.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string full_name = 2;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // bool is_disabled = 4;
  if (this->is_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_cant_change = 5;
  if (this->is_password_cant_change() != 0) {
    total_size += 1 + 1;
  }

  // bool is_password_expired = 6;
  if (this->is_password_expired() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dont_expire_password = 7;
  if (this->is_dont_expire_password() != 0) {
    total_size += 1 + 1;
  }

  // bool is_lockout = 8;
  if (this->is_lockout() != 0) {
    total_size += 1 + 1;
  }

  // uint32 number_logons = 9;
  if (this->number_logons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_logons());
  }

  // uint32 bad_password_count = 10;
  if (this->bad_password_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bad_password_count());
  }

  // int64 last_logon_time = 11;
  if (this->last_logon_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_logon_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users_Item*>(&from));
}

void Users_Item::MergeFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Users.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.full_name().size() > 0) {

    full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.is_disabled() != 0) {
    set_is_disabled(from.is_disabled());
  }
  if (from.is_password_cant_change() != 0) {
    set_is_password_cant_change(from.is_password_cant_change());
  }
  if (from.is_password_expired() != 0) {
    set_is_password_expired(from.is_password_expired());
  }
  if (from.is_dont_expire_password() != 0) {
    set_is_dont_expire_password(from.is_dont_expire_password());
  }
  if (from.is_lockout() != 0) {
    set_is_lockout(from.is_lockout());
  }
  if (from.number_logons() != 0) {
    set_number_logons(from.number_logons());
  }
  if (from.bad_password_count() != 0) {
    set_bad_password_count(from.bad_password_count());
  }
  if (from.last_logon_time() != 0) {
    set_last_logon_time(from.last_logon_time());
  }
}

void Users_Item::CopyFrom(const Users_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Users.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users_Item::IsInitialized() const {
  return true;
}

void Users_Item::Swap(Users_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users_Item::InternalSwap(Users_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  full_name_.Swap(&other->full_name_);
  comment_.Swap(&other->comment_);
  swap(is_disabled_, other->is_disabled_);
  swap(is_password_cant_change_, other->is_password_cant_change_);
  swap(is_password_expired_, other->is_password_expired_);
  swap(is_dont_expire_password_, other->is_dont_expire_password_);
  swap(is_lockout_, other->is_lockout_);
  swap(number_logons_, other->number_logons_);
  swap(bad_password_count_, other->bad_password_count_);
  swap(last_logon_time_, other->last_logon_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users_Item::GetTypeName() const {
  return "aspia.proto.Users.Item";
}


// ===================================================================

void Users::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Users::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Users::Users()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUsers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Users)
}
Users::Users(const Users& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Users)
}

void Users::SharedCtor() {
  _cached_size_ = 0;
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:aspia.proto.Users)
  SharedDtor();
}

void Users::SharedDtor() {
}

void Users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Users& Users::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUsers();
  return *internal_default_instance();
}

Users* Users::New(::google::protobuf::Arena* arena) const {
  Users* n = new Users;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Users)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Users.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Users)
  return false;
#undef DO_
}

void Users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Users)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Users.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Users)
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Users)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Users.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Users::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Users*>(&from));
}

void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::Swap(Users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Users::InternalSwap(Users* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Users::GetTypeName() const {
  return "aspia.proto.Users";
}


// ===================================================================

void UserGroups_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups_Item::kNameFieldNumber;
const int UserGroups_Item::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups_Item::UserGroups_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUserGroups_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.UserGroups.Item)
}
UserGroups_Item::UserGroups_Item(const UserGroups_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.UserGroups.Item)
}

void UserGroups_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserGroups_Item::~UserGroups_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.UserGroups.Item)
  SharedDtor();
}

void UserGroups_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserGroups_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups_Item& UserGroups_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUserGroups_Item();
  return *internal_default_instance();
}

UserGroups_Item* UserGroups_Item::New(::google::protobuf::Arena* arena) const {
  UserGroups_Item* n = new UserGroups_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserGroups_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.UserGroups.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.UserGroups.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.UserGroups.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.UserGroups.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.UserGroups.Item)
  return false;
#undef DO_
}

void UserGroups_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.UserGroups.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.UserGroups.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.UserGroups.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.UserGroups.Item)
}

size_t UserGroups_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.UserGroups.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups_Item*>(&from));
}

void UserGroups_Item::MergeFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.UserGroups.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
}

void UserGroups_Item::CopyFrom(const UserGroups_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.UserGroups.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups_Item::IsInitialized() const {
  return true;
}

void UserGroups_Item::Swap(UserGroups_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups_Item::InternalSwap(UserGroups_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  comment_.Swap(&other->comment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups_Item::GetTypeName() const {
  return "aspia.proto.UserGroups.Item";
}


// ===================================================================

void UserGroups::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroups::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroups::UserGroups()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUserGroups();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.UserGroups)
}
UserGroups::UserGroups(const UserGroups& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.UserGroups)
}

void UserGroups::SharedCtor() {
  _cached_size_ = 0;
}

UserGroups::~UserGroups() {
  // @@protoc_insertion_point(destructor:aspia.proto.UserGroups)
  SharedDtor();
}

void UserGroups::SharedDtor() {
}

void UserGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroups& UserGroups::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsUserGroups();
  return *internal_default_instance();
}

UserGroups* UserGroups::New(::google::protobuf::Arena* arena) const {
  UserGroups* n = new UserGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool UserGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.UserGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.UserGroups.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.UserGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.UserGroups)
  return false;
#undef DO_
}

void UserGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.UserGroups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.UserGroups.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.UserGroups)
}

size_t UserGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.UserGroups)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.UserGroups.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroups::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroups*>(&from));
}

void UserGroups::MergeFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.UserGroups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void UserGroups::CopyFrom(const UserGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.UserGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroups::IsInitialized() const {
  return true;
}

void UserGroups::Swap(UserGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroups::InternalSwap(UserGroups* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroups::GetTypeName() const {
  return "aspia.proto.UserGroups";
}


// ===================================================================

void Sessions_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions_Item::kUserNameFieldNumber;
const int Sessions_Item::kDomainNameFieldNumber;
const int Sessions_Item::kSessionIdFieldNumber;
const int Sessions_Item::kConnectStateFieldNumber;
const int Sessions_Item::kClientNameFieldNumber;
const int Sessions_Item::kWinstationNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions_Item::Sessions_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSessions_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Sessions.Item)
}
Sessions_Item::Sessions_Item(const Sessions_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_name().size() > 0) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_name().size() > 0) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.winstation_name().size() > 0) {
    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_state_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(connect_state_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Sessions.Item)
}

void Sessions_Item::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_state_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(connect_state_));
  _cached_size_ = 0;
}

Sessions_Item::~Sessions_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Sessions.Item)
  SharedDtor();
}

void Sessions_Item::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sessions_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions_Item& Sessions_Item::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSessions_Item();
  return *internal_default_instance();
}

Sessions_Item* Sessions_Item::New(::google::protobuf::Arena* arena) const {
  Sessions_Item* n = new Sessions_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winstation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_state_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(connect_state_));
  _internal_metadata_.Clear();
}

bool Sessions_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Sessions.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Sessions.Item.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_name().data(), static_cast<int>(this->domain_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Sessions.Item.domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Sessions.ConnectState connect_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connect_state(static_cast< ::aspia::proto::Sessions_ConnectState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_name().data(), static_cast<int>(this->client_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Sessions.Item.client_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string winstation_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winstation_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Sessions.Item.winstation_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Sessions.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Sessions.Item)
  return false;
#undef DO_
}

void Sessions_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Sessions.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Sessions.Item.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), static_cast<int>(this->domain_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Sessions.Item.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_name(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // .aspia.proto.Sessions.ConnectState connect_state = 4;
  if (this->connect_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->connect_state(), output);
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Sessions.Item.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_name(), output);
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->winstation_name().data(), static_cast<int>(this->winstation_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Sessions.Item.winstation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->winstation_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Sessions.Item)
}

size_t Sessions_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Sessions.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_name());
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_name());
  }

  // string winstation_name = 6;
  if (this->winstation_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->winstation_name());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // .aspia.proto.Sessions.ConnectState connect_state = 4;
  if (this->connect_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connect_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions_Item*>(&from));
}

void Sessions_Item::MergeFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Sessions.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.domain_name().size() > 0) {

    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  if (from.client_name().size() > 0) {

    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  if (from.winstation_name().size() > 0) {

    winstation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winstation_name_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.connect_state() != 0) {
    set_connect_state(from.connect_state());
  }
}

void Sessions_Item::CopyFrom(const Sessions_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Sessions.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions_Item::IsInitialized() const {
  return true;
}

void Sessions_Item::Swap(Sessions_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions_Item::InternalSwap(Sessions_Item* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  domain_name_.Swap(&other->domain_name_);
  client_name_.Swap(&other->client_name_);
  winstation_name_.Swap(&other->winstation_name_);
  swap(session_id_, other->session_id_);
  swap(connect_state_, other->connect_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions_Item::GetTypeName() const {
  return "aspia.proto.Sessions.Item";
}


// ===================================================================

void Sessions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sessions::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sessions::Sessions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSessions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Sessions)
}
Sessions::Sessions(const Sessions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Sessions)
}

void Sessions::SharedCtor() {
  _cached_size_ = 0;
}

Sessions::~Sessions() {
  // @@protoc_insertion_point(destructor:aspia.proto.Sessions)
  SharedDtor();
}

void Sessions::SharedDtor() {
}

void Sessions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sessions& Sessions::default_instance() {
  ::protobuf_system_5finfo_5fsession_5fmessage_2eproto::InitDefaultsSessions();
  return *internal_default_instance();
}

Sessions* Sessions::New(::google::protobuf::Arena* arena) const {
  Sessions* n = new Sessions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sessions::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Sessions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Sessions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Sessions.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Sessions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Sessions)
  return false;
#undef DO_
}

void Sessions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Sessions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Sessions.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Sessions)
}

size_t Sessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Sessions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Sessions.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sessions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sessions*>(&from));
}

void Sessions::MergeFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Sessions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Sessions::CopyFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Sessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions::IsInitialized() const {
  return true;
}

void Sessions::Swap(Sessions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sessions::InternalSwap(Sessions* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Sessions::GetTypeName() const {
  return "aspia.proto.Sessions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

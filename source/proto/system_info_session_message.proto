//
// PROJECT:         Aspia
// FILE:            proto/system_info/printers.proto
// LICENSE:         Mozilla Public License Version 2.0
// PROGRAMMERS:     Dmitry Chapyshev (dmitry@aspia.ru)
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.proto;

message DmiMemoryDevices
{
    enum Type
    {
        TYPE_UNKNOWN      = 0;
        TYPE_OTHER        = 1;
        TYPE_DRAM         = 2;
        TYPE_EDRAM        = 3;
        TYPE_VRAM         = 4;
        TYPE_SRAM         = 5;
        TYPE_RAM          = 6;
        TYPE_ROM          = 7;
        TYPE_FLASH        = 8;
        TYPE_EEPROM       = 9;
        TYPE_FEPROM       = 10;
        TYPE_EPROM        = 11;
        TYPE_CDRAM        = 12;
        TYPE_3DRAM        = 13;
        TYPE_SDRAM        = 14;
        TYPE_SGRAM        = 15;
        TYPE_RDRAM        = 16;
        TYPE_DDR          = 17;
        TYPE_DDR2         = 18;
        TYPE_DDR2_FB_DIMM = 19;
        TYPE_DDR3         = 20;
        TYPE_FBD2         = 21;
        TYPE_DDR4         = 22;
        TYPE_LPDDR        = 23;
        TYPE_LPDDR2       = 24;
        TYPE_LPDDR3       = 25;
        TYPE_LPDDR4       = 26;
    }

    enum FormFactor
    {
        FORM_FACTOR_UNKNOWN          = 0;
        FORM_FACTOR_OTHER            = 1;
        FORM_FACTOR_SIMM             = 2;
        FORM_FACTOR_SIP              = 3;
        FORM_FACTOR_CHIP             = 4;
        FORM_FACTOR_DIP              = 5;
        FORM_FACTOR_ZIP              = 6;
        FORM_FACTOR_PROPRIETARY_CARD = 7;
        FORM_FACTOR_DIMM             = 8;
        FORM_FACTOR_TSOP             = 9;
        FORM_FACTOR_ROW_OF_CHIPS     = 10;
        FORM_FACTOR_RIMM             = 11;
        FORM_FACTOR_SODIMM           = 12;
        FORM_FACTOR_SRIMM            = 13;
        FORM_FACTOR_FB_DIMM          = 14;
    }

    message Item
    {
        string device_locator  = 1;
        int32 size             = 2;
        Type type              = 3;
        int32 speed            = 4;
        FormFactor form_factor = 5;
        string serial_number   = 6;
        string part_number     = 7;
        string manufactorer    = 8;
        string bank            = 9;
        int32 total_width      = 10;
        int32 data_width       = 11;
    }

    repeated Item item = 1;
}

message DmiSystemSlots
{
    enum Type
    {
        TYPE_UNKNOWN                                 = 0;
        TYPE_OTHER                                   = 1;
        TYPE_ISA                                     = 2;
        TYPE_MCA                                     = 3;
        TYPE_EISA                                    = 4;
        TYPE_PCI                                     = 5;
        TYPE_PC_CARD                                 = 6;
        TYPE_VLB                                     = 7;
        TYPE_PROPRIETARY                             = 8;
        TYPE_PROCESSOR_CARD                          = 9;
        TYPE_PROPRIETARY_MEMORY_CARD                 = 10;
        TYPE_IO_RISER_CARD                           = 11;
        TYPE_NUBUS                                   = 12;
        TYPE_PCI_66                                  = 13;
        TYPE_AGP                                     = 14;
        TYPE_AGP_2X                                  = 15;
        TYPE_AGP_4X                                  = 16;
        TYPE_PCI_X                                   = 17;
        TYPE_AGP_8X                                  = 18;
        TYPE_M2_SOCKET_1DP                           = 19;
        TYPE_M2_SOCKET_1SD                           = 20;
        TYPE_M2_SOCKET_2                             = 21;
        TYPE_M2_SOCKET_3                             = 22;
        TYPE_MXM_TYPE_I                              = 23;
        TYPE_MXM_TYPE_II                             = 24;
        TYPE_MXM_TYPE_III                            = 25;
        TYPE_MXM_TYPE_III_HE                         = 26;
        TYPE_MXM_TYPE_IV                             = 27;
        TYPE_MXM_30_TYPE_A                           = 28;
        TYPE_MXM_30_TYPE_B                           = 29;
        TYPE_PCI_EXPRESS_2_SFF_8639                  = 30;
        TYPE_PCI_EXPRESS_3_SFF_8639                  = 31;
        TYPE_PCI_EXPRESS_MINI_52PIN_WITH_BOTTOM_SIDE = 32;
        TYPE_PCI_EXPRESS_MINI_52PIN                  = 33;
        TYPE_PCI_EXPRESS_MINI_76PIN                  = 34;
        TYPE_PC98_C20                                = 35;
        TYPE_PC98_C24                                = 36;
        TYPE_PC98_E                                  = 37;
        TYPE_PC98_LOCAL_BUS                          = 38;
        TYPE_PC98_CARD                               = 39;
        TYPE_PCI_EXPRESS                             = 40;
        TYPE_PCI_EXPRESS_X1                          = 41;
        TYPE_PCI_EXPRESS_X2                          = 42;
        TYPE_PCI_EXPRESS_X4                          = 43;
        TYPE_PCI_EXPRESS_X8                          = 44;
        TYPE_PCI_EXPRESS_X16                         = 45;
        TYPE_PCI_EXPRESS_2                           = 46;
        TYPE_PCI_EXPRESS_2_X1                        = 47;
        TYPE_PCI_EXPRESS_2_X2                        = 48;
        TYPE_PCI_EXPRESS_2_X4                        = 49;
        TYPE_PCI_EXPRESS_2_X8                        = 50;
        TYPE_PCI_EXPRESS_2_X16                       = 51;
        TYPE_PCI_EXPRESS_3                           = 52;
        TYPE_PCI_EXPRESS_3_X1                        = 53;
        TYPE_PCI_EXPRESS_3_X2                        = 54;
        TYPE_PCI_EXPRESS_3_X4                        = 55;
        TYPE_PCI_EXPRESS_3_X8                        = 56;
        TYPE_PCI_EXPRESS_3_X16                       = 57;
    }

    enum Usage
    {
        USAGE_UNKNOWN   = 0;
        USAGE_OTHER     = 1;
        USAGE_AVAILABLE = 2;
        USAGE_IN_USE    = 3;
    }

    enum BusWidth
    {
        BUS_WIDTH_UNKNOWN = 0;
        BUS_WIDTH_OTHER   = 1;
        BUS_WIDTH_8_BIT   = 2;
        BUS_WIDTH_16_BIT  = 3;
        BUS_WIDTH_32_BIT  = 4;
        BUS_WIDTH_64_BIT  = 5;
        BUS_WIDTH_128_BIT = 6;
        BUS_WIDTH_X1      = 7;
        BUS_WIDTH_X2      = 8;
        BUS_WIDTH_X4      = 9;
        BUS_WIDTH_X8      = 10;
        BUS_WIDTH_X12     = 11;
        BUS_WIDTH_X16     = 12;
        BUS_WIDTH_X32     = 13;
    }

    enum Length
    {
        LENGTH_UNKNOWN = 0;
        LENGTH_OTHER   = 1;
        LENGTH_SHORT   = 2;
        LENGTH_LONG    = 3;
    }

    message Item
    {
        string slot_designation = 1;
        Type type               = 2;
        Usage usage             = 3;
        BusWidth bus_width      = 4;
        Length length           = 5;
    }

    repeated Item item = 1;
}

message DmiPortConnectors
{
    enum Type
    {
        TYPE_UNKNOWN                        = 0;
        TYPE_NONE                           = 1;
        TYPE_PARALLEL_PORT_XT_AT_COMPATIBLE = 2;
        TYPE_PARALLEL_PORT_PS_2             = 3;
        TYPE_PARALLEL_PORT_ECP              = 4;
        TYPE_PARALLEL_PORT_EPP              = 5;
        TYPE_PARALLEL_PORT_ECP_EPP          = 6;
        TYPE_SERIAL_PORT_XT_AT_COMPATIBLE   = 7;
        TYPE_SERIAL_PORT_16450_COMPATIBLE   = 8;
        TYPE_SERIAL_PORT_16550_COMPATIBLE   = 9;
        TYPE_SERIAL_PORT_16550A_COMPATIBLE  = 10;
        TYPE_SCSI_PORT                      = 11;
        TYPE_MIDI_PORT                      = 12;
        TYPE_JOYSTICK_PORT                  = 13;
        TYPE_KEYBOARD_PORT                  = 14;
        TYPE_MOUSE_PORT                     = 15;
        TYPE_SSA_SCSI                       = 16;
        TYPE_USB                            = 17;
        TYPE_FIREWIRE                       = 18;
        TYPE_PCMCIA_TYPE_I                  = 19;
        TYPE_PCMCIA_TYPE_II                 = 20;
        TYPE_PCMCIA_TYPE_III                = 21;
        TYPE_CARDBUS                        = 22;
        TYPE_ACCESS_BUS_PORT                = 23;
        TYPE_SCSI_II                        = 24;
        TYPE_SCSI_WIDE                      = 25;
        TYPE_PC_98                          = 26;
        TYPE_PC_98_HIRESO                   = 27;
        TYPE_PC_H98                         = 28;
        TYPE_VIDEO_PORT                     = 29;
        TYPE_AUDIO_PORT                     = 30;
        TYPE_MODEM_PORT                     = 31;
        TYPE_NETWORK_PORT                   = 32;
        TYPE_SATA                           = 33;
        TYPE_SAS                            = 34;
        TYPE_8251_COMPATIBLE                = 35;
        TYPE_8251_FIFO_COMPATIBLE           = 36;
    }

    enum ConnectorType
    {
        CONNECTOR_TYPE_UNKNOWN                        = 0;
        CONNECTOR_TYPE_NONE                           = 1;
        CONNECTOR_TYPE_OTHER                          = 2;
        CONNECTOR_TYPE_CENTRONICS                     = 3;
        CONNECTOR_TYPE_MINI_CENTRONICS                = 4;
        CONNECTOR_TYPE_PROPRIETARY                    = 5;
        CONNECTOR_TYPE_DB_25_MALE                     = 6;
        CONNECTOR_TYPE_DB_25_FEMALE                   = 7;
        CONNECTOR_TYPE_DB_15_MALE                     = 8;
        CONNECTOR_TYPE_DB_15_FEMALE                   = 9;
        CONNECTOR_TYPE_DB_9_MALE                      = 10;
        CONNECTOR_TYPE_DB_9_FEMALE                    = 11;
        CONNECTOR_TYPE_RJ_11                          = 12;
        CONNECTOR_TYPE_RJ_45                          = 13;
        CONNECTOR_TYPE_50_PIN_MINISCSI                = 14;
        CONNECTOR_TYPE_MINI_DIN                       = 15;
        CONNECTOR_TYPE_MICRO_DIN                      = 16;
        CONNECTOR_TYPE_PS_2                           = 17;
        CONNECTOR_TYPE_INFRARED                       = 18;
        CONNECTOR_TYPE_HP_HIL                         = 19;
        CONNECTOR_TYPE_ACCESS_BUS_USB                 = 20;
        CONNECTOR_TYPE_SSA_SCSI                       = 21;
        CONNECTOR_TYPE_CIRCULAR_DIN_8_MALE            = 22;
        CONNECTOR_TYPE_CIRCULAR_DIN_8_FEMALE          = 23;
        CONNECTOR_TYPE_ONBOARD_IDE                    = 24;
        CONNECTOR_TYPE_ONBOARD_FLOPPY                 = 25;
        CONNECTOR_TYPE_9_PIN_DUAL_INLINE              = 26;
        CONNECTOR_TYPE_25_PIN_DUAL_INLINE             = 27;
        CONNECTOR_TYPE_50_PIN_DUAL_INLINE             = 28;
        CONNECTOR_TYPE_68_PIN_DUAL_INLINE             = 29;
        CONNECTOR_TYPE_ONBOARD_SOUND_INPUT_FROM_CDROM = 30;
        CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_14        = 31;
        CONNECTOR_TYPE_MINI_CENTRONICS_TYPE_26        = 32;
        CONNECTOR_TYPE_MINI_JACK                      = 33;
        CONNECTOR_TYPE_BNC                            = 34;
        CONNECTOR_TYPE_IEEE_1394                      = 35;
        CONNECTOR_TYPE_SAS_SATE_PLUG_RECEPTACLE       = 36;
        CONNECTOR_TYPE_PC_98                          = 37;
        CONNECTOR_TYPE_PC_98_HIRESO                   = 38;
        CONNECTOR_TYPE_PC_H98                         = 39;
        CONNECTOR_TYPE_PC_98_NOTE                     = 40;
        CONNECTOR_TYPE_PC_98_FULL                     = 41;
    }

    message Item
    {
        string internal_designation           = 1;
        string external_designation           = 2;
        Type type                             = 3;
        ConnectorType internal_connector_type = 4;
        ConnectorType external_connector_type = 5;
    }

    repeated Item item = 1;
}

message DmiOnBoardDevices
{
    enum Type
    {
        TYPE_UNKNOWN         = 0;
        TYPE_OTHER           = 1;
        TYPE_VIDEO           = 2;
        TYPE_SCSI_CONTROLLER = 3;
        TYPE_ETHERNET        = 4;
        TYPE_TOKEN_RING      = 5;
        TYPE_SOUND           = 6;
        TYPE_PATA_CONTROLLER = 7;
        TYPE_SATA_CONTROLLER = 8;
        TYPE_SAS_CONTROLLER  = 9;
    }

    message Item
    {
        string description = 1;
        Type type          = 2;
        bool enabled       = 3;
    }

    repeated Item item = 1;
}

message DmiPointingDevices
{
    enum Type
    {
        TYPE_UNKNOWN        = 0;
        TYPE_OTHER          = 1;
        TYPE_MOUSE          = 2;
        TYPE_TRACK_BALL     = 3;
        TYPE_TRACK_POINT    = 4;
        TYPE_GLIDE_POINT    = 5;
        TYPE_TOUCH_PAD      = 6;
        TYPE_TOUCH_SCREEN   = 7;
        TYPE_OPTICAL_SENSOR = 8;
    }

    enum Interface
    {
        INTERFACE_UNKNOWN             = 0;
        INTERFACE_OTHER               = 1;
        INTERFACE_SERIAL              = 2;
        INTERFACE_PS_2                = 3;
        INTERFACE_INFRARED            = 4;
        INTERFACE_HP_HIL              = 5;
        INTERFACE_BUS_MOUSE           = 6;
        INTERFACE_ADB                 = 7;
        INTERFACE_BUS_MOUSE_DB_9      = 8;
        INTERFACE_BUS_MOUSE_MICRO_DIN = 9;
        INTERFACE_USB                 = 10;
    }

    message Item
    {
        Type device_type           = 1;
        Interface device_interface = 2;
        int32 button_count         = 3;
    }

    repeated Item item = 1;
}

message DmiPortableBattery
{
    enum Chemistry
    {
        CHEMISTRY_UNKNOWN              = 0;
        CHEMISTRY_OTHER                = 1;
        CHEMISTRY_LEAD_ACID            = 2;
        CHEMISTRY_NICKEL_CADMIUM       = 3;
        CHEMISTRY_NICKEL_METAL_HYDRIDE = 4;
        CHEMISTRY_LITHIUM_ION          = 5;
        CHEMISTRY_ZINC_AIR             = 6;
        CHEMISTRY_LITHIUM_POLYMER      = 7;
    }

    message Item
    {
        string location                 = 1;
        string manufacturer             = 2;
        string manufacture_date         = 3;
        string serial_number            = 4;
        string device_name              = 5;
        Chemistry chemistry             = 6;
        int32 design_capacity           = 7;
        int32 design_voltage            = 8;
        string sbds_version_number      = 9;
        int32 max_error_in_battery_data = 10;
        string sbds_serial_number       = 11;
        string sbds_manufacture_date    = 12;
        string sbds_device_chemistry    = 13;
    }

    repeated Item item = 1;
}

message Programs
{
    message Item
    {
        string name             = 1;
        string version          = 2;
        string publisher        = 3;
        string install_date     = 4;
        string install_location = 5;
    }

    repeated Item item = 1;
}

message Services
{
    message Item
    {
        string name         = 1;
        string display_name = 2;
        string description  = 3;

        enum Status
        {
            STATUS_UNKNOWN          = 0;
            STATUS_CONTINUE_PENDING = 1;
            STATUS_PAUSE_PENDING    = 2;
            STATUS_PAUSED           = 3;
            STATUS_RUNNING          = 4;
            STATUS_START_PENDING    = 5;
            STATUS_STOP_PENDING     = 6;
            STATUS_STOPPED          = 7;
        }

        Status status = 4;

        enum StartupType
        {
            STARTUP_TYPE_UNKNOWN      = 0;
            STARTUP_TYPE_AUTO_START   = 1;
            STARTUP_TYPE_DEMAND_START = 2;
            STARTUP_TYPE_DISABLED     = 3;
            STARTUP_TYPE_BOOT_START   = 4;
            STARTUP_TYPE_SYSTEM_START = 5;
        }

        StartupType startup_type = 5;
        string binary_path       = 6;
        string start_name        = 7;
    }

    repeated Item item = 1;
}

message NetworkCards
{
    message Item
    {
        string adapter_name          = 1;
        string connection_name       = 2;
        string interface_type        = 3;
        uint32 mtu                   = 4;
        uint32 speed                 = 5;
        string mac_address           = 6;
        bool is_wins_enabled         = 7;
        string primary_wins_server   = 8;
        string secondary_wins_server = 9;
        bool is_dhcp_enabled         = 10;

        message IpAddress
        {
            string address = 1;
            string mask    = 2;
        }

        repeated IpAddress ip_address       = 11;
        repeated string gateway_address     = 12;
        repeated string dhcp_server_address = 13;
        repeated string dns_server_address  = 14;
    }

    repeated Item item = 1;
}

message OpenConnections
{
    enum Protocol
    {
        PROTOCOL_UNKNOWN = 0;
        PROTOCOL_TCP     = 1;
        PROTOCOL_UDP     = 2;
    }

    enum State
    {
        STATE_UNKNOWN     = 0;
        STATE_CLOSED      = 1;
        STATE_LISTENING   = 2;
        STATE_SYN_SENT    = 3;
        STATE_SYN_RCVD    = 4;
        STATE_ESTABLISHED = 5;
        STATE_FIN_WAIT1   = 6;
        STATE_FIN_WAIT2   = 7;
        STATE_CLOSE_WAIT  = 8;
        STATE_CLOSING     = 9;
        STATE_LAST_ACK    = 10;
        STATE_TIME_WAIT   = 11;
        STATE_DELETE_TCB  = 12;
    }

    message Item
    {
        string process_name   = 1;
        Protocol protocol     = 2;
        string local_address  = 3;
        string remote_address = 4;
        uint32 local_port     = 5;
        uint32 remote_port    = 6;
        State state           = 7;
    }

    repeated Item item = 1;
}

message SharedResources
{
    message Item
    {
        string name = 1;

        enum Type
        {
            TYPE_UNKNOWN   = 0;
            TYPE_DISK      = 1;
            TYPE_PRINTER   = 2;
            TYPE_DEVICE    = 3;
            TYPE_IPC       = 4;
            TYPE_SPECIAL   = 5;
            TYPE_TEMPORARY = 6;
        }

        Type type           = 2;
        string description  = 3;
        string local_path   = 4;
        uint32 current_uses = 5;
        uint32 maximum_uses = 6;
    }

    repeated Item item = 1;
}

message Routes
{
    message Item
    {
        string destonation = 1;
        string mask        = 2;
        string gateway     = 3;
        uint32 metric      = 4;
    }

    repeated Item item = 1;
}

message Users
{
    message Item
    {
        string name                  = 1;
        string full_name             = 2;
        string comment               = 3;
        bool is_disabled             = 4;
        bool is_password_cant_change = 5;
        bool is_password_expired     = 6;
        bool is_dont_expire_password = 7;
        bool is_lockout              = 8;
        uint32 number_logons         = 9;
        uint32 bad_password_count    = 10;
        int64 last_logon_time        = 11;
    }

    repeated Item item = 1;
}

message UserGroups
{
    message Item
    {
        string name    = 1;
        string comment = 2;
    }

    repeated Item item = 1;
}

message Sessions
{
    enum ConnectState
    {
        CONNECT_STATE_UNKNOWN       = 0;
        CONNECT_STATE_ACTIVE        = 1;
        CONNECT_STATE_CONNECTED     = 2;
        CONNECT_STATE_CONNECT_QUERY = 3;
        CONNECT_STATE_SHADOW        = 4;
        CONNECT_STATE_DISCONNECTED  = 5;
        CONNECT_STATE_IDLE          = 6;
        CONNECT_STATE_LISTEN        = 7;
        CONNECT_STATE_RESET         = 8;
        CONNECT_STATE_DOWN          = 9;
        CONNECT_STATE_INIT          = 10;
    }

    message Item
    {
        string user_name           = 1;
        string domain_name         = 2;
        uint32 session_id          = 3;
        ConnectState connect_state = 4;
        string client_name         = 5;
        string winstation_name     = 6;
    }

    repeated Item item = 1;
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: address_book.proto

#ifndef PROTOBUF_address_5fbook_2eproto__INCLUDED
#define PROTOBUF_address_5fbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "authorization.pb.h"
#include "desktop_session.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_address_5fbook_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsComputerImpl();
void InitDefaultsComputer();
void InitDefaultsComputerGroupImpl();
void InitDefaultsComputerGroup();
void InitDefaultsEncryptedImpl();
void InitDefaultsEncrypted();
void InitDefaultsFileImpl();
void InitDefaultsFile();
inline void InitDefaults() {
  InitDefaultsComputer();
  InitDefaultsComputerGroup();
  InitDefaultsEncrypted();
  InitDefaultsFile();
}
}  // namespace protobuf_address_5fbook_2eproto
namespace aspia {
namespace proto {
namespace address_book {
class Computer;
class ComputerDefaultTypeInternal;
extern ComputerDefaultTypeInternal _Computer_default_instance_;
class ComputerGroup;
class ComputerGroupDefaultTypeInternal;
extern ComputerGroupDefaultTypeInternal _ComputerGroup_default_instance_;
class Encrypted;
class EncryptedDefaultTypeInternal;
extern EncryptedDefaultTypeInternal _Encrypted_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
}  // namespace address_book
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {
namespace address_book {

enum Version {
  VERSION_UNKNOWN = 0,
  VERSION_1_0_0 = 1,
  Version_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Version_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Version_IsValid(int value);
const Version Version_MIN = VERSION_UNKNOWN;
const Version Version_MAX = VERSION_1_0_0;
const int Version_ARRAYSIZE = Version_MAX + 1;

enum EncryptionType {
  ENCRYPTION_TYPE_UNKNOWN = 0,
  ENCRYPTION_TYPE_NONE = 1,
  ENCRYPTION_TYPE_XCHACHA20_POLY1305 = 2,
  EncryptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EncryptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EncryptionType_IsValid(int value);
const EncryptionType EncryptionType_MIN = ENCRYPTION_TYPE_UNKNOWN;
const EncryptionType EncryptionType_MAX = ENCRYPTION_TYPE_XCHACHA20_POLY1305;
const int EncryptionType_ARRAYSIZE = EncryptionType_MAX + 1;

// ===================================================================

class Computer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.address_book.Computer) */ {
 public:
  Computer();
  virtual ~Computer();

  Computer(const Computer& from);

  inline Computer& operator=(const Computer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Computer(Computer&& from) noexcept
    : Computer() {
    *this = ::std::move(from);
  }

  inline Computer& operator=(Computer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Computer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Computer* internal_default_instance() {
    return reinterpret_cast<const Computer*>(
               &_Computer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Computer* other);
  friend void swap(Computer& a, Computer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Computer* New() const PROTOBUF_FINAL { return New(NULL); }

  Computer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Computer& from);
  void MergeFrom(const Computer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Computer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string comment = 2;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string username = 5;
  void clear_username();
  static const int kUsernameFieldNumber = 5;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .aspia.proto.desktop.Config desktop_manage_session = 8;
  bool has_desktop_manage_session() const;
  void clear_desktop_manage_session();
  static const int kDesktopManageSessionFieldNumber = 8;
  const ::aspia::proto::desktop::Config& desktop_manage_session() const;
  ::aspia::proto::desktop::Config* release_desktop_manage_session();
  ::aspia::proto::desktop::Config* mutable_desktop_manage_session();
  void set_allocated_desktop_manage_session(::aspia::proto::desktop::Config* desktop_manage_session);

  // .aspia.proto.desktop.Config desktop_view_session = 9;
  bool has_desktop_view_session() const;
  void clear_desktop_view_session();
  static const int kDesktopViewSessionFieldNumber = 9;
  const ::aspia::proto::desktop::Config& desktop_view_session() const;
  ::aspia::proto::desktop::Config* release_desktop_view_session();
  ::aspia::proto::desktop::Config* mutable_desktop_view_session();
  void set_allocated_desktop_view_session(::aspia::proto::desktop::Config* desktop_view_session);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // .aspia.proto.auth.SessionType session_type = 7;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 7;
  ::aspia::proto::auth::SessionType session_type() const;
  void set_session_type(::aspia::proto::auth::SessionType value);

  // @@protoc_insertion_point(class_scope:aspia.proto.address_book.Computer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::aspia::proto::desktop::Config* desktop_manage_session_;
  ::aspia::proto::desktop::Config* desktop_view_session_;
  ::google::protobuf::uint32 port_;
  int session_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_address_5fbook_2eproto::TableStruct;
  friend void ::protobuf_address_5fbook_2eproto::InitDefaultsComputerImpl();
};
// -------------------------------------------------------------------

class ComputerGroup : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.address_book.ComputerGroup) */ {
 public:
  ComputerGroup();
  virtual ~ComputerGroup();

  ComputerGroup(const ComputerGroup& from);

  inline ComputerGroup& operator=(const ComputerGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComputerGroup(ComputerGroup&& from) noexcept
    : ComputerGroup() {
    *this = ::std::move(from);
  }

  inline ComputerGroup& operator=(ComputerGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ComputerGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputerGroup* internal_default_instance() {
    return reinterpret_cast<const ComputerGroup*>(
               &_ComputerGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ComputerGroup* other);
  friend void swap(ComputerGroup& a, ComputerGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComputerGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  ComputerGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ComputerGroup& from);
  void MergeFrom(const ComputerGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputerGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.address_book.Computer computer = 1;
  int computer_size() const;
  void clear_computer();
  static const int kComputerFieldNumber = 1;
  const ::aspia::proto::address_book::Computer& computer(int index) const;
  ::aspia::proto::address_book::Computer* mutable_computer(int index);
  ::aspia::proto::address_book::Computer* add_computer();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::Computer >*
      mutable_computer();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::Computer >&
      computer() const;

  // repeated .aspia.proto.address_book.ComputerGroup computer_group = 2;
  int computer_group_size() const;
  void clear_computer_group();
  static const int kComputerGroupFieldNumber = 2;
  const ::aspia::proto::address_book::ComputerGroup& computer_group(int index) const;
  ::aspia::proto::address_book::ComputerGroup* mutable_computer_group(int index);
  ::aspia::proto::address_book::ComputerGroup* add_computer_group();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::ComputerGroup >*
      mutable_computer_group();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::ComputerGroup >&
      computer_group() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string comment = 4;
  void clear_comment();
  static const int kCommentFieldNumber = 4;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // bool expanded = 5;
  void clear_expanded();
  static const int kExpandedFieldNumber = 5;
  bool expanded() const;
  void set_expanded(bool value);

  // @@protoc_insertion_point(class_scope:aspia.proto.address_book.ComputerGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::Computer > computer_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::ComputerGroup > computer_group_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  bool expanded_;
  mutable int _cached_size_;
  friend struct ::protobuf_address_5fbook_2eproto::TableStruct;
  friend void ::protobuf_address_5fbook_2eproto::InitDefaultsComputerGroupImpl();
};
// -------------------------------------------------------------------

class Encrypted : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.address_book.Encrypted) */ {
 public:
  Encrypted();
  virtual ~Encrypted();

  Encrypted(const Encrypted& from);

  inline Encrypted& operator=(const Encrypted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encrypted(Encrypted&& from) noexcept
    : Encrypted() {
    *this = ::std::move(from);
  }

  inline Encrypted& operator=(Encrypted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Encrypted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encrypted* internal_default_instance() {
    return reinterpret_cast<const Encrypted*>(
               &_Encrypted_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Encrypted* other);
  friend void swap(Encrypted& a, Encrypted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encrypted* New() const PROTOBUF_FINAL { return New(NULL); }

  Encrypted* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Encrypted& from);
  void MergeFrom(const Encrypted& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Encrypted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes salt1 = 1;
  void clear_salt1();
  static const int kSalt1FieldNumber = 1;
  const ::std::string& salt1() const;
  void set_salt1(const ::std::string& value);
  #if LANG_CXX11
  void set_salt1(::std::string&& value);
  #endif
  void set_salt1(const char* value);
  void set_salt1(const void* value, size_t size);
  ::std::string* mutable_salt1();
  ::std::string* release_salt1();
  void set_allocated_salt1(::std::string* salt1);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes salt2 = 3;
  void clear_salt2();
  static const int kSalt2FieldNumber = 3;
  const ::std::string& salt2() const;
  void set_salt2(const ::std::string& value);
  #if LANG_CXX11
  void set_salt2(::std::string&& value);
  #endif
  void set_salt2(const char* value);
  void set_salt2(const void* value, size_t size);
  ::std::string* mutable_salt2();
  ::std::string* release_salt2();
  void set_allocated_salt2(::std::string* salt2);

  // @@protoc_insertion_point(class_scope:aspia.proto.address_book.Encrypted)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr salt1_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr salt2_;
  mutable int _cached_size_;
  friend struct ::protobuf_address_5fbook_2eproto::TableStruct;
  friend void ::protobuf_address_5fbook_2eproto::InitDefaultsEncryptedImpl();
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.address_book.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const PROTOBUF_FINAL { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes salt = 4;
  void clear_salt();
  static const int kSaltFieldNumber = 4;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const void* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .aspia.proto.address_book.Version version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::aspia::proto::address_book::Version version() const;
  void set_version(::aspia::proto::address_book::Version value);

  // .aspia.proto.address_book.EncryptionType encryption_type = 2;
  void clear_encryption_type();
  static const int kEncryptionTypeFieldNumber = 2;
  ::aspia::proto::address_book::EncryptionType encryption_type() const;
  void set_encryption_type(::aspia::proto::address_book::EncryptionType value);

  // uint64 hashing_rounds = 3;
  void clear_hashing_rounds();
  static const int kHashingRoundsFieldNumber = 3;
  ::google::protobuf::uint64 hashing_rounds() const;
  void set_hashing_rounds(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.address_book.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int version_;
  int encryption_type_;
  ::google::protobuf::uint64 hashing_rounds_;
  mutable int _cached_size_;
  friend struct ::protobuf_address_5fbook_2eproto::TableStruct;
  friend void ::protobuf_address_5fbook_2eproto::InitDefaultsFileImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Computer

// string name = 1;
inline void Computer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.name)
  return name_.GetNoArena();
}
inline void Computer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.name)
}
#if LANG_CXX11
inline void Computer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Computer.name)
}
#endif
inline void Computer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Computer.name)
}
inline void Computer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Computer.name)
}
inline ::std::string* Computer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.name)
}

// string comment = 2;
inline void Computer::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::comment() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.comment)
  return comment_.GetNoArena();
}
inline void Computer::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.comment)
}
#if LANG_CXX11
inline void Computer::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Computer.comment)
}
#endif
inline void Computer::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Computer.comment)
}
inline void Computer::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Computer.comment)
}
inline ::std::string* Computer::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.comment)
}

// string address = 3;
inline void Computer::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::address() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.address)
  return address_.GetNoArena();
}
inline void Computer::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.address)
}
#if LANG_CXX11
inline void Computer::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Computer.address)
}
#endif
inline void Computer::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Computer.address)
}
inline void Computer::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Computer.address)
}
inline ::std::string* Computer::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_address() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.address)
}

// uint32 port = 4;
inline void Computer::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Computer::port() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.port)
  return port_;
}
inline void Computer::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.port)
}

// string username = 5;
inline void Computer::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.username)
  return username_.GetNoArena();
}
inline void Computer::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.username)
}
#if LANG_CXX11
inline void Computer::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Computer.username)
}
#endif
inline void Computer::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Computer.username)
}
inline void Computer::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Computer.username)
}
inline ::std::string* Computer::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.username)
}

// string password = 6;
inline void Computer::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::password() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.password)
  return password_.GetNoArena();
}
inline void Computer::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.password)
}
#if LANG_CXX11
inline void Computer::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Computer.password)
}
#endif
inline void Computer::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Computer.password)
}
inline void Computer::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Computer.password)
}
inline ::std::string* Computer::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_password() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.password)
}

// .aspia.proto.auth.SessionType session_type = 7;
inline void Computer::clear_session_type() {
  session_type_ = 0;
}
inline ::aspia::proto::auth::SessionType Computer::session_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.session_type)
  return static_cast< ::aspia::proto::auth::SessionType >(session_type_);
}
inline void Computer::set_session_type(::aspia::proto::auth::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Computer.session_type)
}

// .aspia.proto.desktop.Config desktop_manage_session = 8;
inline bool Computer::has_desktop_manage_session() const {
  return this != internal_default_instance() && desktop_manage_session_ != NULL;
}
inline const ::aspia::proto::desktop::Config& Computer::desktop_manage_session() const {
  const ::aspia::proto::desktop::Config* p = desktop_manage_session_;
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.desktop_manage_session)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::desktop::Config*>(
      &::aspia::proto::desktop::_Config_default_instance_);
}
inline ::aspia::proto::desktop::Config* Computer::release_desktop_manage_session() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.desktop_manage_session)
  
  ::aspia::proto::desktop::Config* temp = desktop_manage_session_;
  desktop_manage_session_ = NULL;
  return temp;
}
inline ::aspia::proto::desktop::Config* Computer::mutable_desktop_manage_session() {
  
  if (desktop_manage_session_ == NULL) {
    desktop_manage_session_ = new ::aspia::proto::desktop::Config;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.desktop_manage_session)
  return desktop_manage_session_;
}
inline void Computer::set_allocated_desktop_manage_session(::aspia::proto::desktop::Config* desktop_manage_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(desktop_manage_session_);
  }
  if (desktop_manage_session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desktop_manage_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desktop_manage_session, submessage_arena);
    }
    
  } else {
    
  }
  desktop_manage_session_ = desktop_manage_session;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.desktop_manage_session)
}

// .aspia.proto.desktop.Config desktop_view_session = 9;
inline bool Computer::has_desktop_view_session() const {
  return this != internal_default_instance() && desktop_view_session_ != NULL;
}
inline const ::aspia::proto::desktop::Config& Computer::desktop_view_session() const {
  const ::aspia::proto::desktop::Config* p = desktop_view_session_;
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Computer.desktop_view_session)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::desktop::Config*>(
      &::aspia::proto::desktop::_Config_default_instance_);
}
inline ::aspia::proto::desktop::Config* Computer::release_desktop_view_session() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Computer.desktop_view_session)
  
  ::aspia::proto::desktop::Config* temp = desktop_view_session_;
  desktop_view_session_ = NULL;
  return temp;
}
inline ::aspia::proto::desktop::Config* Computer::mutable_desktop_view_session() {
  
  if (desktop_view_session_ == NULL) {
    desktop_view_session_ = new ::aspia::proto::desktop::Config;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Computer.desktop_view_session)
  return desktop_view_session_;
}
inline void Computer::set_allocated_desktop_view_session(::aspia::proto::desktop::Config* desktop_view_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(desktop_view_session_);
  }
  if (desktop_view_session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desktop_view_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desktop_view_session, submessage_arena);
    }
    
  } else {
    
  }
  desktop_view_session_ = desktop_view_session;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Computer.desktop_view_session)
}

// -------------------------------------------------------------------

// ComputerGroup

// repeated .aspia.proto.address_book.Computer computer = 1;
inline int ComputerGroup::computer_size() const {
  return computer_.size();
}
inline void ComputerGroup::clear_computer() {
  computer_.Clear();
}
inline const ::aspia::proto::address_book::Computer& ComputerGroup::computer(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.ComputerGroup.computer)
  return computer_.Get(index);
}
inline ::aspia::proto::address_book::Computer* ComputerGroup::mutable_computer(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.ComputerGroup.computer)
  return computer_.Mutable(index);
}
inline ::aspia::proto::address_book::Computer* ComputerGroup::add_computer() {
  // @@protoc_insertion_point(field_add:aspia.proto.address_book.ComputerGroup.computer)
  return computer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::Computer >*
ComputerGroup::mutable_computer() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.address_book.ComputerGroup.computer)
  return &computer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::Computer >&
ComputerGroup::computer() const {
  // @@protoc_insertion_point(field_list:aspia.proto.address_book.ComputerGroup.computer)
  return computer_;
}

// repeated .aspia.proto.address_book.ComputerGroup computer_group = 2;
inline int ComputerGroup::computer_group_size() const {
  return computer_group_.size();
}
inline void ComputerGroup::clear_computer_group() {
  computer_group_.Clear();
}
inline const ::aspia::proto::address_book::ComputerGroup& ComputerGroup::computer_group(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.ComputerGroup.computer_group)
  return computer_group_.Get(index);
}
inline ::aspia::proto::address_book::ComputerGroup* ComputerGroup::mutable_computer_group(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.ComputerGroup.computer_group)
  return computer_group_.Mutable(index);
}
inline ::aspia::proto::address_book::ComputerGroup* ComputerGroup::add_computer_group() {
  // @@protoc_insertion_point(field_add:aspia.proto.address_book.ComputerGroup.computer_group)
  return computer_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::ComputerGroup >*
ComputerGroup::mutable_computer_group() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.address_book.ComputerGroup.computer_group)
  return &computer_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::address_book::ComputerGroup >&
ComputerGroup::computer_group() const {
  // @@protoc_insertion_point(field_list:aspia.proto.address_book.ComputerGroup.computer_group)
  return computer_group_;
}

// string name = 3;
inline void ComputerGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerGroup::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.ComputerGroup.name)
  return name_.GetNoArena();
}
inline void ComputerGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.ComputerGroup.name)
}
#if LANG_CXX11
inline void ComputerGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.ComputerGroup.name)
}
#endif
inline void ComputerGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.ComputerGroup.name)
}
inline void ComputerGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.ComputerGroup.name)
}
inline ::std::string* ComputerGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.ComputerGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerGroup::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.ComputerGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.ComputerGroup.name)
}

// string comment = 4;
inline void ComputerGroup::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerGroup::comment() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.ComputerGroup.comment)
  return comment_.GetNoArena();
}
inline void ComputerGroup::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.ComputerGroup.comment)
}
#if LANG_CXX11
inline void ComputerGroup::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.ComputerGroup.comment)
}
#endif
inline void ComputerGroup::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.ComputerGroup.comment)
}
inline void ComputerGroup::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.ComputerGroup.comment)
}
inline ::std::string* ComputerGroup::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.ComputerGroup.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerGroup::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.ComputerGroup.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerGroup::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.ComputerGroup.comment)
}

// bool expanded = 5;
inline void ComputerGroup::clear_expanded() {
  expanded_ = false;
}
inline bool ComputerGroup::expanded() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.ComputerGroup.expanded)
  return expanded_;
}
inline void ComputerGroup::set_expanded(bool value) {
  
  expanded_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.ComputerGroup.expanded)
}

// -------------------------------------------------------------------

// Encrypted

// bytes salt1 = 1;
inline void Encrypted::clear_salt1() {
  salt1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encrypted::salt1() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Encrypted.salt1)
  return salt1_.GetNoArena();
}
inline void Encrypted::set_salt1(const ::std::string& value) {
  
  salt1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Encrypted.salt1)
}
#if LANG_CXX11
inline void Encrypted::set_salt1(::std::string&& value) {
  
  salt1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Encrypted.salt1)
}
#endif
inline void Encrypted::set_salt1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Encrypted.salt1)
}
inline void Encrypted::set_salt1(const void* value, size_t size) {
  
  salt1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Encrypted.salt1)
}
inline ::std::string* Encrypted::mutable_salt1() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Encrypted.salt1)
  return salt1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encrypted::release_salt1() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Encrypted.salt1)
  
  return salt1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encrypted::set_allocated_salt1(::std::string* salt1) {
  if (salt1 != NULL) {
    
  } else {
    
  }
  salt1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt1);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Encrypted.salt1)
}

// bytes data = 2;
inline void Encrypted::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encrypted::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Encrypted.data)
  return data_.GetNoArena();
}
inline void Encrypted::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Encrypted.data)
}
#if LANG_CXX11
inline void Encrypted::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Encrypted.data)
}
#endif
inline void Encrypted::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Encrypted.data)
}
inline void Encrypted::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Encrypted.data)
}
inline ::std::string* Encrypted::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Encrypted.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encrypted::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Encrypted.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encrypted::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Encrypted.data)
}

// bytes salt2 = 3;
inline void Encrypted::clear_salt2() {
  salt2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encrypted::salt2() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.Encrypted.salt2)
  return salt2_.GetNoArena();
}
inline void Encrypted::set_salt2(const ::std::string& value) {
  
  salt2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.Encrypted.salt2)
}
#if LANG_CXX11
inline void Encrypted::set_salt2(::std::string&& value) {
  
  salt2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.Encrypted.salt2)
}
#endif
inline void Encrypted::set_salt2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.Encrypted.salt2)
}
inline void Encrypted::set_salt2(const void* value, size_t size) {
  
  salt2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.Encrypted.salt2)
}
inline ::std::string* Encrypted::mutable_salt2() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.Encrypted.salt2)
  return salt2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encrypted::release_salt2() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.Encrypted.salt2)
  
  return salt2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encrypted::set_allocated_salt2(::std::string* salt2) {
  if (salt2 != NULL) {
    
  } else {
    
  }
  salt2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt2);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.Encrypted.salt2)
}

// -------------------------------------------------------------------

// File

// .aspia.proto.address_book.Version version = 1;
inline void File::clear_version() {
  version_ = 0;
}
inline ::aspia::proto::address_book::Version File::version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.File.version)
  return static_cast< ::aspia::proto::address_book::Version >(version_);
}
inline void File::set_version(::aspia::proto::address_book::Version value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.File.version)
}

// .aspia.proto.address_book.EncryptionType encryption_type = 2;
inline void File::clear_encryption_type() {
  encryption_type_ = 0;
}
inline ::aspia::proto::address_book::EncryptionType File::encryption_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.File.encryption_type)
  return static_cast< ::aspia::proto::address_book::EncryptionType >(encryption_type_);
}
inline void File::set_encryption_type(::aspia::proto::address_book::EncryptionType value) {
  
  encryption_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.File.encryption_type)
}

// uint64 hashing_rounds = 3;
inline void File::clear_hashing_rounds() {
  hashing_rounds_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::hashing_rounds() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.File.hashing_rounds)
  return hashing_rounds_;
}
inline void File::set_hashing_rounds(::google::protobuf::uint64 value) {
  
  hashing_rounds_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.File.hashing_rounds)
}

// bytes salt = 4;
inline void File::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::salt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.File.salt)
  return salt_.GetNoArena();
}
inline void File::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.File.salt)
}
#if LANG_CXX11
inline void File::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.File.salt)
}
#endif
inline void File::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.File.salt)
}
inline void File::set_salt(const void* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.File.salt)
}
inline ::std::string* File::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.File.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_salt() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.File.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.File.salt)
}

// bytes data = 5;
inline void File::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.address_book.File.data)
  return data_.GetNoArena();
}
inline void File::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.address_book.File.data)
}
#if LANG_CXX11
inline void File::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.address_book.File.data)
}
#endif
inline void File::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.address_book.File.data)
}
inline void File::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.address_book.File.data)
}
inline ::std::string* File::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.address_book.File.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.address_book.File.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.address_book.File.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace address_book
}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::address_book::Version> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::address_book::EncryptionType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_address_5fbook_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authorization.proto

#ifndef PROTOBUF_INCLUDED_authorization_2eproto
#define PROTOBUF_INCLUDED_authorization_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "session_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_authorization_2eproto 

namespace protobuf_authorization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_authorization_2eproto
namespace aspia {
namespace proto {
namespace auth {
class ClientChallenge;
class ClientChallengeDefaultTypeInternal;
extern ClientChallengeDefaultTypeInternal _ClientChallenge_default_instance_;
class ClientToHost;
class ClientToHostDefaultTypeInternal;
extern ClientToHostDefaultTypeInternal _ClientToHost_default_instance_;
class HostToClient;
class HostToClientDefaultTypeInternal;
extern HostToClientDefaultTypeInternal _HostToClient_default_instance_;
class LogonRequest;
class LogonRequestDefaultTypeInternal;
extern LogonRequestDefaultTypeInternal _LogonRequest_default_instance_;
class LogonResult;
class LogonResultDefaultTypeInternal;
extern LogonResultDefaultTypeInternal _LogonResult_default_instance_;
class ServerChallenge;
class ServerChallengeDefaultTypeInternal;
extern ServerChallengeDefaultTypeInternal _ServerChallenge_default_instance_;
}  // namespace auth
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> ::aspia::proto::auth::ClientChallenge* Arena::CreateMaybeMessage<::aspia::proto::auth::ClientChallenge>(Arena*);
template<> ::aspia::proto::auth::ClientToHost* Arena::CreateMaybeMessage<::aspia::proto::auth::ClientToHost>(Arena*);
template<> ::aspia::proto::auth::HostToClient* Arena::CreateMaybeMessage<::aspia::proto::auth::HostToClient>(Arena*);
template<> ::aspia::proto::auth::LogonRequest* Arena::CreateMaybeMessage<::aspia::proto::auth::LogonRequest>(Arena*);
template<> ::aspia::proto::auth::LogonResult* Arena::CreateMaybeMessage<::aspia::proto::auth::LogonResult>(Arena*);
template<> ::aspia::proto::auth::ServerChallenge* Arena::CreateMaybeMessage<::aspia::proto::auth::ServerChallenge>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace aspia {
namespace proto {
namespace auth {

enum Method {
  METHOD_UNKNOWN = 0,
  METHOD_BASIC = 1,
  Method_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Method_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Method_IsValid(int value);
const Method Method_MIN = METHOD_UNKNOWN;
const Method Method_MAX = METHOD_BASIC;
const int Method_ARRAYSIZE = Method_MAX + 1;

enum Status {
  STATUS_UNKNOWN = 0,
  STATUS_SUCCESS = 1,
  STATUS_ACCESS_DENIED = 2,
  STATUS_CANCELED = 3,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = STATUS_UNKNOWN;
const Status Status_MAX = STATUS_CANCELED;
const int Status_ARRAYSIZE = Status_MAX + 1;

// ===================================================================

class LogonRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.LogonRequest) */ {
 public:
  LogonRequest();
  virtual ~LogonRequest();

  LogonRequest(const LogonRequest& from);

  inline LogonRequest& operator=(const LogonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogonRequest(LogonRequest&& from) noexcept
    : LogonRequest() {
    *this = ::std::move(from);
  }

  inline LogonRequest& operator=(LogonRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LogonRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogonRequest* internal_default_instance() {
    return reinterpret_cast<const LogonRequest*>(
               &_LogonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogonRequest* other);
  friend void swap(LogonRequest& a, LogonRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogonRequest* New() const final {
    return CreateMaybeMessage<LogonRequest>(NULL);
  }

  LogonRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogonRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LogonRequest& from);
  void MergeFrom(const LogonRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogonRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.auth.Method method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::aspia::proto::auth::Method method() const;
  void set_method(::aspia::proto::auth::Method value);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.LogonRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerChallenge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.ServerChallenge) */ {
 public:
  ServerChallenge();
  virtual ~ServerChallenge();

  ServerChallenge(const ServerChallenge& from);

  inline ServerChallenge& operator=(const ServerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerChallenge(ServerChallenge&& from) noexcept
    : ServerChallenge() {
    *this = ::std::move(from);
  }

  inline ServerChallenge& operator=(ServerChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ServerChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerChallenge* internal_default_instance() {
    return reinterpret_cast<const ServerChallenge*>(
               &_ServerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerChallenge* other);
  friend void swap(ServerChallenge& a, ServerChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerChallenge* New() const final {
    return CreateMaybeMessage<ServerChallenge>(NULL);
  }

  ServerChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerChallenge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ServerChallenge& from);
  void MergeFrom(const ServerChallenge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.ServerChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientChallenge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.ClientChallenge) */ {
 public:
  ClientChallenge();
  virtual ~ClientChallenge();

  ClientChallenge(const ClientChallenge& from);

  inline ClientChallenge& operator=(const ClientChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientChallenge(ClientChallenge&& from) noexcept
    : ClientChallenge() {
    *this = ::std::move(from);
  }

  inline ClientChallenge& operator=(ClientChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClientChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientChallenge* internal_default_instance() {
    return reinterpret_cast<const ClientChallenge*>(
               &_ClientChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientChallenge* other);
  friend void swap(ClientChallenge& a, ClientChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientChallenge* New() const final {
    return CreateMaybeMessage<ClientChallenge>(NULL);
  }

  ClientChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientChallenge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClientChallenge& from);
  void MergeFrom(const ClientChallenge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes session_key = 3;
  void clear_session_key();
  static const int kSessionKeyFieldNumber = 3;
  const ::std::string& session_key() const;
  void set_session_key(const ::std::string& value);
  #if LANG_CXX11
  void set_session_key(::std::string&& value);
  #endif
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  ::std::string* mutable_session_key();
  ::std::string* release_session_key();
  void set_allocated_session_key(::std::string* session_key);

  // .aspia.proto.SessionType session_type = 1;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 1;
  ::aspia::proto::SessionType session_type() const;
  void set_session_type(::aspia::proto::SessionType value);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.ClientChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr session_key_;
  int session_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogonResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.LogonResult) */ {
 public:
  LogonResult();
  virtual ~LogonResult();

  LogonResult(const LogonResult& from);

  inline LogonResult& operator=(const LogonResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogonResult(LogonResult&& from) noexcept
    : LogonResult() {
    *this = ::std::move(from);
  }

  inline LogonResult& operator=(LogonResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LogonResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogonResult* internal_default_instance() {
    return reinterpret_cast<const LogonResult*>(
               &_LogonResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LogonResult* other);
  friend void swap(LogonResult& a, LogonResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogonResult* New() const final {
    return CreateMaybeMessage<LogonResult>(NULL);
  }

  LogonResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogonResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LogonResult& from);
  void MergeFrom(const LogonResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogonResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.auth.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::aspia::proto::auth::Status status() const;
  void set_status(::aspia::proto::auth::Status value);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.LogonResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientToHost : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.ClientToHost) */ {
 public:
  ClientToHost();
  virtual ~ClientToHost();

  ClientToHost(const ClientToHost& from);

  inline ClientToHost& operator=(const ClientToHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientToHost(ClientToHost&& from) noexcept
    : ClientToHost() {
    *this = ::std::move(from);
  }

  inline ClientToHost& operator=(ClientToHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClientToHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToHost* internal_default_instance() {
    return reinterpret_cast<const ClientToHost*>(
               &_ClientToHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientToHost* other);
  friend void swap(ClientToHost& a, ClientToHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientToHost* New() const final {
    return CreateMaybeMessage<ClientToHost>(NULL);
  }

  ClientToHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientToHost>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClientToHost& from);
  void MergeFrom(const ClientToHost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.auth.LogonRequest logon_request = 1;
  bool has_logon_request() const;
  void clear_logon_request();
  static const int kLogonRequestFieldNumber = 1;
  private:
  const ::aspia::proto::auth::LogonRequest& _internal_logon_request() const;
  public:
  const ::aspia::proto::auth::LogonRequest& logon_request() const;
  ::aspia::proto::auth::LogonRequest* release_logon_request();
  ::aspia::proto::auth::LogonRequest* mutable_logon_request();
  void set_allocated_logon_request(::aspia::proto::auth::LogonRequest* logon_request);

  // .aspia.proto.auth.ClientChallenge client_challenge = 2;
  bool has_client_challenge() const;
  void clear_client_challenge();
  static const int kClientChallengeFieldNumber = 2;
  private:
  const ::aspia::proto::auth::ClientChallenge& _internal_client_challenge() const;
  public:
  const ::aspia::proto::auth::ClientChallenge& client_challenge() const;
  ::aspia::proto::auth::ClientChallenge* release_client_challenge();
  ::aspia::proto::auth::ClientChallenge* mutable_client_challenge();
  void set_allocated_client_challenge(::aspia::proto::auth::ClientChallenge* client_challenge);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.ClientToHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::auth::LogonRequest* logon_request_;
  ::aspia::proto::auth::ClientChallenge* client_challenge_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HostToClient : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.auth.HostToClient) */ {
 public:
  HostToClient();
  virtual ~HostToClient();

  HostToClient(const HostToClient& from);

  inline HostToClient& operator=(const HostToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostToClient(HostToClient&& from) noexcept
    : HostToClient() {
    *this = ::std::move(from);
  }

  inline HostToClient& operator=(HostToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const HostToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostToClient* internal_default_instance() {
    return reinterpret_cast<const HostToClient*>(
               &_HostToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HostToClient* other);
  friend void swap(HostToClient& a, HostToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostToClient* New() const final {
    return CreateMaybeMessage<HostToClient>(NULL);
  }

  HostToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HostToClient>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HostToClient& from);
  void MergeFrom(const HostToClient& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.auth.ServerChallenge server_challenge = 1;
  bool has_server_challenge() const;
  void clear_server_challenge();
  static const int kServerChallengeFieldNumber = 1;
  private:
  const ::aspia::proto::auth::ServerChallenge& _internal_server_challenge() const;
  public:
  const ::aspia::proto::auth::ServerChallenge& server_challenge() const;
  ::aspia::proto::auth::ServerChallenge* release_server_challenge();
  ::aspia::proto::auth::ServerChallenge* mutable_server_challenge();
  void set_allocated_server_challenge(::aspia::proto::auth::ServerChallenge* server_challenge);

  // .aspia.proto.auth.LogonResult logon_result = 2;
  bool has_logon_result() const;
  void clear_logon_result();
  static const int kLogonResultFieldNumber = 2;
  private:
  const ::aspia::proto::auth::LogonResult& _internal_logon_result() const;
  public:
  const ::aspia::proto::auth::LogonResult& logon_result() const;
  ::aspia::proto::auth::LogonResult* release_logon_result();
  ::aspia::proto::auth::LogonResult* mutable_logon_result();
  void set_allocated_logon_result(::aspia::proto::auth::LogonResult* logon_result);

  // @@protoc_insertion_point(class_scope:aspia.proto.auth.HostToClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::auth::ServerChallenge* server_challenge_;
  ::aspia::proto::auth::LogonResult* logon_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_authorization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogonRequest

// .aspia.proto.auth.Method method = 1;
inline void LogonRequest::clear_method() {
  method_ = 0;
}
inline ::aspia::proto::auth::Method LogonRequest::method() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.LogonRequest.method)
  return static_cast< ::aspia::proto::auth::Method >(method_);
}
inline void LogonRequest::set_method(::aspia::proto::auth::Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.auth.LogonRequest.method)
}

// -------------------------------------------------------------------

// ServerChallenge

// bytes nonce = 1;
inline void ServerChallenge::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerChallenge::nonce() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ServerChallenge.nonce)
  return nonce_.GetNoArena();
}
inline void ServerChallenge::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.auth.ServerChallenge.nonce)
}
#if LANG_CXX11
inline void ServerChallenge::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.auth.ServerChallenge.nonce)
}
#endif
inline void ServerChallenge::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.auth.ServerChallenge.nonce)
}
inline void ServerChallenge::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.auth.ServerChallenge.nonce)
}
inline ::std::string* ServerChallenge::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.ServerChallenge.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerChallenge::release_nonce() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.ServerChallenge.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerChallenge::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.ServerChallenge.nonce)
}

// -------------------------------------------------------------------

// ClientChallenge

// .aspia.proto.SessionType session_type = 1;
inline void ClientChallenge::clear_session_type() {
  session_type_ = 0;
}
inline ::aspia::proto::SessionType ClientChallenge::session_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ClientChallenge.session_type)
  return static_cast< ::aspia::proto::SessionType >(session_type_);
}
inline void ClientChallenge::set_session_type(::aspia::proto::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.auth.ClientChallenge.session_type)
}

// string username = 2;
inline void ClientChallenge::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientChallenge::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ClientChallenge.username)
  return username_.GetNoArena();
}
inline void ClientChallenge::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.auth.ClientChallenge.username)
}
#if LANG_CXX11
inline void ClientChallenge::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.auth.ClientChallenge.username)
}
#endif
inline void ClientChallenge::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.auth.ClientChallenge.username)
}
inline void ClientChallenge::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.auth.ClientChallenge.username)
}
inline ::std::string* ClientChallenge::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.ClientChallenge.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientChallenge::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.ClientChallenge.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientChallenge::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.ClientChallenge.username)
}

// bytes session_key = 3;
inline void ClientChallenge::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientChallenge::session_key() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ClientChallenge.session_key)
  return session_key_.GetNoArena();
}
inline void ClientChallenge::set_session_key(const ::std::string& value) {
  
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.auth.ClientChallenge.session_key)
}
#if LANG_CXX11
inline void ClientChallenge::set_session_key(::std::string&& value) {
  
  session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.auth.ClientChallenge.session_key)
}
#endif
inline void ClientChallenge::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.auth.ClientChallenge.session_key)
}
inline void ClientChallenge::set_session_key(const void* value, size_t size) {
  
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.auth.ClientChallenge.session_key)
}
inline ::std::string* ClientChallenge::mutable_session_key() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.ClientChallenge.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientChallenge::release_session_key() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.ClientChallenge.session_key)
  
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientChallenge::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.ClientChallenge.session_key)
}

// -------------------------------------------------------------------

// LogonResult

// .aspia.proto.auth.Status status = 1;
inline void LogonResult::clear_status() {
  status_ = 0;
}
inline ::aspia::proto::auth::Status LogonResult::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.auth.LogonResult.status)
  return static_cast< ::aspia::proto::auth::Status >(status_);
}
inline void LogonResult::set_status(::aspia::proto::auth::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.auth.LogonResult.status)
}

// -------------------------------------------------------------------

// ClientToHost

// .aspia.proto.auth.LogonRequest logon_request = 1;
inline bool ClientToHost::has_logon_request() const {
  return this != internal_default_instance() && logon_request_ != NULL;
}
inline void ClientToHost::clear_logon_request() {
  if (GetArenaNoVirtual() == NULL && logon_request_ != NULL) {
    delete logon_request_;
  }
  logon_request_ = NULL;
}
inline const ::aspia::proto::auth::LogonRequest& ClientToHost::_internal_logon_request() const {
  return *logon_request_;
}
inline const ::aspia::proto::auth::LogonRequest& ClientToHost::logon_request() const {
  const ::aspia::proto::auth::LogonRequest* p = logon_request_;
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ClientToHost.logon_request)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::auth::LogonRequest*>(
      &::aspia::proto::auth::_LogonRequest_default_instance_);
}
inline ::aspia::proto::auth::LogonRequest* ClientToHost::release_logon_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.ClientToHost.logon_request)
  
  ::aspia::proto::auth::LogonRequest* temp = logon_request_;
  logon_request_ = NULL;
  return temp;
}
inline ::aspia::proto::auth::LogonRequest* ClientToHost::mutable_logon_request() {
  
  if (logon_request_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::auth::LogonRequest>(GetArenaNoVirtual());
    logon_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.ClientToHost.logon_request)
  return logon_request_;
}
inline void ClientToHost::set_allocated_logon_request(::aspia::proto::auth::LogonRequest* logon_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logon_request_;
  }
  if (logon_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logon_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logon_request, submessage_arena);
    }
    
  } else {
    
  }
  logon_request_ = logon_request;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.ClientToHost.logon_request)
}

// .aspia.proto.auth.ClientChallenge client_challenge = 2;
inline bool ClientToHost::has_client_challenge() const {
  return this != internal_default_instance() && client_challenge_ != NULL;
}
inline void ClientToHost::clear_client_challenge() {
  if (GetArenaNoVirtual() == NULL && client_challenge_ != NULL) {
    delete client_challenge_;
  }
  client_challenge_ = NULL;
}
inline const ::aspia::proto::auth::ClientChallenge& ClientToHost::_internal_client_challenge() const {
  return *client_challenge_;
}
inline const ::aspia::proto::auth::ClientChallenge& ClientToHost::client_challenge() const {
  const ::aspia::proto::auth::ClientChallenge* p = client_challenge_;
  // @@protoc_insertion_point(field_get:aspia.proto.auth.ClientToHost.client_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::auth::ClientChallenge*>(
      &::aspia::proto::auth::_ClientChallenge_default_instance_);
}
inline ::aspia::proto::auth::ClientChallenge* ClientToHost::release_client_challenge() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.ClientToHost.client_challenge)
  
  ::aspia::proto::auth::ClientChallenge* temp = client_challenge_;
  client_challenge_ = NULL;
  return temp;
}
inline ::aspia::proto::auth::ClientChallenge* ClientToHost::mutable_client_challenge() {
  
  if (client_challenge_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::auth::ClientChallenge>(GetArenaNoVirtual());
    client_challenge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.ClientToHost.client_challenge)
  return client_challenge_;
}
inline void ClientToHost::set_allocated_client_challenge(::aspia::proto::auth::ClientChallenge* client_challenge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_challenge_;
  }
  if (client_challenge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_challenge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_challenge, submessage_arena);
    }
    
  } else {
    
  }
  client_challenge_ = client_challenge;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.ClientToHost.client_challenge)
}

// -------------------------------------------------------------------

// HostToClient

// .aspia.proto.auth.ServerChallenge server_challenge = 1;
inline bool HostToClient::has_server_challenge() const {
  return this != internal_default_instance() && server_challenge_ != NULL;
}
inline void HostToClient::clear_server_challenge() {
  if (GetArenaNoVirtual() == NULL && server_challenge_ != NULL) {
    delete server_challenge_;
  }
  server_challenge_ = NULL;
}
inline const ::aspia::proto::auth::ServerChallenge& HostToClient::_internal_server_challenge() const {
  return *server_challenge_;
}
inline const ::aspia::proto::auth::ServerChallenge& HostToClient::server_challenge() const {
  const ::aspia::proto::auth::ServerChallenge* p = server_challenge_;
  // @@protoc_insertion_point(field_get:aspia.proto.auth.HostToClient.server_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::auth::ServerChallenge*>(
      &::aspia::proto::auth::_ServerChallenge_default_instance_);
}
inline ::aspia::proto::auth::ServerChallenge* HostToClient::release_server_challenge() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.HostToClient.server_challenge)
  
  ::aspia::proto::auth::ServerChallenge* temp = server_challenge_;
  server_challenge_ = NULL;
  return temp;
}
inline ::aspia::proto::auth::ServerChallenge* HostToClient::mutable_server_challenge() {
  
  if (server_challenge_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::auth::ServerChallenge>(GetArenaNoVirtual());
    server_challenge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.HostToClient.server_challenge)
  return server_challenge_;
}
inline void HostToClient::set_allocated_server_challenge(::aspia::proto::auth::ServerChallenge* server_challenge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_challenge_;
  }
  if (server_challenge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_challenge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_challenge, submessage_arena);
    }
    
  } else {
    
  }
  server_challenge_ = server_challenge;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.HostToClient.server_challenge)
}

// .aspia.proto.auth.LogonResult logon_result = 2;
inline bool HostToClient::has_logon_result() const {
  return this != internal_default_instance() && logon_result_ != NULL;
}
inline void HostToClient::clear_logon_result() {
  if (GetArenaNoVirtual() == NULL && logon_result_ != NULL) {
    delete logon_result_;
  }
  logon_result_ = NULL;
}
inline const ::aspia::proto::auth::LogonResult& HostToClient::_internal_logon_result() const {
  return *logon_result_;
}
inline const ::aspia::proto::auth::LogonResult& HostToClient::logon_result() const {
  const ::aspia::proto::auth::LogonResult* p = logon_result_;
  // @@protoc_insertion_point(field_get:aspia.proto.auth.HostToClient.logon_result)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::auth::LogonResult*>(
      &::aspia::proto::auth::_LogonResult_default_instance_);
}
inline ::aspia::proto::auth::LogonResult* HostToClient::release_logon_result() {
  // @@protoc_insertion_point(field_release:aspia.proto.auth.HostToClient.logon_result)
  
  ::aspia::proto::auth::LogonResult* temp = logon_result_;
  logon_result_ = NULL;
  return temp;
}
inline ::aspia::proto::auth::LogonResult* HostToClient::mutable_logon_result() {
  
  if (logon_result_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::auth::LogonResult>(GetArenaNoVirtual());
    logon_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.auth.HostToClient.logon_result)
  return logon_result_;
}
inline void HostToClient::set_allocated_logon_result(::aspia::proto::auth::LogonResult* logon_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logon_result_;
  }
  if (logon_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logon_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logon_result, submessage_arena);
    }
    
  } else {
    
  }
  logon_result_ = logon_result;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.auth.HostToClient.logon_result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::auth::Method> : ::std::true_type {};
template <> struct is_proto_enum< ::aspia::proto::auth::Status> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_authorization_2eproto

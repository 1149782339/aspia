// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_session.proto

#include "desktop_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_desktop_5fsession_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClipboardEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CursorShape;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PixelFormat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointerEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Screen;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Config;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScreenList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VideoPacket;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_desktop_5fsession_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VideoPacketFormat;
}  // namespace protobuf_desktop_5fsession_2eproto
namespace aspia {
namespace proto {
namespace desktop {
class KeyEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent>
      _instance;
} _KeyEvent_default_instance_;
class PointerEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointerEvent>
      _instance;
} _PointerEvent_default_instance_;
class ClipboardEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClipboardEvent>
      _instance;
} _ClipboardEvent_default_instance_;
class CursorShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CursorShape>
      _instance;
} _CursorShape_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rect>
      _instance;
} _Rect_default_instance_;
class PixelFormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PixelFormat>
      _instance;
} _PixelFormat_default_instance_;
class VideoPacketFormatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoPacketFormat>
      _instance;
} _VideoPacketFormat_default_instance_;
class VideoPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoPacket>
      _instance;
} _VideoPacket_default_instance_;
class ScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Screen>
      _instance;
} _Screen_default_instance_;
class ScreenListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScreenList>
      _instance;
} _ScreenList_default_instance_;
class ConfigRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfigRequest>
      _instance;
} _ConfigRequest_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class HostToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HostToClient>
      _instance;
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost>
      _instance;
} _ClientToHost_default_instance_;
}  // namespace desktop
}  // namespace proto
}  // namespace aspia
namespace protobuf_desktop_5fsession_2eproto {
static void InitDefaultsKeyEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_KeyEvent_default_instance_;
    new (ptr) ::aspia::proto::desktop::KeyEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::KeyEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyEvent}, {}};

static void InitDefaultsPointerEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_PointerEvent_default_instance_;
    new (ptr) ::aspia::proto::desktop::PointerEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::PointerEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointerEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointerEvent}, {}};

static void InitDefaultsClipboardEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_ClipboardEvent_default_instance_;
    new (ptr) ::aspia::proto::desktop::ClipboardEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::ClipboardEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClipboardEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClipboardEvent}, {}};

static void InitDefaultsCursorShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_CursorShape_default_instance_;
    new (ptr) ::aspia::proto::desktop::CursorShape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::CursorShape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CursorShape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCursorShape}, {}};

static void InitDefaultsRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_Rect_default_instance_;
    new (ptr) ::aspia::proto::desktop::Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRect}, {}};

static void InitDefaultsPixelFormat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_PixelFormat_default_instance_;
    new (ptr) ::aspia::proto::desktop::PixelFormat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::PixelFormat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PixelFormat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPixelFormat}, {}};

static void InitDefaultsVideoPacketFormat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_VideoPacketFormat_default_instance_;
    new (ptr) ::aspia::proto::desktop::VideoPacketFormat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::VideoPacketFormat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VideoPacketFormat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVideoPacketFormat}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_Rect.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_PixelFormat.base,}};

static void InitDefaultsVideoPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_VideoPacket_default_instance_;
    new (ptr) ::aspia::proto::desktop::VideoPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::VideoPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VideoPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVideoPacket}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_VideoPacketFormat.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_Rect.base,}};

static void InitDefaultsScreen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_Screen_default_instance_;
    new (ptr) ::aspia::proto::desktop::Screen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::Screen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Screen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScreen}, {}};

static void InitDefaultsScreenList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_ScreenList_default_instance_;
    new (ptr) ::aspia::proto::desktop::ScreenList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::ScreenList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScreenList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScreenList}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_Screen.base,}};

static void InitDefaultsConfigRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_ConfigRequest_default_instance_;
    new (ptr) ::aspia::proto::desktop::ConfigRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::ConfigRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfigRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfigRequest}, {}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_Config_default_instance_;
    new (ptr) ::aspia::proto::desktop::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfig}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_PixelFormat.base,}};

static void InitDefaultsHostToClient() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_HostToClient_default_instance_;
    new (ptr) ::aspia::proto::desktop::HostToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::HostToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_HostToClient =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsHostToClient}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_VideoPacket.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_CursorShape.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_ClipboardEvent.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_ScreenList.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_ConfigRequest.base,}};

static void InitDefaultsClientToHost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::desktop::_ClientToHost_default_instance_;
    new (ptr) ::aspia::proto::desktop::ClientToHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::desktop::ClientToHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ClientToHost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsClientToHost}, {
      &protobuf_desktop_5fsession_2eproto::scc_info_PointerEvent.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_KeyEvent.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_ClipboardEvent.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_Screen.base,
      &protobuf_desktop_5fsession_2eproto::scc_info_Config.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KeyEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointerEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClipboardEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CursorShape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PixelFormat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoPacketFormat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Screen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScreenList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfigRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HostToClient.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToHost.base);
}

}  // namespace protobuf_desktop_5fsession_2eproto
namespace aspia {
namespace proto {
namespace desktop {
bool KeyEvent_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_Flags KeyEvent::UNKNOWN;
const KeyEvent_Flags KeyEvent::CAPSLOCK;
const KeyEvent_Flags KeyEvent::NUMLOCK;
const KeyEvent_Flags KeyEvent::PRESSED;
const KeyEvent_Flags KeyEvent::Flags_MIN;
const KeyEvent_Flags KeyEvent::Flags_MAX;
const int KeyEvent::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PointerEvent_ButtonMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PointerEvent_ButtonMask PointerEvent::EMPTY;
const PointerEvent_ButtonMask PointerEvent::LEFT_BUTTON;
const PointerEvent_ButtonMask PointerEvent::MIDDLE_BUTTON;
const PointerEvent_ButtonMask PointerEvent::RIGHT_BUTTON;
const PointerEvent_ButtonMask PointerEvent::WHEEL_UP;
const PointerEvent_ButtonMask PointerEvent::WHEEL_DOWN;
const PointerEvent_ButtonMask PointerEvent::ButtonMask_MIN;
const PointerEvent_ButtonMask PointerEvent::ButtonMask_MAX;
const int PointerEvent::ButtonMask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CursorShape_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CursorShape_Flags CursorShape::UNKNOWN;
const CursorShape_Flags CursorShape::RESET_CACHE;
const CursorShape_Flags CursorShape::CACHE;
const CursorShape_Flags CursorShape::Flags_MIN;
const CursorShape_Flags CursorShape::Flags_MAX;
const int CursorShape::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VideoEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

bool ConfigFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kUsbKeycodeFieldNumber;
const int KeyEvent::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_KeyEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usb_keycode_, &from.usb_keycode_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usb_keycode_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::memset(&usb_keycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&usb_keycode_)) + sizeof(flags_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
}

void KeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyEvent& KeyEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_KeyEvent.base);
  return *internal_default_instance();
}


void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&usb_keycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&usb_keycode_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.KeyEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 usb_keycode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usb_keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.KeyEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 usb_keycode = 1;
  if (this->usb_keycode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usb_keycode(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.KeyEvent)
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.KeyEvent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 usb_keycode = 1;
  if (this->usb_keycode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usb_keycode());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usb_keycode() != 0) {
    set_usb_keycode(from.usb_keycode());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  using std::swap;
  swap(usb_keycode_, other->usb_keycode_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string KeyEvent::GetTypeName() const {
  return "aspia.proto.desktop.KeyEvent";
}


// ===================================================================

void PointerEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointerEvent::kMaskFieldNumber;
const int PointerEvent::kXFieldNumber;
const int PointerEvent::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointerEvent::PointerEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_PointerEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.PointerEvent)
}
PointerEvent::PointerEvent(const PointerEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mask_, &from.mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.PointerEvent)
}

void PointerEvent::SharedCtor() {
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(y_));
}

PointerEvent::~PointerEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.PointerEvent)
  SharedDtor();
}

void PointerEvent::SharedDtor() {
}

void PointerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointerEvent& PointerEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_PointerEvent.base);
  return *internal_default_instance();
}


void PointerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.PointerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool PointerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.PointerEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.PointerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.PointerEvent)
  return false;
#undef DO_
}

void PointerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.PointerEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mask = 1;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mask(), output);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.PointerEvent)
}

size_t PointerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.PointerEvent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 mask = 1;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointerEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointerEvent*>(&from));
}

void PointerEvent::MergeFrom(const PointerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.PointerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mask() != 0) {
    set_mask(from.mask());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PointerEvent::CopyFrom(const PointerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.PointerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointerEvent::IsInitialized() const {
  return true;
}

void PointerEvent::Swap(PointerEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointerEvent::InternalSwap(PointerEvent* other) {
  using std::swap;
  swap(mask_, other->mask_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PointerEvent::GetTypeName() const {
  return "aspia.proto.desktop.PointerEvent";
}


// ===================================================================

void ClipboardEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipboardEvent::kMimeTypeFieldNumber;
const int ClipboardEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipboardEvent::ClipboardEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_ClipboardEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.ClipboardEvent)
}
ClipboardEvent::ClipboardEvent(const ClipboardEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mime_type().size() > 0) {
    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.ClipboardEvent)
}

void ClipboardEvent::SharedCtor() {
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClipboardEvent::~ClipboardEvent() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.ClipboardEvent)
  SharedDtor();
}

void ClipboardEvent::SharedDtor() {
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClipboardEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipboardEvent& ClipboardEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_ClipboardEvent.base);
  return *internal_default_instance();
}


void ClipboardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.ClipboardEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ClipboardEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.ClipboardEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mime_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), static_cast<int>(this->mime_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.desktop.ClipboardEvent.mime_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.ClipboardEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.ClipboardEvent)
  return false;
#undef DO_
}

void ClipboardEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.ClipboardEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), static_cast<int>(this->mime_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.desktop.ClipboardEvent.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.ClipboardEvent)
}

size_t ClipboardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.ClipboardEvent)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipboardEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardEvent*>(&from));
}

void ClipboardEvent::MergeFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.ClipboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mime_type().size() > 0) {

    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ClipboardEvent::CopyFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.ClipboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardEvent::IsInitialized() const {
  return true;
}

void ClipboardEvent::Swap(ClipboardEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClipboardEvent::InternalSwap(ClipboardEvent* other) {
  using std::swap;
  mime_type_.Swap(&other->mime_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClipboardEvent::GetTypeName() const {
  return "aspia.proto.desktop.ClipboardEvent";
}


// ===================================================================

void CursorShape::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorShape::kFlagsFieldNumber;
const int CursorShape::kWidthFieldNumber;
const int CursorShape::kHeightFieldNumber;
const int CursorShape::kHotspotXFieldNumber;
const int CursorShape::kHotspotYFieldNumber;
const int CursorShape::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorShape::CursorShape()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_CursorShape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.CursorShape)
}
CursorShape::CursorShape(const CursorShape& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(hotspot_y_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.CursorShape)
}

void CursorShape::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hotspot_y_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(hotspot_y_));
}

CursorShape::~CursorShape() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.CursorShape)
  SharedDtor();
}

void CursorShape::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CursorShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CursorShape& CursorShape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_CursorShape.base);
  return *internal_default_instance();
}


void CursorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.CursorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hotspot_y_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(hotspot_y_));
  _internal_metadata_.Clear();
}

bool CursorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.CursorShape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.CursorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.CursorShape)
  return false;
#undef DO_
}

void CursorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.CursorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hotspot_x(), output);
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hotspot_y(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.CursorShape)
}

size_t CursorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.CursorShape)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_x());
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CursorShape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorShape*>(&from));
}

void CursorShape::MergeFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.CursorShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hotspot_x() != 0) {
    set_hotspot_x(from.hotspot_x());
  }
  if (from.hotspot_y() != 0) {
    set_hotspot_y(from.hotspot_y());
  }
}

void CursorShape::CopyFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.CursorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorShape::IsInitialized() const {
  return true;
}

void CursorShape::Swap(CursorShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CursorShape::InternalSwap(CursorShape* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(hotspot_x_, other->hotspot_x_);
  swap(hotspot_y_, other->hotspot_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CursorShape::GetTypeName() const {
  return "aspia.proto.desktop.CursorShape";
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_Rect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_Rect.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.Rect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.Rect)
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.Rect)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rect*>(&from));
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Rect::GetTypeName() const {
  return "aspia.proto.desktop.Rect";
}


// ===================================================================

void PixelFormat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PixelFormat::kBitsPerPixelFieldNumber;
const int PixelFormat::kRedMaxFieldNumber;
const int PixelFormat::kGreenMaxFieldNumber;
const int PixelFormat::kBlueMaxFieldNumber;
const int PixelFormat::kRedShiftFieldNumber;
const int PixelFormat::kGreenShiftFieldNumber;
const int PixelFormat::kBlueShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PixelFormat::PixelFormat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_PixelFormat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.PixelFormat)
}
PixelFormat::PixelFormat(const PixelFormat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bits_per_pixel_, &from.bits_per_pixel_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_shift_) -
    reinterpret_cast<char*>(&bits_per_pixel_)) + sizeof(blue_shift_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.PixelFormat)
}

void PixelFormat::SharedCtor() {
  ::memset(&bits_per_pixel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_shift_) -
      reinterpret_cast<char*>(&bits_per_pixel_)) + sizeof(blue_shift_));
}

PixelFormat::~PixelFormat() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.PixelFormat)
  SharedDtor();
}

void PixelFormat::SharedDtor() {
}

void PixelFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PixelFormat& PixelFormat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_PixelFormat.base);
  return *internal_default_instance();
}


void PixelFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.PixelFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bits_per_pixel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_shift_) -
      reinterpret_cast<char*>(&bits_per_pixel_)) + sizeof(blue_shift_));
  _internal_metadata_.Clear();
}

bool PixelFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.PixelFormat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bits_per_pixel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_per_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 red_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 red_shift = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green_shift = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue_shift = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.PixelFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.PixelFormat)
  return false;
#undef DO_
}

void PixelFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.PixelFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bits_per_pixel(), output);
  }

  // uint32 red_max = 2;
  if (this->red_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->red_max(), output);
  }

  // uint32 green_max = 3;
  if (this->green_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->green_max(), output);
  }

  // uint32 blue_max = 4;
  if (this->blue_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->blue_max(), output);
  }

  // uint32 red_shift = 5;
  if (this->red_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->red_shift(), output);
  }

  // uint32 green_shift = 6;
  if (this->green_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->green_shift(), output);
  }

  // uint32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->blue_shift(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.PixelFormat)
}

size_t PixelFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.PixelFormat)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 bits_per_pixel = 1;
  if (this->bits_per_pixel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits_per_pixel());
  }

  // uint32 red_max = 2;
  if (this->red_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_max());
  }

  // uint32 green_max = 3;
  if (this->green_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green_max());
  }

  // uint32 blue_max = 4;
  if (this->blue_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue_max());
  }

  // uint32 red_shift = 5;
  if (this->red_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red_shift());
  }

  // uint32 green_shift = 6;
  if (this->green_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green_shift());
  }

  // uint32 blue_shift = 7;
  if (this->blue_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue_shift());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PixelFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PixelFormat*>(&from));
}

void PixelFormat::MergeFrom(const PixelFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.PixelFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bits_per_pixel() != 0) {
    set_bits_per_pixel(from.bits_per_pixel());
  }
  if (from.red_max() != 0) {
    set_red_max(from.red_max());
  }
  if (from.green_max() != 0) {
    set_green_max(from.green_max());
  }
  if (from.blue_max() != 0) {
    set_blue_max(from.blue_max());
  }
  if (from.red_shift() != 0) {
    set_red_shift(from.red_shift());
  }
  if (from.green_shift() != 0) {
    set_green_shift(from.green_shift());
  }
  if (from.blue_shift() != 0) {
    set_blue_shift(from.blue_shift());
  }
}

void PixelFormat::CopyFrom(const PixelFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.PixelFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelFormat::IsInitialized() const {
  return true;
}

void PixelFormat::Swap(PixelFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PixelFormat::InternalSwap(PixelFormat* other) {
  using std::swap;
  swap(bits_per_pixel_, other->bits_per_pixel_);
  swap(red_max_, other->red_max_);
  swap(green_max_, other->green_max_);
  swap(blue_max_, other->blue_max_);
  swap(red_shift_, other->red_shift_);
  swap(green_shift_, other->green_shift_);
  swap(blue_shift_, other->blue_shift_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PixelFormat::GetTypeName() const {
  return "aspia.proto.desktop.PixelFormat";
}


// ===================================================================

void VideoPacketFormat::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_VideoPacketFormat_default_instance_._instance.get_mutable()->screen_rect_ = const_cast< ::aspia::proto::desktop::Rect*>(
      ::aspia::proto::desktop::Rect::internal_default_instance());
  ::aspia::proto::desktop::_VideoPacketFormat_default_instance_._instance.get_mutable()->pixel_format_ = const_cast< ::aspia::proto::desktop::PixelFormat*>(
      ::aspia::proto::desktop::PixelFormat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacketFormat::kScreenRectFieldNumber;
const int VideoPacketFormat::kPixelFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacketFormat::VideoPacketFormat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_VideoPacketFormat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.VideoPacketFormat)
}
VideoPacketFormat::VideoPacketFormat(const VideoPacketFormat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_screen_rect()) {
    screen_rect_ = new ::aspia::proto::desktop::Rect(*from.screen_rect_);
  } else {
    screen_rect_ = NULL;
  }
  if (from.has_pixel_format()) {
    pixel_format_ = new ::aspia::proto::desktop::PixelFormat(*from.pixel_format_);
  } else {
    pixel_format_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.VideoPacketFormat)
}

void VideoPacketFormat::SharedCtor() {
  ::memset(&screen_rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&screen_rect_)) + sizeof(pixel_format_));
}

VideoPacketFormat::~VideoPacketFormat() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.VideoPacketFormat)
  SharedDtor();
}

void VideoPacketFormat::SharedDtor() {
  if (this != internal_default_instance()) delete screen_rect_;
  if (this != internal_default_instance()) delete pixel_format_;
}

void VideoPacketFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoPacketFormat& VideoPacketFormat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_VideoPacketFormat.base);
  return *internal_default_instance();
}


void VideoPacketFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.VideoPacketFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && screen_rect_ != NULL) {
    delete screen_rect_;
  }
  screen_rect_ = NULL;
  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) {
    delete pixel_format_;
  }
  pixel_format_ = NULL;
  _internal_metadata_.Clear();
}

bool VideoPacketFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.VideoPacketFormat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.desktop.Rect screen_rect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.PixelFormat pixel_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.VideoPacketFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.VideoPacketFormat)
  return false;
#undef DO_
}

void VideoPacketFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.VideoPacketFormat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.desktop.Rect screen_rect = 1;
  if (this->has_screen_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_screen_rect(), output);
  }

  // .aspia.proto.desktop.PixelFormat pixel_format = 2;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_pixel_format(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.VideoPacketFormat)
}

size_t VideoPacketFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.VideoPacketFormat)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.desktop.Rect screen_rect = 1;
  if (this->has_screen_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *screen_rect_);
  }

  // .aspia.proto.desktop.PixelFormat pixel_format = 2;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pixel_format_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoPacketFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacketFormat*>(&from));
}

void VideoPacketFormat::MergeFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.VideoPacketFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_screen_rect()) {
    mutable_screen_rect()->::aspia::proto::desktop::Rect::MergeFrom(from.screen_rect());
  }
  if (from.has_pixel_format()) {
    mutable_pixel_format()->::aspia::proto::desktop::PixelFormat::MergeFrom(from.pixel_format());
  }
}

void VideoPacketFormat::CopyFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.VideoPacketFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPacketFormat::IsInitialized() const {
  return true;
}

void VideoPacketFormat::Swap(VideoPacketFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPacketFormat::InternalSwap(VideoPacketFormat* other) {
  using std::swap;
  swap(screen_rect_, other->screen_rect_);
  swap(pixel_format_, other->pixel_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VideoPacketFormat::GetTypeName() const {
  return "aspia.proto.desktop.VideoPacketFormat";
}


// ===================================================================

void VideoPacket::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_VideoPacket_default_instance_._instance.get_mutable()->format_ = const_cast< ::aspia::proto::desktop::VideoPacketFormat*>(
      ::aspia::proto::desktop::VideoPacketFormat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacket::kEncodingFieldNumber;
const int VideoPacket::kFormatFieldNumber;
const int VideoPacket::kDirtyRectFieldNumber;
const int VideoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacket::VideoPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_VideoPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.VideoPacket)
}
VideoPacket::VideoPacket(const VideoPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dirty_rect_(from.dirty_rect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_format()) {
    format_ = new ::aspia::proto::desktop::VideoPacketFormat(*from.format_);
  } else {
    format_ = NULL;
  }
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.VideoPacket)
}

void VideoPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&format_)) + sizeof(encoding_));
}

VideoPacket::~VideoPacket() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.VideoPacket)
  SharedDtor();
}

void VideoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete format_;
}

void VideoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoPacket& VideoPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_VideoPacket.base);
  return *internal_default_instance();
}


void VideoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.VideoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirty_rect_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && format_ != NULL) {
    delete format_;
  }
  format_ = NULL;
  encoding_ = 0;
  _internal_metadata_.Clear();
}

bool VideoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.VideoPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.desktop.VideoEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::aspia::proto::desktop::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.VideoPacketFormat format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.desktop.Rect dirty_rect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dirty_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.VideoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.VideoPacket)
  return false;
#undef DO_
}

void VideoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.VideoPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.desktop.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // .aspia.proto.desktop.VideoPacketFormat format = 2;
  if (this->has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_format(), output);
  }

  // repeated .aspia.proto.desktop.Rect dirty_rect = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dirty_rect_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->dirty_rect(static_cast<int>(i)),
      output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.VideoPacket)
}

size_t VideoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.VideoPacket)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.desktop.Rect dirty_rect = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dirty_rect_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dirty_rect(static_cast<int>(i)));
    }
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .aspia.proto.desktop.VideoPacketFormat format = 2;
  if (this->has_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *format_);
  }

  // .aspia.proto.desktop.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacket*>(&from));
}

void VideoPacket::MergeFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.VideoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dirty_rect_.MergeFrom(from.dirty_rect_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_format()) {
    mutable_format()->::aspia::proto::desktop::VideoPacketFormat::MergeFrom(from.format());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void VideoPacket::CopyFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.VideoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPacket::IsInitialized() const {
  return true;
}

void VideoPacket::Swap(VideoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPacket::InternalSwap(VideoPacket* other) {
  using std::swap;
  CastToBase(&dirty_rect_)->InternalSwap(CastToBase(&other->dirty_rect_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VideoPacket::GetTypeName() const {
  return "aspia.proto.desktop.VideoPacket";
}


// ===================================================================

void Screen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen::kIdFieldNumber;
const int Screen::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen::Screen()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_Screen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.Screen)
}
Screen::Screen(const Screen& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.Screen)
}

void Screen::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screen& Screen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_Screen.base);
  return *internal_default_instance();
}


void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.Screen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.Screen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.desktop.Screen.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.Screen)
  return false;
#undef DO_
}

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.Screen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.desktop.Screen.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.Screen)
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.Screen)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Screen*>(&from));
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::Swap(Screen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen::InternalSwap(Screen* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Screen::GetTypeName() const {
  return "aspia.proto.desktop.Screen";
}


// ===================================================================

void ScreenList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScreenList::kScreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScreenList::ScreenList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_ScreenList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.ScreenList)
}
ScreenList::ScreenList(const ScreenList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      screen_(from.screen_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.ScreenList)
}

void ScreenList::SharedCtor() {
}

ScreenList::~ScreenList() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.ScreenList)
  SharedDtor();
}

void ScreenList::SharedDtor() {
}

void ScreenList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScreenList& ScreenList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_ScreenList.base);
  return *internal_default_instance();
}


void ScreenList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.ScreenList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screen_.Clear();
  _internal_metadata_.Clear();
}

bool ScreenList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.ScreenList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.desktop.Screen screen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.ScreenList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.ScreenList)
  return false;
#undef DO_
}

void ScreenList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.ScreenList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.desktop.Screen screen = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->screen_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->screen(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.ScreenList)
}

size_t ScreenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.ScreenList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.desktop.Screen screen = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->screen_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->screen(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScreenList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenList*>(&from));
}

void ScreenList::MergeFrom(const ScreenList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.ScreenList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screen_.MergeFrom(from.screen_);
}

void ScreenList::CopyFrom(const ScreenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.ScreenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenList::IsInitialized() const {
  return true;
}

void ScreenList::Swap(ScreenList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScreenList::InternalSwap(ScreenList* other) {
  using std::swap;
  CastToBase(&screen_)->InternalSwap(CastToBase(&other->screen_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ScreenList::GetTypeName() const {
  return "aspia.proto.desktop.ScreenList";
}


// ===================================================================

void ConfigRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRequest::kVideoEncodingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRequest::ConfigRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_ConfigRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.ConfigRequest)
}
ConfigRequest::ConfigRequest(const ConfigRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_encodings_ = from.video_encodings_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.ConfigRequest)
}

void ConfigRequest::SharedCtor() {
  video_encodings_ = 0u;
}

ConfigRequest::~ConfigRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.ConfigRequest)
  SharedDtor();
}

void ConfigRequest::SharedDtor() {
}

void ConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigRequest& ConfigRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_ConfigRequest.base);
  return *internal_default_instance();
}


void ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.ConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_encodings_ = 0u;
  _internal_metadata_.Clear();
}

bool ConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.ConfigRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 video_encodings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_encodings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.ConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.ConfigRequest)
  return false;
#undef DO_
}

void ConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.ConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 video_encodings = 1;
  if (this->video_encodings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->video_encodings(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.ConfigRequest)
}

size_t ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.ConfigRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 video_encodings = 1;
  if (this->video_encodings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_encodings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConfigRequest*>(&from));
}

void ConfigRequest::MergeFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.video_encodings() != 0) {
    set_video_encodings(from.video_encodings());
  }
}

void ConfigRequest::CopyFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRequest::IsInitialized() const {
  return true;
}

void ConfigRequest::Swap(ConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigRequest::InternalSwap(ConfigRequest* other) {
  using std::swap;
  swap(video_encodings_, other->video_encodings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ConfigRequest::GetTypeName() const {
  return "aspia.proto.desktop.ConfigRequest";
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_Config_default_instance_._instance.get_mutable()->pixel_format_ = const_cast< ::aspia::proto::desktop::PixelFormat*>(
      ::aspia::proto::desktop::PixelFormat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kFlagsFieldNumber;
const int Config::kVideoEncodingFieldNumber;
const int Config::kPixelFormatFieldNumber;
const int Config::kUpdateIntervalFieldNumber;
const int Config::kCompressRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pixel_format()) {
    pixel_format_ = new ::aspia::proto::desktop::PixelFormat(*from.pixel_format_);
  } else {
    pixel_format_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_ratio_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(compress_ratio_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.Config)
}

void Config::SharedCtor() {
  ::memset(&pixel_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_ratio_) -
      reinterpret_cast<char*>(&pixel_format_)) + sizeof(compress_ratio_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete pixel_format_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pixel_format_ != NULL) {
    delete pixel_format_;
  }
  pixel_format_ = NULL;
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_ratio_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(compress_ratio_));
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.VideoEncoding video_encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_video_encoding(static_cast< ::aspia::proto::desktop::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.PixelFormat pixel_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pixel_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 compress_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compress_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // .aspia.proto.desktop.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->video_encoding(), output);
  }

  // .aspia.proto.desktop.PixelFormat pixel_format = 3;
  if (this->has_pixel_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_pixel_format(), output);
  }

  // uint32 update_interval = 4;
  if (this->update_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_interval(), output);
  }

  // uint32 compress_ratio = 5;
  if (this->compress_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->compress_ratio(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.Config)
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.Config)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.desktop.PixelFormat pixel_format = 3;
  if (this->has_pixel_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pixel_format_);
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // .aspia.proto.desktop.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_encoding());
  }

  // uint32 update_interval = 4;
  if (this->update_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_interval());
  }

  // uint32 compress_ratio = 5;
  if (this->compress_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->compress_ratio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pixel_format()) {
    mutable_pixel_format()->::aspia::proto::desktop::PixelFormat::MergeFrom(from.pixel_format());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.video_encoding() != 0) {
    set_video_encoding(from.video_encoding());
  }
  if (from.update_interval() != 0) {
    set_update_interval(from.update_interval());
  }
  if (from.compress_ratio() != 0) {
    set_compress_ratio(from.compress_ratio());
  }
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  swap(pixel_format_, other->pixel_format_);
  swap(flags_, other->flags_);
  swap(video_encoding_, other->video_encoding_);
  swap(update_interval_, other->update_interval_);
  swap(compress_ratio_, other->compress_ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Config::GetTypeName() const {
  return "aspia.proto.desktop.Config";
}


// ===================================================================

void HostToClient::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->video_packet_ = const_cast< ::aspia::proto::desktop::VideoPacket*>(
      ::aspia::proto::desktop::VideoPacket::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->cursor_shape_ = const_cast< ::aspia::proto::desktop::CursorShape*>(
      ::aspia::proto::desktop::CursorShape::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->clipboard_event_ = const_cast< ::aspia::proto::desktop::ClipboardEvent*>(
      ::aspia::proto::desktop::ClipboardEvent::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->screen_list_ = const_cast< ::aspia::proto::desktop::ScreenList*>(
      ::aspia::proto::desktop::ScreenList::internal_default_instance());
  ::aspia::proto::desktop::_HostToClient_default_instance_._instance.get_mutable()->config_request_ = const_cast< ::aspia::proto::desktop::ConfigRequest*>(
      ::aspia::proto::desktop::ConfigRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kVideoPacketFieldNumber;
const int HostToClient::kCursorShapeFieldNumber;
const int HostToClient::kClipboardEventFieldNumber;
const int HostToClient::kScreenListFieldNumber;
const int HostToClient::kConfigRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_HostToClient.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_packet()) {
    video_packet_ = new ::aspia::proto::desktop::VideoPacket(*from.video_packet_);
  } else {
    video_packet_ = NULL;
  }
  if (from.has_cursor_shape()) {
    cursor_shape_ = new ::aspia::proto::desktop::CursorShape(*from.cursor_shape_);
  } else {
    cursor_shape_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::aspia::proto::desktop::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_screen_list()) {
    screen_list_ = new ::aspia::proto::desktop::ScreenList(*from.screen_list_);
  } else {
    screen_list_ = NULL;
  }
  if (from.has_config_request()) {
    config_request_ = new ::aspia::proto::desktop::ConfigRequest(*from.config_request_);
  } else {
    config_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.HostToClient)
}

void HostToClient::SharedCtor() {
  ::memset(&video_packet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_request_) -
      reinterpret_cast<char*>(&video_packet_)) + sizeof(config_request_));
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) delete video_packet_;
  if (this != internal_default_instance()) delete cursor_shape_;
  if (this != internal_default_instance()) delete clipboard_event_;
  if (this != internal_default_instance()) delete screen_list_;
  if (this != internal_default_instance()) delete config_request_;
}

void HostToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostToClient& HostToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_HostToClient.base);
  return *internal_default_instance();
}


void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) {
    delete video_packet_;
  }
  video_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) {
    delete cursor_shape_;
  }
  cursor_shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && screen_list_ != NULL) {
    delete screen_list_;
  }
  screen_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) {
    delete config_request_;
  }
  config_request_ = NULL;
  _internal_metadata_.Clear();
}

bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.HostToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.desktop.VideoPacket video_packet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_video_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.CursorShape cursor_shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cursor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.ClipboardEvent clipboard_event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.ScreenList screen_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.ConfigRequest config_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.HostToClient)
  return false;
#undef DO_
}

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.desktop.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_video_packet(), output);
  }

  // .aspia.proto.desktop.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_cursor_shape(), output);
  }

  // .aspia.proto.desktop.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_clipboard_event(), output);
  }

  // .aspia.proto.desktop.ScreenList screen_list = 5;
  if (this->has_screen_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_screen_list(), output);
  }

  // .aspia.proto.desktop.ConfigRequest config_request = 6;
  if (this->has_config_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_config_request(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.HostToClient)
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.HostToClient)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.desktop.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *video_packet_);
  }

  // .aspia.proto.desktop.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cursor_shape_);
  }

  // .aspia.proto.desktop.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clipboard_event_);
  }

  // .aspia.proto.desktop.ScreenList screen_list = 5;
  if (this->has_screen_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *screen_list_);
  }

  // .aspia.proto.desktop.ConfigRequest config_request = 6;
  if (this->has_config_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostToClient*>(&from));
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_packet()) {
    mutable_video_packet()->::aspia::proto::desktop::VideoPacket::MergeFrom(from.video_packet());
  }
  if (from.has_cursor_shape()) {
    mutable_cursor_shape()->::aspia::proto::desktop::CursorShape::MergeFrom(from.cursor_shape());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::aspia::proto::desktop::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_screen_list()) {
    mutable_screen_list()->::aspia::proto::desktop::ScreenList::MergeFrom(from.screen_list());
  }
  if (from.has_config_request()) {
    mutable_config_request()->::aspia::proto::desktop::ConfigRequest::MergeFrom(from.config_request());
  }
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  using std::swap;
  swap(video_packet_, other->video_packet_);
  swap(cursor_shape_, other->cursor_shape_);
  swap(clipboard_event_, other->clipboard_event_);
  swap(screen_list_, other->screen_list_);
  swap(config_request_, other->config_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HostToClient::GetTypeName() const {
  return "aspia.proto.desktop.HostToClient";
}


// ===================================================================

void ClientToHost::InitAsDefaultInstance() {
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->pointer_event_ = const_cast< ::aspia::proto::desktop::PointerEvent*>(
      ::aspia::proto::desktop::PointerEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->key_event_ = const_cast< ::aspia::proto::desktop::KeyEvent*>(
      ::aspia::proto::desktop::KeyEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->clipboard_event_ = const_cast< ::aspia::proto::desktop::ClipboardEvent*>(
      ::aspia::proto::desktop::ClipboardEvent::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->screen_ = const_cast< ::aspia::proto::desktop::Screen*>(
      ::aspia::proto::desktop::Screen::internal_default_instance());
  ::aspia::proto::desktop::_ClientToHost_default_instance_._instance.get_mutable()->config_ = const_cast< ::aspia::proto::desktop::Config*>(
      ::aspia::proto::desktop::Config::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kPointerEventFieldNumber;
const int ClientToHost::kKeyEventFieldNumber;
const int ClientToHost::kClipboardEventFieldNumber;
const int ClientToHost::kScreenFieldNumber;
const int ClientToHost::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_desktop_5fsession_2eproto::scc_info_ClientToHost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.desktop.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pointer_event()) {
    pointer_event_ = new ::aspia::proto::desktop::PointerEvent(*from.pointer_event_);
  } else {
    pointer_event_ = NULL;
  }
  if (from.has_key_event()) {
    key_event_ = new ::aspia::proto::desktop::KeyEvent(*from.key_event_);
  } else {
    key_event_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::aspia::proto::desktop::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_screen()) {
    screen_ = new ::aspia::proto::desktop::Screen(*from.screen_);
  } else {
    screen_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::aspia::proto::desktop::Config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.desktop.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::memset(&pointer_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&pointer_event_)) + sizeof(config_));
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:aspia.proto.desktop.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) delete pointer_event_;
  if (this != internal_default_instance()) delete key_event_;
  if (this != internal_default_instance()) delete clipboard_event_;
  if (this != internal_default_instance()) delete screen_;
  if (this != internal_default_instance()) delete config_;
}

void ClientToHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToHost& ClientToHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_desktop_5fsession_2eproto::scc_info_ClientToHost.base);
  return *internal_default_instance();
}


void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.desktop.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pointer_event_ != NULL) {
    delete pointer_event_;
  }
  pointer_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) {
    delete key_event_;
  }
  key_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && screen_ != NULL) {
    delete screen_;
  }
  screen_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.desktop.ClientToHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.desktop.PointerEvent pointer_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pointer_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.KeyEvent key_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.ClipboardEvent clipboard_event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.Screen screen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.desktop.Config config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.desktop.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.desktop.ClientToHost)
  return false;
#undef DO_
}

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.desktop.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.desktop.PointerEvent pointer_event = 1;
  if (this->has_pointer_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_pointer_event(), output);
  }

  // .aspia.proto.desktop.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_key_event(), output);
  }

  // .aspia.proto.desktop.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_clipboard_event(), output);
  }

  // .aspia.proto.desktop.Screen screen = 6;
  if (this->has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_screen(), output);
  }

  // .aspia.proto.desktop.Config config = 7;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_config(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.desktop.ClientToHost)
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.desktop.ClientToHost)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.desktop.PointerEvent pointer_event = 1;
  if (this->has_pointer_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pointer_event_);
  }

  // .aspia.proto.desktop.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_event_);
  }

  // .aspia.proto.desktop.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clipboard_event_);
  }

  // .aspia.proto.desktop.Screen screen = 6;
  if (this->has_screen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *screen_);
  }

  // .aspia.proto.desktop.Config config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToHost*>(&from));
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.desktop.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pointer_event()) {
    mutable_pointer_event()->::aspia::proto::desktop::PointerEvent::MergeFrom(from.pointer_event());
  }
  if (from.has_key_event()) {
    mutable_key_event()->::aspia::proto::desktop::KeyEvent::MergeFrom(from.key_event());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::aspia::proto::desktop::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_screen()) {
    mutable_screen()->::aspia::proto::desktop::Screen::MergeFrom(from.screen());
  }
  if (from.has_config()) {
    mutable_config()->::aspia::proto::desktop::Config::MergeFrom(from.config());
  }
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.desktop.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  using std::swap;
  swap(pointer_event_, other->pointer_event_);
  swap(key_event_, other->key_event_);
  swap(clipboard_event_, other->clipboard_event_);
  swap(screen_, other->screen_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClientToHost::GetTypeName() const {
  return "aspia.proto.desktop.ClientToHost";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace desktop
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::KeyEvent* Arena::CreateMaybeMessage< ::aspia::proto::desktop::KeyEvent >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::KeyEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::PointerEvent* Arena::CreateMaybeMessage< ::aspia::proto::desktop::PointerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::PointerEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::ClipboardEvent* Arena::CreateMaybeMessage< ::aspia::proto::desktop::ClipboardEvent >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::ClipboardEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::CursorShape* Arena::CreateMaybeMessage< ::aspia::proto::desktop::CursorShape >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::CursorShape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::Rect* Arena::CreateMaybeMessage< ::aspia::proto::desktop::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::Rect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::PixelFormat* Arena::CreateMaybeMessage< ::aspia::proto::desktop::PixelFormat >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::PixelFormat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::VideoPacketFormat* Arena::CreateMaybeMessage< ::aspia::proto::desktop::VideoPacketFormat >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::VideoPacketFormat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::VideoPacket* Arena::CreateMaybeMessage< ::aspia::proto::desktop::VideoPacket >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::VideoPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::Screen* Arena::CreateMaybeMessage< ::aspia::proto::desktop::Screen >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::Screen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::ScreenList* Arena::CreateMaybeMessage< ::aspia::proto::desktop::ScreenList >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::ScreenList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::ConfigRequest* Arena::CreateMaybeMessage< ::aspia::proto::desktop::ConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::ConfigRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::Config* Arena::CreateMaybeMessage< ::aspia::proto::desktop::Config >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::HostToClient* Arena::CreateMaybeMessage< ::aspia::proto::desktop::HostToClient >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::HostToClient >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::desktop::ClientToHost* Arena::CreateMaybeMessage< ::aspia::proto::desktop::ClientToHost >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::desktop::ClientToHost >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

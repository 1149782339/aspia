// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer_session.proto

#include "file_transfer_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_file_5ftransfer_5fsession_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateDirectoryRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DownloadRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DriveListRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DriveList_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileListRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileList_Item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Packet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PacketRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemoveRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RenameRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UploadRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DriveList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5ftransfer_5fsession_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FileList;
}  // namespace protobuf_file_5ftransfer_5fsession_2eproto
namespace aspia {
namespace proto {
namespace file_transfer {
class DriveList_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DriveList_Item>
      _instance;
} _DriveList_Item_default_instance_;
class DriveListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DriveList>
      _instance;
} _DriveList_default_instance_;
class DriveListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DriveListRequest>
      _instance;
} _DriveListRequest_default_instance_;
class FileList_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileList_Item>
      _instance;
} _FileList_Item_default_instance_;
class FileListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileList>
      _instance;
} _FileList_default_instance_;
class FileListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileListRequest>
      _instance;
} _FileListRequest_default_instance_;
class UploadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UploadRequest>
      _instance;
} _UploadRequest_default_instance_;
class DownloadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DownloadRequest>
      _instance;
} _DownloadRequest_default_instance_;
class PacketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PacketRequest>
      _instance;
} _PacketRequest_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
} _Packet_default_instance_;
class CreateDirectoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDirectoryRequest>
      _instance;
} _CreateDirectoryRequest_default_instance_;
class RenameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenameRequest>
      _instance;
} _RenameRequest_default_instance_;
class RemoveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveRequest>
      _instance;
} _RemoveRequest_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply>
      _instance;
} _Reply_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
}  // namespace file_transfer
}  // namespace proto
}  // namespace aspia
namespace protobuf_file_5ftransfer_5fsession_2eproto {
static void InitDefaultsDriveList_Item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_DriveList_Item_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::DriveList_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::DriveList_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DriveList_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDriveList_Item}, {}};

static void InitDefaultsDriveList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_DriveList_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::DriveList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::DriveList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DriveList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDriveList}, {
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList_Item.base,}};

static void InitDefaultsDriveListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_DriveListRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::DriveListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::DriveListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DriveListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDriveListRequest}, {}};

static void InitDefaultsFileList_Item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_FileList_Item_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::FileList_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::FileList_Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileList_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileList_Item}, {}};

static void InitDefaultsFileList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_FileList_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::FileList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::FileList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileList}, {
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList_Item.base,}};

static void InitDefaultsFileListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_FileListRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::FileListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::FileListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileListRequest}, {}};

static void InitDefaultsUploadRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_UploadRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::UploadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::UploadRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UploadRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUploadRequest}, {}};

static void InitDefaultsDownloadRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_DownloadRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::DownloadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::DownloadRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DownloadRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDownloadRequest}, {}};

static void InitDefaultsPacketRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_PacketRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::PacketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::PacketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PacketRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPacketRequest}, {}};

static void InitDefaultsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_Packet_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::Packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPacket}, {}};

static void InitDefaultsCreateDirectoryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_CreateDirectoryRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::CreateDirectoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::CreateDirectoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateDirectoryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateDirectoryRequest}, {}};

static void InitDefaultsRenameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_RenameRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::RenameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::RenameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RenameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRenameRequest}, {}};

static void InitDefaultsRemoveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_RemoveRequest_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::RemoveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::RemoveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoveRequest}, {}};

static void InitDefaultsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_Reply_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::Reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::Reply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Reply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReply}, {
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Packet.base,}};

static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::file_transfer::_Request_default_instance_;
    new (ptr) ::aspia::proto::file_transfer::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::file_transfer::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsRequest}, {
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveListRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileListRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_CreateDirectoryRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RenameRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RemoveRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DownloadRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_UploadRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_PacketRequest.base,
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Packet.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DriveList_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DriveList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DriveListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileList_Item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UploadRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DownloadRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PacketRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Packet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDirectoryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
}

}  // namespace protobuf_file_5ftransfer_5fsession_2eproto
namespace aspia {
namespace proto {
namespace file_transfer {
bool DriveList_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveList_Item_Type DriveList_Item::TYPE_UNKNOWN;
const DriveList_Item_Type DriveList_Item::TYPE_CDROM;
const DriveList_Item_Type DriveList_Item::TYPE_REMOVABLE;
const DriveList_Item_Type DriveList_Item::TYPE_FIXED;
const DriveList_Item_Type DriveList_Item::TYPE_REMOTE;
const DriveList_Item_Type DriveList_Item::TYPE_RAM;
const DriveList_Item_Type DriveList_Item::TYPE_HOME_FOLDER;
const DriveList_Item_Type DriveList_Item::TYPE_DESKTOP_FOLDER;
const DriveList_Item_Type DriveList_Item::Type_MIN;
const DriveList_Item_Type DriveList_Item::Type_MAX;
const int DriveList_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Packet_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Packet_Flags Packet::FLAG_ERROR;
const Packet_Flags Packet::FLAG_PACKET;
const Packet_Flags Packet::FLAG_FIRST_PACKET;
const Packet_Flags Packet::FLAG_LAST_PACKET;
const Packet_Flags Packet::Flags_MIN;
const Packet_Flags Packet::Flags_MAX;
const int Packet::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DriveList_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList_Item::kTypeFieldNumber;
const int DriveList_Item::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList_Item::DriveList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.DriveList.Item)
}
DriveList_Item::DriveList_Item(const DriveList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.DriveList.Item)
}

void DriveList_Item::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DriveList_Item::~DriveList_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.DriveList.Item)
  SharedDtor();
}

void DriveList_Item::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveList_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveList_Item& DriveList_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList_Item.base);
  return *internal_default_instance();
}


void DriveList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.DriveList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool DriveList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.DriveList.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.file_transfer.DriveList.Item.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::file_transfer::DriveList_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.DriveList.Item.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.DriveList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.DriveList.Item)
  return false;
#undef DO_
}

void DriveList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.DriveList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.file_transfer.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.DriveList.Item.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.DriveList.Item)
}

size_t DriveList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.DriveList.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .aspia.proto.file_transfer.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList_Item*>(&from));
}

void DriveList_Item::MergeFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.DriveList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DriveList_Item::CopyFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.DriveList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList_Item::IsInitialized() const {
  return true;
}

void DriveList_Item::Swap(DriveList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList_Item::InternalSwap(DriveList_Item* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DriveList_Item::GetTypeName() const {
  return "aspia.proto.file_transfer.DriveList.Item";
}


// ===================================================================

void DriveList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList::DriveList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.DriveList)
}
DriveList::DriveList(const DriveList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.DriveList)
}

void DriveList::SharedCtor() {
}

DriveList::~DriveList() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.DriveList)
  SharedDtor();
}

void DriveList::SharedDtor() {
}

void DriveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveList& DriveList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveList.base);
  return *internal_default_instance();
}


void DriveList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.DriveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DriveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.DriveList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.file_transfer.DriveList.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.DriveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.DriveList)
  return false;
#undef DO_
}

void DriveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.DriveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.file_transfer.DriveList.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->item(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.DriveList)
}

size_t DriveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.DriveList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.file_transfer.DriveList.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList*>(&from));
}

void DriveList::MergeFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.DriveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DriveList::CopyFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.DriveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList::IsInitialized() const {
  return true;
}

void DriveList::Swap(DriveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList::InternalSwap(DriveList* other) {
  using std::swap;
  CastToBase(&item_)->InternalSwap(CastToBase(&other->item_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DriveList::GetTypeName() const {
  return "aspia.proto.file_transfer.DriveList";
}


// ===================================================================

void DriveListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListRequest::DriveListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.DriveListRequest)
}
DriveListRequest::DriveListRequest(const DriveListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.DriveListRequest)
}

void DriveListRequest::SharedCtor() {
  dummy_ = 0u;
}

DriveListRequest::~DriveListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.DriveListRequest)
  SharedDtor();
}

void DriveListRequest::SharedDtor() {
}

void DriveListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveListRequest& DriveListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DriveListRequest.base);
  return *internal_default_instance();
}


void DriveListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.DriveListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0u;
  _internal_metadata_.Clear();
}

bool DriveListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.DriveListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.DriveListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.DriveListRequest)
  return false;
#undef DO_
}

void DriveListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.DriveListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.DriveListRequest)
}

size_t DriveListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.DriveListRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListRequest*>(&from));
}

void DriveListRequest::MergeFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.DriveListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void DriveListRequest::CopyFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.DriveListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListRequest::IsInitialized() const {
  return true;
}

void DriveListRequest::Swap(DriveListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListRequest::InternalSwap(DriveListRequest* other) {
  using std::swap;
  swap(dummy_, other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DriveListRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.DriveListRequest";
}


// ===================================================================

void FileList_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList_Item::kNameFieldNumber;
const int FileList_Item::kSizeFieldNumber;
const int FileList_Item::kModificationTimeFieldNumber;
const int FileList_Item::kIsDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList_Item::FileList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.FileList.Item)
}
FileList_Item::FileList_Item(const FileList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_)) + sizeof(is_directory_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.FileList.Item)
}

void FileList_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_directory_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_directory_));
}

FileList_Item::~FileList_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.FileList.Item)
  SharedDtor();
}

void FileList_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileList_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileList_Item& FileList_Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList_Item.base);
  return *internal_default_instance();
}


void FileList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.FileList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_directory_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_directory_));
  _internal_metadata_.Clear();
}

bool FileList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.FileList.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.FileList.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 modification_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_directory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_directory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.FileList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.FileList.Item)
  return false;
#undef DO_
}

void FileList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.FileList.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.FileList.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->modification_time(), output);
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_directory(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.FileList.Item)
}

size_t FileList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.FileList.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->modification_time());
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList_Item*>(&from));
}

void FileList_Item::MergeFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.FileList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
  if (from.is_directory() != 0) {
    set_is_directory(from.is_directory());
  }
}

void FileList_Item::CopyFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.FileList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList_Item::IsInitialized() const {
  return true;
}

void FileList_Item::Swap(FileList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList_Item::InternalSwap(FileList_Item* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(modification_time_, other->modification_time_);
  swap(is_directory_, other->is_directory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileList_Item::GetTypeName() const {
  return "aspia.proto.file_transfer.FileList.Item";
}


// ===================================================================

void FileList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList::FileList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.FileList)
}
FileList::FileList(const FileList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.FileList)
}

void FileList::SharedCtor() {
}

FileList::~FileList() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.FileList)
  SharedDtor();
}

void FileList::SharedDtor() {
}

void FileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileList& FileList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileList.base);
  return *internal_default_instance();
}


void FileList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.FileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.FileList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.file_transfer.FileList.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.FileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.FileList)
  return false;
#undef DO_
}

void FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.FileList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.file_transfer.FileList.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->item(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.FileList)
}

size_t FileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.FileList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.file_transfer.FileList.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList*>(&from));
}

void FileList::MergeFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.FileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void FileList::CopyFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.FileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList::IsInitialized() const {
  return true;
}

void FileList::Swap(FileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList::InternalSwap(FileList* other) {
  using std::swap;
  CastToBase(&item_)->InternalSwap(CastToBase(&other->item_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileList::GetTypeName() const {
  return "aspia.proto.file_transfer.FileList";
}


// ===================================================================

void FileListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListRequest::FileListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.FileListRequest)
}
FileListRequest::FileListRequest(const FileListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.FileListRequest)
}

void FileListRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.FileListRequest)
  SharedDtor();
}

void FileListRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileListRequest& FileListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_FileListRequest.base);
  return *internal_default_instance();
}


void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.FileListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.FileListRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.FileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.FileListRequest)
  return false;
#undef DO_
}

void FileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.FileListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.FileListRequest)
}

size_t FileListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.FileListRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileListRequest*>(&from));
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {
  return true;
}

void FileListRequest::Swap(FileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListRequest::InternalSwap(FileListRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FileListRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.FileListRequest";
}


// ===================================================================

void UploadRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadRequest::kPathFieldNumber;
const int UploadRequest::kOverwriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadRequest::UploadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_UploadRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.UploadRequest)
}

void UploadRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.UploadRequest)
  SharedDtor();
}

void UploadRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadRequest& UploadRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_UploadRequest.base);
  return *internal_default_instance();
}


void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.UploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
  _internal_metadata_.Clear();
}

bool UploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.UploadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.UploadRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.UploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.UploadRequest)
  return false;
#undef DO_
}

void UploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.UploadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.UploadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->overwrite(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.UploadRequest)
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.UploadRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadRequest*>(&from));
}

void UploadRequest::MergeFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.UploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.overwrite() != 0) {
    set_overwrite(from.overwrite());
  }
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::Swap(UploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRequest::InternalSwap(UploadRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(overwrite_, other->overwrite_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string UploadRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.UploadRequest";
}


// ===================================================================

void DownloadRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadRequest::DownloadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DownloadRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.DownloadRequest)
}
DownloadRequest::DownloadRequest(const DownloadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.DownloadRequest)
}

void DownloadRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DownloadRequest::~DownloadRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.DownloadRequest)
  SharedDtor();
}

void DownloadRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadRequest& DownloadRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_DownloadRequest.base);
  return *internal_default_instance();
}


void DownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.DownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.DownloadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.DownloadRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.DownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.DownloadRequest)
  return false;
#undef DO_
}

void DownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.DownloadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.DownloadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.DownloadRequest)
}

size_t DownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.DownloadRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadRequest*>(&from));
}

void DownloadRequest::MergeFrom(const DownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.DownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DownloadRequest::CopyFrom(const DownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.DownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRequest::IsInitialized() const {
  return true;
}

void DownloadRequest::Swap(DownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadRequest::InternalSwap(DownloadRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DownloadRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.DownloadRequest";
}


// ===================================================================

void PacketRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketRequest::PacketRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_PacketRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.PacketRequest)
}
PacketRequest::PacketRequest(const PacketRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.PacketRequest)
}

void PacketRequest::SharedCtor() {
  dummy_ = 0u;
}

PacketRequest::~PacketRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.PacketRequest)
  SharedDtor();
}

void PacketRequest::SharedDtor() {
}

void PacketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketRequest& PacketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_PacketRequest.base);
  return *internal_default_instance();
}


void PacketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.PacketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0u;
  _internal_metadata_.Clear();
}

bool PacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.PacketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.PacketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.PacketRequest)
  return false;
#undef DO_
}

void PacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.PacketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.PacketRequest)
}

size_t PacketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.PacketRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PacketRequest*>(&from));
}

void PacketRequest::MergeFrom(const PacketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.PacketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void PacketRequest::CopyFrom(const PacketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.PacketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketRequest::IsInitialized() const {
  return true;
}

void PacketRequest::Swap(PacketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketRequest::InternalSwap(PacketRequest* other) {
  using std::swap;
  swap(dummy_, other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PacketRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.PacketRequest";
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kFlagsFieldNumber;
const int Packet::kFileSizeFieldNumber;
const int Packet::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.Packet)
}

void Packet::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(flags_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Packet.base);
  return *internal_default_instance();
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.Packet)
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.Packet)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet*>(&from));
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Packet::GetTypeName() const {
  return "aspia.proto.file_transfer.Packet";
}


// ===================================================================

void CreateDirectoryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDirectoryRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDirectoryRequest::CreateDirectoryRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_CreateDirectoryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.CreateDirectoryRequest)
}
CreateDirectoryRequest::CreateDirectoryRequest(const CreateDirectoryRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.CreateDirectoryRequest)
}

void CreateDirectoryRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateDirectoryRequest::~CreateDirectoryRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.CreateDirectoryRequest)
  SharedDtor();
}

void CreateDirectoryRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDirectoryRequest& CreateDirectoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_CreateDirectoryRequest.base);
  return *internal_default_instance();
}


void CreateDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CreateDirectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.CreateDirectoryRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.CreateDirectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.CreateDirectoryRequest)
  return false;
#undef DO_
}

void CreateDirectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.CreateDirectoryRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.CreateDirectoryRequest)
}

size_t CreateDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDirectoryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateDirectoryRequest*>(&from));
}

void CreateDirectoryRequest::MergeFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CreateDirectoryRequest::CopyFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.CreateDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryRequest::IsInitialized() const {
  return true;
}

void CreateDirectoryRequest::Swap(CreateDirectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDirectoryRequest::InternalSwap(CreateDirectoryRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CreateDirectoryRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.CreateDirectoryRequest";
}


// ===================================================================

void RenameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kOldNameFieldNumber;
const int RenameRequest::kNewNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RenameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_name().size() > 0) {
    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_name().size() > 0) {
    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.RenameRequest)
}

void RenameRequest::SharedCtor() {
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  old_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameRequest& RenameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RenameRequest.base);
  return *internal_default_instance();
}


void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.RenameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string old_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_name().data(), static_cast<int>(this->old_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.RenameRequest.old_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_name().data(), static_cast<int>(this->new_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.RenameRequest.new_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string old_name = 1;
  if (this->old_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_name().data(), static_cast<int>(this->old_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.RenameRequest.old_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->old_name(), output);
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_name().data(), static_cast<int>(this->new_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.RenameRequest.new_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.RenameRequest)
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.RenameRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string old_name = 1;
  if (this->old_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_name());
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RenameRequest*>(&from));
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_name().size() > 0) {

    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  if (from.new_name().size() > 0) {

    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  old_name_.Swap(&other->old_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_name_.Swap(&other->new_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RenameRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.RenameRequest";
}


// ===================================================================

void RemoveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RemoveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveRequest& RemoveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_RemoveRequest.base);
  return *internal_default_instance();
}


void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.RemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.RemoveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.file_transfer.RemoveRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.RemoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.file_transfer.RemoveRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.RemoveRequest)
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.RemoveRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveRequest::InternalSwap(RemoveRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RemoveRequest::GetTypeName() const {
  return "aspia.proto.file_transfer.RemoveRequest";
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::aspia::proto::file_transfer::_Reply_default_instance_._instance.get_mutable()->drive_list_ = const_cast< ::aspia::proto::file_transfer::DriveList*>(
      ::aspia::proto::file_transfer::DriveList::internal_default_instance());
  ::aspia::proto::file_transfer::_Reply_default_instance_._instance.get_mutable()->file_list_ = const_cast< ::aspia::proto::file_transfer::FileList*>(
      ::aspia::proto::file_transfer::FileList::internal_default_instance());
  ::aspia::proto::file_transfer::_Reply_default_instance_._instance.get_mutable()->packet_ = const_cast< ::aspia::proto::file_transfer::Packet*>(
      ::aspia::proto::file_transfer::Packet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kStatusFieldNumber;
const int Reply::kDriveListFieldNumber;
const int Reply::kFileListFieldNumber;
const int Reply::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Reply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.Reply)
}
Reply::Reply(const Reply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list()) {
    drive_list_ = new ::aspia::proto::file_transfer::DriveList(*from.drive_list_);
  } else {
    drive_list_ = NULL;
  }
  if (from.has_file_list()) {
    file_list_ = new ::aspia::proto::file_transfer::FileList(*from.file_list_);
  } else {
    file_list_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::aspia::proto::file_transfer::Packet(*from.packet_);
  } else {
    packet_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.Reply)
}

void Reply::SharedCtor() {
  ::memset(&drive_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&drive_list_)) + sizeof(status_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (this != internal_default_instance()) delete drive_list_;
  if (this != internal_default_instance()) delete file_list_;
  if (this != internal_default_instance()) delete packet_;
}

void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Reply.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) {
    delete drive_list_;
  }
  drive_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) {
    delete file_list_;
  }
  file_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.Reply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.file_transfer.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::proto::file_transfer::Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.DriveList drive_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drive_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.FileList file_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.Packet packet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.file_transfer.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .aspia.proto.file_transfer.DriveList drive_list = 2;
  if (this->has_drive_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_drive_list(), output);
  }

  // .aspia.proto.file_transfer.FileList file_list = 3;
  if (this->has_file_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_file_list(), output);
  }

  // .aspia.proto.file_transfer.Packet packet = 4;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_packet(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.Reply)
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.Reply)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.file_transfer.DriveList drive_list = 2;
  if (this->has_drive_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *drive_list_);
  }

  // .aspia.proto.file_transfer.FileList file_list = 3;
  if (this->has_file_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_list_);
  }

  // .aspia.proto.file_transfer.Packet packet = 4;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *packet_);
  }

  // .aspia.proto.file_transfer.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Reply*>(&from));
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_list()) {
    mutable_drive_list()->::aspia::proto::file_transfer::DriveList::MergeFrom(from.drive_list());
  }
  if (from.has_file_list()) {
    mutable_file_list()->::aspia::proto::file_transfer::FileList::MergeFrom(from.file_list());
  }
  if (from.has_packet()) {
    mutable_packet()->::aspia::proto::file_transfer::Packet::MergeFrom(from.packet());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  using std::swap;
  swap(drive_list_, other->drive_list_);
  swap(file_list_, other->file_list_);
  swap(packet_, other->packet_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Reply::GetTypeName() const {
  return "aspia.proto.file_transfer.Reply";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->drive_list_request_ = const_cast< ::aspia::proto::file_transfer::DriveListRequest*>(
      ::aspia::proto::file_transfer::DriveListRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->file_list_request_ = const_cast< ::aspia::proto::file_transfer::FileListRequest*>(
      ::aspia::proto::file_transfer::FileListRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->create_directory_request_ = const_cast< ::aspia::proto::file_transfer::CreateDirectoryRequest*>(
      ::aspia::proto::file_transfer::CreateDirectoryRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->rename_request_ = const_cast< ::aspia::proto::file_transfer::RenameRequest*>(
      ::aspia::proto::file_transfer::RenameRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->remove_request_ = const_cast< ::aspia::proto::file_transfer::RemoveRequest*>(
      ::aspia::proto::file_transfer::RemoveRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->download_request_ = const_cast< ::aspia::proto::file_transfer::DownloadRequest*>(
      ::aspia::proto::file_transfer::DownloadRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->upload_request_ = const_cast< ::aspia::proto::file_transfer::UploadRequest*>(
      ::aspia::proto::file_transfer::UploadRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->packet_request_ = const_cast< ::aspia::proto::file_transfer::PacketRequest*>(
      ::aspia::proto::file_transfer::PacketRequest::internal_default_instance());
  ::aspia::proto::file_transfer::_Request_default_instance_._instance.get_mutable()->packet_ = const_cast< ::aspia::proto::file_transfer::Packet*>(
      ::aspia::proto::file_transfer::Packet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kDriveListRequestFieldNumber;
const int Request::kFileListRequestFieldNumber;
const int Request::kCreateDirectoryRequestFieldNumber;
const int Request::kRenameRequestFieldNumber;
const int Request::kRemoveRequestFieldNumber;
const int Request::kDownloadRequestFieldNumber;
const int Request::kUploadRequestFieldNumber;
const int Request::kPacketRequestFieldNumber;
const int Request::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.file_transfer.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list_request()) {
    drive_list_request_ = new ::aspia::proto::file_transfer::DriveListRequest(*from.drive_list_request_);
  } else {
    drive_list_request_ = NULL;
  }
  if (from.has_file_list_request()) {
    file_list_request_ = new ::aspia::proto::file_transfer::FileListRequest(*from.file_list_request_);
  } else {
    file_list_request_ = NULL;
  }
  if (from.has_create_directory_request()) {
    create_directory_request_ = new ::aspia::proto::file_transfer::CreateDirectoryRequest(*from.create_directory_request_);
  } else {
    create_directory_request_ = NULL;
  }
  if (from.has_rename_request()) {
    rename_request_ = new ::aspia::proto::file_transfer::RenameRequest(*from.rename_request_);
  } else {
    rename_request_ = NULL;
  }
  if (from.has_remove_request()) {
    remove_request_ = new ::aspia::proto::file_transfer::RemoveRequest(*from.remove_request_);
  } else {
    remove_request_ = NULL;
  }
  if (from.has_download_request()) {
    download_request_ = new ::aspia::proto::file_transfer::DownloadRequest(*from.download_request_);
  } else {
    download_request_ = NULL;
  }
  if (from.has_upload_request()) {
    upload_request_ = new ::aspia::proto::file_transfer::UploadRequest(*from.upload_request_);
  } else {
    upload_request_ = NULL;
  }
  if (from.has_packet_request()) {
    packet_request_ = new ::aspia::proto::file_transfer::PacketRequest(*from.packet_request_);
  } else {
    packet_request_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::aspia::proto::file_transfer::Packet(*from.packet_);
  } else {
    packet_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.file_transfer.Request)
}

void Request::SharedCtor() {
  ::memset(&drive_list_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_) -
      reinterpret_cast<char*>(&drive_list_request_)) + sizeof(packet_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aspia.proto.file_transfer.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete drive_list_request_;
  if (this != internal_default_instance()) delete file_list_request_;
  if (this != internal_default_instance()) delete create_directory_request_;
  if (this != internal_default_instance()) delete rename_request_;
  if (this != internal_default_instance()) delete remove_request_;
  if (this != internal_default_instance()) delete download_request_;
  if (this != internal_default_instance()) delete upload_request_;
  if (this != internal_default_instance()) delete packet_request_;
  if (this != internal_default_instance()) delete packet_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5ftransfer_5fsession_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.file_transfer.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) {
    delete drive_list_request_;
  }
  drive_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) {
    delete file_list_request_;
  }
  file_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) {
    delete create_directory_request_;
  }
  create_directory_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) {
    delete rename_request_;
  }
  rename_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) {
    delete remove_request_;
  }
  remove_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && download_request_ != NULL) {
    delete download_request_;
  }
  download_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && upload_request_ != NULL) {
    delete upload_request_;
  }
  upload_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_request_ != NULL) {
    delete packet_request_;
  }
  packet_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.file_transfer.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.file_transfer.DriveListRequest drive_list_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drive_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.FileListRequest file_list_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.CreateDirectoryRequest create_directory_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_directory_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.RenameRequest rename_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rename_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.RemoveRequest remove_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.DownloadRequest download_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_download_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.UploadRequest upload_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.PacketRequest packet_request = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packet_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.file_transfer.Packet packet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.file_transfer.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.file_transfer.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.file_transfer.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.file_transfer.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_drive_list_request(), output);
  }

  // .aspia.proto.file_transfer.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_file_list_request(), output);
  }

  // .aspia.proto.file_transfer.CreateDirectoryRequest create_directory_request = 3;
  if (this->has_create_directory_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_create_directory_request(), output);
  }

  // .aspia.proto.file_transfer.RenameRequest rename_request = 4;
  if (this->has_rename_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_rename_request(), output);
  }

  // .aspia.proto.file_transfer.RemoveRequest remove_request = 5;
  if (this->has_remove_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_remove_request(), output);
  }

  // .aspia.proto.file_transfer.DownloadRequest download_request = 6;
  if (this->has_download_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_download_request(), output);
  }

  // .aspia.proto.file_transfer.UploadRequest upload_request = 7;
  if (this->has_upload_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_upload_request(), output);
  }

  // .aspia.proto.file_transfer.PacketRequest packet_request = 8;
  if (this->has_packet_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_packet_request(), output);
  }

  // .aspia.proto.file_transfer.Packet packet = 9;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_packet(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.file_transfer.Request)
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.file_transfer.Request)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.file_transfer.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *drive_list_request_);
  }

  // .aspia.proto.file_transfer.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_list_request_);
  }

  // .aspia.proto.file_transfer.CreateDirectoryRequest create_directory_request = 3;
  if (this->has_create_directory_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_directory_request_);
  }

  // .aspia.proto.file_transfer.RenameRequest rename_request = 4;
  if (this->has_rename_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rename_request_);
  }

  // .aspia.proto.file_transfer.RemoveRequest remove_request = 5;
  if (this->has_remove_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *remove_request_);
  }

  // .aspia.proto.file_transfer.DownloadRequest download_request = 6;
  if (this->has_download_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *download_request_);
  }

  // .aspia.proto.file_transfer.UploadRequest upload_request = 7;
  if (this->has_upload_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upload_request_);
  }

  // .aspia.proto.file_transfer.PacketRequest packet_request = 8;
  if (this->has_packet_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *packet_request_);
  }

  // .aspia.proto.file_transfer.Packet packet = 9;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *packet_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request*>(&from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.file_transfer.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_drive_list_request()) {
    mutable_drive_list_request()->::aspia::proto::file_transfer::DriveListRequest::MergeFrom(from.drive_list_request());
  }
  if (from.has_file_list_request()) {
    mutable_file_list_request()->::aspia::proto::file_transfer::FileListRequest::MergeFrom(from.file_list_request());
  }
  if (from.has_create_directory_request()) {
    mutable_create_directory_request()->::aspia::proto::file_transfer::CreateDirectoryRequest::MergeFrom(from.create_directory_request());
  }
  if (from.has_rename_request()) {
    mutable_rename_request()->::aspia::proto::file_transfer::RenameRequest::MergeFrom(from.rename_request());
  }
  if (from.has_remove_request()) {
    mutable_remove_request()->::aspia::proto::file_transfer::RemoveRequest::MergeFrom(from.remove_request());
  }
  if (from.has_download_request()) {
    mutable_download_request()->::aspia::proto::file_transfer::DownloadRequest::MergeFrom(from.download_request());
  }
  if (from.has_upload_request()) {
    mutable_upload_request()->::aspia::proto::file_transfer::UploadRequest::MergeFrom(from.upload_request());
  }
  if (from.has_packet_request()) {
    mutable_packet_request()->::aspia::proto::file_transfer::PacketRequest::MergeFrom(from.packet_request());
  }
  if (from.has_packet()) {
    mutable_packet()->::aspia::proto::file_transfer::Packet::MergeFrom(from.packet());
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.file_transfer.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(drive_list_request_, other->drive_list_request_);
  swap(file_list_request_, other->file_list_request_);
  swap(create_directory_request_, other->create_directory_request_);
  swap(rename_request_, other->rename_request_);
  swap(remove_request_, other->remove_request_);
  swap(download_request_, other->download_request_);
  swap(upload_request_, other->upload_request_);
  swap(packet_request_, other->packet_request_);
  swap(packet_, other->packet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request::GetTypeName() const {
  return "aspia.proto.file_transfer.Request";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace file_transfer
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::DriveList_Item* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::DriveList_Item >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::DriveList_Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::DriveList* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::DriveList >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::DriveList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::DriveListRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::DriveListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::DriveListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::FileList_Item* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::FileList_Item >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::FileList_Item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::FileList* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::FileList >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::FileList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::FileListRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::FileListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::FileListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::UploadRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::UploadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::UploadRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::DownloadRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::DownloadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::DownloadRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::PacketRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::PacketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::PacketRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::Packet* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::Packet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::CreateDirectoryRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::CreateDirectoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::CreateDirectoryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::RenameRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::RenameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::RenameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::RemoveRequest* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::RemoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::RemoveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::Reply* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::Reply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::file_transfer::Request* Arena::CreateMaybeMessage< ::aspia::proto::file_transfer::Request >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::file_transfer::Request >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

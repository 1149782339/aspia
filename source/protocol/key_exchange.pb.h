// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#ifndef PROTOBUF_INCLUDED_key_5fexchange_2eproto
#define PROTOBUF_INCLUDED_key_5fexchange_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "session_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_key_5fexchange_2eproto 

namespace protobuf_key_5fexchange_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_key_5fexchange_2eproto
namespace aspia {
namespace proto {
class AuthorizationChallenge;
class AuthorizationChallengeDefaultTypeInternal;
extern AuthorizationChallengeDefaultTypeInternal _AuthorizationChallenge_default_instance_;
class AuthorizationResponse;
class AuthorizationResponseDefaultTypeInternal;
extern AuthorizationResponseDefaultTypeInternal _AuthorizationResponse_default_instance_;
class ClientHello;
class ClientHelloDefaultTypeInternal;
extern ClientHelloDefaultTypeInternal _ClientHello_default_instance_;
class ServerHello;
class ServerHelloDefaultTypeInternal;
extern ServerHelloDefaultTypeInternal _ServerHello_default_instance_;
class SrpClientKeyExchange;
class SrpClientKeyExchangeDefaultTypeInternal;
extern SrpClientKeyExchangeDefaultTypeInternal _SrpClientKeyExchange_default_instance_;
class SrpIdentify;
class SrpIdentifyDefaultTypeInternal;
extern SrpIdentifyDefaultTypeInternal _SrpIdentify_default_instance_;
class SrpServerKeyExchange;
class SrpServerKeyExchangeDefaultTypeInternal;
extern SrpServerKeyExchangeDefaultTypeInternal _SrpServerKeyExchange_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> ::aspia::proto::AuthorizationChallenge* Arena::CreateMaybeMessage<::aspia::proto::AuthorizationChallenge>(Arena*);
template<> ::aspia::proto::AuthorizationResponse* Arena::CreateMaybeMessage<::aspia::proto::AuthorizationResponse>(Arena*);
template<> ::aspia::proto::ClientHello* Arena::CreateMaybeMessage<::aspia::proto::ClientHello>(Arena*);
template<> ::aspia::proto::ServerHello* Arena::CreateMaybeMessage<::aspia::proto::ServerHello>(Arena*);
template<> ::aspia::proto::SrpClientKeyExchange* Arena::CreateMaybeMessage<::aspia::proto::SrpClientKeyExchange>(Arena*);
template<> ::aspia::proto::SrpIdentify* Arena::CreateMaybeMessage<::aspia::proto::SrpIdentify>(Arena*);
template<> ::aspia::proto::SrpServerKeyExchange* Arena::CreateMaybeMessage<::aspia::proto::SrpServerKeyExchange>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace aspia {
namespace proto {

enum Method {
  METHOD_UNKNOWN = 0,
  METHOD_SRP_CHACHA20_POLY1305 = 1,
  METHOD_SRP_AES256_GCM = 2,
  Method_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Method_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Method_IsValid(int value);
const Method Method_MIN = METHOD_UNKNOWN;
const Method Method_MAX = METHOD_SRP_AES256_GCM;
const int Method_ARRAYSIZE = Method_MAX + 1;

// ===================================================================

class ClientHello : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.ClientHello) */ {
 public:
  ClientHello();
  virtual ~ClientHello();

  ClientHello(const ClientHello& from);

  inline ClientHello& operator=(const ClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientHello(ClientHello&& from) noexcept
    : ClientHello() {
    *this = ::std::move(from);
  }

  inline ClientHello& operator=(ClientHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ClientHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientHello* internal_default_instance() {
    return reinterpret_cast<const ClientHello*>(
               &_ClientHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientHello* other);
  friend void swap(ClientHello& a, ClientHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientHello* New() const final {
    return CreateMaybeMessage<ClientHello>(NULL);
  }

  ClientHello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientHello>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClientHello& from);
  void MergeFrom(const ClientHello& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 methods = 1;
  void clear_methods();
  static const int kMethodsFieldNumber = 1;
  ::google::protobuf::uint32 methods() const;
  void set_methods(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.ClientHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 methods_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerHello : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.ServerHello) */ {
 public:
  ServerHello();
  virtual ~ServerHello();

  ServerHello(const ServerHello& from);

  inline ServerHello& operator=(const ServerHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerHello(ServerHello&& from) noexcept
    : ServerHello() {
    *this = ::std::move(from);
  }

  inline ServerHello& operator=(ServerHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ServerHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHello* internal_default_instance() {
    return reinterpret_cast<const ServerHello*>(
               &_ServerHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerHello* other);
  friend void swap(ServerHello& a, ServerHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerHello* New() const final {
    return CreateMaybeMessage<ServerHello>(NULL);
  }

  ServerHello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerHello>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ServerHello& from);
  void MergeFrom(const ServerHello& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.Method method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::aspia::proto::Method method() const;
  void set_method(::aspia::proto::Method value);

  // @@protoc_insertion_point(class_scope:aspia.proto.ServerHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SrpIdentify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.SrpIdentify) */ {
 public:
  SrpIdentify();
  virtual ~SrpIdentify();

  SrpIdentify(const SrpIdentify& from);

  inline SrpIdentify& operator=(const SrpIdentify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrpIdentify(SrpIdentify&& from) noexcept
    : SrpIdentify() {
    *this = ::std::move(from);
  }

  inline SrpIdentify& operator=(SrpIdentify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SrpIdentify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrpIdentify* internal_default_instance() {
    return reinterpret_cast<const SrpIdentify*>(
               &_SrpIdentify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SrpIdentify* other);
  friend void swap(SrpIdentify& a, SrpIdentify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrpIdentify* New() const final {
    return CreateMaybeMessage<SrpIdentify>(NULL);
  }

  SrpIdentify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrpIdentify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SrpIdentify& from);
  void MergeFrom(const SrpIdentify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SrpIdentify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:aspia.proto.SrpIdentify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SrpServerKeyExchange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.SrpServerKeyExchange) */ {
 public:
  SrpServerKeyExchange();
  virtual ~SrpServerKeyExchange();

  SrpServerKeyExchange(const SrpServerKeyExchange& from);

  inline SrpServerKeyExchange& operator=(const SrpServerKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrpServerKeyExchange(SrpServerKeyExchange&& from) noexcept
    : SrpServerKeyExchange() {
    *this = ::std::move(from);
  }

  inline SrpServerKeyExchange& operator=(SrpServerKeyExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SrpServerKeyExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrpServerKeyExchange* internal_default_instance() {
    return reinterpret_cast<const SrpServerKeyExchange*>(
               &_SrpServerKeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SrpServerKeyExchange* other);
  friend void swap(SrpServerKeyExchange& a, SrpServerKeyExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrpServerKeyExchange* New() const final {
    return CreateMaybeMessage<SrpServerKeyExchange>(NULL);
  }

  SrpServerKeyExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrpServerKeyExchange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SrpServerKeyExchange& from);
  void MergeFrom(const SrpServerKeyExchange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SrpServerKeyExchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const void* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // bytes generator = 2;
  void clear_generator();
  static const int kGeneratorFieldNumber = 2;
  const ::std::string& generator() const;
  void set_generator(const ::std::string& value);
  #if LANG_CXX11
  void set_generator(::std::string&& value);
  #endif
  void set_generator(const char* value);
  void set_generator(const void* value, size_t size);
  ::std::string* mutable_generator();
  ::std::string* release_generator();
  void set_allocated_generator(::std::string* generator);

  // bytes salt = 3;
  void clear_salt();
  static const int kSaltFieldNumber = 3;
  const ::std::string& salt() const;
  void set_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_salt(::std::string&& value);
  #endif
  void set_salt(const char* value);
  void set_salt(const void* value, size_t size);
  ::std::string* mutable_salt();
  ::std::string* release_salt();
  void set_allocated_salt(::std::string* salt);

  // bytes B = 4;
  void clear_b();
  static const int kBFieldNumber = 4;
  const ::std::string& b() const;
  void set_b(const ::std::string& value);
  #if LANG_CXX11
  void set_b(::std::string&& value);
  #endif
  void set_b(const char* value);
  void set_b(const void* value, size_t size);
  ::std::string* mutable_b();
  ::std::string* release_b();
  void set_allocated_b(::std::string* b);

  // bytes iv = 5;
  void clear_iv();
  static const int kIvFieldNumber = 5;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // @@protoc_insertion_point(class_scope:aspia.proto.SrpServerKeyExchange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr generator_;
  ::google::protobuf::internal::ArenaStringPtr salt_;
  ::google::protobuf::internal::ArenaStringPtr b_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SrpClientKeyExchange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.SrpClientKeyExchange) */ {
 public:
  SrpClientKeyExchange();
  virtual ~SrpClientKeyExchange();

  SrpClientKeyExchange(const SrpClientKeyExchange& from);

  inline SrpClientKeyExchange& operator=(const SrpClientKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrpClientKeyExchange(SrpClientKeyExchange&& from) noexcept
    : SrpClientKeyExchange() {
    *this = ::std::move(from);
  }

  inline SrpClientKeyExchange& operator=(SrpClientKeyExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SrpClientKeyExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrpClientKeyExchange* internal_default_instance() {
    return reinterpret_cast<const SrpClientKeyExchange*>(
               &_SrpClientKeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SrpClientKeyExchange* other);
  friend void swap(SrpClientKeyExchange& a, SrpClientKeyExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrpClientKeyExchange* New() const final {
    return CreateMaybeMessage<SrpClientKeyExchange>(NULL);
  }

  SrpClientKeyExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrpClientKeyExchange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SrpClientKeyExchange& from);
  void MergeFrom(const SrpClientKeyExchange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SrpClientKeyExchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  const ::std::string& a() const;
  void set_a(const ::std::string& value);
  #if LANG_CXX11
  void set_a(::std::string&& value);
  #endif
  void set_a(const char* value);
  void set_a(const void* value, size_t size);
  ::std::string* mutable_a();
  ::std::string* release_a();
  void set_allocated_a(::std::string* a);

  // bytes iv = 2;
  void clear_iv();
  static const int kIvFieldNumber = 2;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // @@protoc_insertion_point(class_scope:aspia.proto.SrpClientKeyExchange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr a_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthorizationChallenge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.AuthorizationChallenge) */ {
 public:
  AuthorizationChallenge();
  virtual ~AuthorizationChallenge();

  AuthorizationChallenge(const AuthorizationChallenge& from);

  inline AuthorizationChallenge& operator=(const AuthorizationChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthorizationChallenge(AuthorizationChallenge&& from) noexcept
    : AuthorizationChallenge() {
    *this = ::std::move(from);
  }

  inline AuthorizationChallenge& operator=(AuthorizationChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AuthorizationChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationChallenge* internal_default_instance() {
    return reinterpret_cast<const AuthorizationChallenge*>(
               &_AuthorizationChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AuthorizationChallenge* other);
  friend void swap(AuthorizationChallenge& a, AuthorizationChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationChallenge* New() const final {
    return CreateMaybeMessage<AuthorizationChallenge>(NULL);
  }

  AuthorizationChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationChallenge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthorizationChallenge& from);
  void MergeFrom(const AuthorizationChallenge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthorizationChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 session_types = 1;
  void clear_session_types();
  static const int kSessionTypesFieldNumber = 1;
  ::google::protobuf::uint32 session_types() const;
  void set_session_types(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.AuthorizationChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 session_types_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthorizationResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.AuthorizationResponse) */ {
 public:
  AuthorizationResponse();
  virtual ~AuthorizationResponse();

  AuthorizationResponse(const AuthorizationResponse& from);

  inline AuthorizationResponse& operator=(const AuthorizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthorizationResponse(AuthorizationResponse&& from) noexcept
    : AuthorizationResponse() {
    *this = ::std::move(from);
  }

  inline AuthorizationResponse& operator=(AuthorizationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AuthorizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthorizationResponse*>(
               &_AuthorizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AuthorizationResponse* other);
  friend void swap(AuthorizationResponse& a, AuthorizationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationResponse* New() const final {
    return CreateMaybeMessage<AuthorizationResponse>(NULL);
  }

  AuthorizationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthorizationResponse& from);
  void MergeFrom(const AuthorizationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthorizationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.SessionType session_type = 1;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 1;
  ::aspia::proto::SessionType session_type() const;
  void set_session_type(::aspia::proto::SessionType value);

  // @@protoc_insertion_point(class_scope:aspia.proto.AuthorizationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int session_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_key_5fexchange_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientHello

// uint32 methods = 1;
inline void ClientHello::clear_methods() {
  methods_ = 0u;
}
inline ::google::protobuf::uint32 ClientHello::methods() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ClientHello.methods)
  return methods_;
}
inline void ClientHello::set_methods(::google::protobuf::uint32 value) {
  
  methods_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.ClientHello.methods)
}

// -------------------------------------------------------------------

// ServerHello

// .aspia.proto.Method method = 1;
inline void ServerHello::clear_method() {
  method_ = 0;
}
inline ::aspia::proto::Method ServerHello::method() const {
  // @@protoc_insertion_point(field_get:aspia.proto.ServerHello.method)
  return static_cast< ::aspia::proto::Method >(method_);
}
inline void ServerHello::set_method(::aspia::proto::Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.ServerHello.method)
}

// -------------------------------------------------------------------

// SrpIdentify

// string username = 1;
inline void SrpIdentify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpIdentify::username() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpIdentify.username)
  return username_.GetNoArena();
}
inline void SrpIdentify::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpIdentify.username)
}
#if LANG_CXX11
inline void SrpIdentify::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpIdentify.username)
}
#endif
inline void SrpIdentify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpIdentify.username)
}
inline void SrpIdentify::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpIdentify.username)
}
inline ::std::string* SrpIdentify::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpIdentify.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpIdentify::release_username() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpIdentify.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpIdentify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpIdentify.username)
}

// -------------------------------------------------------------------

// SrpServerKeyExchange

// bytes number = 1;
inline void SrpServerKeyExchange::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpServerKeyExchange::number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpServerKeyExchange.number)
  return number_.GetNoArena();
}
inline void SrpServerKeyExchange::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpServerKeyExchange.number)
}
#if LANG_CXX11
inline void SrpServerKeyExchange::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpServerKeyExchange.number)
}
#endif
inline void SrpServerKeyExchange::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpServerKeyExchange.number)
}
inline void SrpServerKeyExchange::set_number(const void* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpServerKeyExchange.number)
}
inline ::std::string* SrpServerKeyExchange::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpServerKeyExchange.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpServerKeyExchange::release_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpServerKeyExchange.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpServerKeyExchange::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpServerKeyExchange.number)
}

// bytes generator = 2;
inline void SrpServerKeyExchange::clear_generator() {
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpServerKeyExchange::generator() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpServerKeyExchange.generator)
  return generator_.GetNoArena();
}
inline void SrpServerKeyExchange::set_generator(const ::std::string& value) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpServerKeyExchange.generator)
}
#if LANG_CXX11
inline void SrpServerKeyExchange::set_generator(::std::string&& value) {
  
  generator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpServerKeyExchange.generator)
}
#endif
inline void SrpServerKeyExchange::set_generator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpServerKeyExchange.generator)
}
inline void SrpServerKeyExchange::set_generator(const void* value, size_t size) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpServerKeyExchange.generator)
}
inline ::std::string* SrpServerKeyExchange::mutable_generator() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpServerKeyExchange.generator)
  return generator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpServerKeyExchange::release_generator() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpServerKeyExchange.generator)
  
  return generator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpServerKeyExchange::set_allocated_generator(::std::string* generator) {
  if (generator != NULL) {
    
  } else {
    
  }
  generator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpServerKeyExchange.generator)
}

// bytes salt = 3;
inline void SrpServerKeyExchange::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpServerKeyExchange::salt() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpServerKeyExchange.salt)
  return salt_.GetNoArena();
}
inline void SrpServerKeyExchange::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpServerKeyExchange.salt)
}
#if LANG_CXX11
inline void SrpServerKeyExchange::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpServerKeyExchange.salt)
}
#endif
inline void SrpServerKeyExchange::set_salt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpServerKeyExchange.salt)
}
inline void SrpServerKeyExchange::set_salt(const void* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpServerKeyExchange.salt)
}
inline ::std::string* SrpServerKeyExchange::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpServerKeyExchange.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpServerKeyExchange::release_salt() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpServerKeyExchange.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpServerKeyExchange::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpServerKeyExchange.salt)
}

// bytes B = 4;
inline void SrpServerKeyExchange::clear_b() {
  b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpServerKeyExchange::b() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpServerKeyExchange.B)
  return b_.GetNoArena();
}
inline void SrpServerKeyExchange::set_b(const ::std::string& value) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpServerKeyExchange.B)
}
#if LANG_CXX11
inline void SrpServerKeyExchange::set_b(::std::string&& value) {
  
  b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpServerKeyExchange.B)
}
#endif
inline void SrpServerKeyExchange::set_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpServerKeyExchange.B)
}
inline void SrpServerKeyExchange::set_b(const void* value, size_t size) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpServerKeyExchange.B)
}
inline ::std::string* SrpServerKeyExchange::mutable_b() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpServerKeyExchange.B)
  return b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpServerKeyExchange::release_b() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpServerKeyExchange.B)
  
  return b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpServerKeyExchange::set_allocated_b(::std::string* b) {
  if (b != NULL) {
    
  } else {
    
  }
  b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpServerKeyExchange.B)
}

// bytes iv = 5;
inline void SrpServerKeyExchange::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpServerKeyExchange::iv() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpServerKeyExchange.iv)
  return iv_.GetNoArena();
}
inline void SrpServerKeyExchange::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpServerKeyExchange.iv)
}
#if LANG_CXX11
inline void SrpServerKeyExchange::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpServerKeyExchange.iv)
}
#endif
inline void SrpServerKeyExchange::set_iv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpServerKeyExchange.iv)
}
inline void SrpServerKeyExchange::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpServerKeyExchange.iv)
}
inline ::std::string* SrpServerKeyExchange::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpServerKeyExchange.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpServerKeyExchange::release_iv() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpServerKeyExchange.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpServerKeyExchange::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpServerKeyExchange.iv)
}

// -------------------------------------------------------------------

// SrpClientKeyExchange

// bytes A = 1;
inline void SrpClientKeyExchange::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpClientKeyExchange::a() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpClientKeyExchange.A)
  return a_.GetNoArena();
}
inline void SrpClientKeyExchange::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpClientKeyExchange.A)
}
#if LANG_CXX11
inline void SrpClientKeyExchange::set_a(::std::string&& value) {
  
  a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpClientKeyExchange.A)
}
#endif
inline void SrpClientKeyExchange::set_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpClientKeyExchange.A)
}
inline void SrpClientKeyExchange::set_a(const void* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpClientKeyExchange.A)
}
inline ::std::string* SrpClientKeyExchange::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpClientKeyExchange.A)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpClientKeyExchange::release_a() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpClientKeyExchange.A)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpClientKeyExchange::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpClientKeyExchange.A)
}

// bytes iv = 2;
inline void SrpClientKeyExchange::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrpClientKeyExchange::iv() const {
  // @@protoc_insertion_point(field_get:aspia.proto.SrpClientKeyExchange.iv)
  return iv_.GetNoArena();
}
inline void SrpClientKeyExchange::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.SrpClientKeyExchange.iv)
}
#if LANG_CXX11
inline void SrpClientKeyExchange::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.SrpClientKeyExchange.iv)
}
#endif
inline void SrpClientKeyExchange::set_iv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.SrpClientKeyExchange.iv)
}
inline void SrpClientKeyExchange::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.SrpClientKeyExchange.iv)
}
inline ::std::string* SrpClientKeyExchange::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.SrpClientKeyExchange.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrpClientKeyExchange::release_iv() {
  // @@protoc_insertion_point(field_release:aspia.proto.SrpClientKeyExchange.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrpClientKeyExchange::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.SrpClientKeyExchange.iv)
}

// -------------------------------------------------------------------

// AuthorizationChallenge

// uint32 session_types = 1;
inline void AuthorizationChallenge::clear_session_types() {
  session_types_ = 0u;
}
inline ::google::protobuf::uint32 AuthorizationChallenge::session_types() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthorizationChallenge.session_types)
  return session_types_;
}
inline void AuthorizationChallenge::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthorizationChallenge.session_types)
}

// -------------------------------------------------------------------

// AuthorizationResponse

// .aspia.proto.SessionType session_type = 1;
inline void AuthorizationResponse::clear_session_type() {
  session_type_ = 0;
}
inline ::aspia::proto::SessionType AuthorizationResponse::session_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.AuthorizationResponse.session_type)
  return static_cast< ::aspia::proto::SessionType >(session_type_);
}
inline void AuthorizationResponse::set_session_type(::aspia::proto::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.AuthorizationResponse.session_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::Method> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_key_5fexchange_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srp_user.proto

#include "srp_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_srp_5fuser_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_srp_5fuser_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SrpUser;
}  // namespace protobuf_srp_5fuser_2eproto
namespace aspia {
namespace proto {
class SrpUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SrpUser>
      _instance;
} _SrpUser_default_instance_;
class SrpUserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SrpUserList>
      _instance;
} _SrpUserList_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_srp_5fuser_2eproto {
static void InitDefaultsSrpUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::_SrpUser_default_instance_;
    new (ptr) ::aspia::proto::SrpUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SrpUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SrpUser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSrpUser}, {}};

static void InitDefaultsSrpUserList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::_SrpUserList_default_instance_;
    new (ptr) ::aspia::proto::SrpUserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SrpUserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SrpUserList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSrpUserList}, {
      &protobuf_srp_5fuser_2eproto::scc_info_SrpUser.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SrpUser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SrpUserList.base);
}

}  // namespace protobuf_srp_5fuser_2eproto
namespace aspia {
namespace proto {
bool SrpUser_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SrpUser_Flags SrpUser::NO_FLAGS;
const SrpUser_Flags SrpUser::ENABLED;
const SrpUser_Flags SrpUser::Flags_MIN;
const SrpUser_Flags SrpUser::Flags_MAX;
const int SrpUser::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SrpUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpUser::kUsernameFieldNumber;
const int SrpUser::kSaltFieldNumber;
const int SrpUser::kVerifierFieldNumber;
const int SrpUser::kNumberFieldNumber;
const int SrpUser::kGeneratorFieldNumber;
const int SrpUser::kSessionsFieldNumber;
const int SrpUser::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpUser::SrpUser()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_srp_5fuser_2eproto::scc_info_SrpUser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SrpUser)
}
SrpUser::SrpUser(const SrpUser& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  verifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.verifier().size() > 0) {
    verifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.number().size() > 0) {
    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generator().size() > 0) {
    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SrpUser)
}

void SrpUser::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(flags_));
}

SrpUser::~SrpUser() {
  // @@protoc_insertion_point(destructor:aspia.proto.SrpUser)
  SharedDtor();
}

void SrpUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrpUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SrpUser& SrpUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_srp_5fuser_2eproto::scc_info_SrpUser.base);
  return *internal_default_instance();
}


void SrpUser::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SrpUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool SrpUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SrpUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.SrpUser.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes salt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes verifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes generator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SrpUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SrpUser)
  return false;
#undef DO_
}

void SrpUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SrpUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.SrpUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // bytes salt = 2;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->salt(), output);
  }

  // bytes verifier = 3;
  if (this->verifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verifier(), output);
  }

  // bytes number = 4;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->number(), output);
  }

  // bytes generator = 5;
  if (this->generator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->generator(), output);
  }

  // uint32 sessions = 6;
  if (this->sessions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sessions(), output);
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SrpUser)
}

size_t SrpUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SrpUser)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes salt = 2;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->salt());
  }

  // bytes verifier = 3;
  if (this->verifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->verifier());
  }

  // bytes number = 4;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->number());
  }

  // bytes generator = 5;
  if (this->generator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->generator());
  }

  // uint32 sessions = 6;
  if (this->sessions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrpUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrpUser*>(&from));
}

void SrpUser::MergeFrom(const SrpUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SrpUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.verifier().size() > 0) {

    verifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.generator().size() > 0) {

    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  if (from.sessions() != 0) {
    set_sessions(from.sessions());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void SrpUser::CopyFrom(const SrpUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SrpUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpUser::IsInitialized() const {
  return true;
}

void SrpUser::Swap(SrpUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpUser::InternalSwap(SrpUser* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  salt_.Swap(&other->salt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verifier_.Swap(&other->verifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generator_.Swap(&other->generator_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sessions_, other->sessions_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SrpUser::GetTypeName() const {
  return "aspia.proto.SrpUser";
}


// ===================================================================

void SrpUserList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpUserList::kSeedKeyFieldNumber;
const int SrpUserList::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpUserList::SrpUserList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_srp_5fuser_2eproto::scc_info_SrpUserList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SrpUserList)
}
SrpUserList::SrpUserList(const SrpUserList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seed_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seed_key().size() > 0) {
    seed_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seed_key_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SrpUserList)
}

void SrpUserList::SharedCtor() {
  seed_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SrpUserList::~SrpUserList() {
  // @@protoc_insertion_point(destructor:aspia.proto.SrpUserList)
  SharedDtor();
}

void SrpUserList::SharedDtor() {
  seed_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrpUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SrpUserList& SrpUserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_srp_5fuser_2eproto::scc_info_SrpUserList.base);
  return *internal_default_instance();
}


void SrpUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SrpUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  seed_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SrpUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SrpUserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes seed_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seed_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.SrpUser user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SrpUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SrpUserList)
  return false;
#undef DO_
}

void SrpUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SrpUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes seed_key = 1;
  if (this->seed_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->seed_key(), output);
  }

  // repeated .aspia.proto.SrpUser user = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->user(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SrpUserList)
}

size_t SrpUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SrpUserList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.SrpUser user = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->user_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user(static_cast<int>(i)));
    }
  }

  // bytes seed_key = 1;
  if (this->seed_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->seed_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrpUserList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrpUserList*>(&from));
}

void SrpUserList::MergeFrom(const SrpUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SrpUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
  if (from.seed_key().size() > 0) {

    seed_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seed_key_);
  }
}

void SrpUserList::CopyFrom(const SrpUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SrpUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpUserList::IsInitialized() const {
  return true;
}

void SrpUserList::Swap(SrpUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpUserList::InternalSwap(SrpUserList* other) {
  using std::swap;
  CastToBase(&user_)->InternalSwap(CastToBase(&other->user_));
  seed_key_.Swap(&other->seed_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SrpUserList::GetTypeName() const {
  return "aspia.proto.SrpUserList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::SrpUser* Arena::CreateMaybeMessage< ::aspia::proto::SrpUser >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::SrpUser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::SrpUserList* Arena::CreateMaybeMessage< ::aspia::proto::SrpUserList >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::SrpUserList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

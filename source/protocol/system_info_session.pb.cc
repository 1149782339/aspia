// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info_session.proto

#include "system_info_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_system_5finfo_5fsession_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5finfo_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Category;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5finfo_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CategoryList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5finfo_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CategoryListRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5finfo_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CategoryRequest;
}  // namespace protobuf_system_5finfo_5fsession_2eproto
namespace aspia {
namespace proto {
namespace system_info {
class CategoryListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoryListRequest>
      _instance;
} _CategoryListRequest_default_instance_;
class CategoryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoryList>
      _instance;
} _CategoryList_default_instance_;
class CategoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoryRequest>
      _instance;
} _CategoryRequest_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Category>
      _instance;
} _Category_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply>
      _instance;
} _Reply_default_instance_;
}  // namespace system_info
}  // namespace proto
}  // namespace aspia
namespace protobuf_system_5finfo_5fsession_2eproto {
static void InitDefaultsCategoryListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_CategoryListRequest_default_instance_;
    new (ptr) ::aspia::proto::system_info::CategoryListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::CategoryListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CategoryListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCategoryListRequest}, {}};

static void InitDefaultsCategoryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_CategoryList_default_instance_;
    new (ptr) ::aspia::proto::system_info::CategoryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::CategoryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CategoryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCategoryList}, {}};

static void InitDefaultsCategoryRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_CategoryRequest_default_instance_;
    new (ptr) ::aspia::proto::system_info::CategoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::CategoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CategoryRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCategoryRequest}, {}};

static void InitDefaultsCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_Category_default_instance_;
    new (ptr) ::aspia::proto::system_info::Category();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::Category::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Category =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCategory}, {}};

static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_Request_default_instance_;
    new (ptr) ::aspia::proto::system_info::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRequest}, {
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryListRequest.base,
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryRequest.base,}};

static void InitDefaultsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::proto::system_info::_Reply_default_instance_;
    new (ptr) ::aspia::proto::system_info::Reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::system_info::Reply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Reply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReply}, {
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryList.base,
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_Category.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CategoryListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CategoryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CategoryRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Category.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reply.base);
}

}  // namespace protobuf_system_5finfo_5fsession_2eproto
namespace aspia {
namespace proto {
namespace system_info {

// ===================================================================

void CategoryListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryListRequest::CategoryListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.CategoryListRequest)
}
CategoryListRequest::CategoryListRequest(const CategoryListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.CategoryListRequest)
}

void CategoryListRequest::SharedCtor() {
  dummy_ = 0u;
}

CategoryListRequest::~CategoryListRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.CategoryListRequest)
  SharedDtor();
}

void CategoryListRequest::SharedDtor() {
}

void CategoryListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CategoryListRequest& CategoryListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryListRequest.base);
  return *internal_default_instance();
}


void CategoryListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.CategoryListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0u;
  _internal_metadata_.Clear();
}

bool CategoryListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.CategoryListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.CategoryListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.CategoryListRequest)
  return false;
#undef DO_
}

void CategoryListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.CategoryListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.CategoryListRequest)
}

size_t CategoryListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.CategoryListRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CategoryListRequest*>(&from));
}

void CategoryListRequest::MergeFrom(const CategoryListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.CategoryListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void CategoryListRequest::CopyFrom(const CategoryListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.CategoryListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryListRequest::IsInitialized() const {
  return true;
}

void CategoryListRequest::Swap(CategoryListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryListRequest::InternalSwap(CategoryListRequest* other) {
  using std::swap;
  swap(dummy_, other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CategoryListRequest::GetTypeName() const {
  return "aspia.proto.system_info.CategoryListRequest";
}


// ===================================================================

void CategoryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryList::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryList::CategoryList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.CategoryList)
}
CategoryList::CategoryList(const CategoryList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      uuid_(from.uuid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.CategoryList)
}

void CategoryList::SharedCtor() {
}

CategoryList::~CategoryList() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.CategoryList)
  SharedDtor();
}

void CategoryList::SharedDtor() {
}

void CategoryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CategoryList& CategoryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryList.base);
  return *internal_default_instance();
}


void CategoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.CategoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.Clear();
  _internal_metadata_.Clear();
}

bool CategoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.CategoryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid(this->uuid_size() - 1).data(),
            static_cast<int>(this->uuid(this->uuid_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.system_info.CategoryList.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.CategoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.CategoryList)
  return false;
#undef DO_
}

void CategoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.CategoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uuid = 1;
  for (int i = 0, n = this->uuid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid(i).data(), static_cast<int>(this->uuid(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.system_info.CategoryList.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.CategoryList)
}

size_t CategoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.CategoryList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated string uuid = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uuid_size());
  for (int i = 0, n = this->uuid_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uuid(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CategoryList*>(&from));
}

void CategoryList::MergeFrom(const CategoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.CategoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuid_.MergeFrom(from.uuid_);
}

void CategoryList::CopyFrom(const CategoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.CategoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryList::IsInitialized() const {
  return true;
}

void CategoryList::Swap(CategoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryList::InternalSwap(CategoryList* other) {
  using std::swap;
  uuid_.InternalSwap(CastToBase(&other->uuid_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CategoryList::GetTypeName() const {
  return "aspia.proto.system_info.CategoryList";
}


// ===================================================================

void CategoryRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryRequest::kUuidFieldNumber;
const int CategoryRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryRequest::CategoryRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.CategoryRequest)
}
CategoryRequest::CategoryRequest(const CategoryRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.CategoryRequest)
}

void CategoryRequest::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CategoryRequest::~CategoryRequest() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.CategoryRequest)
  SharedDtor();
}

void CategoryRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CategoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CategoryRequest& CategoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_CategoryRequest.base);
  return *internal_default_instance();
}


void CategoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.CategoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CategoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.CategoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.system_info.CategoryRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.CategoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.CategoryRequest)
  return false;
#undef DO_
}

void CategoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.CategoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.system_info.CategoryRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.CategoryRequest)
}

size_t CategoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.CategoryRequest)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CategoryRequest*>(&from));
}

void CategoryRequest::MergeFrom(const CategoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.CategoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CategoryRequest::CopyFrom(const CategoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.CategoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryRequest::IsInitialized() const {
  return true;
}

void CategoryRequest::Swap(CategoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryRequest::InternalSwap(CategoryRequest* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CategoryRequest::GetTypeName() const {
  return "aspia.proto.system_info.CategoryRequest";
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Category::kUuidFieldNumber;
const int Category::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Category::Category()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_Category.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.Category)
}
Category::Category(const Category& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.Category)
}

void Category::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_Category.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.Category)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.system_info.Category.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.system_info.Category.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.Category)
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.Category)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Category*>(&from));
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Category::GetTypeName() const {
  return "aspia.proto.system_info.Category";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::aspia::proto::system_info::_Request_default_instance_._instance.get_mutable()->category_list_request_ = const_cast< ::aspia::proto::system_info::CategoryListRequest*>(
      ::aspia::proto::system_info::CategoryListRequest::internal_default_instance());
  ::aspia::proto::system_info::_Request_default_instance_._instance.get_mutable()->category_request_ = const_cast< ::aspia::proto::system_info::CategoryRequest*>(
      ::aspia::proto::system_info::CategoryRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCategoryListRequestFieldNumber;
const int Request::kCategoryRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_category_list_request()) {
    category_list_request_ = new ::aspia::proto::system_info::CategoryListRequest(*from.category_list_request_);
  } else {
    category_list_request_ = NULL;
  }
  if (from.has_category_request()) {
    category_request_ = new ::aspia::proto::system_info::CategoryRequest(*from.category_request_);
  } else {
    category_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.Request)
}

void Request::SharedCtor() {
  ::memset(&category_list_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_request_) -
      reinterpret_cast<char*>(&category_list_request_)) + sizeof(category_request_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete category_list_request_;
  if (this != internal_default_instance()) delete category_request_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && category_list_request_ != NULL) {
    delete category_list_request_;
  }
  category_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && category_request_ != NULL) {
    delete category_request_;
  }
  category_request_ = NULL;
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.system_info.CategoryListRequest category_list_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.system_info.CategoryRequest category_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.system_info.CategoryListRequest category_list_request = 1;
  if (this->has_category_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_category_list_request(), output);
  }

  // .aspia.proto.system_info.CategoryRequest category_request = 2;
  if (this->has_category_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_category_request(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.Request)
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.Request)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.system_info.CategoryListRequest category_list_request = 1;
  if (this->has_category_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_list_request_);
  }

  // .aspia.proto.system_info.CategoryRequest category_request = 2;
  if (this->has_category_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request*>(&from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category_list_request()) {
    mutable_category_list_request()->::aspia::proto::system_info::CategoryListRequest::MergeFrom(from.category_list_request());
  }
  if (from.has_category_request()) {
    mutable_category_request()->::aspia::proto::system_info::CategoryRequest::MergeFrom(from.category_request());
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(category_list_request_, other->category_list_request_);
  swap(category_request_, other->category_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Request::GetTypeName() const {
  return "aspia.proto.system_info.Request";
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::aspia::proto::system_info::_Reply_default_instance_._instance.get_mutable()->category_list_ = const_cast< ::aspia::proto::system_info::CategoryList*>(
      ::aspia::proto::system_info::CategoryList::internal_default_instance());
  ::aspia::proto::system_info::_Reply_default_instance_._instance.get_mutable()->category_ = const_cast< ::aspia::proto::system_info::Category*>(
      ::aspia::proto::system_info::Category::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kCategoryListFieldNumber;
const int Reply::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5finfo_5fsession_2eproto::scc_info_Reply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.system_info.Reply)
}
Reply::Reply(const Reply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_category_list()) {
    category_list_ = new ::aspia::proto::system_info::CategoryList(*from.category_list_);
  } else {
    category_list_ = NULL;
  }
  if (from.has_category()) {
    category_ = new ::aspia::proto::system_info::Category(*from.category_);
  } else {
    category_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.system_info.Reply)
}

void Reply::SharedCtor() {
  ::memset(&category_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&category_list_)) + sizeof(category_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:aspia.proto.system_info.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (this != internal_default_instance()) delete category_list_;
  if (this != internal_default_instance()) delete category_;
}

void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5finfo_5fsession_2eproto::scc_info_Reply.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.system_info.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && category_list_ != NULL) {
    delete category_list_;
  }
  category_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && category_ != NULL) {
    delete category_;
  }
  category_ = NULL;
  _internal_metadata_.Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.system_info.Reply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.system_info.CategoryList category_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.system_info.Category category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.system_info.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.system_info.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.system_info.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.system_info.CategoryList category_list = 1;
  if (this->has_category_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_category_list(), output);
  }

  // .aspia.proto.system_info.Category category = 2;
  if (this->has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_category(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.system_info.Reply)
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.system_info.Reply)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.proto.system_info.CategoryList category_list = 1;
  if (this->has_category_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_list_);
  }

  // .aspia.proto.system_info.Category category = 2;
  if (this->has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *category_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Reply*>(&from));
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.system_info.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category_list()) {
    mutable_category_list()->::aspia::proto::system_info::CategoryList::MergeFrom(from.category_list());
  }
  if (from.has_category()) {
    mutable_category()->::aspia::proto::system_info::Category::MergeFrom(from.category());
  }
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.system_info.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  using std::swap;
  swap(category_list_, other->category_list_);
  swap(category_, other->category_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Reply::GetTypeName() const {
  return "aspia.proto.system_info.Reply";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace system_info
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::CategoryListRequest* Arena::CreateMaybeMessage< ::aspia::proto::system_info::CategoryListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::CategoryListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::CategoryList* Arena::CreateMaybeMessage< ::aspia::proto::system_info::CategoryList >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::CategoryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::CategoryRequest* Arena::CreateMaybeMessage< ::aspia::proto::system_info::CategoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::CategoryRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::Category* Arena::CreateMaybeMessage< ::aspia::proto::system_info::Category >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::Category >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::Request* Arena::CreateMaybeMessage< ::aspia::proto::system_info::Request >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::proto::system_info::Reply* Arena::CreateMaybeMessage< ::aspia::proto::system_info::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::proto::system_info::Reply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

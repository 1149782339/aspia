// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info_session.proto

#ifndef PROTOBUF_INCLUDED_system_5finfo_5fsession_2eproto
#define PROTOBUF_INCLUDED_system_5finfo_5fsession_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_system_5finfo_5fsession_2eproto 

namespace protobuf_system_5finfo_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_system_5finfo_5fsession_2eproto
namespace aspia {
namespace proto {
namespace system_info {
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class CategoryList;
class CategoryListDefaultTypeInternal;
extern CategoryListDefaultTypeInternal _CategoryList_default_instance_;
class CategoryListRequest;
class CategoryListRequestDefaultTypeInternal;
extern CategoryListRequestDefaultTypeInternal _CategoryListRequest_default_instance_;
class CategoryRequest;
class CategoryRequestDefaultTypeInternal;
extern CategoryRequestDefaultTypeInternal _CategoryRequest_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace system_info
}  // namespace proto
}  // namespace aspia
namespace google {
namespace protobuf {
template<> ::aspia::proto::system_info::Category* Arena::CreateMaybeMessage<::aspia::proto::system_info::Category>(Arena*);
template<> ::aspia::proto::system_info::CategoryList* Arena::CreateMaybeMessage<::aspia::proto::system_info::CategoryList>(Arena*);
template<> ::aspia::proto::system_info::CategoryListRequest* Arena::CreateMaybeMessage<::aspia::proto::system_info::CategoryListRequest>(Arena*);
template<> ::aspia::proto::system_info::CategoryRequest* Arena::CreateMaybeMessage<::aspia::proto::system_info::CategoryRequest>(Arena*);
template<> ::aspia::proto::system_info::Reply* Arena::CreateMaybeMessage<::aspia::proto::system_info::Reply>(Arena*);
template<> ::aspia::proto::system_info::Request* Arena::CreateMaybeMessage<::aspia::proto::system_info::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace aspia {
namespace proto {
namespace system_info {

// ===================================================================

class CategoryListRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.CategoryListRequest) */ {
 public:
  CategoryListRequest();
  virtual ~CategoryListRequest();

  CategoryListRequest(const CategoryListRequest& from);

  inline CategoryListRequest& operator=(const CategoryListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryListRequest(CategoryListRequest&& from) noexcept
    : CategoryListRequest() {
    *this = ::std::move(from);
  }

  inline CategoryListRequest& operator=(CategoryListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CategoryListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryListRequest* internal_default_instance() {
    return reinterpret_cast<const CategoryListRequest*>(
               &_CategoryListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CategoryListRequest* other);
  friend void swap(CategoryListRequest& a, CategoryListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryListRequest* New() const final {
    return CreateMaybeMessage<CategoryListRequest>(NULL);
  }

  CategoryListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoryListRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CategoryListRequest& from);
  void MergeFrom(const CategoryListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::uint32 dummy() const;
  void set_dummy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.CategoryListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 dummy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.CategoryList) */ {
 public:
  CategoryList();
  virtual ~CategoryList();

  CategoryList(const CategoryList& from);

  inline CategoryList& operator=(const CategoryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryList(CategoryList&& from) noexcept
    : CategoryList() {
    *this = ::std::move(from);
  }

  inline CategoryList& operator=(CategoryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CategoryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryList* internal_default_instance() {
    return reinterpret_cast<const CategoryList*>(
               &_CategoryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CategoryList* other);
  friend void swap(CategoryList& a, CategoryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryList* New() const final {
    return CreateMaybeMessage<CategoryList>(NULL);
  }

  CategoryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoryList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CategoryList& from);
  void MergeFrom(const CategoryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string uuid = 1;
  int uuid_size() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid(int index) const;
  ::std::string* mutable_uuid(int index);
  void set_uuid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(int index, ::std::string&& value);
  #endif
  void set_uuid(int index, const char* value);
  void set_uuid(int index, const char* value, size_t size);
  ::std::string* add_uuid();
  void add_uuid(const ::std::string& value);
  #if LANG_CXX11
  void add_uuid(::std::string&& value);
  #endif
  void add_uuid(const char* value);
  void add_uuid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& uuid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uuid();

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.CategoryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.CategoryRequest) */ {
 public:
  CategoryRequest();
  virtual ~CategoryRequest();

  CategoryRequest(const CategoryRequest& from);

  inline CategoryRequest& operator=(const CategoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryRequest(CategoryRequest&& from) noexcept
    : CategoryRequest() {
    *this = ::std::move(from);
  }

  inline CategoryRequest& operator=(CategoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CategoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryRequest* internal_default_instance() {
    return reinterpret_cast<const CategoryRequest*>(
               &_CategoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CategoryRequest* other);
  friend void swap(CategoryRequest& a, CategoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryRequest* New() const final {
    return CreateMaybeMessage<CategoryRequest>(NULL);
  }

  CategoryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CategoryRequest& from);
  void MergeFrom(const CategoryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.CategoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Category : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Category* other);
  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(NULL);
  }

  Category* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.Category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.system_info.CategoryListRequest category_list_request = 1;
  bool has_category_list_request() const;
  void clear_category_list_request();
  static const int kCategoryListRequestFieldNumber = 1;
  private:
  const ::aspia::proto::system_info::CategoryListRequest& _internal_category_list_request() const;
  public:
  const ::aspia::proto::system_info::CategoryListRequest& category_list_request() const;
  ::aspia::proto::system_info::CategoryListRequest* release_category_list_request();
  ::aspia::proto::system_info::CategoryListRequest* mutable_category_list_request();
  void set_allocated_category_list_request(::aspia::proto::system_info::CategoryListRequest* category_list_request);

  // .aspia.proto.system_info.CategoryRequest category_request = 2;
  bool has_category_request() const;
  void clear_category_request();
  static const int kCategoryRequestFieldNumber = 2;
  private:
  const ::aspia::proto::system_info::CategoryRequest& _internal_category_request() const;
  public:
  const ::aspia::proto::system_info::CategoryRequest& category_request() const;
  ::aspia::proto::system_info::CategoryRequest* release_category_request();
  ::aspia::proto::system_info::CategoryRequest* mutable_category_request();
  void set_allocated_category_request(::aspia::proto::system_info::CategoryRequest* category_request);

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::system_info::CategoryListRequest* category_list_request_;
  ::aspia::proto::system_info::CategoryRequest* category_request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.system_info.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(NULL);
  }

  Reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .aspia.proto.system_info.CategoryList category_list = 1;
  bool has_category_list() const;
  void clear_category_list();
  static const int kCategoryListFieldNumber = 1;
  private:
  const ::aspia::proto::system_info::CategoryList& _internal_category_list() const;
  public:
  const ::aspia::proto::system_info::CategoryList& category_list() const;
  ::aspia::proto::system_info::CategoryList* release_category_list();
  ::aspia::proto::system_info::CategoryList* mutable_category_list();
  void set_allocated_category_list(::aspia::proto::system_info::CategoryList* category_list);

  // .aspia.proto.system_info.Category category = 2;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  private:
  const ::aspia::proto::system_info::Category& _internal_category() const;
  public:
  const ::aspia::proto::system_info::Category& category() const;
  ::aspia::proto::system_info::Category* release_category();
  ::aspia::proto::system_info::Category* mutable_category();
  void set_allocated_category(::aspia::proto::system_info::Category* category);

  // @@protoc_insertion_point(class_scope:aspia.proto.system_info.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::aspia::proto::system_info::CategoryList* category_list_;
  ::aspia::proto::system_info::Category* category_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5finfo_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CategoryListRequest

// uint32 dummy = 1;
inline void CategoryListRequest::clear_dummy() {
  dummy_ = 0u;
}
inline ::google::protobuf::uint32 CategoryListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.CategoryListRequest.dummy)
  return dummy_;
}
inline void CategoryListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.CategoryListRequest.dummy)
}

// -------------------------------------------------------------------

// CategoryList

// repeated string uuid = 1;
inline int CategoryList::uuid_size() const {
  return uuid_.size();
}
inline void CategoryList::clear_uuid() {
  uuid_.Clear();
}
inline const ::std::string& CategoryList::uuid(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.CategoryList.uuid)
  return uuid_.Get(index);
}
inline ::std::string* CategoryList::mutable_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.CategoryList.uuid)
  return uuid_.Mutable(index);
}
inline void CategoryList::set_uuid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.CategoryList.uuid)
  uuid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CategoryList::set_uuid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.CategoryList.uuid)
  uuid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CategoryList::set_uuid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aspia.proto.system_info.CategoryList.uuid)
}
inline void CategoryList::set_uuid(int index, const char* value, size_t size) {
  uuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.system_info.CategoryList.uuid)
}
inline ::std::string* CategoryList::add_uuid() {
  // @@protoc_insertion_point(field_add_mutable:aspia.proto.system_info.CategoryList.uuid)
  return uuid_.Add();
}
inline void CategoryList::add_uuid(const ::std::string& value) {
  uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aspia.proto.system_info.CategoryList.uuid)
}
#if LANG_CXX11
inline void CategoryList::add_uuid(::std::string&& value) {
  uuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aspia.proto.system_info.CategoryList.uuid)
}
#endif
inline void CategoryList::add_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aspia.proto.system_info.CategoryList.uuid)
}
inline void CategoryList::add_uuid(const char* value, size_t size) {
  uuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aspia.proto.system_info.CategoryList.uuid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CategoryList::uuid() const {
  // @@protoc_insertion_point(field_list:aspia.proto.system_info.CategoryList.uuid)
  return uuid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CategoryList::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.system_info.CategoryList.uuid)
  return &uuid_;
}

// -------------------------------------------------------------------

// CategoryRequest

// string uuid = 1;
inline void CategoryRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryRequest::uuid() const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.CategoryRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CategoryRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.CategoryRequest.uuid)
}
#if LANG_CXX11
inline void CategoryRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.system_info.CategoryRequest.uuid)
}
#endif
inline void CategoryRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.system_info.CategoryRequest.uuid)
}
inline void CategoryRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.system_info.CategoryRequest.uuid)
}
inline ::std::string* CategoryRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.CategoryRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.CategoryRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.CategoryRequest.uuid)
}

// bytes data = 2;
inline void CategoryRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryRequest::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.CategoryRequest.data)
  return data_.GetNoArena();
}
inline void CategoryRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.CategoryRequest.data)
}
#if LANG_CXX11
inline void CategoryRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.system_info.CategoryRequest.data)
}
#endif
inline void CategoryRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.system_info.CategoryRequest.data)
}
inline void CategoryRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.system_info.CategoryRequest.data)
}
inline ::std::string* CategoryRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.CategoryRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryRequest::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.CategoryRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.CategoryRequest.data)
}

// -------------------------------------------------------------------

// Category

// string uuid = 1;
inline void Category::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::uuid() const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Category.uuid)
  return uuid_.GetNoArena();
}
inline void Category::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.Category.uuid)
}
#if LANG_CXX11
inline void Category::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.system_info.Category.uuid)
}
#endif
inline void Category::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.system_info.Category.uuid)
}
inline void Category::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.system_info.Category.uuid)
}
inline ::std::string* Category::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Category.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_uuid() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Category.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Category.uuid)
}

// bytes data = 2;
inline void Category::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Category::data() const {
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Category.data)
  return data_.GetNoArena();
}
inline void Category::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.system_info.Category.data)
}
#if LANG_CXX11
inline void Category::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.system_info.Category.data)
}
#endif
inline void Category::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.system_info.Category.data)
}
inline void Category::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.system_info.Category.data)
}
inline ::std::string* Category::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Category.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_data() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Category.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Category.data)
}

// -------------------------------------------------------------------

// Request

// .aspia.proto.system_info.CategoryListRequest category_list_request = 1;
inline bool Request::has_category_list_request() const {
  return this != internal_default_instance() && category_list_request_ != NULL;
}
inline void Request::clear_category_list_request() {
  if (GetArenaNoVirtual() == NULL && category_list_request_ != NULL) {
    delete category_list_request_;
  }
  category_list_request_ = NULL;
}
inline const ::aspia::proto::system_info::CategoryListRequest& Request::_internal_category_list_request() const {
  return *category_list_request_;
}
inline const ::aspia::proto::system_info::CategoryListRequest& Request::category_list_request() const {
  const ::aspia::proto::system_info::CategoryListRequest* p = category_list_request_;
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Request.category_list_request)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::system_info::CategoryListRequest*>(
      &::aspia::proto::system_info::_CategoryListRequest_default_instance_);
}
inline ::aspia::proto::system_info::CategoryListRequest* Request::release_category_list_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Request.category_list_request)
  
  ::aspia::proto::system_info::CategoryListRequest* temp = category_list_request_;
  category_list_request_ = NULL;
  return temp;
}
inline ::aspia::proto::system_info::CategoryListRequest* Request::mutable_category_list_request() {
  
  if (category_list_request_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::system_info::CategoryListRequest>(GetArenaNoVirtual());
    category_list_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Request.category_list_request)
  return category_list_request_;
}
inline void Request::set_allocated_category_list_request(::aspia::proto::system_info::CategoryListRequest* category_list_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete category_list_request_;
  }
  if (category_list_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      category_list_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, category_list_request, submessage_arena);
    }
    
  } else {
    
  }
  category_list_request_ = category_list_request;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Request.category_list_request)
}

// .aspia.proto.system_info.CategoryRequest category_request = 2;
inline bool Request::has_category_request() const {
  return this != internal_default_instance() && category_request_ != NULL;
}
inline void Request::clear_category_request() {
  if (GetArenaNoVirtual() == NULL && category_request_ != NULL) {
    delete category_request_;
  }
  category_request_ = NULL;
}
inline const ::aspia::proto::system_info::CategoryRequest& Request::_internal_category_request() const {
  return *category_request_;
}
inline const ::aspia::proto::system_info::CategoryRequest& Request::category_request() const {
  const ::aspia::proto::system_info::CategoryRequest* p = category_request_;
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Request.category_request)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::system_info::CategoryRequest*>(
      &::aspia::proto::system_info::_CategoryRequest_default_instance_);
}
inline ::aspia::proto::system_info::CategoryRequest* Request::release_category_request() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Request.category_request)
  
  ::aspia::proto::system_info::CategoryRequest* temp = category_request_;
  category_request_ = NULL;
  return temp;
}
inline ::aspia::proto::system_info::CategoryRequest* Request::mutable_category_request() {
  
  if (category_request_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::system_info::CategoryRequest>(GetArenaNoVirtual());
    category_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Request.category_request)
  return category_request_;
}
inline void Request::set_allocated_category_request(::aspia::proto::system_info::CategoryRequest* category_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete category_request_;
  }
  if (category_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      category_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, category_request, submessage_arena);
    }
    
  } else {
    
  }
  category_request_ = category_request;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Request.category_request)
}

// -------------------------------------------------------------------

// Reply

// .aspia.proto.system_info.CategoryList category_list = 1;
inline bool Reply::has_category_list() const {
  return this != internal_default_instance() && category_list_ != NULL;
}
inline void Reply::clear_category_list() {
  if (GetArenaNoVirtual() == NULL && category_list_ != NULL) {
    delete category_list_;
  }
  category_list_ = NULL;
}
inline const ::aspia::proto::system_info::CategoryList& Reply::_internal_category_list() const {
  return *category_list_;
}
inline const ::aspia::proto::system_info::CategoryList& Reply::category_list() const {
  const ::aspia::proto::system_info::CategoryList* p = category_list_;
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Reply.category_list)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::system_info::CategoryList*>(
      &::aspia::proto::system_info::_CategoryList_default_instance_);
}
inline ::aspia::proto::system_info::CategoryList* Reply::release_category_list() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Reply.category_list)
  
  ::aspia::proto::system_info::CategoryList* temp = category_list_;
  category_list_ = NULL;
  return temp;
}
inline ::aspia::proto::system_info::CategoryList* Reply::mutable_category_list() {
  
  if (category_list_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::system_info::CategoryList>(GetArenaNoVirtual());
    category_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Reply.category_list)
  return category_list_;
}
inline void Reply::set_allocated_category_list(::aspia::proto::system_info::CategoryList* category_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete category_list_;
  }
  if (category_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      category_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, category_list, submessage_arena);
    }
    
  } else {
    
  }
  category_list_ = category_list;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Reply.category_list)
}

// .aspia.proto.system_info.Category category = 2;
inline bool Reply::has_category() const {
  return this != internal_default_instance() && category_ != NULL;
}
inline void Reply::clear_category() {
  if (GetArenaNoVirtual() == NULL && category_ != NULL) {
    delete category_;
  }
  category_ = NULL;
}
inline const ::aspia::proto::system_info::Category& Reply::_internal_category() const {
  return *category_;
}
inline const ::aspia::proto::system_info::Category& Reply::category() const {
  const ::aspia::proto::system_info::Category* p = category_;
  // @@protoc_insertion_point(field_get:aspia.proto.system_info.Reply.category)
  return p != NULL ? *p : *reinterpret_cast<const ::aspia::proto::system_info::Category*>(
      &::aspia::proto::system_info::_Category_default_instance_);
}
inline ::aspia::proto::system_info::Category* Reply::release_category() {
  // @@protoc_insertion_point(field_release:aspia.proto.system_info.Reply.category)
  
  ::aspia::proto::system_info::Category* temp = category_;
  category_ = NULL;
  return temp;
}
inline ::aspia::proto::system_info::Category* Reply::mutable_category() {
  
  if (category_ == NULL) {
    auto* p = CreateMaybeMessage<::aspia::proto::system_info::Category>(GetArenaNoVirtual());
    category_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aspia.proto.system_info.Reply.category)
  return category_;
}
inline void Reply::set_allocated_category(::aspia::proto::system_info::Category* category) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete category_;
  }
  if (category) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      category = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.system_info.Reply.category)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace system_info
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_system_5finfo_5fsession_2eproto

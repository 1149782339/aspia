// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_chassis.proto

#include "category_dmi_chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class DmiChassis_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis_Item>
      _instance;
} _DmiChassis_Item_default_instance_;
class DmiChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DmiChassis>
      _instance;
} _DmiChassis_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fdmi_5fchassis_2eproto {
void InitDefaultsDmiChassis_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_DmiChassis_Item_default_instance_;
    new (ptr) ::aspia::proto::DmiChassis_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiChassis_Item::InitAsDefaultInstance();
}

void InitDefaultsDmiChassis_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiChassis_ItemImpl);
}

void InitDefaultsDmiChassisImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis_Item();
  {
    void* ptr = &::aspia::proto::_DmiChassis_default_instance_;
    new (ptr) ::aspia::proto::DmiChassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::DmiChassis::InitAsDefaultInstance();
}

void InitDefaultsDmiChassis() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDmiChassisImpl);
}

}  // namespace protobuf_category_5fdmi_5fchassis_2eproto
namespace aspia {
namespace proto {
bool DmiChassis_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Type DmiChassis::TYPE_UNKNOWN;
const DmiChassis_Type DmiChassis::TYPE_OTHER;
const DmiChassis_Type DmiChassis::TYPE_DESKTOP;
const DmiChassis_Type DmiChassis::TYPE_LOW_PROFILE_DESKTOP;
const DmiChassis_Type DmiChassis::TYPE_PIZZA_BOX;
const DmiChassis_Type DmiChassis::TYPE_MINI_TOWER;
const DmiChassis_Type DmiChassis::TYPE_TOWER;
const DmiChassis_Type DmiChassis::TYPE_PORTABLE;
const DmiChassis_Type DmiChassis::TYPE_LAPTOP;
const DmiChassis_Type DmiChassis::TYPE_NOTEBOOK;
const DmiChassis_Type DmiChassis::TYPE_HAND_HELD;
const DmiChassis_Type DmiChassis::TYPE_DOCKING_STATION;
const DmiChassis_Type DmiChassis::TYPE_ALL_IN_ONE;
const DmiChassis_Type DmiChassis::TYPE_SUB_NOTEBOOK;
const DmiChassis_Type DmiChassis::TYPE_SPACE_SAVING;
const DmiChassis_Type DmiChassis::TYPE_LUNCH_BOX;
const DmiChassis_Type DmiChassis::TYPE_MAIN_SERVER_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_EXPANSION_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_SUB_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_BUS_EXPANSION_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_PERIPHERIAL_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_RAID_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_RACK_MOUNT_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_SEALED_CASE_PC;
const DmiChassis_Type DmiChassis::TYPE_MULTI_SYSTEM_CHASSIS;
const DmiChassis_Type DmiChassis::TYPE_COMPACT_PCI;
const DmiChassis_Type DmiChassis::TYPE_ADVANCED_TCA;
const DmiChassis_Type DmiChassis::TYPE_BLADE;
const DmiChassis_Type DmiChassis::TYPE_BLADE_ENCLOSURE;
const DmiChassis_Type DmiChassis::Type_MIN;
const DmiChassis_Type DmiChassis::Type_MAX;
const int DmiChassis::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_Status DmiChassis::STATUS_UNKNOWN;
const DmiChassis_Status DmiChassis::STATUS_OTHER;
const DmiChassis_Status DmiChassis::STATUS_SAFE;
const DmiChassis_Status DmiChassis::STATUS_WARNING;
const DmiChassis_Status DmiChassis::STATUS_CRITICAL;
const DmiChassis_Status DmiChassis::STATUS_NON_RECOVERABLE;
const DmiChassis_Status DmiChassis::Status_MIN;
const DmiChassis_Status DmiChassis::Status_MAX;
const int DmiChassis::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DmiChassis_SecurityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_UNKNOWN;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_OTHER;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_NONE;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT;
const DmiChassis_SecurityStatus DmiChassis::SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
const DmiChassis_SecurityStatus DmiChassis::SecurityStatus_MIN;
const DmiChassis_SecurityStatus DmiChassis::SecurityStatus_MAX;
const int DmiChassis::SecurityStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DmiChassis_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis_Item::kManufacturerFieldNumber;
const int DmiChassis_Item::kVersionFieldNumber;
const int DmiChassis_Item::kSerialNumberFieldNumber;
const int DmiChassis_Item::kAssetTagFieldNumber;
const int DmiChassis_Item::kTypeFieldNumber;
const int DmiChassis_Item::kOsLoadStatusFieldNumber;
const int DmiChassis_Item::kPowerSourceStatusFieldNumber;
const int DmiChassis_Item::kTemparatureStatusFieldNumber;
const int DmiChassis_Item::kSecurityStatusFieldNumber;
const int DmiChassis_Item::kHeightFieldNumber;
const int DmiChassis_Item::kNumberOfPowerCordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis_Item::DmiChassis_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiChassis.Item)
}
DmiChassis_Item::DmiChassis_Item(const DmiChassis_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_power_cords_) -
    reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiChassis.Item)
}

void DmiChassis_Item::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _cached_size_ = 0;
}

DmiChassis_Item::~DmiChassis_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiChassis.Item)
  SharedDtor();
}

void DmiChassis_Item::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DmiChassis_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis_Item& DmiChassis_Item::default_instance() {
  ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis_Item();
  return *internal_default_instance();
}

DmiChassis_Item* DmiChassis_Item::New(::google::protobuf::Arena* arena) const {
  DmiChassis_Item* n = new DmiChassis_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _internal_metadata_.Clear();
}

bool DmiChassis_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiChassis.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.DmiChassis.Item.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::DmiChassis_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status os_load_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_load_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status power_source_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_source_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.Status temparature_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_temparature_status(static_cast< ::aspia::proto::DmiChassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_security_status(static_cast< ::aspia::proto::DmiChassis_SecurityStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_of_power_cords = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_power_cords_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiChassis.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiChassis.Item)
  return false;
#undef DO_
}

void DmiChassis_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiChassis.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serial_number(), output);
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.DmiChassis.Item.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset_tag(), output);
  }

  // .aspia.proto.DmiChassis.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .aspia.proto.DmiChassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->os_load_status(), output);
  }

  // .aspia.proto.DmiChassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->power_source_status(), output);
  }

  // .aspia.proto.DmiChassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->temparature_status(), output);
  }

  // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->security_status(), output);
  }

  // int32 height = 10;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->number_of_power_cords(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiChassis.Item)
}

size_t DmiChassis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiChassis.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // .aspia.proto.DmiChassis.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.proto.DmiChassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_load_status());
  }

  // .aspia.proto.DmiChassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_source_status());
  }

  // .aspia.proto.DmiChassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->temparature_status());
  }

  // .aspia.proto.DmiChassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_status());
  }

  // int32 height = 10;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_power_cords());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis_Item*>(&from));
}

void DmiChassis_Item::MergeFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiChassis.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.os_load_status() != 0) {
    set_os_load_status(from.os_load_status());
  }
  if (from.power_source_status() != 0) {
    set_power_source_status(from.power_source_status());
  }
  if (from.temparature_status() != 0) {
    set_temparature_status(from.temparature_status());
  }
  if (from.security_status() != 0) {
    set_security_status(from.security_status());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.number_of_power_cords() != 0) {
    set_number_of_power_cords(from.number_of_power_cords());
  }
}

void DmiChassis_Item::CopyFrom(const DmiChassis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiChassis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis_Item::IsInitialized() const {
  return true;
}

void DmiChassis_Item::Swap(DmiChassis_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis_Item::InternalSwap(DmiChassis_Item* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_);
  version_.Swap(&other->version_);
  serial_number_.Swap(&other->serial_number_);
  asset_tag_.Swap(&other->asset_tag_);
  swap(type_, other->type_);
  swap(os_load_status_, other->os_load_status_);
  swap(power_source_status_, other->power_source_status_);
  swap(temparature_status_, other->temparature_status_);
  swap(security_status_, other->security_status_);
  swap(height_, other->height_);
  swap(number_of_power_cords_, other->number_of_power_cords_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis_Item::GetTypeName() const {
  return "aspia.proto.DmiChassis.Item";
}


// ===================================================================

void DmiChassis::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DmiChassis::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DmiChassis::DmiChassis()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.DmiChassis)
}
DmiChassis::DmiChassis(const DmiChassis& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.DmiChassis)
}

void DmiChassis::SharedCtor() {
  _cached_size_ = 0;
}

DmiChassis::~DmiChassis() {
  // @@protoc_insertion_point(destructor:aspia.proto.DmiChassis)
  SharedDtor();
}

void DmiChassis::SharedDtor() {
}

void DmiChassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DmiChassis& DmiChassis::default_instance() {
  ::protobuf_category_5fdmi_5fchassis_2eproto::InitDefaultsDmiChassis();
  return *internal_default_instance();
}

DmiChassis* DmiChassis::New(::google::protobuf::Arena* arena) const {
  DmiChassis* n = new DmiChassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DmiChassis::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool DmiChassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.DmiChassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.DmiChassis.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.DmiChassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.DmiChassis)
  return false;
#undef DO_
}

void DmiChassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.DmiChassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.DmiChassis.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.DmiChassis)
}

size_t DmiChassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.DmiChassis)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.DmiChassis.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DmiChassis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DmiChassis*>(&from));
}

void DmiChassis::MergeFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.DmiChassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void DmiChassis::CopyFrom(const DmiChassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.DmiChassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmiChassis::IsInitialized() const {
  return true;
}

void DmiChassis::Swap(DmiChassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DmiChassis::InternalSwap(DmiChassis* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DmiChassis::GetTypeName() const {
  return "aspia.proto.DmiChassis";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

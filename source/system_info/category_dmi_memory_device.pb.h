// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_memory_device.proto

#ifndef PROTOBUF_category_5fdmi_5fmemory_5fdevice_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fmemory_5fdevice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fmemory_5fdevice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiMemoryDevice_ItemImpl();
void InitDefaultsDmiMemoryDevice_Item();
void InitDefaultsDmiMemoryDeviceImpl();
void InitDefaultsDmiMemoryDevice();
inline void InitDefaults() {
  InitDefaultsDmiMemoryDevice_Item();
  InitDefaultsDmiMemoryDevice();
}
}  // namespace protobuf_category_5fdmi_5fmemory_5fdevice_2eproto
namespace aspia {
namespace proto {
class DmiMemoryDevice;
class DmiMemoryDeviceDefaultTypeInternal;
extern DmiMemoryDeviceDefaultTypeInternal _DmiMemoryDevice_default_instance_;
class DmiMemoryDevice_Item;
class DmiMemoryDevice_ItemDefaultTypeInternal;
extern DmiMemoryDevice_ItemDefaultTypeInternal _DmiMemoryDevice_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum DmiMemoryDevice_Type {
  DmiMemoryDevice_Type_TYPE_UNKNOWN = 0,
  DmiMemoryDevice_Type_TYPE_OTHER = 1,
  DmiMemoryDevice_Type_TYPE_DRAM = 2,
  DmiMemoryDevice_Type_TYPE_EDRAM = 3,
  DmiMemoryDevice_Type_TYPE_VRAM = 4,
  DmiMemoryDevice_Type_TYPE_SRAM = 5,
  DmiMemoryDevice_Type_TYPE_RAM = 6,
  DmiMemoryDevice_Type_TYPE_ROM = 7,
  DmiMemoryDevice_Type_TYPE_FLASH = 8,
  DmiMemoryDevice_Type_TYPE_EEPROM = 9,
  DmiMemoryDevice_Type_TYPE_FEPROM = 10,
  DmiMemoryDevice_Type_TYPE_EPROM = 11,
  DmiMemoryDevice_Type_TYPE_CDRAM = 12,
  DmiMemoryDevice_Type_TYPE_3DRAM = 13,
  DmiMemoryDevice_Type_TYPE_SDRAM = 14,
  DmiMemoryDevice_Type_TYPE_SGRAM = 15,
  DmiMemoryDevice_Type_TYPE_RDRAM = 16,
  DmiMemoryDevice_Type_TYPE_DDR = 17,
  DmiMemoryDevice_Type_TYPE_DDR2 = 18,
  DmiMemoryDevice_Type_TYPE_DDR2_FB_DIMM = 19,
  DmiMemoryDevice_Type_TYPE_DDR3 = 20,
  DmiMemoryDevice_Type_TYPE_FBD2 = 21,
  DmiMemoryDevice_Type_TYPE_DDR4 = 22,
  DmiMemoryDevice_Type_TYPE_LPDDR = 23,
  DmiMemoryDevice_Type_TYPE_LPDDR2 = 24,
  DmiMemoryDevice_Type_TYPE_LPDDR3 = 25,
  DmiMemoryDevice_Type_TYPE_LPDDR4 = 26,
  DmiMemoryDevice_Type_DmiMemoryDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiMemoryDevice_Type_DmiMemoryDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiMemoryDevice_Type_IsValid(int value);
const DmiMemoryDevice_Type DmiMemoryDevice_Type_Type_MIN = DmiMemoryDevice_Type_TYPE_UNKNOWN;
const DmiMemoryDevice_Type DmiMemoryDevice_Type_Type_MAX = DmiMemoryDevice_Type_TYPE_LPDDR4;
const int DmiMemoryDevice_Type_Type_ARRAYSIZE = DmiMemoryDevice_Type_Type_MAX + 1;

enum DmiMemoryDevice_FormFactor {
  DmiMemoryDevice_FormFactor_FORM_FACTOR_UNKNOWN = 0,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_OTHER = 1,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_SIMM = 2,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_SIP = 3,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_CHIP = 4,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_DIP = 5,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_ZIP = 6,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_PROPRIETARY_CARD = 7,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_DIMM = 8,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_TSOP = 9,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_ROW_OF_CHIPS = 10,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_RIMM = 11,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_SODIMM = 12,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_SRIMM = 13,
  DmiMemoryDevice_FormFactor_FORM_FACTOR_FB_DIMM = 14,
  DmiMemoryDevice_FormFactor_DmiMemoryDevice_FormFactor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiMemoryDevice_FormFactor_DmiMemoryDevice_FormFactor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiMemoryDevice_FormFactor_IsValid(int value);
const DmiMemoryDevice_FormFactor DmiMemoryDevice_FormFactor_FormFactor_MIN = DmiMemoryDevice_FormFactor_FORM_FACTOR_UNKNOWN;
const DmiMemoryDevice_FormFactor DmiMemoryDevice_FormFactor_FormFactor_MAX = DmiMemoryDevice_FormFactor_FORM_FACTOR_FB_DIMM;
const int DmiMemoryDevice_FormFactor_FormFactor_ARRAYSIZE = DmiMemoryDevice_FormFactor_FormFactor_MAX + 1;

// ===================================================================

class DmiMemoryDevice_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiMemoryDevice.Item) */ {
 public:
  DmiMemoryDevice_Item();
  virtual ~DmiMemoryDevice_Item();

  DmiMemoryDevice_Item(const DmiMemoryDevice_Item& from);

  inline DmiMemoryDevice_Item& operator=(const DmiMemoryDevice_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiMemoryDevice_Item(DmiMemoryDevice_Item&& from) noexcept
    : DmiMemoryDevice_Item() {
    *this = ::std::move(from);
  }

  inline DmiMemoryDevice_Item& operator=(DmiMemoryDevice_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiMemoryDevice_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiMemoryDevice_Item* internal_default_instance() {
    return reinterpret_cast<const DmiMemoryDevice_Item*>(
               &_DmiMemoryDevice_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiMemoryDevice_Item* other);
  friend void swap(DmiMemoryDevice_Item& a, DmiMemoryDevice_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiMemoryDevice_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiMemoryDevice_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiMemoryDevice_Item& from);
  void MergeFrom(const DmiMemoryDevice_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiMemoryDevice_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_locator = 1;
  void clear_device_locator();
  static const int kDeviceLocatorFieldNumber = 1;
  const ::std::string& device_locator() const;
  void set_device_locator(const ::std::string& value);
  #if LANG_CXX11
  void set_device_locator(::std::string&& value);
  #endif
  void set_device_locator(const char* value);
  void set_device_locator(const char* value, size_t size);
  ::std::string* mutable_device_locator();
  ::std::string* release_device_locator();
  void set_allocated_device_locator(::std::string* device_locator);

  // string serial_number = 6;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 6;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string part_number = 7;
  void clear_part_number();
  static const int kPartNumberFieldNumber = 7;
  const ::std::string& part_number() const;
  void set_part_number(const ::std::string& value);
  #if LANG_CXX11
  void set_part_number(::std::string&& value);
  #endif
  void set_part_number(const char* value);
  void set_part_number(const char* value, size_t size);
  ::std::string* mutable_part_number();
  ::std::string* release_part_number();
  void set_allocated_part_number(::std::string* part_number);

  // string manufactorer = 8;
  void clear_manufactorer();
  static const int kManufactorerFieldNumber = 8;
  const ::std::string& manufactorer() const;
  void set_manufactorer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufactorer(::std::string&& value);
  #endif
  void set_manufactorer(const char* value);
  void set_manufactorer(const char* value, size_t size);
  ::std::string* mutable_manufactorer();
  ::std::string* release_manufactorer();
  void set_allocated_manufactorer(::std::string* manufactorer);

  // string bank = 9;
  void clear_bank();
  static const int kBankFieldNumber = 9;
  const ::std::string& bank() const;
  void set_bank(const ::std::string& value);
  #if LANG_CXX11
  void set_bank(::std::string&& value);
  #endif
  void set_bank(const char* value);
  void set_bank(const char* value, size_t size);
  ::std::string* mutable_bank();
  ::std::string* release_bank();
  void set_allocated_bank(::std::string* bank);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // .aspia.proto.DmiMemoryDevice.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::aspia::proto::DmiMemoryDevice_Type type() const;
  void set_type(::aspia::proto::DmiMemoryDevice_Type value);

  // int32 speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // .aspia.proto.DmiMemoryDevice.FormFactor form_factor = 5;
  void clear_form_factor();
  static const int kFormFactorFieldNumber = 5;
  ::aspia::proto::DmiMemoryDevice_FormFactor form_factor() const;
  void set_form_factor(::aspia::proto::DmiMemoryDevice_FormFactor value);

  // int32 total_width = 10;
  void clear_total_width();
  static const int kTotalWidthFieldNumber = 10;
  ::google::protobuf::int32 total_width() const;
  void set_total_width(::google::protobuf::int32 value);

  // int32 data_width = 11;
  void clear_data_width();
  static const int kDataWidthFieldNumber = 11;
  ::google::protobuf::int32 data_width() const;
  void set_data_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiMemoryDevice.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_locator_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr part_number_;
  ::google::protobuf::internal::ArenaStringPtr manufactorer_;
  ::google::protobuf::internal::ArenaStringPtr bank_;
  ::google::protobuf::uint64 size_;
  int type_;
  ::google::protobuf::int32 speed_;
  int form_factor_;
  ::google::protobuf::int32 total_width_;
  ::google::protobuf::int32 data_width_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fmemory_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fmemory_5fdevice_2eproto::InitDefaultsDmiMemoryDevice_ItemImpl();
};
// -------------------------------------------------------------------

class DmiMemoryDevice : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiMemoryDevice) */ {
 public:
  DmiMemoryDevice();
  virtual ~DmiMemoryDevice();

  DmiMemoryDevice(const DmiMemoryDevice& from);

  inline DmiMemoryDevice& operator=(const DmiMemoryDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiMemoryDevice(DmiMemoryDevice&& from) noexcept
    : DmiMemoryDevice() {
    *this = ::std::move(from);
  }

  inline DmiMemoryDevice& operator=(DmiMemoryDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiMemoryDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiMemoryDevice* internal_default_instance() {
    return reinterpret_cast<const DmiMemoryDevice*>(
               &_DmiMemoryDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiMemoryDevice* other);
  friend void swap(DmiMemoryDevice& a, DmiMemoryDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiMemoryDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiMemoryDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiMemoryDevice& from);
  void MergeFrom(const DmiMemoryDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiMemoryDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiMemoryDevice_Item Item;

  typedef DmiMemoryDevice_Type Type;
  static const Type TYPE_UNKNOWN =
    DmiMemoryDevice_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    DmiMemoryDevice_Type_TYPE_OTHER;
  static const Type TYPE_DRAM =
    DmiMemoryDevice_Type_TYPE_DRAM;
  static const Type TYPE_EDRAM =
    DmiMemoryDevice_Type_TYPE_EDRAM;
  static const Type TYPE_VRAM =
    DmiMemoryDevice_Type_TYPE_VRAM;
  static const Type TYPE_SRAM =
    DmiMemoryDevice_Type_TYPE_SRAM;
  static const Type TYPE_RAM =
    DmiMemoryDevice_Type_TYPE_RAM;
  static const Type TYPE_ROM =
    DmiMemoryDevice_Type_TYPE_ROM;
  static const Type TYPE_FLASH =
    DmiMemoryDevice_Type_TYPE_FLASH;
  static const Type TYPE_EEPROM =
    DmiMemoryDevice_Type_TYPE_EEPROM;
  static const Type TYPE_FEPROM =
    DmiMemoryDevice_Type_TYPE_FEPROM;
  static const Type TYPE_EPROM =
    DmiMemoryDevice_Type_TYPE_EPROM;
  static const Type TYPE_CDRAM =
    DmiMemoryDevice_Type_TYPE_CDRAM;
  static const Type TYPE_3DRAM =
    DmiMemoryDevice_Type_TYPE_3DRAM;
  static const Type TYPE_SDRAM =
    DmiMemoryDevice_Type_TYPE_SDRAM;
  static const Type TYPE_SGRAM =
    DmiMemoryDevice_Type_TYPE_SGRAM;
  static const Type TYPE_RDRAM =
    DmiMemoryDevice_Type_TYPE_RDRAM;
  static const Type TYPE_DDR =
    DmiMemoryDevice_Type_TYPE_DDR;
  static const Type TYPE_DDR2 =
    DmiMemoryDevice_Type_TYPE_DDR2;
  static const Type TYPE_DDR2_FB_DIMM =
    DmiMemoryDevice_Type_TYPE_DDR2_FB_DIMM;
  static const Type TYPE_DDR3 =
    DmiMemoryDevice_Type_TYPE_DDR3;
  static const Type TYPE_FBD2 =
    DmiMemoryDevice_Type_TYPE_FBD2;
  static const Type TYPE_DDR4 =
    DmiMemoryDevice_Type_TYPE_DDR4;
  static const Type TYPE_LPDDR =
    DmiMemoryDevice_Type_TYPE_LPDDR;
  static const Type TYPE_LPDDR2 =
    DmiMemoryDevice_Type_TYPE_LPDDR2;
  static const Type TYPE_LPDDR3 =
    DmiMemoryDevice_Type_TYPE_LPDDR3;
  static const Type TYPE_LPDDR4 =
    DmiMemoryDevice_Type_TYPE_LPDDR4;
  static inline bool Type_IsValid(int value) {
    return DmiMemoryDevice_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DmiMemoryDevice_Type_Type_MIN;
  static const Type Type_MAX =
    DmiMemoryDevice_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DmiMemoryDevice_Type_Type_ARRAYSIZE;

  typedef DmiMemoryDevice_FormFactor FormFactor;
  static const FormFactor FORM_FACTOR_UNKNOWN =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_UNKNOWN;
  static const FormFactor FORM_FACTOR_OTHER =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_OTHER;
  static const FormFactor FORM_FACTOR_SIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_SIMM;
  static const FormFactor FORM_FACTOR_SIP =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_SIP;
  static const FormFactor FORM_FACTOR_CHIP =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_CHIP;
  static const FormFactor FORM_FACTOR_DIP =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_DIP;
  static const FormFactor FORM_FACTOR_ZIP =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_ZIP;
  static const FormFactor FORM_FACTOR_PROPRIETARY_CARD =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_PROPRIETARY_CARD;
  static const FormFactor FORM_FACTOR_DIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_DIMM;
  static const FormFactor FORM_FACTOR_TSOP =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_TSOP;
  static const FormFactor FORM_FACTOR_ROW_OF_CHIPS =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_ROW_OF_CHIPS;
  static const FormFactor FORM_FACTOR_RIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_RIMM;
  static const FormFactor FORM_FACTOR_SODIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_SODIMM;
  static const FormFactor FORM_FACTOR_SRIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_SRIMM;
  static const FormFactor FORM_FACTOR_FB_DIMM =
    DmiMemoryDevice_FormFactor_FORM_FACTOR_FB_DIMM;
  static inline bool FormFactor_IsValid(int value) {
    return DmiMemoryDevice_FormFactor_IsValid(value);
  }
  static const FormFactor FormFactor_MIN =
    DmiMemoryDevice_FormFactor_FormFactor_MIN;
  static const FormFactor FormFactor_MAX =
    DmiMemoryDevice_FormFactor_FormFactor_MAX;
  static const int FormFactor_ARRAYSIZE =
    DmiMemoryDevice_FormFactor_FormFactor_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DmiMemoryDevice.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DmiMemoryDevice_Item& item(int index) const;
  ::aspia::proto::DmiMemoryDevice_Item* mutable_item(int index);
  ::aspia::proto::DmiMemoryDevice_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiMemoryDevice_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiMemoryDevice_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiMemoryDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiMemoryDevice_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fmemory_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fmemory_5fdevice_2eproto::InitDefaultsDmiMemoryDeviceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiMemoryDevice_Item

// string device_locator = 1;
inline void DmiMemoryDevice_Item::clear_device_locator() {
  device_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiMemoryDevice_Item::device_locator() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.device_locator)
  return device_locator_.GetNoArena();
}
inline void DmiMemoryDevice_Item::set_device_locator(const ::std::string& value) {
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.device_locator)
}
#if LANG_CXX11
inline void DmiMemoryDevice_Item::set_device_locator(::std::string&& value) {
  
  device_locator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiMemoryDevice.Item.device_locator)
}
#endif
inline void DmiMemoryDevice_Item::set_device_locator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiMemoryDevice.Item.device_locator)
}
inline void DmiMemoryDevice_Item::set_device_locator(const char* value, size_t size) {
  
  device_locator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiMemoryDevice.Item.device_locator)
}
inline ::std::string* DmiMemoryDevice_Item::mutable_device_locator() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.Item.device_locator)
  return device_locator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiMemoryDevice_Item::release_device_locator() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiMemoryDevice.Item.device_locator)
  
  return device_locator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiMemoryDevice_Item::set_allocated_device_locator(::std::string* device_locator) {
  if (device_locator != NULL) {
    
  } else {
    
  }
  device_locator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_locator);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiMemoryDevice.Item.device_locator)
}

// uint64 size = 2;
inline void DmiMemoryDevice_Item::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DmiMemoryDevice_Item::size() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.size)
  return size_;
}
inline void DmiMemoryDevice_Item::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.size)
}

// .aspia.proto.DmiMemoryDevice.Type type = 3;
inline void DmiMemoryDevice_Item::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DmiMemoryDevice_Type DmiMemoryDevice_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.type)
  return static_cast< ::aspia::proto::DmiMemoryDevice_Type >(type_);
}
inline void DmiMemoryDevice_Item::set_type(::aspia::proto::DmiMemoryDevice_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.type)
}

// int32 speed = 4;
inline void DmiMemoryDevice_Item::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 DmiMemoryDevice_Item::speed() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.speed)
  return speed_;
}
inline void DmiMemoryDevice_Item::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.speed)
}

// .aspia.proto.DmiMemoryDevice.FormFactor form_factor = 5;
inline void DmiMemoryDevice_Item::clear_form_factor() {
  form_factor_ = 0;
}
inline ::aspia::proto::DmiMemoryDevice_FormFactor DmiMemoryDevice_Item::form_factor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.form_factor)
  return static_cast< ::aspia::proto::DmiMemoryDevice_FormFactor >(form_factor_);
}
inline void DmiMemoryDevice_Item::set_form_factor(::aspia::proto::DmiMemoryDevice_FormFactor value) {
  
  form_factor_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.form_factor)
}

// string serial_number = 6;
inline void DmiMemoryDevice_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiMemoryDevice_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.serial_number)
  return serial_number_.GetNoArena();
}
inline void DmiMemoryDevice_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.serial_number)
}
#if LANG_CXX11
inline void DmiMemoryDevice_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiMemoryDevice.Item.serial_number)
}
#endif
inline void DmiMemoryDevice_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiMemoryDevice.Item.serial_number)
}
inline void DmiMemoryDevice_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiMemoryDevice.Item.serial_number)
}
inline ::std::string* DmiMemoryDevice_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiMemoryDevice_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiMemoryDevice.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiMemoryDevice_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiMemoryDevice.Item.serial_number)
}

// string part_number = 7;
inline void DmiMemoryDevice_Item::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiMemoryDevice_Item::part_number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.part_number)
  return part_number_.GetNoArena();
}
inline void DmiMemoryDevice_Item::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.part_number)
}
#if LANG_CXX11
inline void DmiMemoryDevice_Item::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiMemoryDevice.Item.part_number)
}
#endif
inline void DmiMemoryDevice_Item::set_part_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiMemoryDevice.Item.part_number)
}
inline void DmiMemoryDevice_Item::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiMemoryDevice.Item.part_number)
}
inline ::std::string* DmiMemoryDevice_Item::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.Item.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiMemoryDevice_Item::release_part_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiMemoryDevice.Item.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiMemoryDevice_Item::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiMemoryDevice.Item.part_number)
}

// string manufactorer = 8;
inline void DmiMemoryDevice_Item::clear_manufactorer() {
  manufactorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiMemoryDevice_Item::manufactorer() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.manufactorer)
  return manufactorer_.GetNoArena();
}
inline void DmiMemoryDevice_Item::set_manufactorer(const ::std::string& value) {
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.manufactorer)
}
#if LANG_CXX11
inline void DmiMemoryDevice_Item::set_manufactorer(::std::string&& value) {
  
  manufactorer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiMemoryDevice.Item.manufactorer)
}
#endif
inline void DmiMemoryDevice_Item::set_manufactorer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiMemoryDevice.Item.manufactorer)
}
inline void DmiMemoryDevice_Item::set_manufactorer(const char* value, size_t size) {
  
  manufactorer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiMemoryDevice.Item.manufactorer)
}
inline ::std::string* DmiMemoryDevice_Item::mutable_manufactorer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.Item.manufactorer)
  return manufactorer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiMemoryDevice_Item::release_manufactorer() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiMemoryDevice.Item.manufactorer)
  
  return manufactorer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiMemoryDevice_Item::set_allocated_manufactorer(::std::string* manufactorer) {
  if (manufactorer != NULL) {
    
  } else {
    
  }
  manufactorer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufactorer);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiMemoryDevice.Item.manufactorer)
}

// string bank = 9;
inline void DmiMemoryDevice_Item::clear_bank() {
  bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiMemoryDevice_Item::bank() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.bank)
  return bank_.GetNoArena();
}
inline void DmiMemoryDevice_Item::set_bank(const ::std::string& value) {
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.bank)
}
#if LANG_CXX11
inline void DmiMemoryDevice_Item::set_bank(::std::string&& value) {
  
  bank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiMemoryDevice.Item.bank)
}
#endif
inline void DmiMemoryDevice_Item::set_bank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiMemoryDevice.Item.bank)
}
inline void DmiMemoryDevice_Item::set_bank(const char* value, size_t size) {
  
  bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiMemoryDevice.Item.bank)
}
inline ::std::string* DmiMemoryDevice_Item::mutable_bank() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.Item.bank)
  return bank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiMemoryDevice_Item::release_bank() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiMemoryDevice.Item.bank)
  
  return bank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiMemoryDevice_Item::set_allocated_bank(::std::string* bank) {
  if (bank != NULL) {
    
  } else {
    
  }
  bank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiMemoryDevice.Item.bank)
}

// int32 total_width = 10;
inline void DmiMemoryDevice_Item::clear_total_width() {
  total_width_ = 0;
}
inline ::google::protobuf::int32 DmiMemoryDevice_Item::total_width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.total_width)
  return total_width_;
}
inline void DmiMemoryDevice_Item::set_total_width(::google::protobuf::int32 value) {
  
  total_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.total_width)
}

// int32 data_width = 11;
inline void DmiMemoryDevice_Item::clear_data_width() {
  data_width_ = 0;
}
inline ::google::protobuf::int32 DmiMemoryDevice_Item::data_width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.Item.data_width)
  return data_width_;
}
inline void DmiMemoryDevice_Item::set_data_width(::google::protobuf::int32 value) {
  
  data_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiMemoryDevice.Item.data_width)
}

// -------------------------------------------------------------------

// DmiMemoryDevice

// repeated .aspia.proto.DmiMemoryDevice.Item item = 1;
inline int DmiMemoryDevice::item_size() const {
  return item_.size();
}
inline void DmiMemoryDevice::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DmiMemoryDevice_Item& DmiMemoryDevice::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiMemoryDevice.item)
  return item_.Get(index);
}
inline ::aspia::proto::DmiMemoryDevice_Item* DmiMemoryDevice::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiMemoryDevice.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DmiMemoryDevice_Item* DmiMemoryDevice::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DmiMemoryDevice.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiMemoryDevice_Item >*
DmiMemoryDevice::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DmiMemoryDevice.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiMemoryDevice_Item >&
DmiMemoryDevice::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DmiMemoryDevice.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DmiMemoryDevice_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiMemoryDevice_FormFactor> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fmemory_5fdevice_2eproto__INCLUDED

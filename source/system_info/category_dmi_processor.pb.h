// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_dmi_processor.proto

#ifndef PROTOBUF_category_5fdmi_5fprocessor_2eproto__INCLUDED
#define PROTOBUF_category_5fdmi_5fprocessor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fdmi_5fprocessor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDmiProcessors_ItemImpl();
void InitDefaultsDmiProcessors_Item();
void InitDefaultsDmiProcessorsImpl();
void InitDefaultsDmiProcessors();
inline void InitDefaults() {
  InitDefaultsDmiProcessors_Item();
  InitDefaultsDmiProcessors();
}
}  // namespace protobuf_category_5fdmi_5fprocessor_2eproto
namespace aspia {
namespace proto {
class DmiProcessors;
class DmiProcessorsDefaultTypeInternal;
extern DmiProcessorsDefaultTypeInternal _DmiProcessors_default_instance_;
class DmiProcessors_Item;
class DmiProcessors_ItemDefaultTypeInternal;
extern DmiProcessors_ItemDefaultTypeInternal _DmiProcessors_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum DmiProcessors_Family {
  DmiProcessors_Family_FAMILY_UNKNOWN = 0,
  DmiProcessors_Family_FAMILY_OTHER = 1,
  DmiProcessors_Family_FAMILY_8086 = 2,
  DmiProcessors_Family_FAMILY_80286 = 3,
  DmiProcessors_Family_FAMILY_INTEL_386_PROCESSOR = 4,
  DmiProcessors_Family_FAMILY_INTEL_486_PROCESSOR = 5,
  DmiProcessors_Family_FAMILY_8087 = 6,
  DmiProcessors_Family_FAMILY_80287 = 7,
  DmiProcessors_Family_FAMILY_80387 = 8,
  DmiProcessors_Family_FAMILY_80487 = 9,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PROCESSOR = 10,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PRO_PROCESSOR = 11,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_2_PROCESSOR = 12,
  DmiProcessors_Family_FAMILY_PENTIUM_PROCESSOR_WITH_MMX = 13,
  DmiProcessors_Family_FAMILY_INTEL_CELERON_PROCESSOR = 14,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_2_XEON_PROCESSOR = 15,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_PROCESSOR = 16,
  DmiProcessors_Family_FAMILY_M1_FAMILY = 17,
  DmiProcessors_Family_FAMILY_M2_FAMILY = 18,
  DmiProcessors_Family_FAMILY_INTEL_CELEROM_M_PROCESSOR = 19,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR = 20,
  DmiProcessors_Family_FAMILY_AMD_DURON_PROCESSOR_FAMILY = 21,
  DmiProcessors_Family_FAMILY_AMD_K5_FAMILY = 22,
  DmiProcessors_Family_FAMILY_AMD_K6_FAMILY = 23,
  DmiProcessors_Family_FAMILY_AMD_K6_2 = 24,
  DmiProcessors_Family_FAMILY_AMD_K6_3 = 25,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_PROCESSOR_FAMILY = 26,
  DmiProcessors_Family_FAMILY_AMD_29000_FAMILY = 27,
  DmiProcessors_Family_FAMILY_AMD_K6_2_PLUS = 28,
  DmiProcessors_Family_FAMILY_POWER_PC_FAMILY = 29,
  DmiProcessors_Family_FAMILY_POWER_PC_601 = 30,
  DmiProcessors_Family_FAMILY_POWER_PC_603 = 31,
  DmiProcessors_Family_FAMILY_POWER_PC_603_PLUS = 32,
  DmiProcessors_Family_FAMILY_POWER_PC_604 = 33,
  DmiProcessors_Family_FAMILY_POWER_PC_620 = 34,
  DmiProcessors_Family_FAMILY_POWER_PC_X704 = 35,
  DmiProcessors_Family_FAMILY_POWER_PC_750 = 36,
  DmiProcessors_Family_FAMILY_INTEL_CORE_DUO_PROCESSOR = 37,
  DmiProcessors_Family_FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR = 38,
  DmiProcessors_Family_FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR = 39,
  DmiProcessors_Family_FAMILY_INTEL_ATOM_PROCESSOR = 40,
  DmiProcessors_Family_FAMILY_INTEL_CORE_M_PROCESSOR = 41,
  DmiProcessors_Family_FAMILY_INTEL_CORE_M3_PROCESSOR = 42,
  DmiProcessors_Family_FAMILY_INTEL_CORE_M5_PROCESSOR = 43,
  DmiProcessors_Family_FAMILY_INTEL_CORE_M7_PROCESSOR = 44,
  DmiProcessors_Family_FAMILY_ALPHA_FAMILY = 45,
  DmiProcessors_Family_FAMILY_ALPHA_21064 = 46,
  DmiProcessors_Family_FAMILY_ALPHA_21066 = 47,
  DmiProcessors_Family_FAMILY_ALPHA_21164 = 48,
  DmiProcessors_Family_FAMILY_ALPHA_21164PC = 49,
  DmiProcessors_Family_FAMILY_ALPHA_21164A = 50,
  DmiProcessors_Family_FAMILY_ALPHA_21264 = 51,
  DmiProcessors_Family_FAMILY_ALPHA_21364 = 52,
  DmiProcessors_Family_FAMILY_AMD_TURION_2_ULTRA_DUAL_CORE_MOBILE_M_FAMILY = 53,
  DmiProcessors_Family_FAMILY_AMD_TURION_2_DUAL_CORE_MOBILE_M_FAMILY = 54,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_2_DUAL_CORE_M_FAMILY = 55,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR = 56,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR = 57,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR = 58,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR = 59,
  DmiProcessors_Family_FAMILY_AMD_FX_SERIES_PROCESSOR = 60,
  DmiProcessors_Family_FAMILY_MIPS_FAMILY = 61,
  DmiProcessors_Family_FAMILY_MIPS_R4000 = 62,
  DmiProcessors_Family_FAMILY_MIPS_R4200 = 63,
  DmiProcessors_Family_FAMILY_MIPS_R4400 = 64,
  DmiProcessors_Family_FAMILY_MIPS_R4600 = 65,
  DmiProcessors_Family_FAMILY_MIPS_R10000 = 66,
  DmiProcessors_Family_FAMILY_AMD_C_SERIES_PROCESSOR = 67,
  DmiProcessors_Family_FAMILY_AMD_E_SERIES_PROCESSOR = 68,
  DmiProcessors_Family_FAMILY_AMD_A_SERIES_PROCESSOR = 69,
  DmiProcessors_Family_FAMILY_AMD_G_SERIES_PROCESSOR = 70,
  DmiProcessors_Family_FAMILY_AMD_Z_SERIES_PROCESSOR = 71,
  DmiProcessors_Family_FAMILY_AMD_R_SERIES_PROCESSOR = 72,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR = 73,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR = 74,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR = 75,
  DmiProcessors_Family_FAMILY_AMD_FIREPRO_SERIES_PROCESSOR = 76,
  DmiProcessors_Family_FAMILY_SPARC_FAMILY = 77,
  DmiProcessors_Family_FAMILY_SUPER_SPARC = 78,
  DmiProcessors_Family_FAMILY_MICRO_SPARC_2 = 79,
  DmiProcessors_Family_FAMILY_MICRO_SPARC_2EP = 80,
  DmiProcessors_Family_FAMILY_ULTRA_SPARC = 81,
  DmiProcessors_Family_FAMILY_ULTRA_SPARC_2 = 82,
  DmiProcessors_Family_FAMILY_ULTRA_SPARC_2I = 83,
  DmiProcessors_Family_FAMILY_ULTRA_SPARC_3 = 84,
  DmiProcessors_Family_FAMILY_ULTRA_SPARC_3I = 85,
  DmiProcessors_Family_FAMILY_68040_FAMILY = 86,
  DmiProcessors_Family_FAMILY_68XXX = 87,
  DmiProcessors_Family_FAMILY_68000 = 88,
  DmiProcessors_Family_FAMILY_68010 = 89,
  DmiProcessors_Family_FAMILY_68020 = 90,
  DmiProcessors_Family_FAMILY_68030 = 91,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY = 92,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR = 93,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_X2000_SERIES_APU = 94,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR = 95,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_X3000_SERIES_APU = 96,
  DmiProcessors_Family_FAMILY_AMD_ZEN_PROCESSOR_FAMILY = 97,
  DmiProcessors_Family_FAMILY_HOBBIT_FAMILY = 98,
  DmiProcessors_Family_FAMILY_CRUSOE_TM5000_FAMILY = 99,
  DmiProcessors_Family_FAMILY_CRUSOE_TM3000_FAMILY = 100,
  DmiProcessors_Family_FAMILY_EFFICEON_TM8000_FAMILY = 101,
  DmiProcessors_Family_FAMILY_WEITEK = 102,
  DmiProcessors_Family_FAMILY_INTEL_ITANIUM_PROCESSOR = 103,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY = 104,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_PROCESSOR_FAMILY = 105,
  DmiProcessors_Family_FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY = 106,
  DmiProcessors_Family_FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY = 107,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_DUAL_CORE_PROCESSOR_FAMILY = 108,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY = 109,
  DmiProcessors_Family_FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY = 110,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY = 111,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_THIRD_GEN_PROCESSOR_FAMILY = 112,
  DmiProcessors_Family_FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY = 113,
  DmiProcessors_Family_FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY = 114,
  DmiProcessors_Family_FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY = 115,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY = 116,
  DmiProcessors_Family_FAMILY_PA_RISC_FAMILY = 117,
  DmiProcessors_Family_FAMILY_PA_RISC_8500 = 118,
  DmiProcessors_Family_FAMILY_PA_RISC_8000 = 119,
  DmiProcessors_Family_FAMILY_PA_RISC_7300LC = 120,
  DmiProcessors_Family_FAMILY_PA_RISC_7200 = 121,
  DmiProcessors_Family_FAMILY_PA_RISC_7100LC = 122,
  DmiProcessors_Family_FAMILY_PA_RISC_7100 = 123,
  DmiProcessors_Family_FAMILY_V30_FAMILY = 124,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_3200_PROCESSOR_SERIES = 125,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_3000_PROCESSOR_SERIES = 126,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5300_PROCESSOR_SERIES = 127,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5100_PROCESSOR_SERIES = 128,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5000_PROCESSOR_SERIES = 129,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_LV_PROCESSOR = 130,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_ULV_PROCESSOR = 131,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7100_PROCESSOR_SERIES = 132,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5400_PROCESSOR_SERIES = 133,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_PROCESSOR = 134,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5200_PROCESSOR_SERIES = 135,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7200_PROCESSOR_SERIES = 136,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7300_PROCESSOR_SERIES = 137,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7400_PROCESSOR_SERIES = 138,
  DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_7400_PROCESSOR_SERIES = 139,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_XEON_PROCESSOR = 140,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_PROCESSOR_WITH_SPEED_STEP = 141,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_4_PROCESSOR = 142,
  DmiProcessors_Family_FAMILY_INTEL_XEON_PROCESSOR = 143,
  DmiProcessors_Family_FAMILY_AS400_FAMILY = 144,
  DmiProcessors_Family_FAMILY_INTEL_XEON_MP_PROCESSOR = 145,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY = 146,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY = 147,
  DmiProcessors_Family_FAMILY_INTEL_ITANIUM_2_PROCESSOR = 148,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_M_PROCESSOR = 149,
  DmiProcessors_Family_FAMILY_INTEL_CELERON_D_PROCESSOR = 150,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_D_PROCESSOR = 151,
  DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION = 152,
  DmiProcessors_Family_FAMILY_INTEL_CORE_SOLO_PROCESSOR = 153,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_DUO_PROCESSOR = 154,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_SOLO_PROCESSOR = 155,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR = 156,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_QUAD_PROCESSOR = 157,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR = 158,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR = 159,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR = 160,
  DmiProcessors_Family_FAMILY_INTEL_CORE_I7_PROCESSOR = 161,
  DmiProcessors_Family_FAMILY_INTEL_CELERON_DUAL_CORE_PROCESSOR = 162,
  DmiProcessors_Family_FAMILY_IBM390_FAMILY = 163,
  DmiProcessors_Family_FAMILY_G4 = 164,
  DmiProcessors_Family_FAMILY_G5 = 165,
  DmiProcessors_Family_FAMILY_ESA_390_G6 = 166,
  DmiProcessors_Family_FAMILY_Z_ARCHITECTURE_BASE = 167,
  DmiProcessors_Family_FAMILY_INTEL_CORE_I5_PROCESSOR = 168,
  DmiProcessors_Family_FAMILY_INTEL_CORE_I3_PROCESSOR = 169,
  DmiProcessors_Family_FAMILY_VIA_C7_M_PROCESSOR_FAMILY = 170,
  DmiProcessors_Family_FAMILY_VIA_C7_D_PROCESSOR_FAMILY = 171,
  DmiProcessors_Family_FAMILY_VIA_C7_PROCESSOR_FAMILY = 172,
  DmiProcessors_Family_FAMILY_VIA_EDEN_PROCESSOR_FAMILY = 173,
  DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_PROCESSOR = 174,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_3XXX_PROCESSOR_SERIES = 175,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_3XXX_PROCESSOR_SERIES = 176,
  DmiProcessors_Family_FAMILY_VIA_NANO_PROCESSOR_FAMILY = 177,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5XXX_PROCESSOR_SERIES = 178,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5XXX_PROCESSOR_SERIES = 179,
  DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7XXX_PROCESSOR_SERIES = 180,
  DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7XXX_PROCESSOR_SERIES = 181,
  DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_7XXX_PROCESSOR_SERIES = 182,
  DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_3400_PROCESSOR_SERIES = 183,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_3000_PROCESSOR_SERIES = 184,
  DmiProcessors_Family_FAMILY_AMD_SEMPRON_II_PROCESSOR = 185,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_QUAD_CORE_EMBEDDED_PROCESSOR_FAMILY = 186,
  DmiProcessors_Family_FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY = 187,
  DmiProcessors_Family_FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY = 188,
  DmiProcessors_Family_FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY = 189,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY = 190,
  DmiProcessors_Family_FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY = 191,
  DmiProcessors_Family_FAMILY_AMD_PHENOM_2_PROCESSOR_FAMILY = 192,
  DmiProcessors_Family_FAMILY_AMD_ATHLON_2_PROCESSOR_FAMILY = 193,
  DmiProcessors_Family_FAMILY_AMD_OPTERON_SIX_CORE_PROCESSOR_FAMILY = 194,
  DmiProcessors_Family_FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY = 195,
  DmiProcessors_Family_FAMILY_I860 = 196,
  DmiProcessors_Family_FAMILY_I960 = 197,
  DmiProcessors_Family_FAMILY_ARM_V7 = 198,
  DmiProcessors_Family_FAMILY_ARM_V8 = 199,
  DmiProcessors_Family_FAMILY_SH_3 = 200,
  DmiProcessors_Family_FAMILY_SH_4 = 201,
  DmiProcessors_Family_FAMILY_ARM = 202,
  DmiProcessors_Family_FAMILY_STRONG_ARM = 203,
  DmiProcessors_Family_FAMILY_6X86 = 204,
  DmiProcessors_Family_FAMILY_MEDIA_GX = 205,
  DmiProcessors_Family_FAMILY_MII = 206,
  DmiProcessors_Family_FAMILY_WIN_CHIP = 207,
  DmiProcessors_Family_FAMILY_DSP = 208,
  DmiProcessors_Family_FAMILY_VIDEO_PROCESSOR = 209,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_FAMILY = 210,
  DmiProcessors_Family_FAMILY_AMD_K7_FAMILY = 211,
  DmiProcessors_Family_FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY = 212,
  DmiProcessors_Family_DmiProcessors_Family_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiProcessors_Family_DmiProcessors_Family_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiProcessors_Family_IsValid(int value);
const DmiProcessors_Family DmiProcessors_Family_Family_MIN = DmiProcessors_Family_FAMILY_UNKNOWN;
const DmiProcessors_Family DmiProcessors_Family_Family_MAX = DmiProcessors_Family_FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY;
const int DmiProcessors_Family_Family_ARRAYSIZE = DmiProcessors_Family_Family_MAX + 1;

enum DmiProcessors_Type {
  DmiProcessors_Type_TYPE_UNKNOWN = 0,
  DmiProcessors_Type_TYPE_OTHER = 1,
  DmiProcessors_Type_TYPE_CENTRAL_PROCESSOR = 2,
  DmiProcessors_Type_TYPE_MATH_PROCESSOR = 3,
  DmiProcessors_Type_TYPE_DSP_PROCESSOR = 4,
  DmiProcessors_Type_TYPE_VIDEO_PROCESSOR = 5,
  DmiProcessors_Type_DmiProcessors_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiProcessors_Type_DmiProcessors_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiProcessors_Type_IsValid(int value);
const DmiProcessors_Type DmiProcessors_Type_Type_MIN = DmiProcessors_Type_TYPE_UNKNOWN;
const DmiProcessors_Type DmiProcessors_Type_Type_MAX = DmiProcessors_Type_TYPE_VIDEO_PROCESSOR;
const int DmiProcessors_Type_Type_ARRAYSIZE = DmiProcessors_Type_Type_MAX + 1;

enum DmiProcessors_Status {
  DmiProcessors_Status_STATUS_UNKNOWN = 0,
  DmiProcessors_Status_STATUS_ENABLED = 1,
  DmiProcessors_Status_STATUS_DISABLED_BY_USER = 2,
  DmiProcessors_Status_STATUS_DISABLED_BY_BIOS = 3,
  DmiProcessors_Status_STATUS_IDLE = 4,
  DmiProcessors_Status_STATUS_OTHER = 5,
  DmiProcessors_Status_DmiProcessors_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiProcessors_Status_DmiProcessors_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiProcessors_Status_IsValid(int value);
const DmiProcessors_Status DmiProcessors_Status_Status_MIN = DmiProcessors_Status_STATUS_UNKNOWN;
const DmiProcessors_Status DmiProcessors_Status_Status_MAX = DmiProcessors_Status_STATUS_OTHER;
const int DmiProcessors_Status_Status_ARRAYSIZE = DmiProcessors_Status_Status_MAX + 1;

enum DmiProcessors_Upgrade {
  DmiProcessors_Upgrade_UPGRADE_UNKNOWN = 0,
  DmiProcessors_Upgrade_UPGRADE_OTHER = 1,
  DmiProcessors_Upgrade_UPGRADE_DAUGHTER_BOARD = 2,
  DmiProcessors_Upgrade_UPGRADE_ZIF_SOCKET = 3,
  DmiProcessors_Upgrade_UPGRADE_REPLACEABLE_PIGGY_BACK = 4,
  DmiProcessors_Upgrade_UPGRADE_NONE = 5,
  DmiProcessors_Upgrade_UPGRADE_LIF_SOCKET = 6,
  DmiProcessors_Upgrade_UPGRADE_SLOT_1 = 7,
  DmiProcessors_Upgrade_UPGRADE_SLOT_2 = 8,
  DmiProcessors_Upgrade_UPGRADE_370_PIN_SOCKET = 9,
  DmiProcessors_Upgrade_UPGRADE_SLOT_A = 10,
  DmiProcessors_Upgrade_UPGRADE_SLOT_M = 11,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_423 = 12,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_462 = 13,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_478 = 14,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_754 = 15,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_940 = 16,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_939 = 17,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_MPGA604 = 18,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA771 = 19,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA775 = 20,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_S1 = 21,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_AM2 = 22,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_F = 23,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1366 = 24,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_G34 = 25,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_AM3 = 26,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_C32 = 27,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1156 = 28,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1567 = 29,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_PGA988A = 30,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1288 = 31,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_RPGA988B = 32,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1023 = 33,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1224 = 34,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1155 = 35,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1356 = 36,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA2011 = 37,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_FS1 = 38,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_FS2 = 39,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_FM1 = 40,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_FM2 = 41,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA2011_3 = 42,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1356_3 = 43,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1150 = 44,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1168 = 45,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1234 = 46,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1364 = 47,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_AM4 = 48,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1151 = 49,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1356 = 50,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1440 = 51,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1515 = 52,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA3647_1 = 53,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_SP3 = 54,
  DmiProcessors_Upgrade_UPGRADE_SOCKET_SP3_R2 = 55,
  DmiProcessors_Upgrade_DmiProcessors_Upgrade_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiProcessors_Upgrade_DmiProcessors_Upgrade_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiProcessors_Upgrade_IsValid(int value);
const DmiProcessors_Upgrade DmiProcessors_Upgrade_Upgrade_MIN = DmiProcessors_Upgrade_UPGRADE_UNKNOWN;
const DmiProcessors_Upgrade DmiProcessors_Upgrade_Upgrade_MAX = DmiProcessors_Upgrade_UPGRADE_SOCKET_SP3_R2;
const int DmiProcessors_Upgrade_Upgrade_ARRAYSIZE = DmiProcessors_Upgrade_Upgrade_MAX + 1;

enum DmiProcessors_Characteristics {
  DmiProcessors_Characteristics_CHARACTERISTIC_NONE = 0,
  DmiProcessors_Characteristics_CHARACTERISTIC_64BIT_CAPABLE = 1,
  DmiProcessors_Characteristics_CHARACTERISTIC_MULTI_CORE = 2,
  DmiProcessors_Characteristics_CHARACTERISTIC_HARDWARE_THREAD = 4,
  DmiProcessors_Characteristics_CHARACTERISTIC_EXECUTE_PROTECTION = 8,
  DmiProcessors_Characteristics_CHARACTERISTIC_ENHANCED_VIRTUALIZATION = 16,
  DmiProcessors_Characteristics_CHARACTERISTIC_POWER_CONTROL = 32,
  DmiProcessors_Characteristics_DmiProcessors_Characteristics_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DmiProcessors_Characteristics_DmiProcessors_Characteristics_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DmiProcessors_Characteristics_IsValid(int value);
const DmiProcessors_Characteristics DmiProcessors_Characteristics_Characteristics_MIN = DmiProcessors_Characteristics_CHARACTERISTIC_NONE;
const DmiProcessors_Characteristics DmiProcessors_Characteristics_Characteristics_MAX = DmiProcessors_Characteristics_CHARACTERISTIC_POWER_CONTROL;
const int DmiProcessors_Characteristics_Characteristics_ARRAYSIZE = DmiProcessors_Characteristics_Characteristics_MAX + 1;

// ===================================================================

class DmiProcessors_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiProcessors.Item) */ {
 public:
  DmiProcessors_Item();
  virtual ~DmiProcessors_Item();

  DmiProcessors_Item(const DmiProcessors_Item& from);

  inline DmiProcessors_Item& operator=(const DmiProcessors_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiProcessors_Item(DmiProcessors_Item&& from) noexcept
    : DmiProcessors_Item() {
    *this = ::std::move(from);
  }

  inline DmiProcessors_Item& operator=(DmiProcessors_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiProcessors_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiProcessors_Item* internal_default_instance() {
    return reinterpret_cast<const DmiProcessors_Item*>(
               &_DmiProcessors_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DmiProcessors_Item* other);
  friend void swap(DmiProcessors_Item& a, DmiProcessors_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiProcessors_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiProcessors_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiProcessors_Item& from);
  void MergeFrom(const DmiProcessors_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiProcessors_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string manufacturer = 1;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 1;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string socket = 6;
  void clear_socket();
  static const int kSocketFieldNumber = 6;
  const ::std::string& socket() const;
  void set_socket(const ::std::string& value);
  #if LANG_CXX11
  void set_socket(::std::string&& value);
  #endif
  void set_socket(const char* value);
  void set_socket(const char* value, size_t size);
  ::std::string* mutable_socket();
  ::std::string* release_socket();
  void set_allocated_socket(::std::string* socket);

  // string serial_number = 12;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 12;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string asset_tag = 13;
  void clear_asset_tag();
  static const int kAssetTagFieldNumber = 13;
  const ::std::string& asset_tag() const;
  void set_asset_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_tag(::std::string&& value);
  #endif
  void set_asset_tag(const char* value);
  void set_asset_tag(const char* value, size_t size);
  ::std::string* mutable_asset_tag();
  ::std::string* release_asset_tag();
  void set_allocated_asset_tag(::std::string* asset_tag);

  // string part_number = 14;
  void clear_part_number();
  static const int kPartNumberFieldNumber = 14;
  const ::std::string& part_number() const;
  void set_part_number(const ::std::string& value);
  #if LANG_CXX11
  void set_part_number(::std::string&& value);
  #endif
  void set_part_number(const char* value);
  void set_part_number(const char* value, size_t size);
  ::std::string* mutable_part_number();
  ::std::string* release_part_number();
  void set_allocated_part_number(::std::string* part_number);

  // .aspia.proto.DmiProcessors.Family family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::aspia::proto::DmiProcessors_Family family() const;
  void set_family(::aspia::proto::DmiProcessors_Family value);

  // .aspia.proto.DmiProcessors.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::aspia::proto::DmiProcessors_Type type() const;
  void set_type(::aspia::proto::DmiProcessors_Type value);

  // .aspia.proto.DmiProcessors.Status status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::aspia::proto::DmiProcessors_Status status() const;
  void set_status(::aspia::proto::DmiProcessors_Status value);

  // .aspia.proto.DmiProcessors.Upgrade upgrade = 7;
  void clear_upgrade();
  static const int kUpgradeFieldNumber = 7;
  ::aspia::proto::DmiProcessors_Upgrade upgrade() const;
  void set_upgrade(::aspia::proto::DmiProcessors_Upgrade value);

  // int32 external_clock = 8;
  void clear_external_clock();
  static const int kExternalClockFieldNumber = 8;
  ::google::protobuf::int32 external_clock() const;
  void set_external_clock(::google::protobuf::int32 value);

  // int32 current_speed = 9;
  void clear_current_speed();
  static const int kCurrentSpeedFieldNumber = 9;
  ::google::protobuf::int32 current_speed() const;
  void set_current_speed(::google::protobuf::int32 value);

  // double voltage = 11;
  void clear_voltage();
  static const int kVoltageFieldNumber = 11;
  double voltage() const;
  void set_voltage(double value);

  // int32 maximum_speed = 10;
  void clear_maximum_speed();
  static const int kMaximumSpeedFieldNumber = 10;
  ::google::protobuf::int32 maximum_speed() const;
  void set_maximum_speed(::google::protobuf::int32 value);

  // int32 core_count = 15;
  void clear_core_count();
  static const int kCoreCountFieldNumber = 15;
  ::google::protobuf::int32 core_count() const;
  void set_core_count(::google::protobuf::int32 value);

  // int32 core_enabled = 16;
  void clear_core_enabled();
  static const int kCoreEnabledFieldNumber = 16;
  ::google::protobuf::int32 core_enabled() const;
  void set_core_enabled(::google::protobuf::int32 value);

  // int32 thread_count = 17;
  void clear_thread_count();
  static const int kThreadCountFieldNumber = 17;
  ::google::protobuf::int32 thread_count() const;
  void set_thread_count(::google::protobuf::int32 value);

  // uint32 characteristics = 18;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 18;
  ::google::protobuf::uint32 characteristics() const;
  void set_characteristics(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiProcessors.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr socket_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr asset_tag_;
  ::google::protobuf::internal::ArenaStringPtr part_number_;
  int family_;
  int type_;
  int status_;
  int upgrade_;
  ::google::protobuf::int32 external_clock_;
  ::google::protobuf::int32 current_speed_;
  double voltage_;
  ::google::protobuf::int32 maximum_speed_;
  ::google::protobuf::int32 core_count_;
  ::google::protobuf::int32 core_enabled_;
  ::google::protobuf::int32 thread_count_;
  ::google::protobuf::uint32 characteristics_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fprocessor_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessors_ItemImpl();
};
// -------------------------------------------------------------------

class DmiProcessors : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.DmiProcessors) */ {
 public:
  DmiProcessors();
  virtual ~DmiProcessors();

  DmiProcessors(const DmiProcessors& from);

  inline DmiProcessors& operator=(const DmiProcessors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DmiProcessors(DmiProcessors&& from) noexcept
    : DmiProcessors() {
    *this = ::std::move(from);
  }

  inline DmiProcessors& operator=(DmiProcessors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DmiProcessors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DmiProcessors* internal_default_instance() {
    return reinterpret_cast<const DmiProcessors*>(
               &_DmiProcessors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DmiProcessors* other);
  friend void swap(DmiProcessors& a, DmiProcessors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DmiProcessors* New() const PROTOBUF_FINAL { return New(NULL); }

  DmiProcessors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DmiProcessors& from);
  void MergeFrom(const DmiProcessors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DmiProcessors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DmiProcessors_Item Item;

  typedef DmiProcessors_Family Family;
  static const Family FAMILY_UNKNOWN =
    DmiProcessors_Family_FAMILY_UNKNOWN;
  static const Family FAMILY_OTHER =
    DmiProcessors_Family_FAMILY_OTHER;
  static const Family FAMILY_8086 =
    DmiProcessors_Family_FAMILY_8086;
  static const Family FAMILY_80286 =
    DmiProcessors_Family_FAMILY_80286;
  static const Family FAMILY_INTEL_386_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_386_PROCESSOR;
  static const Family FAMILY_INTEL_486_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_486_PROCESSOR;
  static const Family FAMILY_8087 =
    DmiProcessors_Family_FAMILY_8087;
  static const Family FAMILY_80287 =
    DmiProcessors_Family_FAMILY_80287;
  static const Family FAMILY_80387 =
    DmiProcessors_Family_FAMILY_80387;
  static const Family FAMILY_80487 =
    DmiProcessors_Family_FAMILY_80487;
  static const Family FAMILY_INTEL_PENTIUM_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_PRO_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PRO_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_2_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_2_PROCESSOR;
  static const Family FAMILY_PENTIUM_PROCESSOR_WITH_MMX =
    DmiProcessors_Family_FAMILY_PENTIUM_PROCESSOR_WITH_MMX;
  static const Family FAMILY_INTEL_CELERON_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CELERON_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_2_XEON_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_2_XEON_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_3_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_PROCESSOR;
  static const Family FAMILY_M1_FAMILY =
    DmiProcessors_Family_FAMILY_M1_FAMILY;
  static const Family FAMILY_M2_FAMILY =
    DmiProcessors_Family_FAMILY_M2_FAMILY;
  static const Family FAMILY_INTEL_CELEROM_M_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CELEROM_M_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_4_HT_PROCESSOR;
  static const Family FAMILY_AMD_DURON_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_DURON_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_K5_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_K5_FAMILY;
  static const Family FAMILY_AMD_K6_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_K6_FAMILY;
  static const Family FAMILY_AMD_K6_2 =
    DmiProcessors_Family_FAMILY_AMD_K6_2;
  static const Family FAMILY_AMD_K6_3 =
    DmiProcessors_Family_FAMILY_AMD_K6_3;
  static const Family FAMILY_AMD_ATHLON_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_29000_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_29000_FAMILY;
  static const Family FAMILY_AMD_K6_2_PLUS =
    DmiProcessors_Family_FAMILY_AMD_K6_2_PLUS;
  static const Family FAMILY_POWER_PC_FAMILY =
    DmiProcessors_Family_FAMILY_POWER_PC_FAMILY;
  static const Family FAMILY_POWER_PC_601 =
    DmiProcessors_Family_FAMILY_POWER_PC_601;
  static const Family FAMILY_POWER_PC_603 =
    DmiProcessors_Family_FAMILY_POWER_PC_603;
  static const Family FAMILY_POWER_PC_603_PLUS =
    DmiProcessors_Family_FAMILY_POWER_PC_603_PLUS;
  static const Family FAMILY_POWER_PC_604 =
    DmiProcessors_Family_FAMILY_POWER_PC_604;
  static const Family FAMILY_POWER_PC_620 =
    DmiProcessors_Family_FAMILY_POWER_PC_620;
  static const Family FAMILY_POWER_PC_X704 =
    DmiProcessors_Family_FAMILY_POWER_PC_X704;
  static const Family FAMILY_POWER_PC_750 =
    DmiProcessors_Family_FAMILY_POWER_PC_750;
  static const Family FAMILY_INTEL_CORE_DUO_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_DUO_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_DUO_MOBILE_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_SOLO_MOBILE_PROCESSOR;
  static const Family FAMILY_INTEL_ATOM_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_ATOM_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_M_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_M_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_M3_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_M3_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_M5_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_M5_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_M7_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_M7_PROCESSOR;
  static const Family FAMILY_ALPHA_FAMILY =
    DmiProcessors_Family_FAMILY_ALPHA_FAMILY;
  static const Family FAMILY_ALPHA_21064 =
    DmiProcessors_Family_FAMILY_ALPHA_21064;
  static const Family FAMILY_ALPHA_21066 =
    DmiProcessors_Family_FAMILY_ALPHA_21066;
  static const Family FAMILY_ALPHA_21164 =
    DmiProcessors_Family_FAMILY_ALPHA_21164;
  static const Family FAMILY_ALPHA_21164PC =
    DmiProcessors_Family_FAMILY_ALPHA_21164PC;
  static const Family FAMILY_ALPHA_21164A =
    DmiProcessors_Family_FAMILY_ALPHA_21164A;
  static const Family FAMILY_ALPHA_21264 =
    DmiProcessors_Family_FAMILY_ALPHA_21264;
  static const Family FAMILY_ALPHA_21364 =
    DmiProcessors_Family_FAMILY_ALPHA_21364;
  static const Family FAMILY_AMD_TURION_2_ULTRA_DUAL_CORE_MOBILE_M_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_TURION_2_ULTRA_DUAL_CORE_MOBILE_M_FAMILY;
  static const Family FAMILY_AMD_TURION_2_DUAL_CORE_MOBILE_M_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_TURION_2_DUAL_CORE_MOBILE_M_FAMILY;
  static const Family FAMILY_AMD_ATHLON_2_DUAL_CORE_M_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_2_DUAL_CORE_M_FAMILY;
  static const Family FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_6100_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_4100_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_6200_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_4200_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_FX_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_FX_SERIES_PROCESSOR;
  static const Family FAMILY_MIPS_FAMILY =
    DmiProcessors_Family_FAMILY_MIPS_FAMILY;
  static const Family FAMILY_MIPS_R4000 =
    DmiProcessors_Family_FAMILY_MIPS_R4000;
  static const Family FAMILY_MIPS_R4200 =
    DmiProcessors_Family_FAMILY_MIPS_R4200;
  static const Family FAMILY_MIPS_R4400 =
    DmiProcessors_Family_FAMILY_MIPS_R4400;
  static const Family FAMILY_MIPS_R4600 =
    DmiProcessors_Family_FAMILY_MIPS_R4600;
  static const Family FAMILY_MIPS_R10000 =
    DmiProcessors_Family_FAMILY_MIPS_R10000;
  static const Family FAMILY_AMD_C_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_C_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_E_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_E_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_A_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_A_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_G_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_G_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_Z_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_Z_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_R_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_R_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_4300_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_6300_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_3300_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_FIREPRO_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_FIREPRO_SERIES_PROCESSOR;
  static const Family FAMILY_SPARC_FAMILY =
    DmiProcessors_Family_FAMILY_SPARC_FAMILY;
  static const Family FAMILY_SUPER_SPARC =
    DmiProcessors_Family_FAMILY_SUPER_SPARC;
  static const Family FAMILY_MICRO_SPARC_2 =
    DmiProcessors_Family_FAMILY_MICRO_SPARC_2;
  static const Family FAMILY_MICRO_SPARC_2EP =
    DmiProcessors_Family_FAMILY_MICRO_SPARC_2EP;
  static const Family FAMILY_ULTRA_SPARC =
    DmiProcessors_Family_FAMILY_ULTRA_SPARC;
  static const Family FAMILY_ULTRA_SPARC_2 =
    DmiProcessors_Family_FAMILY_ULTRA_SPARC_2;
  static const Family FAMILY_ULTRA_SPARC_2I =
    DmiProcessors_Family_FAMILY_ULTRA_SPARC_2I;
  static const Family FAMILY_ULTRA_SPARC_3 =
    DmiProcessors_Family_FAMILY_ULTRA_SPARC_3;
  static const Family FAMILY_ULTRA_SPARC_3I =
    DmiProcessors_Family_FAMILY_ULTRA_SPARC_3I;
  static const Family FAMILY_68040_FAMILY =
    DmiProcessors_Family_FAMILY_68040_FAMILY;
  static const Family FAMILY_68XXX =
    DmiProcessors_Family_FAMILY_68XXX;
  static const Family FAMILY_68000 =
    DmiProcessors_Family_FAMILY_68000;
  static const Family FAMILY_68010 =
    DmiProcessors_Family_FAMILY_68010;
  static const Family FAMILY_68020 =
    DmiProcessors_Family_FAMILY_68020;
  static const Family FAMILY_68030 =
    DmiProcessors_Family_FAMILY_68030;
  static const Family FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_X4_QUAD_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_X1000_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_X2000_SERIES_APU =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_X2000_SERIES_APU;
  static const Family FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_A_SERIES_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_X3000_SERIES_APU =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_X3000_SERIES_APU;
  static const Family FAMILY_AMD_ZEN_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ZEN_PROCESSOR_FAMILY;
  static const Family FAMILY_HOBBIT_FAMILY =
    DmiProcessors_Family_FAMILY_HOBBIT_FAMILY;
  static const Family FAMILY_CRUSOE_TM5000_FAMILY =
    DmiProcessors_Family_FAMILY_CRUSOE_TM5000_FAMILY;
  static const Family FAMILY_CRUSOE_TM3000_FAMILY =
    DmiProcessors_Family_FAMILY_CRUSOE_TM3000_FAMILY;
  static const Family FAMILY_EFFICEON_TM8000_FAMILY =
    DmiProcessors_Family_FAMILY_EFFICEON_TM8000_FAMILY;
  static const Family FAMILY_WEITEK =
    DmiProcessors_Family_FAMILY_WEITEK;
  static const Family FAMILY_INTEL_ITANIUM_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_ITANIUM_PROCESSOR;
  static const Family FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_64_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_OPTERON_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_SEMPRON_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY =
    DmiProcessors_Family_FAMILY_AMD_TURION_64_MOBILE_TECHNOLOGY;
  static const Family FAMILY_AMD_OPTERON_DUAL_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_DUAL_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_64_X2_DUAL_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY =
    DmiProcessors_Family_FAMILY_AMD_TURION_64_X2_MOBILE_TECHNOLOGY;
  static const Family FAMILY_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_QUAD_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_OPTERON_THIRD_GEN_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_THIRD_GEN_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_PHENOM_FX_QUAD_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_PHENOM_X4_QUAD_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_PHENOM_X2_DUAL_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_X2_DUAL_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_PA_RISC_FAMILY =
    DmiProcessors_Family_FAMILY_PA_RISC_FAMILY;
  static const Family FAMILY_PA_RISC_8500 =
    DmiProcessors_Family_FAMILY_PA_RISC_8500;
  static const Family FAMILY_PA_RISC_8000 =
    DmiProcessors_Family_FAMILY_PA_RISC_8000;
  static const Family FAMILY_PA_RISC_7300LC =
    DmiProcessors_Family_FAMILY_PA_RISC_7300LC;
  static const Family FAMILY_PA_RISC_7200 =
    DmiProcessors_Family_FAMILY_PA_RISC_7200;
  static const Family FAMILY_PA_RISC_7100LC =
    DmiProcessors_Family_FAMILY_PA_RISC_7100LC;
  static const Family FAMILY_PA_RISC_7100 =
    DmiProcessors_Family_FAMILY_PA_RISC_7100;
  static const Family FAMILY_V30_FAMILY =
    DmiProcessors_Family_FAMILY_V30_FAMILY;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_3200_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_3200_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_3000_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_3000_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_5300_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5300_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_5100_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5100_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_5000_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5000_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_LV_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_LV_PROCESSOR;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_ULV_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_ULV_PROCESSOR;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_7100_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7100_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_5400_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5400_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_PROCESSOR;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_5200_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5200_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_7200_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7200_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_7300_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7300_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_7400_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7400_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_MULTI_CORE_7400_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_7400_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_PENTIUM_3_XEON_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_XEON_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_3_PROCESSOR_WITH_SPEED_STEP =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_3_PROCESSOR_WITH_SPEED_STEP;
  static const Family FAMILY_INTEL_PENTIUM_4_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_4_PROCESSOR;
  static const Family FAMILY_INTEL_XEON_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_PROCESSOR;
  static const Family FAMILY_AS400_FAMILY =
    DmiProcessors_Family_FAMILY_AS400_FAMILY;
  static const Family FAMILY_INTEL_XEON_MP_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_MP_PROCESSOR;
  static const Family FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_XP_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_MP_PROCESSOR_FAMILY;
  static const Family FAMILY_INTEL_ITANIUM_2_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_ITANIUM_2_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_M_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_M_PROCESSOR;
  static const Family FAMILY_INTEL_CELERON_D_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CELERON_D_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_D_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_D_PROCESSOR;
  static const Family FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION =
    DmiProcessors_Family_FAMILY_INTEL_PENTIUM_PROCESSOR_EXTREME_EDITION;
  static const Family FAMILY_INTEL_CORE_SOLO_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_SOLO_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_DUO_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_DUO_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_SOLO_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_SOLO_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_EXTREME_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_QUAD_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_QUAD_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_EXTREME_MOBILE_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_DUO_MOBILE_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_SOLO_MOBILE_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_I7_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_I7_PROCESSOR;
  static const Family FAMILY_INTEL_CELERON_DUAL_CORE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CELERON_DUAL_CORE_PROCESSOR;
  static const Family FAMILY_IBM390_FAMILY =
    DmiProcessors_Family_FAMILY_IBM390_FAMILY;
  static const Family FAMILY_G4 =
    DmiProcessors_Family_FAMILY_G4;
  static const Family FAMILY_G5 =
    DmiProcessors_Family_FAMILY_G5;
  static const Family FAMILY_ESA_390_G6 =
    DmiProcessors_Family_FAMILY_ESA_390_G6;
  static const Family FAMILY_Z_ARCHITECTURE_BASE =
    DmiProcessors_Family_FAMILY_Z_ARCHITECTURE_BASE;
  static const Family FAMILY_INTEL_CORE_I5_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_I5_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_I3_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_CORE_I3_PROCESSOR;
  static const Family FAMILY_VIA_C7_M_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_VIA_C7_M_PROCESSOR_FAMILY;
  static const Family FAMILY_VIA_C7_D_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_VIA_C7_D_PROCESSOR_FAMILY;
  static const Family FAMILY_VIA_C7_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_VIA_C7_PROCESSOR_FAMILY;
  static const Family FAMILY_VIA_EDEN_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_VIA_EDEN_PROCESSOR_FAMILY;
  static const Family FAMILY_INTEL_XEON_MULTI_CORE_PROCESSOR =
    DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_PROCESSOR;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_3XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_3XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_3XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_3XXX_PROCESSOR_SERIES;
  static const Family FAMILY_VIA_NANO_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_VIA_NANO_PROCESSOR_FAMILY;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_5XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_5XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_5XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_5XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_DUAL_CORE_7XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_DUAL_CORE_7XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_QUAD_CORE_7XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_QUAD_CORE_7XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_MULTI_CORE_7XXX_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_7XXX_PROCESSOR_SERIES;
  static const Family FAMILY_INTEL_XEON_MULTI_CORE_3400_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_INTEL_XEON_MULTI_CORE_3400_PROCESSOR_SERIES;
  static const Family FAMILY_AMD_OPTERON_3000_PROCESSOR_SERIES =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_3000_PROCESSOR_SERIES;
  static const Family FAMILY_AMD_SEMPRON_II_PROCESSOR =
    DmiProcessors_Family_FAMILY_AMD_SEMPRON_II_PROCESSOR;
  static const Family FAMILY_AMD_OPTERON_QUAD_CORE_EMBEDDED_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_QUAD_CORE_EMBEDDED_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_PHENOM_TRIPLE_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_TURION_ULTRA_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_TURION_DUAL_CORE_MOBILE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_DUAL_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_SEMPRON_SI_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_PHENOM_2_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_PHENOM_2_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_ATHLON_2_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_ATHLON_2_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_OPTERON_SIX_CORE_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_OPTERON_SIX_CORE_PROCESSOR_FAMILY;
  static const Family FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_SEMPRON_M_PROCESSOR_FAMILY;
  static const Family FAMILY_I860 =
    DmiProcessors_Family_FAMILY_I860;
  static const Family FAMILY_I960 =
    DmiProcessors_Family_FAMILY_I960;
  static const Family FAMILY_ARM_V7 =
    DmiProcessors_Family_FAMILY_ARM_V7;
  static const Family FAMILY_ARM_V8 =
    DmiProcessors_Family_FAMILY_ARM_V8;
  static const Family FAMILY_SH_3 =
    DmiProcessors_Family_FAMILY_SH_3;
  static const Family FAMILY_SH_4 =
    DmiProcessors_Family_FAMILY_SH_4;
  static const Family FAMILY_ARM =
    DmiProcessors_Family_FAMILY_ARM;
  static const Family FAMILY_STRONG_ARM =
    DmiProcessors_Family_FAMILY_STRONG_ARM;
  static const Family FAMILY_6X86 =
    DmiProcessors_Family_FAMILY_6X86;
  static const Family FAMILY_MEDIA_GX =
    DmiProcessors_Family_FAMILY_MEDIA_GX;
  static const Family FAMILY_MII =
    DmiProcessors_Family_FAMILY_MII;
  static const Family FAMILY_WIN_CHIP =
    DmiProcessors_Family_FAMILY_WIN_CHIP;
  static const Family FAMILY_DSP =
    DmiProcessors_Family_FAMILY_DSP;
  static const Family FAMILY_VIDEO_PROCESSOR =
    DmiProcessors_Family_FAMILY_VIDEO_PROCESSOR;
  static const Family FAMILY_INTEL_CORE_2_FAMILY =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_FAMILY;
  static const Family FAMILY_AMD_K7_FAMILY =
    DmiProcessors_Family_FAMILY_AMD_K7_FAMILY;
  static const Family FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY =
    DmiProcessors_Family_FAMILY_INTEL_CORE_2_OR_AMD_K7_FAMILY;
  static inline bool Family_IsValid(int value) {
    return DmiProcessors_Family_IsValid(value);
  }
  static const Family Family_MIN =
    DmiProcessors_Family_Family_MIN;
  static const Family Family_MAX =
    DmiProcessors_Family_Family_MAX;
  static const int Family_ARRAYSIZE =
    DmiProcessors_Family_Family_ARRAYSIZE;

  typedef DmiProcessors_Type Type;
  static const Type TYPE_UNKNOWN =
    DmiProcessors_Type_TYPE_UNKNOWN;
  static const Type TYPE_OTHER =
    DmiProcessors_Type_TYPE_OTHER;
  static const Type TYPE_CENTRAL_PROCESSOR =
    DmiProcessors_Type_TYPE_CENTRAL_PROCESSOR;
  static const Type TYPE_MATH_PROCESSOR =
    DmiProcessors_Type_TYPE_MATH_PROCESSOR;
  static const Type TYPE_DSP_PROCESSOR =
    DmiProcessors_Type_TYPE_DSP_PROCESSOR;
  static const Type TYPE_VIDEO_PROCESSOR =
    DmiProcessors_Type_TYPE_VIDEO_PROCESSOR;
  static inline bool Type_IsValid(int value) {
    return DmiProcessors_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DmiProcessors_Type_Type_MIN;
  static const Type Type_MAX =
    DmiProcessors_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DmiProcessors_Type_Type_ARRAYSIZE;

  typedef DmiProcessors_Status Status;
  static const Status STATUS_UNKNOWN =
    DmiProcessors_Status_STATUS_UNKNOWN;
  static const Status STATUS_ENABLED =
    DmiProcessors_Status_STATUS_ENABLED;
  static const Status STATUS_DISABLED_BY_USER =
    DmiProcessors_Status_STATUS_DISABLED_BY_USER;
  static const Status STATUS_DISABLED_BY_BIOS =
    DmiProcessors_Status_STATUS_DISABLED_BY_BIOS;
  static const Status STATUS_IDLE =
    DmiProcessors_Status_STATUS_IDLE;
  static const Status STATUS_OTHER =
    DmiProcessors_Status_STATUS_OTHER;
  static inline bool Status_IsValid(int value) {
    return DmiProcessors_Status_IsValid(value);
  }
  static const Status Status_MIN =
    DmiProcessors_Status_Status_MIN;
  static const Status Status_MAX =
    DmiProcessors_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    DmiProcessors_Status_Status_ARRAYSIZE;

  typedef DmiProcessors_Upgrade Upgrade;
  static const Upgrade UPGRADE_UNKNOWN =
    DmiProcessors_Upgrade_UPGRADE_UNKNOWN;
  static const Upgrade UPGRADE_OTHER =
    DmiProcessors_Upgrade_UPGRADE_OTHER;
  static const Upgrade UPGRADE_DAUGHTER_BOARD =
    DmiProcessors_Upgrade_UPGRADE_DAUGHTER_BOARD;
  static const Upgrade UPGRADE_ZIF_SOCKET =
    DmiProcessors_Upgrade_UPGRADE_ZIF_SOCKET;
  static const Upgrade UPGRADE_REPLACEABLE_PIGGY_BACK =
    DmiProcessors_Upgrade_UPGRADE_REPLACEABLE_PIGGY_BACK;
  static const Upgrade UPGRADE_NONE =
    DmiProcessors_Upgrade_UPGRADE_NONE;
  static const Upgrade UPGRADE_LIF_SOCKET =
    DmiProcessors_Upgrade_UPGRADE_LIF_SOCKET;
  static const Upgrade UPGRADE_SLOT_1 =
    DmiProcessors_Upgrade_UPGRADE_SLOT_1;
  static const Upgrade UPGRADE_SLOT_2 =
    DmiProcessors_Upgrade_UPGRADE_SLOT_2;
  static const Upgrade UPGRADE_370_PIN_SOCKET =
    DmiProcessors_Upgrade_UPGRADE_370_PIN_SOCKET;
  static const Upgrade UPGRADE_SLOT_A =
    DmiProcessors_Upgrade_UPGRADE_SLOT_A;
  static const Upgrade UPGRADE_SLOT_M =
    DmiProcessors_Upgrade_UPGRADE_SLOT_M;
  static const Upgrade UPGRADE_SOCKET_423 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_423;
  static const Upgrade UPGRADE_SOCKET_462 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_462;
  static const Upgrade UPGRADE_SOCKET_478 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_478;
  static const Upgrade UPGRADE_SOCKET_754 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_754;
  static const Upgrade UPGRADE_SOCKET_940 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_940;
  static const Upgrade UPGRADE_SOCKET_939 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_939;
  static const Upgrade UPGRADE_SOCKET_MPGA604 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_MPGA604;
  static const Upgrade UPGRADE_SOCKET_LGA771 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA771;
  static const Upgrade UPGRADE_SOCKET_LGA775 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA775;
  static const Upgrade UPGRADE_SOCKET_S1 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_S1;
  static const Upgrade UPGRADE_SOCKET_AM2 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_AM2;
  static const Upgrade UPGRADE_SOCKET_F =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_F;
  static const Upgrade UPGRADE_SOCKET_LGA1366 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1366;
  static const Upgrade UPGRADE_SOCKET_G34 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_G34;
  static const Upgrade UPGRADE_SOCKET_AM3 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_AM3;
  static const Upgrade UPGRADE_SOCKET_C32 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_C32;
  static const Upgrade UPGRADE_SOCKET_LGA1156 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1156;
  static const Upgrade UPGRADE_SOCKET_LGA1567 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1567;
  static const Upgrade UPGRADE_SOCKET_PGA988A =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_PGA988A;
  static const Upgrade UPGRADE_SOCKET_BGA1288 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1288;
  static const Upgrade UPGRADE_SOCKET_RPGA988B =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_RPGA988B;
  static const Upgrade UPGRADE_SOCKET_BGA1023 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1023;
  static const Upgrade UPGRADE_SOCKET_BGA1224 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1224;
  static const Upgrade UPGRADE_SOCKET_BGA1155 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1155;
  static const Upgrade UPGRADE_SOCKET_LGA1356 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1356;
  static const Upgrade UPGRADE_SOCKET_LGA2011 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA2011;
  static const Upgrade UPGRADE_SOCKET_FS1 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_FS1;
  static const Upgrade UPGRADE_SOCKET_FS2 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_FS2;
  static const Upgrade UPGRADE_SOCKET_FM1 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_FM1;
  static const Upgrade UPGRADE_SOCKET_FM2 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_FM2;
  static const Upgrade UPGRADE_SOCKET_LGA2011_3 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA2011_3;
  static const Upgrade UPGRADE_SOCKET_LGA1356_3 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1356_3;
  static const Upgrade UPGRADE_SOCKET_LGA1150 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1150;
  static const Upgrade UPGRADE_SOCKET_BGA1168 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1168;
  static const Upgrade UPGRADE_SOCKET_BGA1234 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1234;
  static const Upgrade UPGRADE_SOCKET_BGA1364 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1364;
  static const Upgrade UPGRADE_SOCKET_AM4 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_AM4;
  static const Upgrade UPGRADE_SOCKET_LGA1151 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA1151;
  static const Upgrade UPGRADE_SOCKET_BGA1356 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1356;
  static const Upgrade UPGRADE_SOCKET_BGA1440 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1440;
  static const Upgrade UPGRADE_SOCKET_BGA1515 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_BGA1515;
  static const Upgrade UPGRADE_SOCKET_LGA3647_1 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_LGA3647_1;
  static const Upgrade UPGRADE_SOCKET_SP3 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_SP3;
  static const Upgrade UPGRADE_SOCKET_SP3_R2 =
    DmiProcessors_Upgrade_UPGRADE_SOCKET_SP3_R2;
  static inline bool Upgrade_IsValid(int value) {
    return DmiProcessors_Upgrade_IsValid(value);
  }
  static const Upgrade Upgrade_MIN =
    DmiProcessors_Upgrade_Upgrade_MIN;
  static const Upgrade Upgrade_MAX =
    DmiProcessors_Upgrade_Upgrade_MAX;
  static const int Upgrade_ARRAYSIZE =
    DmiProcessors_Upgrade_Upgrade_ARRAYSIZE;

  typedef DmiProcessors_Characteristics Characteristics;
  static const Characteristics CHARACTERISTIC_NONE =
    DmiProcessors_Characteristics_CHARACTERISTIC_NONE;
  static const Characteristics CHARACTERISTIC_64BIT_CAPABLE =
    DmiProcessors_Characteristics_CHARACTERISTIC_64BIT_CAPABLE;
  static const Characteristics CHARACTERISTIC_MULTI_CORE =
    DmiProcessors_Characteristics_CHARACTERISTIC_MULTI_CORE;
  static const Characteristics CHARACTERISTIC_HARDWARE_THREAD =
    DmiProcessors_Characteristics_CHARACTERISTIC_HARDWARE_THREAD;
  static const Characteristics CHARACTERISTIC_EXECUTE_PROTECTION =
    DmiProcessors_Characteristics_CHARACTERISTIC_EXECUTE_PROTECTION;
  static const Characteristics CHARACTERISTIC_ENHANCED_VIRTUALIZATION =
    DmiProcessors_Characteristics_CHARACTERISTIC_ENHANCED_VIRTUALIZATION;
  static const Characteristics CHARACTERISTIC_POWER_CONTROL =
    DmiProcessors_Characteristics_CHARACTERISTIC_POWER_CONTROL;
  static inline bool Characteristics_IsValid(int value) {
    return DmiProcessors_Characteristics_IsValid(value);
  }
  static const Characteristics Characteristics_MIN =
    DmiProcessors_Characteristics_Characteristics_MIN;
  static const Characteristics Characteristics_MAX =
    DmiProcessors_Characteristics_Characteristics_MAX;
  static const int Characteristics_ARRAYSIZE =
    DmiProcessors_Characteristics_Characteristics_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.DmiProcessors.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::DmiProcessors_Item& item(int index) const;
  ::aspia::proto::DmiProcessors_Item* mutable_item(int index);
  ::aspia::proto::DmiProcessors_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiProcessors_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiProcessors_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.DmiProcessors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiProcessors_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fdmi_5fprocessor_2eproto::TableStruct;
  friend void ::protobuf_category_5fdmi_5fprocessor_2eproto::InitDefaultsDmiProcessorsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmiProcessors_Item

// string manufacturer = 1;
inline void DmiProcessors_Item::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::manufacturer() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DmiProcessors_Item::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.manufacturer)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.manufacturer)
}
#endif
inline void DmiProcessors_Item::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.manufacturer)
}
inline void DmiProcessors_Item::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.manufacturer)
}
inline ::std::string* DmiProcessors_Item::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_manufacturer() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.manufacturer)
}

// string version = 2;
inline void DmiProcessors_Item::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::version() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.version)
  return version_.GetNoArena();
}
inline void DmiProcessors_Item::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.version)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.version)
}
#endif
inline void DmiProcessors_Item::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.version)
}
inline void DmiProcessors_Item::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.version)
}
inline ::std::string* DmiProcessors_Item::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_version() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.version)
}

// .aspia.proto.DmiProcessors.Family family = 3;
inline void DmiProcessors_Item::clear_family() {
  family_ = 0;
}
inline ::aspia::proto::DmiProcessors_Family DmiProcessors_Item::family() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.family)
  return static_cast< ::aspia::proto::DmiProcessors_Family >(family_);
}
inline void DmiProcessors_Item::set_family(::aspia::proto::DmiProcessors_Family value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.family)
}

// .aspia.proto.DmiProcessors.Type type = 4;
inline void DmiProcessors_Item::clear_type() {
  type_ = 0;
}
inline ::aspia::proto::DmiProcessors_Type DmiProcessors_Item::type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.type)
  return static_cast< ::aspia::proto::DmiProcessors_Type >(type_);
}
inline void DmiProcessors_Item::set_type(::aspia::proto::DmiProcessors_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.type)
}

// .aspia.proto.DmiProcessors.Status status = 5;
inline void DmiProcessors_Item::clear_status() {
  status_ = 0;
}
inline ::aspia::proto::DmiProcessors_Status DmiProcessors_Item::status() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.status)
  return static_cast< ::aspia::proto::DmiProcessors_Status >(status_);
}
inline void DmiProcessors_Item::set_status(::aspia::proto::DmiProcessors_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.status)
}

// string socket = 6;
inline void DmiProcessors_Item::clear_socket() {
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::socket() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.socket)
  return socket_.GetNoArena();
}
inline void DmiProcessors_Item::set_socket(const ::std::string& value) {
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.socket)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_socket(::std::string&& value) {
  
  socket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.socket)
}
#endif
inline void DmiProcessors_Item::set_socket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.socket)
}
inline void DmiProcessors_Item::set_socket(const char* value, size_t size) {
  
  socket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.socket)
}
inline ::std::string* DmiProcessors_Item::mutable_socket() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.socket)
  return socket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_socket() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.socket)
  
  return socket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_socket(::std::string* socket) {
  if (socket != NULL) {
    
  } else {
    
  }
  socket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.socket)
}

// .aspia.proto.DmiProcessors.Upgrade upgrade = 7;
inline void DmiProcessors_Item::clear_upgrade() {
  upgrade_ = 0;
}
inline ::aspia::proto::DmiProcessors_Upgrade DmiProcessors_Item::upgrade() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.upgrade)
  return static_cast< ::aspia::proto::DmiProcessors_Upgrade >(upgrade_);
}
inline void DmiProcessors_Item::set_upgrade(::aspia::proto::DmiProcessors_Upgrade value) {
  
  upgrade_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.upgrade)
}

// int32 external_clock = 8;
inline void DmiProcessors_Item::clear_external_clock() {
  external_clock_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::external_clock() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.external_clock)
  return external_clock_;
}
inline void DmiProcessors_Item::set_external_clock(::google::protobuf::int32 value) {
  
  external_clock_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.external_clock)
}

// int32 current_speed = 9;
inline void DmiProcessors_Item::clear_current_speed() {
  current_speed_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::current_speed() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.current_speed)
  return current_speed_;
}
inline void DmiProcessors_Item::set_current_speed(::google::protobuf::int32 value) {
  
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.current_speed)
}

// int32 maximum_speed = 10;
inline void DmiProcessors_Item::clear_maximum_speed() {
  maximum_speed_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::maximum_speed() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.maximum_speed)
  return maximum_speed_;
}
inline void DmiProcessors_Item::set_maximum_speed(::google::protobuf::int32 value) {
  
  maximum_speed_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.maximum_speed)
}

// double voltage = 11;
inline void DmiProcessors_Item::clear_voltage() {
  voltage_ = 0;
}
inline double DmiProcessors_Item::voltage() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.voltage)
  return voltage_;
}
inline void DmiProcessors_Item::set_voltage(double value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.voltage)
}

// string serial_number = 12;
inline void DmiProcessors_Item::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::serial_number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.serial_number)
  return serial_number_.GetNoArena();
}
inline void DmiProcessors_Item::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.serial_number)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.serial_number)
}
#endif
inline void DmiProcessors_Item::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.serial_number)
}
inline void DmiProcessors_Item::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.serial_number)
}
inline ::std::string* DmiProcessors_Item::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_serial_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.serial_number)
}

// string asset_tag = 13;
inline void DmiProcessors_Item::clear_asset_tag() {
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::asset_tag() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.asset_tag)
  return asset_tag_.GetNoArena();
}
inline void DmiProcessors_Item::set_asset_tag(const ::std::string& value) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.asset_tag)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_asset_tag(::std::string&& value) {
  
  asset_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.asset_tag)
}
#endif
inline void DmiProcessors_Item::set_asset_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.asset_tag)
}
inline void DmiProcessors_Item::set_asset_tag(const char* value, size_t size) {
  
  asset_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.asset_tag)
}
inline ::std::string* DmiProcessors_Item::mutable_asset_tag() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.asset_tag)
  return asset_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_asset_tag() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.asset_tag)
  
  return asset_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_asset_tag(::std::string* asset_tag) {
  if (asset_tag != NULL) {
    
  } else {
    
  }
  asset_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_tag);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.asset_tag)
}

// string part_number = 14;
inline void DmiProcessors_Item::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DmiProcessors_Item::part_number() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.part_number)
  return part_number_.GetNoArena();
}
inline void DmiProcessors_Item::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.part_number)
}
#if LANG_CXX11
inline void DmiProcessors_Item::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.DmiProcessors.Item.part_number)
}
#endif
inline void DmiProcessors_Item::set_part_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.DmiProcessors.Item.part_number)
}
inline void DmiProcessors_Item::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.DmiProcessors.Item.part_number)
}
inline ::std::string* DmiProcessors_Item::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.Item.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DmiProcessors_Item::release_part_number() {
  // @@protoc_insertion_point(field_release:aspia.proto.DmiProcessors.Item.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DmiProcessors_Item::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.DmiProcessors.Item.part_number)
}

// int32 core_count = 15;
inline void DmiProcessors_Item::clear_core_count() {
  core_count_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::core_count() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.core_count)
  return core_count_;
}
inline void DmiProcessors_Item::set_core_count(::google::protobuf::int32 value) {
  
  core_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.core_count)
}

// int32 core_enabled = 16;
inline void DmiProcessors_Item::clear_core_enabled() {
  core_enabled_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::core_enabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.core_enabled)
  return core_enabled_;
}
inline void DmiProcessors_Item::set_core_enabled(::google::protobuf::int32 value) {
  
  core_enabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.core_enabled)
}

// int32 thread_count = 17;
inline void DmiProcessors_Item::clear_thread_count() {
  thread_count_ = 0;
}
inline ::google::protobuf::int32 DmiProcessors_Item::thread_count() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.thread_count)
  return thread_count_;
}
inline void DmiProcessors_Item::set_thread_count(::google::protobuf::int32 value) {
  
  thread_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.thread_count)
}

// uint32 characteristics = 18;
inline void DmiProcessors_Item::clear_characteristics() {
  characteristics_ = 0u;
}
inline ::google::protobuf::uint32 DmiProcessors_Item::characteristics() const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.Item.characteristics)
  return characteristics_;
}
inline void DmiProcessors_Item::set_characteristics(::google::protobuf::uint32 value) {
  
  characteristics_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.DmiProcessors.Item.characteristics)
}

// -------------------------------------------------------------------

// DmiProcessors

// repeated .aspia.proto.DmiProcessors.Item item = 1;
inline int DmiProcessors::item_size() const {
  return item_.size();
}
inline void DmiProcessors::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::DmiProcessors_Item& DmiProcessors::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.DmiProcessors.item)
  return item_.Get(index);
}
inline ::aspia::proto::DmiProcessors_Item* DmiProcessors::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.DmiProcessors.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::DmiProcessors_Item* DmiProcessors::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.DmiProcessors.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiProcessors_Item >*
DmiProcessors::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.DmiProcessors.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::DmiProcessors_Item >&
DmiProcessors::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.DmiProcessors.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::DmiProcessors_Family> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiProcessors_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiProcessors_Status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiProcessors_Upgrade> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::aspia::proto::DmiProcessors_Characteristics> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fdmi_5fprocessor_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_power_options.proto

#include "category_power_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class PowerOptions_BatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerOptions_Battery>
      _instance;
} _PowerOptions_Battery_default_instance_;
class PowerOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerOptions>
      _instance;
} _PowerOptions_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fpower_5foptions_2eproto {
void InitDefaultsPowerOptions_BatteryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_PowerOptions_Battery_default_instance_;
    new (ptr) ::aspia::proto::PowerOptions_Battery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::PowerOptions_Battery::InitAsDefaultInstance();
}

void InitDefaultsPowerOptions_Battery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPowerOptions_BatteryImpl);
}

void InitDefaultsPowerOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fpower_5foptions_2eproto::InitDefaultsPowerOptions_Battery();
  {
    void* ptr = &::aspia::proto::_PowerOptions_default_instance_;
    new (ptr) ::aspia::proto::PowerOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::PowerOptions::InitAsDefaultInstance();
}

void InitDefaultsPowerOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPowerOptionsImpl);
}

}  // namespace protobuf_category_5fpower_5foptions_2eproto
namespace aspia {
namespace proto {
bool PowerOptions_Battery_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOptions_Battery_State PowerOptions_Battery::STATE_UNKNOWN;
const PowerOptions_Battery_State PowerOptions_Battery::STATE_CHARGING;
const PowerOptions_Battery_State PowerOptions_Battery::STATE_CRITICAL;
const PowerOptions_Battery_State PowerOptions_Battery::STATE_DISCHARGING;
const PowerOptions_Battery_State PowerOptions_Battery::STATE_POWER_ONLINE;
const PowerOptions_Battery_State PowerOptions_Battery::State_MIN;
const PowerOptions_Battery_State PowerOptions_Battery::State_MAX;
const int PowerOptions_Battery::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PowerOptions_Battery_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_UNKNOWN;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_PBAC;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_LION;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_NICD;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_NIMH;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_NIZN;
const PowerOptions_Battery_Type PowerOptions_Battery::TYPE_RAM;
const PowerOptions_Battery_Type PowerOptions_Battery::Type_MIN;
const PowerOptions_Battery_Type PowerOptions_Battery::Type_MAX;
const int PowerOptions_Battery::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PowerOptions_PowerSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOptions_PowerSource PowerOptions::POWER_SOURCE_UNKNOWN;
const PowerOptions_PowerSource PowerOptions::POWER_SOURCE_DC_BATTERY;
const PowerOptions_PowerSource PowerOptions::POWER_SOURCE_AC_LINE;
const PowerOptions_PowerSource PowerOptions::PowerSource_MIN;
const PowerOptions_PowerSource PowerOptions::PowerSource_MAX;
const int PowerOptions::PowerSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PowerOptions_BatteryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_UNKNOWN;
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_HIGH;
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_LOW;
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_CRITICAL;
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_CHARGING;
const PowerOptions_BatteryStatus PowerOptions::BATTERY_STATUS_NO_BATTERY;
const PowerOptions_BatteryStatus PowerOptions::BatteryStatus_MIN;
const PowerOptions_BatteryStatus PowerOptions::BatteryStatus_MAX;
const int PowerOptions::BatteryStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PowerOptions_Battery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerOptions_Battery::kDeviceNameFieldNumber;
const int PowerOptions_Battery::kManufacturerFieldNumber;
const int PowerOptions_Battery::kManufactureDateFieldNumber;
const int PowerOptions_Battery::kUniqueIdFieldNumber;
const int PowerOptions_Battery::kSerialNumberFieldNumber;
const int PowerOptions_Battery::kTemperatureFieldNumber;
const int PowerOptions_Battery::kDesignCapacityFieldNumber;
const int PowerOptions_Battery::kTypeFieldNumber;
const int PowerOptions_Battery::kFullChargedCapacityFieldNumber;
const int PowerOptions_Battery::kDepreciationFieldNumber;
const int PowerOptions_Battery::kCurrentCapacityFieldNumber;
const int PowerOptions_Battery::kVoltageFieldNumber;
const int PowerOptions_Battery::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerOptions_Battery::PowerOptions_Battery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fpower_5foptions_2eproto::InitDefaultsPowerOptions_Battery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.PowerOptions.Battery)
}
PowerOptions_Battery::PowerOptions_Battery(const PowerOptions_Battery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacture_date().size() > 0) {
    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unique_id().size() > 0) {
    unique_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  temperature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.temperature().size() > 0) {
    temperature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temperature_);
  }
  ::memcpy(&design_capacity_, &from.design_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&design_capacity_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.PowerOptions.Battery)
}

void PowerOptions_Battery::SharedCtor() {
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temperature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&design_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&design_capacity_)) + sizeof(state_));
  _cached_size_ = 0;
}

PowerOptions_Battery::~PowerOptions_Battery() {
  // @@protoc_insertion_point(destructor:aspia.proto.PowerOptions.Battery)
  SharedDtor();
}

void PowerOptions_Battery::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temperature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PowerOptions_Battery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerOptions_Battery& PowerOptions_Battery::default_instance() {
  ::protobuf_category_5fpower_5foptions_2eproto::InitDefaultsPowerOptions_Battery();
  return *internal_default_instance();
}

PowerOptions_Battery* PowerOptions_Battery::New(::google::protobuf::Arena* arena) const {
  PowerOptions_Battery* n = new PowerOptions_Battery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerOptions_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.PowerOptions.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temperature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&design_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&design_capacity_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool PowerOptions_Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.PowerOptions.Battery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacture_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unique_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_id().data(), static_cast<int>(this->unique_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.unique_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string temperature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temperature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->temperature().data(), static_cast<int>(this->temperature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.PowerOptions.Battery.temperature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.PowerOptions.Battery.Type type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::proto::PowerOptions_Battery_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 full_charged_capacity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &full_charged_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 depreciation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depreciation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_capacity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 voltage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.PowerOptions.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.PowerOptions.Battery)
  return false;
#undef DO_
}

void PowerOptions_Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.PowerOptions.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacture_date(), output);
  }

  // string unique_id = 4;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), static_cast<int>(this->unique_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.unique_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unique_id(), output);
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // string temperature = 6;
  if (this->temperature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->temperature().data(), static_cast<int>(this->temperature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.PowerOptions.Battery.temperature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->temperature(), output);
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->design_capacity(), output);
  }

  // .aspia.proto.PowerOptions.Battery.Type type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // int32 full_charged_capacity = 9;
  if (this->full_charged_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->full_charged_capacity(), output);
  }

  // int32 depreciation = 10;
  if (this->depreciation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->depreciation(), output);
  }

  // int32 current_capacity = 11;
  if (this->current_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_capacity(), output);
  }

  // int32 voltage = 12;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->voltage(), output);
  }

  // uint32 state = 13;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->state(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.PowerOptions.Battery)
}

size_t PowerOptions_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.PowerOptions.Battery)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacture_date());
  }

  // string unique_id = 4;
  if (this->unique_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_id());
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string temperature = 6;
  if (this->temperature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->temperature());
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_capacity());
  }

  // .aspia.proto.PowerOptions.Battery.Type type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 full_charged_capacity = 9;
  if (this->full_charged_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->full_charged_capacity());
  }

  // int32 depreciation = 10;
  if (this->depreciation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depreciation());
  }

  // int32 current_capacity = 11;
  if (this->current_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_capacity());
  }

  // int32 voltage = 12;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->voltage());
  }

  // uint32 state = 13;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerOptions_Battery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerOptions_Battery*>(&from));
}

void PowerOptions_Battery::MergeFrom(const PowerOptions_Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.PowerOptions.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.manufacture_date().size() > 0) {

    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  if (from.unique_id().size() > 0) {

    unique_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.temperature().size() > 0) {

    temperature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.temperature_);
  }
  if (from.design_capacity() != 0) {
    set_design_capacity(from.design_capacity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.full_charged_capacity() != 0) {
    set_full_charged_capacity(from.full_charged_capacity());
  }
  if (from.depreciation() != 0) {
    set_depreciation(from.depreciation());
  }
  if (from.current_capacity() != 0) {
    set_current_capacity(from.current_capacity());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void PowerOptions_Battery::CopyFrom(const PowerOptions_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.PowerOptions.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerOptions_Battery::IsInitialized() const {
  return true;
}

void PowerOptions_Battery::Swap(PowerOptions_Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerOptions_Battery::InternalSwap(PowerOptions_Battery* other) {
  using std::swap;
  device_name_.Swap(&other->device_name_);
  manufacturer_.Swap(&other->manufacturer_);
  manufacture_date_.Swap(&other->manufacture_date_);
  unique_id_.Swap(&other->unique_id_);
  serial_number_.Swap(&other->serial_number_);
  temperature_.Swap(&other->temperature_);
  swap(design_capacity_, other->design_capacity_);
  swap(type_, other->type_);
  swap(full_charged_capacity_, other->full_charged_capacity_);
  swap(depreciation_, other->depreciation_);
  swap(current_capacity_, other->current_capacity_);
  swap(voltage_, other->voltage_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PowerOptions_Battery::GetTypeName() const {
  return "aspia.proto.PowerOptions.Battery";
}


// ===================================================================

void PowerOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerOptions::kPowerSourceFieldNumber;
const int PowerOptions::kBatteryStatusFieldNumber;
const int PowerOptions::kFullBatteryLifeTimeFieldNumber;
const int PowerOptions::kRemainingBatteryLifeTimeFieldNumber;
const int PowerOptions::kBatteryLifePercentFieldNumber;
const int PowerOptions::kBatteryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerOptions::PowerOptions()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fpower_5foptions_2eproto::InitDefaultsPowerOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.PowerOptions)
}
PowerOptions::PowerOptions(const PowerOptions& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      battery_(from.battery_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_source_, &from.power_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_life_percent_) -
    reinterpret_cast<char*>(&power_source_)) + sizeof(battery_life_percent_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.PowerOptions)
}

void PowerOptions::SharedCtor() {
  ::memset(&power_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_life_percent_) -
      reinterpret_cast<char*>(&power_source_)) + sizeof(battery_life_percent_));
  _cached_size_ = 0;
}

PowerOptions::~PowerOptions() {
  // @@protoc_insertion_point(destructor:aspia.proto.PowerOptions)
  SharedDtor();
}

void PowerOptions::SharedDtor() {
}

void PowerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerOptions& PowerOptions::default_instance() {
  ::protobuf_category_5fpower_5foptions_2eproto::InitDefaultsPowerOptions();
  return *internal_default_instance();
}

PowerOptions* PowerOptions::New(::google::protobuf::Arena* arena) const {
  PowerOptions* n = new PowerOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.PowerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_.Clear();
  ::memset(&power_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_life_percent_) -
      reinterpret_cast<char*>(&power_source_)) + sizeof(battery_life_percent_));
  _internal_metadata_.Clear();
}

bool PowerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.PowerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.proto.PowerOptions.PowerSource power_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_source(static_cast< ::aspia::proto::PowerOptions_PowerSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.PowerOptions.BatteryStatus battery_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_battery_status(static_cast< ::aspia::proto::PowerOptions_BatteryStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 full_battery_life_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_battery_life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 remaining_battery_life_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaining_battery_life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 battery_life_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_life_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.PowerOptions.Battery battery = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.PowerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.PowerOptions)
  return false;
#undef DO_
}

void PowerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.PowerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.proto.PowerOptions.PowerSource power_source = 1;
  if (this->power_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->power_source(), output);
  }

  // .aspia.proto.PowerOptions.BatteryStatus battery_status = 2;
  if (this->battery_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->battery_status(), output);
  }

  // int64 full_battery_life_time = 3;
  if (this->full_battery_life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->full_battery_life_time(), output);
  }

  // int64 remaining_battery_life_time = 4;
  if (this->remaining_battery_life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remaining_battery_life_time(), output);
  }

  // int32 battery_life_percent = 5;
  if (this->battery_life_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battery_life_percent(), output);
  }

  // repeated .aspia.proto.PowerOptions.Battery battery = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battery_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->battery(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.PowerOptions)
}

size_t PowerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.PowerOptions)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.PowerOptions.Battery battery = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->battery_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->battery(static_cast<int>(i)));
    }
  }

  // .aspia.proto.PowerOptions.PowerSource power_source = 1;
  if (this->power_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_source());
  }

  // .aspia.proto.PowerOptions.BatteryStatus battery_status = 2;
  if (this->battery_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->battery_status());
  }

  // int64 full_battery_life_time = 3;
  if (this->full_battery_life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->full_battery_life_time());
  }

  // int64 remaining_battery_life_time = 4;
  if (this->remaining_battery_life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->remaining_battery_life_time());
  }

  // int32 battery_life_percent = 5;
  if (this->battery_life_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battery_life_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerOptions*>(&from));
}

void PowerOptions::MergeFrom(const PowerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.PowerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_.MergeFrom(from.battery_);
  if (from.power_source() != 0) {
    set_power_source(from.power_source());
  }
  if (from.battery_status() != 0) {
    set_battery_status(from.battery_status());
  }
  if (from.full_battery_life_time() != 0) {
    set_full_battery_life_time(from.full_battery_life_time());
  }
  if (from.remaining_battery_life_time() != 0) {
    set_remaining_battery_life_time(from.remaining_battery_life_time());
  }
  if (from.battery_life_percent() != 0) {
    set_battery_life_percent(from.battery_life_percent());
  }
}

void PowerOptions::CopyFrom(const PowerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.PowerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerOptions::IsInitialized() const {
  return true;
}

void PowerOptions::Swap(PowerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerOptions::InternalSwap(PowerOptions* other) {
  using std::swap;
  battery_.InternalSwap(&other->battery_);
  swap(power_source_, other->power_source_);
  swap(battery_status_, other->battery_status_);
  swap(full_battery_life_time_, other->full_battery_life_time_);
  swap(remaining_battery_life_time_, other->remaining_battery_life_time_);
  swap(battery_life_percent_, other->battery_life_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PowerOptions::GetTypeName() const {
  return "aspia.proto.PowerOptions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_printer.proto

#include "category_printer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class Printers_ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Printers_Item>
      _instance;
} _Printers_Item_default_instance_;
class PrintersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Printers>
      _instance;
} _Printers_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fprinter_2eproto {
void InitDefaultsPrinters_ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_Printers_Item_default_instance_;
    new (ptr) ::aspia::proto::Printers_Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Printers_Item::InitAsDefaultInstance();
}

void InitDefaultsPrinters_Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrinters_ItemImpl);
}

void InitDefaultsPrintersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fprinter_2eproto::InitDefaultsPrinters_Item();
  {
    void* ptr = &::aspia::proto::_Printers_default_instance_;
    new (ptr) ::aspia::proto::Printers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::Printers::InitAsDefaultInstance();
}

void InitDefaultsPrinters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrintersImpl);
}

}  // namespace protobuf_category_5fprinter_2eproto
namespace aspia {
namespace proto {
bool Printers_Item_Orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Printers_Item_Orientation Printers_Item::ORIENTATION_UNKNOWN;
const Printers_Item_Orientation Printers_Item::ORIENTATION_PORTRAIT;
const Printers_Item_Orientation Printers_Item::ORIENTATION_LANDSCAPE;
const Printers_Item_Orientation Printers_Item::Orientation_MIN;
const Printers_Item_Orientation Printers_Item::Orientation_MAX;
const int Printers_Item::Orientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Printers_Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers_Item::kNameFieldNumber;
const int Printers_Item::kIsDefaultFieldNumber;
const int Printers_Item::kIsSharedFieldNumber;
const int Printers_Item::kShareNameFieldNumber;
const int Printers_Item::kPortNameFieldNumber;
const int Printers_Item::kDriverNameFieldNumber;
const int Printers_Item::kDeviceNameFieldNumber;
const int Printers_Item::kPrintProcessorFieldNumber;
const int Printers_Item::kDataTypeFieldNumber;
const int Printers_Item::kServerNameFieldNumber;
const int Printers_Item::kLocationFieldNumber;
const int Printers_Item::kCommentFieldNumber;
const int Printers_Item::kJobsCountFieldNumber;
const int Printers_Item::kPaperWidthFieldNumber;
const int Printers_Item::kPaperLengthFieldNumber;
const int Printers_Item::kPrintQualityFieldNumber;
const int Printers_Item::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers_Item::Printers_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fprinter_2eproto::InitDefaultsPrinters_Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Printers.Item)
}
Printers_Item::Printers_Item(const Printers_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_name().size() > 0) {
    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port_name().size() > 0) {
    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driver_name().size() > 0) {
    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.print_processor().size() > 0) {
    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_type().size() > 0) {
    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Printers.Item)
}

void Printers_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _cached_size_ = 0;
}

Printers_Item::~Printers_Item() {
  // @@protoc_insertion_point(destructor:aspia.proto.Printers.Item)
  SharedDtor();
}

void Printers_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Printers_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers_Item& Printers_Item::default_instance() {
  ::protobuf_category_5fprinter_2eproto::InitDefaultsPrinters_Item();
  return *internal_default_instance();
}

Printers_Item* Printers_Item::New(::google::protobuf::Arena* arena) const {
  Printers_Item* n = new Printers_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(orientation_));
  _internal_metadata_.Clear();
}

bool Printers_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Printers.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_default = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_shared = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_name().data(), static_cast<int>(this->share_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.share_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_name().data(), static_cast<int>(this->port_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.port_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driver_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driver_name().data(), static_cast<int>(this->driver_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.driver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string print_processor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_processor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->print_processor().data(), static_cast<int>(this->print_processor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.print_processor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), static_cast<int>(this->data_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.data_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.Printers.Item.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jobs_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_width = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 paper_length = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 print_quality = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.proto.Printers.Item.Orientation orientation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orientation(static_cast< ::aspia::proto::Printers_Item_Orientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Printers.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Printers.Item)
  return false;
#undef DO_
}

void Printers_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Printers.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_default(), output);
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_shared(), output);
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_name().data(), static_cast<int>(this->share_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.share_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->share_name(), output);
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_name().data(), static_cast<int>(this->port_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.port_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->port_name(), output);
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver_name().data(), static_cast<int>(this->driver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.driver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->driver_name(), output);
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_name(), output);
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->print_processor().data(), static_cast<int>(this->print_processor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.print_processor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->print_processor(), output);
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), static_cast<int>(this->data_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->data_type(), output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // string location = 11;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->location(), output);
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.Printers.Item.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->comment(), output);
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->jobs_count(), output);
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->paper_width(), output);
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->paper_length(), output);
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->print_quality(), output);
  }

  // .aspia.proto.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->orientation(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Printers.Item)
}

size_t Printers_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Printers.Item)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string share_name = 4;
  if (this->share_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_name());
  }

  // string port_name = 5;
  if (this->port_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_name());
  }

  // string driver_name = 6;
  if (this->driver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver_name());
  }

  // string device_name = 7;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string print_processor = 8;
  if (this->print_processor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->print_processor());
  }

  // string data_type = 9;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string location = 11;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string comment = 12;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // bool is_default = 2;
  if (this->is_default() != 0) {
    total_size += 1 + 1;
  }

  // bool is_shared = 3;
  if (this->is_shared() != 0) {
    total_size += 1 + 1;
  }

  // int32 jobs_count = 13;
  if (this->jobs_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jobs_count());
  }

  // int32 paper_width = 14;
  if (this->paper_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_width());
  }

  // int32 paper_length = 15;
  if (this->paper_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paper_length());
  }

  // int32 print_quality = 16;
  if (this->print_quality() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->print_quality());
  }

  // .aspia.proto.Printers.Item.Orientation orientation = 17;
  if (this->orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers_Item*>(&from));
}

void Printers_Item::MergeFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Printers.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.share_name().size() > 0) {

    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  if (from.port_name().size() > 0) {

    port_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_);
  }
  if (from.driver_name().size() > 0) {

    driver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_name_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.print_processor().size() > 0) {

    print_processor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.print_processor_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.is_default() != 0) {
    set_is_default(from.is_default());
  }
  if (from.is_shared() != 0) {
    set_is_shared(from.is_shared());
  }
  if (from.jobs_count() != 0) {
    set_jobs_count(from.jobs_count());
  }
  if (from.paper_width() != 0) {
    set_paper_width(from.paper_width());
  }
  if (from.paper_length() != 0) {
    set_paper_length(from.paper_length());
  }
  if (from.print_quality() != 0) {
    set_print_quality(from.print_quality());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void Printers_Item::CopyFrom(const Printers_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Printers.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers_Item::IsInitialized() const {
  return true;
}

void Printers_Item::Swap(Printers_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers_Item::InternalSwap(Printers_Item* other) {
  using std::swap;
  name_.Swap(&other->name_);
  share_name_.Swap(&other->share_name_);
  port_name_.Swap(&other->port_name_);
  driver_name_.Swap(&other->driver_name_);
  device_name_.Swap(&other->device_name_);
  print_processor_.Swap(&other->print_processor_);
  data_type_.Swap(&other->data_type_);
  server_name_.Swap(&other->server_name_);
  location_.Swap(&other->location_);
  comment_.Swap(&other->comment_);
  swap(is_default_, other->is_default_);
  swap(is_shared_, other->is_shared_);
  swap(jobs_count_, other->jobs_count_);
  swap(paper_width_, other->paper_width_);
  swap(paper_length_, other->paper_length_);
  swap(print_quality_, other->print_quality_);
  swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers_Item::GetTypeName() const {
  return "aspia.proto.Printers.Item";
}


// ===================================================================

void Printers::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers::Printers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fprinter_2eproto::InitDefaultsPrinters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.Printers)
}
Printers::Printers(const Printers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.Printers)
}

void Printers::SharedCtor() {
  _cached_size_ = 0;
}

Printers::~Printers() {
  // @@protoc_insertion_point(destructor:aspia.proto.Printers)
  SharedDtor();
}

void Printers::SharedDtor() {
}

void Printers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers& Printers::default_instance() {
  ::protobuf_category_5fprinter_2eproto::InitDefaultsPrinters();
  return *internal_default_instance();
}

Printers* Printers::New(::google::protobuf::Arena* arena) const {
  Printers* n = new Printers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear();
}

bool Printers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.Printers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.Printers.Item item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.Printers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.Printers)
  return false;
#undef DO_
}

void Printers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.Printers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.Printers.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.Printers)
}

size_t Printers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.Printers)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.Printers.Item item = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers*>(&from));
}

void Printers::MergeFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.Printers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void Printers::CopyFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.Printers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers::IsInitialized() const {
  return true;
}

void Printers::Swap(Printers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers::InternalSwap(Printers* other) {
  using std::swap;
  item_.InternalSwap(&other->item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Printers::GetTypeName() const {
  return "aspia.proto.Printers";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

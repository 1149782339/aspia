// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_printer.proto

#ifndef PROTOBUF_category_5fprinter_2eproto__INCLUDED
#define PROTOBUF_category_5fprinter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fprinter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsPrinters_ItemImpl();
void InitDefaultsPrinters_Item();
void InitDefaultsPrintersImpl();
void InitDefaultsPrinters();
inline void InitDefaults() {
  InitDefaultsPrinters_Item();
  InitDefaultsPrinters();
}
}  // namespace protobuf_category_5fprinter_2eproto
namespace aspia {
namespace proto {
class Printers;
class PrintersDefaultTypeInternal;
extern PrintersDefaultTypeInternal _Printers_default_instance_;
class Printers_Item;
class Printers_ItemDefaultTypeInternal;
extern Printers_ItemDefaultTypeInternal _Printers_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

enum Printers_Item_Orientation {
  Printers_Item_Orientation_ORIENTATION_UNKNOWN = 0,
  Printers_Item_Orientation_ORIENTATION_PORTRAIT = 1,
  Printers_Item_Orientation_ORIENTATION_LANDSCAPE = 2,
  Printers_Item_Orientation_Printers_Item_Orientation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Printers_Item_Orientation_Printers_Item_Orientation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Printers_Item_Orientation_IsValid(int value);
const Printers_Item_Orientation Printers_Item_Orientation_Orientation_MIN = Printers_Item_Orientation_ORIENTATION_UNKNOWN;
const Printers_Item_Orientation Printers_Item_Orientation_Orientation_MAX = Printers_Item_Orientation_ORIENTATION_LANDSCAPE;
const int Printers_Item_Orientation_Orientation_ARRAYSIZE = Printers_Item_Orientation_Orientation_MAX + 1;

// ===================================================================

class Printers_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Printers.Item) */ {
 public:
  Printers_Item();
  virtual ~Printers_Item();

  Printers_Item(const Printers_Item& from);

  inline Printers_Item& operator=(const Printers_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Printers_Item(Printers_Item&& from) noexcept
    : Printers_Item() {
    *this = ::std::move(from);
  }

  inline Printers_Item& operator=(Printers_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Printers_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Printers_Item* internal_default_instance() {
    return reinterpret_cast<const Printers_Item*>(
               &_Printers_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Printers_Item* other);
  friend void swap(Printers_Item& a, Printers_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Printers_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Printers_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Printers_Item& from);
  void MergeFrom(const Printers_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Printers_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Printers_Item_Orientation Orientation;
  static const Orientation ORIENTATION_UNKNOWN =
    Printers_Item_Orientation_ORIENTATION_UNKNOWN;
  static const Orientation ORIENTATION_PORTRAIT =
    Printers_Item_Orientation_ORIENTATION_PORTRAIT;
  static const Orientation ORIENTATION_LANDSCAPE =
    Printers_Item_Orientation_ORIENTATION_LANDSCAPE;
  static inline bool Orientation_IsValid(int value) {
    return Printers_Item_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    Printers_Item_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    Printers_Item_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    Printers_Item_Orientation_Orientation_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string share_name = 4;
  void clear_share_name();
  static const int kShareNameFieldNumber = 4;
  const ::std::string& share_name() const;
  void set_share_name(const ::std::string& value);
  #if LANG_CXX11
  void set_share_name(::std::string&& value);
  #endif
  void set_share_name(const char* value);
  void set_share_name(const char* value, size_t size);
  ::std::string* mutable_share_name();
  ::std::string* release_share_name();
  void set_allocated_share_name(::std::string* share_name);

  // string port_name = 5;
  void clear_port_name();
  static const int kPortNameFieldNumber = 5;
  const ::std::string& port_name() const;
  void set_port_name(const ::std::string& value);
  #if LANG_CXX11
  void set_port_name(::std::string&& value);
  #endif
  void set_port_name(const char* value);
  void set_port_name(const char* value, size_t size);
  ::std::string* mutable_port_name();
  ::std::string* release_port_name();
  void set_allocated_port_name(::std::string* port_name);

  // string driver_name = 6;
  void clear_driver_name();
  static const int kDriverNameFieldNumber = 6;
  const ::std::string& driver_name() const;
  void set_driver_name(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_name(::std::string&& value);
  #endif
  void set_driver_name(const char* value);
  void set_driver_name(const char* value, size_t size);
  ::std::string* mutable_driver_name();
  ::std::string* release_driver_name();
  void set_allocated_driver_name(::std::string* driver_name);

  // string device_name = 7;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 7;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // string print_processor = 8;
  void clear_print_processor();
  static const int kPrintProcessorFieldNumber = 8;
  const ::std::string& print_processor() const;
  void set_print_processor(const ::std::string& value);
  #if LANG_CXX11
  void set_print_processor(::std::string&& value);
  #endif
  void set_print_processor(const char* value);
  void set_print_processor(const char* value, size_t size);
  ::std::string* mutable_print_processor();
  ::std::string* release_print_processor();
  void set_allocated_print_processor(::std::string* print_processor);

  // string data_type = 9;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 9;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_type(::std::string&& value);
  #endif
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // string server_name = 10;
  void clear_server_name();
  static const int kServerNameFieldNumber = 10;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string location = 11;
  void clear_location();
  static const int kLocationFieldNumber = 11;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string comment = 12;
  void clear_comment();
  static const int kCommentFieldNumber = 12;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // bool is_default = 2;
  void clear_is_default();
  static const int kIsDefaultFieldNumber = 2;
  bool is_default() const;
  void set_is_default(bool value);

  // bool is_shared = 3;
  void clear_is_shared();
  static const int kIsSharedFieldNumber = 3;
  bool is_shared() const;
  void set_is_shared(bool value);

  // int32 jobs_count = 13;
  void clear_jobs_count();
  static const int kJobsCountFieldNumber = 13;
  ::google::protobuf::int32 jobs_count() const;
  void set_jobs_count(::google::protobuf::int32 value);

  // int32 paper_width = 14;
  void clear_paper_width();
  static const int kPaperWidthFieldNumber = 14;
  ::google::protobuf::int32 paper_width() const;
  void set_paper_width(::google::protobuf::int32 value);

  // int32 paper_length = 15;
  void clear_paper_length();
  static const int kPaperLengthFieldNumber = 15;
  ::google::protobuf::int32 paper_length() const;
  void set_paper_length(::google::protobuf::int32 value);

  // int32 print_quality = 16;
  void clear_print_quality();
  static const int kPrintQualityFieldNumber = 16;
  ::google::protobuf::int32 print_quality() const;
  void set_print_quality(::google::protobuf::int32 value);

  // .aspia.proto.Printers.Item.Orientation orientation = 17;
  void clear_orientation();
  static const int kOrientationFieldNumber = 17;
  ::aspia::proto::Printers_Item_Orientation orientation() const;
  void set_orientation(::aspia::proto::Printers_Item_Orientation value);

  // @@protoc_insertion_point(class_scope:aspia.proto.Printers.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr share_name_;
  ::google::protobuf::internal::ArenaStringPtr port_name_;
  ::google::protobuf::internal::ArenaStringPtr driver_name_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr print_processor_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  bool is_default_;
  bool is_shared_;
  ::google::protobuf::int32 jobs_count_;
  ::google::protobuf::int32 paper_width_;
  ::google::protobuf::int32 paper_length_;
  ::google::protobuf::int32 print_quality_;
  int orientation_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fprinter_2eproto::TableStruct;
  friend void ::protobuf_category_5fprinter_2eproto::InitDefaultsPrinters_ItemImpl();
};
// -------------------------------------------------------------------

class Printers : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.Printers) */ {
 public:
  Printers();
  virtual ~Printers();

  Printers(const Printers& from);

  inline Printers& operator=(const Printers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Printers(Printers&& from) noexcept
    : Printers() {
    *this = ::std::move(from);
  }

  inline Printers& operator=(Printers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Printers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Printers* internal_default_instance() {
    return reinterpret_cast<const Printers*>(
               &_Printers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Printers* other);
  friend void swap(Printers& a, Printers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Printers* New() const PROTOBUF_FINAL { return New(NULL); }

  Printers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Printers& from);
  void MergeFrom(const Printers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Printers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Printers_Item Item;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.Printers.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::Printers_Item& item(int index) const;
  ::aspia::proto::Printers_Item* mutable_item(int index);
  ::aspia::proto::Printers_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Printers_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Printers_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.Printers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::Printers_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fprinter_2eproto::TableStruct;
  friend void ::protobuf_category_5fprinter_2eproto::InitDefaultsPrintersImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Printers_Item

// string name = 1;
inline void Printers_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.name)
  return name_.GetNoArena();
}
inline void Printers_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.name)
}
#if LANG_CXX11
inline void Printers_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.name)
}
#endif
inline void Printers_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.name)
}
inline void Printers_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.name)
}
inline ::std::string* Printers_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.name)
}

// bool is_default = 2;
inline void Printers_Item::clear_is_default() {
  is_default_ = false;
}
inline bool Printers_Item::is_default() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.is_default)
  return is_default_;
}
inline void Printers_Item::set_is_default(bool value) {
  
  is_default_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.is_default)
}

// bool is_shared = 3;
inline void Printers_Item::clear_is_shared() {
  is_shared_ = false;
}
inline bool Printers_Item::is_shared() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.is_shared)
  return is_shared_;
}
inline void Printers_Item::set_is_shared(bool value) {
  
  is_shared_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.is_shared)
}

// string share_name = 4;
inline void Printers_Item::clear_share_name() {
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::share_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.share_name)
  return share_name_.GetNoArena();
}
inline void Printers_Item::set_share_name(const ::std::string& value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.share_name)
}
#if LANG_CXX11
inline void Printers_Item::set_share_name(::std::string&& value) {
  
  share_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.share_name)
}
#endif
inline void Printers_Item::set_share_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.share_name)
}
inline void Printers_Item::set_share_name(const char* value, size_t size) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.share_name)
}
inline ::std::string* Printers_Item::mutable_share_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.share_name)
  return share_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_share_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.share_name)
  
  return share_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_share_name(::std::string* share_name) {
  if (share_name != NULL) {
    
  } else {
    
  }
  share_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.share_name)
}

// string port_name = 5;
inline void Printers_Item::clear_port_name() {
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::port_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.port_name)
  return port_name_.GetNoArena();
}
inline void Printers_Item::set_port_name(const ::std::string& value) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.port_name)
}
#if LANG_CXX11
inline void Printers_Item::set_port_name(::std::string&& value) {
  
  port_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.port_name)
}
#endif
inline void Printers_Item::set_port_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.port_name)
}
inline void Printers_Item::set_port_name(const char* value, size_t size) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.port_name)
}
inline ::std::string* Printers_Item::mutable_port_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.port_name)
  return port_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_port_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.port_name)
  
  return port_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_port_name(::std::string* port_name) {
  if (port_name != NULL) {
    
  } else {
    
  }
  port_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.port_name)
}

// string driver_name = 6;
inline void Printers_Item::clear_driver_name() {
  driver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::driver_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.driver_name)
  return driver_name_.GetNoArena();
}
inline void Printers_Item::set_driver_name(const ::std::string& value) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.driver_name)
}
#if LANG_CXX11
inline void Printers_Item::set_driver_name(::std::string&& value) {
  
  driver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.driver_name)
}
#endif
inline void Printers_Item::set_driver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.driver_name)
}
inline void Printers_Item::set_driver_name(const char* value, size_t size) {
  
  driver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.driver_name)
}
inline ::std::string* Printers_Item::mutable_driver_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.driver_name)
  return driver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_driver_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.driver_name)
  
  return driver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_driver_name(::std::string* driver_name) {
  if (driver_name != NULL) {
    
  } else {
    
  }
  driver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.driver_name)
}

// string device_name = 7;
inline void Printers_Item::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::device_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.device_name)
  return device_name_.GetNoArena();
}
inline void Printers_Item::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.device_name)
}
#if LANG_CXX11
inline void Printers_Item::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.device_name)
}
#endif
inline void Printers_Item::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.device_name)
}
inline void Printers_Item::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.device_name)
}
inline ::std::string* Printers_Item::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_device_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.device_name)
}

// string print_processor = 8;
inline void Printers_Item::clear_print_processor() {
  print_processor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::print_processor() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.print_processor)
  return print_processor_.GetNoArena();
}
inline void Printers_Item::set_print_processor(const ::std::string& value) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.print_processor)
}
#if LANG_CXX11
inline void Printers_Item::set_print_processor(::std::string&& value) {
  
  print_processor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.print_processor)
}
#endif
inline void Printers_Item::set_print_processor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.print_processor)
}
inline void Printers_Item::set_print_processor(const char* value, size_t size) {
  
  print_processor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.print_processor)
}
inline ::std::string* Printers_Item::mutable_print_processor() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.print_processor)
  return print_processor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_print_processor() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.print_processor)
  
  return print_processor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_print_processor(::std::string* print_processor) {
  if (print_processor != NULL) {
    
  } else {
    
  }
  print_processor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), print_processor);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.print_processor)
}

// string data_type = 9;
inline void Printers_Item::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::data_type() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.data_type)
  return data_type_.GetNoArena();
}
inline void Printers_Item::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.data_type)
}
#if LANG_CXX11
inline void Printers_Item::set_data_type(::std::string&& value) {
  
  data_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.data_type)
}
#endif
inline void Printers_Item::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.data_type)
}
inline void Printers_Item::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.data_type)
}
inline ::std::string* Printers_Item::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_data_type() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.data_type)
}

// string server_name = 10;
inline void Printers_Item::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::server_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.server_name)
  return server_name_.GetNoArena();
}
inline void Printers_Item::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.server_name)
}
#if LANG_CXX11
inline void Printers_Item::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.server_name)
}
#endif
inline void Printers_Item::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.server_name)
}
inline void Printers_Item::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.server_name)
}
inline ::std::string* Printers_Item::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_server_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.server_name)
}

// string location = 11;
inline void Printers_Item::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::location() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.location)
  return location_.GetNoArena();
}
inline void Printers_Item::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.location)
}
#if LANG_CXX11
inline void Printers_Item::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.location)
}
#endif
inline void Printers_Item::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.location)
}
inline void Printers_Item::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.location)
}
inline ::std::string* Printers_Item::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_location() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.location)
}

// string comment = 12;
inline void Printers_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.comment)
  return comment_.GetNoArena();
}
inline void Printers_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.comment)
}
#if LANG_CXX11
inline void Printers_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.Printers.Item.comment)
}
#endif
inline void Printers_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.Printers.Item.comment)
}
inline void Printers_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.Printers.Item.comment)
}
inline ::std::string* Printers_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.proto.Printers.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.Printers.Item.comment)
}

// int32 jobs_count = 13;
inline void Printers_Item::clear_jobs_count() {
  jobs_count_ = 0;
}
inline ::google::protobuf::int32 Printers_Item::jobs_count() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.jobs_count)
  return jobs_count_;
}
inline void Printers_Item::set_jobs_count(::google::protobuf::int32 value) {
  
  jobs_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.jobs_count)
}

// int32 paper_width = 14;
inline void Printers_Item::clear_paper_width() {
  paper_width_ = 0;
}
inline ::google::protobuf::int32 Printers_Item::paper_width() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.paper_width)
  return paper_width_;
}
inline void Printers_Item::set_paper_width(::google::protobuf::int32 value) {
  
  paper_width_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.paper_width)
}

// int32 paper_length = 15;
inline void Printers_Item::clear_paper_length() {
  paper_length_ = 0;
}
inline ::google::protobuf::int32 Printers_Item::paper_length() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.paper_length)
  return paper_length_;
}
inline void Printers_Item::set_paper_length(::google::protobuf::int32 value) {
  
  paper_length_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.paper_length)
}

// int32 print_quality = 16;
inline void Printers_Item::clear_print_quality() {
  print_quality_ = 0;
}
inline ::google::protobuf::int32 Printers_Item::print_quality() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.print_quality)
  return print_quality_;
}
inline void Printers_Item::set_print_quality(::google::protobuf::int32 value) {
  
  print_quality_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.print_quality)
}

// .aspia.proto.Printers.Item.Orientation orientation = 17;
inline void Printers_Item::clear_orientation() {
  orientation_ = 0;
}
inline ::aspia::proto::Printers_Item_Orientation Printers_Item::orientation() const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.Item.orientation)
  return static_cast< ::aspia::proto::Printers_Item_Orientation >(orientation_);
}
inline void Printers_Item::set_orientation(::aspia::proto::Printers_Item_Orientation value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.Printers.Item.orientation)
}

// -------------------------------------------------------------------

// Printers

// repeated .aspia.proto.Printers.Item item = 1;
inline int Printers::item_size() const {
  return item_.size();
}
inline void Printers::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::Printers_Item& Printers::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.Printers.item)
  return item_.Get(index);
}
inline ::aspia::proto::Printers_Item* Printers::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.Printers.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::Printers_Item* Printers::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.Printers.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::Printers_Item >*
Printers::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.Printers.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::Printers_Item >&
Printers::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.Printers.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aspia::proto::Printers_Item_Orientation> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fprinter_2eproto__INCLUDED

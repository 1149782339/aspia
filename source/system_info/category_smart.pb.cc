// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_smart.proto

#include "category_smart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace aspia {
namespace proto {
class SMART_AttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMART_Attribute>
      _instance;
} _SMART_Attribute_default_instance_;
class SMART_DriveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMART_Drive>
      _instance;
} _SMART_Drive_default_instance_;
class SMARTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SMART>
      _instance;
} _SMART_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace protobuf_category_5fsmart_2eproto {
void InitDefaultsSMART_AttributeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::aspia::proto::_SMART_Attribute_default_instance_;
    new (ptr) ::aspia::proto::SMART_Attribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SMART_Attribute::InitAsDefaultInstance();
}

void InitDefaultsSMART_Attribute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSMART_AttributeImpl);
}

void InitDefaultsSMART_DriveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Attribute();
  {
    void* ptr = &::aspia::proto::_SMART_Drive_default_instance_;
    new (ptr) ::aspia::proto::SMART_Drive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SMART_Drive::InitAsDefaultInstance();
}

void InitDefaultsSMART_Drive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSMART_DriveImpl);
}

void InitDefaultsSMARTImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Drive();
  {
    void* ptr = &::aspia::proto::_SMART_default_instance_;
    new (ptr) ::aspia::proto::SMART();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::proto::SMART::InitAsDefaultInstance();
}

void InitDefaultsSMART() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSMARTImpl);
}

}  // namespace protobuf_category_5fsmart_2eproto
namespace aspia {
namespace proto {
bool SMART_Attribute_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SMART_Attribute_Flags SMART_Attribute::FLAG_NONE;
const SMART_Attribute_Flags SMART_Attribute::FLAG_PRE_FAILURE;
const SMART_Attribute_Flags SMART_Attribute::Flags_MIN;
const SMART_Attribute_Flags SMART_Attribute::Flags_MAX;
const int SMART_Attribute::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SMART_Attribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMART_Attribute::kFlagsFieldNumber;
const int SMART_Attribute::kIdFieldNumber;
const int SMART_Attribute::kValueFieldNumber;
const int SMART_Attribute::kWorstValueFieldNumber;
const int SMART_Attribute::kThresholdFieldNumber;
const int SMART_Attribute::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMART_Attribute::SMART_Attribute()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Attribute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SMART.Attribute)
}
SMART_Attribute::SMART_Attribute(const SMART_Attribute& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SMART.Attribute)
}

void SMART_Attribute::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(threshold_));
  _cached_size_ = 0;
}

SMART_Attribute::~SMART_Attribute() {
  // @@protoc_insertion_point(destructor:aspia.proto.SMART.Attribute)
  SharedDtor();
}

void SMART_Attribute::SharedDtor() {
}

void SMART_Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SMART_Attribute& SMART_Attribute::default_instance() {
  ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Attribute();
  return *internal_default_instance();
}

SMART_Attribute* SMART_Attribute::New(::google::protobuf::Arena* arena) const {
  SMART_Attribute* n = new SMART_Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SMART_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SMART.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(threshold_));
  _internal_metadata_.Clear();
}

bool SMART_Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SMART.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worst_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worst_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SMART.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SMART.Attribute)
  return false;
#undef DO_
}

void SMART_Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SMART.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // uint32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // uint32 worst_value = 4;
  if (this->worst_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->worst_value(), output);
  }

  // uint32 threshold = 5;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->threshold(), output);
  }

  // uint64 raw = 6;
  if (this->raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->raw(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SMART.Attribute)
}

size_t SMART_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SMART.Attribute)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // uint32 worst_value = 4;
  if (this->worst_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worst_value());
  }

  // uint64 raw = 6;
  if (this->raw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->raw());
  }

  // uint32 threshold = 5;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threshold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMART_Attribute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SMART_Attribute*>(&from));
}

void SMART_Attribute::MergeFrom(const SMART_Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SMART.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.worst_value() != 0) {
    set_worst_value(from.worst_value());
  }
  if (from.raw() != 0) {
    set_raw(from.raw());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
}

void SMART_Attribute::CopyFrom(const SMART_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SMART.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMART_Attribute::IsInitialized() const {
  return true;
}

void SMART_Attribute::Swap(SMART_Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMART_Attribute::InternalSwap(SMART_Attribute* other) {
  using std::swap;
  swap(flags_, other->flags_);
  swap(id_, other->id_);
  swap(value_, other->value_);
  swap(worst_value_, other->worst_value_);
  swap(raw_, other->raw_);
  swap(threshold_, other->threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SMART_Attribute::GetTypeName() const {
  return "aspia.proto.SMART.Attribute";
}


// ===================================================================

void SMART_Drive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMART_Drive::kModelNumberFieldNumber;
const int SMART_Drive::kAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMART_Drive::SMART_Drive()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Drive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SMART.Drive)
}
SMART_Drive::SMART_Drive(const SMART_Drive& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      attribute_(from.attribute_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_number().size() > 0) {
    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SMART.Drive)
}

void SMART_Drive::SharedCtor() {
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SMART_Drive::~SMART_Drive() {
  // @@protoc_insertion_point(destructor:aspia.proto.SMART.Drive)
  SharedDtor();
}

void SMART_Drive::SharedDtor() {
  model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SMART_Drive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SMART_Drive& SMART_Drive::default_instance() {
  ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART_Drive();
  return *internal_default_instance();
}

SMART_Drive* SMART_Drive::New(::google::protobuf::Arena* arena) const {
  SMART_Drive* n = new SMART_Drive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SMART_Drive::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SMART.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SMART_Drive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SMART.Drive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_number().data(), static_cast<int>(this->model_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.proto.SMART.Drive.model_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.proto.SMART.Attribute attribute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SMART.Drive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SMART.Drive)
  return false;
#undef DO_
}

void SMART_Drive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SMART.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_number = 1;
  if (this->model_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_number().data(), static_cast<int>(this->model_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.proto.SMART.Drive.model_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_number(), output);
  }

  // repeated .aspia.proto.SMART.Attribute attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attribute(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SMART.Drive)
}

size_t SMART_Drive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SMART.Drive)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.SMART.Attribute attribute = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // string model_number = 1;
  if (this->model_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMART_Drive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SMART_Drive*>(&from));
}

void SMART_Drive::MergeFrom(const SMART_Drive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SMART.Drive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  if (from.model_number().size() > 0) {

    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
}

void SMART_Drive::CopyFrom(const SMART_Drive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SMART.Drive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMART_Drive::IsInitialized() const {
  return true;
}

void SMART_Drive::Swap(SMART_Drive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMART_Drive::InternalSwap(SMART_Drive* other) {
  using std::swap;
  attribute_.InternalSwap(&other->attribute_);
  model_number_.Swap(&other->model_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SMART_Drive::GetTypeName() const {
  return "aspia.proto.SMART.Drive";
}


// ===================================================================

void SMART::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMART::kDriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMART::SMART()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.proto.SMART)
}
SMART::SMART(const SMART& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      drive_(from.drive_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.proto.SMART)
}

void SMART::SharedCtor() {
  _cached_size_ = 0;
}

SMART::~SMART() {
  // @@protoc_insertion_point(destructor:aspia.proto.SMART)
  SharedDtor();
}

void SMART::SharedDtor() {
}

void SMART::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SMART& SMART::default_instance() {
  ::protobuf_category_5fsmart_2eproto::InitDefaultsSMART();
  return *internal_default_instance();
}

SMART* SMART::New(::google::protobuf::Arena* arena) const {
  SMART* n = new SMART;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SMART::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.proto.SMART)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drive_.Clear();
  _internal_metadata_.Clear();
}

bool SMART::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.proto.SMART)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.proto.SMART.Drive drive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.proto.SMART)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.proto.SMART)
  return false;
#undef DO_
}

void SMART::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.proto.SMART)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.proto.SMART.Drive drive = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->drive_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->drive(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.proto.SMART)
}

size_t SMART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.proto.SMART)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.proto.SMART.Drive drive = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->drive_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->drive(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMART::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SMART*>(&from));
}

void SMART::MergeFrom(const SMART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.proto.SMART)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drive_.MergeFrom(from.drive_);
}

void SMART::CopyFrom(const SMART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.proto.SMART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMART::IsInitialized() const {
  return true;
}

void SMART::Swap(SMART* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMART::InternalSwap(SMART* other) {
  using std::swap;
  drive_.InternalSwap(&other->drive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string SMART::GetTypeName() const {
  return "aspia.proto.SMART";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

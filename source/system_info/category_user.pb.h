// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: category_user.proto

#ifndef PROTOBUF_category_5fuser_2eproto__INCLUDED
#define PROTOBUF_category_5fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_category_5fuser_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsUser_ItemImpl();
void InitDefaultsUser_Item();
void InitDefaultsUserImpl();
void InitDefaultsUser();
inline void InitDefaults() {
  InitDefaultsUser_Item();
  InitDefaultsUser();
}
}  // namespace protobuf_category_5fuser_2eproto
namespace aspia {
namespace proto {
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_Item;
class User_ItemDefaultTypeInternal;
extern User_ItemDefaultTypeInternal _User_Item_default_instance_;
}  // namespace proto
}  // namespace aspia
namespace aspia {
namespace proto {

// ===================================================================

class User_Item : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.User.Item) */ {
 public:
  User_Item();
  virtual ~User_Item();

  User_Item(const User_Item& from);

  inline User_Item& operator=(const User_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User_Item(User_Item&& from) noexcept
    : User_Item() {
    *this = ::std::move(from);
  }

  inline User_Item& operator=(User_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const User_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User_Item* internal_default_instance() {
    return reinterpret_cast<const User_Item*>(
               &_User_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(User_Item* other);
  friend void swap(User_Item& a, User_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  User_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const User_Item& from);
  void MergeFrom(const User_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string full_name = 2;
  void clear_full_name();
  static const int kFullNameFieldNumber = 2;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // bool is_disabled = 4;
  void clear_is_disabled();
  static const int kIsDisabledFieldNumber = 4;
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // bool is_password_cant_change = 5;
  void clear_is_password_cant_change();
  static const int kIsPasswordCantChangeFieldNumber = 5;
  bool is_password_cant_change() const;
  void set_is_password_cant_change(bool value);

  // bool is_password_expired = 6;
  void clear_is_password_expired();
  static const int kIsPasswordExpiredFieldNumber = 6;
  bool is_password_expired() const;
  void set_is_password_expired(bool value);

  // bool is_dont_expire_password = 7;
  void clear_is_dont_expire_password();
  static const int kIsDontExpirePasswordFieldNumber = 7;
  bool is_dont_expire_password() const;
  void set_is_dont_expire_password(bool value);

  // bool is_lockout = 8;
  void clear_is_lockout();
  static const int kIsLockoutFieldNumber = 8;
  bool is_lockout() const;
  void set_is_lockout(bool value);

  // uint32 number_logons = 9;
  void clear_number_logons();
  static const int kNumberLogonsFieldNumber = 9;
  ::google::protobuf::uint32 number_logons() const;
  void set_number_logons(::google::protobuf::uint32 value);

  // uint32 bad_password_count = 10;
  void clear_bad_password_count();
  static const int kBadPasswordCountFieldNumber = 10;
  ::google::protobuf::uint32 bad_password_count() const;
  void set_bad_password_count(::google::protobuf::uint32 value);

  // int64 last_logon_time = 11;
  void clear_last_logon_time();
  static const int kLastLogonTimeFieldNumber = 11;
  ::google::protobuf::int64 last_logon_time() const;
  void set_last_logon_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:aspia.proto.User.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  bool is_disabled_;
  bool is_password_cant_change_;
  bool is_password_expired_;
  bool is_dont_expire_password_;
  bool is_lockout_;
  ::google::protobuf::uint32 number_logons_;
  ::google::protobuf::uint32 bad_password_count_;
  ::google::protobuf::int64 last_logon_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fuser_2eproto::TableStruct;
  friend void ::protobuf_category_5fuser_2eproto::InitDefaultsUser_ItemImpl();
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:aspia.proto.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef User_Item Item;

  // accessors -------------------------------------------------------

  // repeated .aspia.proto.User.Item item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::aspia::proto::User_Item& item(int index) const;
  ::aspia::proto::User_Item* mutable_item(int index);
  ::aspia::proto::User_Item* add_item();
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::User_Item >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::aspia::proto::User_Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:aspia.proto.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::aspia::proto::User_Item > item_;
  mutable int _cached_size_;
  friend struct ::protobuf_category_5fuser_2eproto::TableStruct;
  friend void ::protobuf_category_5fuser_2eproto::InitDefaultsUserImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User_Item

// string name = 1;
inline void User_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_Item::name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.name)
  return name_.GetNoArena();
}
inline void User_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.name)
}
#if LANG_CXX11
inline void User_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.User.Item.name)
}
#endif
inline void User_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.User.Item.name)
}
inline void User_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.User.Item.name)
}
inline ::std::string* User_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.User.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_Item::release_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.User.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.User.Item.name)
}

// string full_name = 2;
inline void User_Item::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_Item::full_name() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.full_name)
  return full_name_.GetNoArena();
}
inline void User_Item::set_full_name(const ::std::string& value) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.full_name)
}
#if LANG_CXX11
inline void User_Item::set_full_name(::std::string&& value) {
  
  full_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.User.Item.full_name)
}
#endif
inline void User_Item::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.User.Item.full_name)
}
inline void User_Item::set_full_name(const char* value, size_t size) {
  
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.User.Item.full_name)
}
inline ::std::string* User_Item::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.User.Item.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_Item::release_full_name() {
  // @@protoc_insertion_point(field_release:aspia.proto.User.Item.full_name)
  
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_Item::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.User.Item.full_name)
}

// string comment = 3;
inline void User_Item::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_Item::comment() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.comment)
  return comment_.GetNoArena();
}
inline void User_Item::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.comment)
}
#if LANG_CXX11
inline void User_Item::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aspia.proto.User.Item.comment)
}
#endif
inline void User_Item::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aspia.proto.User.Item.comment)
}
inline void User_Item::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aspia.proto.User.Item.comment)
}
inline ::std::string* User_Item::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aspia.proto.User.Item.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_Item::release_comment() {
  // @@protoc_insertion_point(field_release:aspia.proto.User.Item.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_Item::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aspia.proto.User.Item.comment)
}

// bool is_disabled = 4;
inline void User_Item::clear_is_disabled() {
  is_disabled_ = false;
}
inline bool User_Item::is_disabled() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.is_disabled)
  return is_disabled_;
}
inline void User_Item::set_is_disabled(bool value) {
  
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.is_disabled)
}

// bool is_password_cant_change = 5;
inline void User_Item::clear_is_password_cant_change() {
  is_password_cant_change_ = false;
}
inline bool User_Item::is_password_cant_change() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.is_password_cant_change)
  return is_password_cant_change_;
}
inline void User_Item::set_is_password_cant_change(bool value) {
  
  is_password_cant_change_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.is_password_cant_change)
}

// bool is_password_expired = 6;
inline void User_Item::clear_is_password_expired() {
  is_password_expired_ = false;
}
inline bool User_Item::is_password_expired() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.is_password_expired)
  return is_password_expired_;
}
inline void User_Item::set_is_password_expired(bool value) {
  
  is_password_expired_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.is_password_expired)
}

// bool is_dont_expire_password = 7;
inline void User_Item::clear_is_dont_expire_password() {
  is_dont_expire_password_ = false;
}
inline bool User_Item::is_dont_expire_password() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.is_dont_expire_password)
  return is_dont_expire_password_;
}
inline void User_Item::set_is_dont_expire_password(bool value) {
  
  is_dont_expire_password_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.is_dont_expire_password)
}

// bool is_lockout = 8;
inline void User_Item::clear_is_lockout() {
  is_lockout_ = false;
}
inline bool User_Item::is_lockout() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.is_lockout)
  return is_lockout_;
}
inline void User_Item::set_is_lockout(bool value) {
  
  is_lockout_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.is_lockout)
}

// uint32 number_logons = 9;
inline void User_Item::clear_number_logons() {
  number_logons_ = 0u;
}
inline ::google::protobuf::uint32 User_Item::number_logons() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.number_logons)
  return number_logons_;
}
inline void User_Item::set_number_logons(::google::protobuf::uint32 value) {
  
  number_logons_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.number_logons)
}

// uint32 bad_password_count = 10;
inline void User_Item::clear_bad_password_count() {
  bad_password_count_ = 0u;
}
inline ::google::protobuf::uint32 User_Item::bad_password_count() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.bad_password_count)
  return bad_password_count_;
}
inline void User_Item::set_bad_password_count(::google::protobuf::uint32 value) {
  
  bad_password_count_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.bad_password_count)
}

// int64 last_logon_time = 11;
inline void User_Item::clear_last_logon_time() {
  last_logon_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User_Item::last_logon_time() const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.Item.last_logon_time)
  return last_logon_time_;
}
inline void User_Item::set_last_logon_time(::google::protobuf::int64 value) {
  
  last_logon_time_ = value;
  // @@protoc_insertion_point(field_set:aspia.proto.User.Item.last_logon_time)
}

// -------------------------------------------------------------------

// User

// repeated .aspia.proto.User.Item item = 1;
inline int User::item_size() const {
  return item_.size();
}
inline void User::clear_item() {
  item_.Clear();
}
inline const ::aspia::proto::User_Item& User::item(int index) const {
  // @@protoc_insertion_point(field_get:aspia.proto.User.item)
  return item_.Get(index);
}
inline ::aspia::proto::User_Item* User::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:aspia.proto.User.item)
  return item_.Mutable(index);
}
inline ::aspia::proto::User_Item* User::add_item() {
  // @@protoc_insertion_point(field_add:aspia.proto.User.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::aspia::proto::User_Item >*
User::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:aspia.proto.User.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::aspia::proto::User_Item >&
User::item() const {
  // @@protoc_insertion_point(field_list:aspia.proto.User.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aspia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_category_5fuser_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmi.proto

#include "dmi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_dmi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bios_Characteristics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cache;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Chassis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemoryDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OnBoardDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointingDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PortConnector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PortableBattery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Processor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_System;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemSlot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dmi_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Bios;
}  // namespace protobuf_dmi_2eproto
namespace aspia {
namespace system_info {
namespace dmi {
class Bios_CharacteristicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bios_Characteristics>
      _instance;
} _Bios_Characteristics_default_instance_;
class BiosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bios>
      _instance;
} _Bios_default_instance_;
class CacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cache>
      _instance;
} _Cache_default_instance_;
class ChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chassis>
      _instance;
} _Chassis_default_instance_;
class MemoryDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryDevice>
      _instance;
} _MemoryDevice_default_instance_;
class OnBoardDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnBoardDevice>
      _instance;
} _OnBoardDevice_default_instance_;
class PointingDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointingDevice>
      _instance;
} _PointingDevice_default_instance_;
class PortConnectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PortConnector>
      _instance;
} _PortConnector_default_instance_;
class PortableBatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PortableBattery>
      _instance;
} _PortableBattery_default_instance_;
class ProcessorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Processor>
      _instance;
} _Processor_default_instance_;
class SystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<System>
      _instance;
} _System_default_instance_;
class SystemSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemSlot>
      _instance;
} _SystemSlot_default_instance_;
class DmiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dmi>
      _instance;
} _Dmi_default_instance_;
}  // namespace dmi
}  // namespace system_info
}  // namespace aspia
namespace protobuf_dmi_2eproto {
static void InitDefaultsBios_Characteristics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Bios_Characteristics_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Bios_Characteristics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Bios_Characteristics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Bios_Characteristics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBios_Characteristics}, {}};

static void InitDefaultsBios() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Bios_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Bios();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Bios::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Bios =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBios}, {
      &protobuf_dmi_2eproto::scc_info_Bios_Characteristics.base,}};

static void InitDefaultsCache() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Cache_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Cache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Cache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Cache =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCache}, {}};

static void InitDefaultsChassis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Chassis_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Chassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Chassis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Chassis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChassis}, {}};

static void InitDefaultsMemoryDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_MemoryDevice_default_instance_;
    new (ptr) ::aspia::system_info::dmi::MemoryDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::MemoryDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemoryDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemoryDevice}, {}};

static void InitDefaultsOnBoardDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_OnBoardDevice_default_instance_;
    new (ptr) ::aspia::system_info::dmi::OnBoardDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::OnBoardDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OnBoardDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOnBoardDevice}, {}};

static void InitDefaultsPointingDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_PointingDevice_default_instance_;
    new (ptr) ::aspia::system_info::dmi::PointingDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::PointingDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointingDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointingDevice}, {}};

static void InitDefaultsPortConnector() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_PortConnector_default_instance_;
    new (ptr) ::aspia::system_info::dmi::PortConnector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::PortConnector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PortConnector =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPortConnector}, {}};

static void InitDefaultsPortableBattery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_PortableBattery_default_instance_;
    new (ptr) ::aspia::system_info::dmi::PortableBattery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::PortableBattery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PortableBattery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPortableBattery}, {}};

static void InitDefaultsProcessor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Processor_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Processor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Processor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Processor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessor}, {}};

static void InitDefaultsSystem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_System_default_instance_;
    new (ptr) ::aspia::system_info::dmi::System();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::System::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_System =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystem}, {}};

static void InitDefaultsSystemSlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_SystemSlot_default_instance_;
    new (ptr) ::aspia::system_info::dmi::SystemSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::SystemSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemSlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemSlot}, {}};

static void InitDefaultsDmi() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aspia::system_info::dmi::_Dmi_default_instance_;
    new (ptr) ::aspia::system_info::dmi::Dmi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aspia::system_info::dmi::Dmi::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_Dmi =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsDmi}, {
      &protobuf_dmi_2eproto::scc_info_Bios.base,
      &protobuf_dmi_2eproto::scc_info_Cache.base,
      &protobuf_dmi_2eproto::scc_info_Chassis.base,
      &protobuf_dmi_2eproto::scc_info_MemoryDevice.base,
      &protobuf_dmi_2eproto::scc_info_OnBoardDevice.base,
      &protobuf_dmi_2eproto::scc_info_PointingDevice.base,
      &protobuf_dmi_2eproto::scc_info_PortConnector.base,
      &protobuf_dmi_2eproto::scc_info_PortableBattery.base,
      &protobuf_dmi_2eproto::scc_info_Processor.base,
      &protobuf_dmi_2eproto::scc_info_System.base,
      &protobuf_dmi_2eproto::scc_info_SystemSlot.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Bios_Characteristics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bios.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cache.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chassis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OnBoardDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointingDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PortConnector.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PortableBattery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Processor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_System.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemSlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dmi.base);
}

}  // namespace protobuf_dmi_2eproto
namespace aspia {
namespace system_info {
namespace dmi {
bool Cache_Location_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_Location Cache::LOCATION_UNKNOWN;
const Cache_Location Cache::LOCATION_INTERNAL;
const Cache_Location Cache::LOCATION_EXTERNAL;
const Cache_Location Cache::LOCATION_RESERVED;
const Cache_Location Cache::Location_MIN;
const Cache_Location Cache::Location_MAX;
const int Cache::Location_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_Status Cache::STATUS_UNKNOWN;
const Cache_Status Cache::STATUS_ENABLED;
const Cache_Status Cache::STATUS_DISABLED;
const Cache_Status Cache::Status_MIN;
const Cache_Status Cache::Status_MAX;
const int Cache::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_Mode Cache::MODE_UNKNOWN;
const Cache_Mode Cache::MODE_WRITE_THRU;
const Cache_Mode Cache::MODE_WRITE_BACK;
const Cache_Mode Cache::MODE_WRITE_WITH_MEMORY_ADDRESS;
const Cache_Mode Cache::Mode_MIN;
const Cache_Mode Cache::Mode_MAX;
const int Cache::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_SRAMType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_SRAMType Cache::SRAM_TYPE_BAD;
const Cache_SRAMType Cache::SRAM_TYPE_OTHER;
const Cache_SRAMType Cache::SRAM_TYPE_UNKNOWN;
const Cache_SRAMType Cache::SRAM_TYPE_NON_BURST;
const Cache_SRAMType Cache::SRAM_TYPE_BURST;
const Cache_SRAMType Cache::SRAM_TYPE_PIPELINE_BURST;
const Cache_SRAMType Cache::SRAM_TYPE_SYNCHRONOUS;
const Cache_SRAMType Cache::SRAM_TYPE_ASYNCHRONOUS;
const Cache_SRAMType Cache::SRAMType_MIN;
const Cache_SRAMType Cache::SRAMType_MAX;
const int Cache::SRAMType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_ErrorCorrectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_UNKNOWN;
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_OTHER;
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_NONE;
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_PARITY;
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_SINGLE_BIT_ECC;
const Cache_ErrorCorrectionType Cache::ERROR_CORRECTION_TYPE_MULTI_BIT_ECC;
const Cache_ErrorCorrectionType Cache::ErrorCorrectionType_MIN;
const Cache_ErrorCorrectionType Cache::ErrorCorrectionType_MAX;
const int Cache::ErrorCorrectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_Type Cache::TYPE_UNKNOWN;
const Cache_Type Cache::TYPE_OTHER;
const Cache_Type Cache::TYPE_INSTRUCTION;
const Cache_Type Cache::TYPE_DATA;
const Cache_Type Cache::TYPE_UNIFIED;
const Cache_Type Cache::Type_MIN;
const Cache_Type Cache::Type_MAX;
const int Cache::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Cache_Associativity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cache_Associativity Cache::ASSOCIATIVITY_UNKNOWN;
const Cache_Associativity Cache::ASSOCIATIVITY_OTHER;
const Cache_Associativity Cache::ASSOCIATIVITY_DIRECT_MAPPED;
const Cache_Associativity Cache::ASSOCIATIVITY_2_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_4_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_FULLY;
const Cache_Associativity Cache::ASSOCIATIVITY_8_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_16_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_12_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_24_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_32_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_48_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_64_WAY;
const Cache_Associativity Cache::ASSOCIATIVITY_20_WAY;
const Cache_Associativity Cache::Associativity_MIN;
const Cache_Associativity Cache::Associativity_MAX;
const int Cache::Associativity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Chassis_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_Type Chassis::TYPE_UNKNOWN;
const Chassis_Type Chassis::TYPE_OTHER;
const Chassis_Type Chassis::TYPE_DESKTOP;
const Chassis_Type Chassis::TYPE_LOW_PROFILE_DESKTOP;
const Chassis_Type Chassis::TYPE_PIZZA_BOX;
const Chassis_Type Chassis::TYPE_MINI_TOWER;
const Chassis_Type Chassis::TYPE_TOWER;
const Chassis_Type Chassis::TYPE_PORTABLE;
const Chassis_Type Chassis::TYPE_LAPTOP;
const Chassis_Type Chassis::TYPE_NOTEBOOK;
const Chassis_Type Chassis::TYPE_HAND_HELD;
const Chassis_Type Chassis::TYPE_DOCKING_STATION;
const Chassis_Type Chassis::TYPE_ALL_IN_ONE;
const Chassis_Type Chassis::TYPE_SUB_NOTEBOOK;
const Chassis_Type Chassis::TYPE_SPACE_SAVING;
const Chassis_Type Chassis::TYPE_LUNCH_BOX;
const Chassis_Type Chassis::TYPE_MAIN_SERVER_CHASSIS;
const Chassis_Type Chassis::TYPE_EXPANSION_CHASSIS;
const Chassis_Type Chassis::TYPE_SUB_CHASSIS;
const Chassis_Type Chassis::TYPE_BUS_EXPANSION_CHASSIS;
const Chassis_Type Chassis::TYPE_PERIPHERIAL_CHASSIS;
const Chassis_Type Chassis::TYPE_RAID_CHASSIS;
const Chassis_Type Chassis::TYPE_RACK_MOUNT_CHASSIS;
const Chassis_Type Chassis::TYPE_SEALED_CASE_PC;
const Chassis_Type Chassis::TYPE_MULTI_SYSTEM_CHASSIS;
const Chassis_Type Chassis::TYPE_COMPACT_PCI;
const Chassis_Type Chassis::TYPE_ADVANCED_TCA;
const Chassis_Type Chassis::TYPE_BLADE;
const Chassis_Type Chassis::TYPE_BLADE_ENCLOSURE;
const Chassis_Type Chassis::Type_MIN;
const Chassis_Type Chassis::Type_MAX;
const int Chassis::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Chassis_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_Status Chassis::STATUS_UNKNOWN;
const Chassis_Status Chassis::STATUS_OTHER;
const Chassis_Status Chassis::STATUS_SAFE;
const Chassis_Status Chassis::STATUS_WARNING;
const Chassis_Status Chassis::STATUS_CRITICAL;
const Chassis_Status Chassis::STATUS_NON_RECOVERABLE;
const Chassis_Status Chassis::Status_MIN;
const Chassis_Status Chassis::Status_MAX;
const int Chassis::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Chassis_SecurityStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_SecurityStatus Chassis::SECURITY_STATUS_UNKNOWN;
const Chassis_SecurityStatus Chassis::SECURITY_STATUS_OTHER;
const Chassis_SecurityStatus Chassis::SECURITY_STATUS_NONE;
const Chassis_SecurityStatus Chassis::SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT;
const Chassis_SecurityStatus Chassis::SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED;
const Chassis_SecurityStatus Chassis::SecurityStatus_MIN;
const Chassis_SecurityStatus Chassis::SecurityStatus_MAX;
const int Chassis::SecurityStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OnBoardDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OnBoardDevice_Type OnBoardDevice::TYPE_UNKNOWN;
const OnBoardDevice_Type OnBoardDevice::TYPE_OTHER;
const OnBoardDevice_Type OnBoardDevice::TYPE_VIDEO;
const OnBoardDevice_Type OnBoardDevice::TYPE_SCSI_CONTROLLER;
const OnBoardDevice_Type OnBoardDevice::TYPE_ETHERNET;
const OnBoardDevice_Type OnBoardDevice::TYPE_TOKEN_RING;
const OnBoardDevice_Type OnBoardDevice::TYPE_SOUND;
const OnBoardDevice_Type OnBoardDevice::TYPE_PATA_CONTROLLER;
const OnBoardDevice_Type OnBoardDevice::TYPE_SATA_CONTROLLER;
const OnBoardDevice_Type OnBoardDevice::TYPE_SAS_CONTROLLER;
const OnBoardDevice_Type OnBoardDevice::Type_MIN;
const OnBoardDevice_Type OnBoardDevice::Type_MAX;
const int OnBoardDevice::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PointingDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PointingDevice_Type PointingDevice::TYPE_UNKNOWN;
const PointingDevice_Type PointingDevice::TYPE_OTHER;
const PointingDevice_Type PointingDevice::TYPE_MOUSE;
const PointingDevice_Type PointingDevice::TYPE_TRACK_BALL;
const PointingDevice_Type PointingDevice::TYPE_TRACK_POINT;
const PointingDevice_Type PointingDevice::TYPE_GLIDE_POINT;
const PointingDevice_Type PointingDevice::TYPE_TOUCH_PAD;
const PointingDevice_Type PointingDevice::TYPE_TOUCH_SCREEN;
const PointingDevice_Type PointingDevice::TYPE_OPTICAL_SENSOR;
const PointingDevice_Type PointingDevice::Type_MIN;
const PointingDevice_Type PointingDevice::Type_MAX;
const int PointingDevice::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PointingDevice_Interface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PointingDevice_Interface PointingDevice::INTERFACE_UNKNOWN;
const PointingDevice_Interface PointingDevice::INTERFACE_OTHER;
const PointingDevice_Interface PointingDevice::INTERFACE_SERIAL;
const PointingDevice_Interface PointingDevice::INTERFACE_PS_2;
const PointingDevice_Interface PointingDevice::INTERFACE_INFRARED;
const PointingDevice_Interface PointingDevice::INTERFACE_HP_HIL;
const PointingDevice_Interface PointingDevice::INTERFACE_BUS_MOUSE;
const PointingDevice_Interface PointingDevice::INTERFACE_ADB;
const PointingDevice_Interface PointingDevice::INTERFACE_BUS_MOUSE_DB_9;
const PointingDevice_Interface PointingDevice::INTERFACE_BUS_MOUSE_MICRO_DIN;
const PointingDevice_Interface PointingDevice::INTERFACE_USB;
const PointingDevice_Interface PointingDevice::Interface_MIN;
const PointingDevice_Interface PointingDevice::Interface_MAX;
const int PointingDevice::Interface_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PortableBattery_Chemistry_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_UNKNOWN;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_OTHER;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_LEAD_ACID;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_NICKEL_CADMIUM;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_NICKEL_METAL_HYDRIDE;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_LITHIUM_ION;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_ZINC_AIR;
const PortableBattery_Chemistry PortableBattery::CHEMISTRY_LITHIUM_POLYMER;
const PortableBattery_Chemistry PortableBattery::Chemistry_MIN;
const PortableBattery_Chemistry PortableBattery::Chemistry_MAX;
const int PortableBattery::Chemistry_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Processor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Processor_Type Processor::TYPE_UNKNOWN;
const Processor_Type Processor::TYPE_OTHER;
const Processor_Type Processor::TYPE_CENTRAL_PROCESSOR;
const Processor_Type Processor::TYPE_MATH_PROCESSOR;
const Processor_Type Processor::TYPE_DSP_PROCESSOR;
const Processor_Type Processor::TYPE_VIDEO_PROCESSOR;
const Processor_Type Processor::Type_MIN;
const Processor_Type Processor::Type_MAX;
const int Processor::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Processor_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Processor_Status Processor::STATUS_UNKNOWN;
const Processor_Status Processor::STATUS_ENABLED;
const Processor_Status Processor::STATUS_DISABLED_BY_USER;
const Processor_Status Processor::STATUS_DISABLED_BY_BIOS;
const Processor_Status Processor::STATUS_IDLE;
const Processor_Status Processor::STATUS_OTHER;
const Processor_Status Processor::Status_MIN;
const Processor_Status Processor::Status_MAX;
const int Processor::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Processor_Characteristics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Processor_Characteristics Processor::CHARACTERISTIC_NONE;
const Processor_Characteristics Processor::CHARACTERISTIC_64BIT_CAPABLE;
const Processor_Characteristics Processor::CHARACTERISTIC_MULTI_CORE;
const Processor_Characteristics Processor::CHARACTERISTIC_HARDWARE_THREAD;
const Processor_Characteristics Processor::CHARACTERISTIC_EXECUTE_PROTECTION;
const Processor_Characteristics Processor::CHARACTERISTIC_ENHANCED_VIRTUALIZATION;
const Processor_Characteristics Processor::CHARACTERISTIC_POWER_CONTROL;
const Processor_Characteristics Processor::Characteristics_MIN;
const Processor_Characteristics Processor::Characteristics_MAX;
const int Processor::Characteristics_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool System_WakeupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const System_WakeupType System::WAKEUP_TYPE_UNKNOWN;
const System_WakeupType System::WAKEUP_TYPE_OTHER;
const System_WakeupType System::WAKEUP_TYPE_APM_TIMER;
const System_WakeupType System::WAKEUP_TYPE_MODEM_RING;
const System_WakeupType System::WAKEUP_TYPE_LAN_REMOTE;
const System_WakeupType System::WAKEUP_TYPE_POWER_SWITCH;
const System_WakeupType System::WAKEUP_TYPE_PCI_PME;
const System_WakeupType System::WAKEUP_TYPE_AC_POWER_RESTORED;
const System_WakeupType System::WakeupType_MIN;
const System_WakeupType System::WakeupType_MAX;
const int System::WakeupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemSlot_Usage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemSlot_Usage SystemSlot::USAGE_UNKNOWN;
const SystemSlot_Usage SystemSlot::USAGE_OTHER;
const SystemSlot_Usage SystemSlot::USAGE_AVAILABLE;
const SystemSlot_Usage SystemSlot::USAGE_IN_USE;
const SystemSlot_Usage SystemSlot::Usage_MIN;
const SystemSlot_Usage SystemSlot::Usage_MAX;
const int SystemSlot::Usage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemSlot_BusWidth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_UNKNOWN;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_OTHER;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_8_BIT;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_16_BIT;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_32_BIT;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_64_BIT;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_128_BIT;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X1;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X2;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X4;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X8;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X12;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X16;
const SystemSlot_BusWidth SystemSlot::BUS_WIDTH_X32;
const SystemSlot_BusWidth SystemSlot::BusWidth_MIN;
const SystemSlot_BusWidth SystemSlot::BusWidth_MAX;
const int SystemSlot::BusWidth_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemSlot_Length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemSlot_Length SystemSlot::LENGTH_UNKNOWN;
const SystemSlot_Length SystemSlot::LENGTH_OTHER;
const SystemSlot_Length SystemSlot::LENGTH_SHORT;
const SystemSlot_Length SystemSlot::LENGTH_LONG;
const SystemSlot_Length SystemSlot::Length_MIN;
const SystemSlot_Length SystemSlot::Length_MAX;
const int SystemSlot::Length_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Bios_Characteristics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bios_Characteristics::kIsaFieldNumber;
const int Bios_Characteristics::kMcaFieldNumber;
const int Bios_Characteristics::kEisaFieldNumber;
const int Bios_Characteristics::kPciFieldNumber;
const int Bios_Characteristics::kPcCardFieldNumber;
const int Bios_Characteristics::kPnpFieldNumber;
const int Bios_Characteristics::kApmFieldNumber;
const int Bios_Characteristics::kBiosUpgradeableFieldNumber;
const int Bios_Characteristics::kBiosShadowingFieldNumber;
const int Bios_Characteristics::kVlbFieldNumber;
const int Bios_Characteristics::kEscdFieldNumber;
const int Bios_Characteristics::kBootFromCdFieldNumber;
const int Bios_Characteristics::kSelectableBootFieldNumber;
const int Bios_Characteristics::kSocketedBootRomFieldNumber;
const int Bios_Characteristics::kBootFromPcCardFieldNumber;
const int Bios_Characteristics::kEddFieldNumber;
const int Bios_Characteristics::kJapaneseFloppyForNec9800FieldNumber;
const int Bios_Characteristics::kJapaneseFloppyForToshibaFieldNumber;
const int Bios_Characteristics::kFloppy525360KbFieldNumber;
const int Bios_Characteristics::kFloppy52512MbFieldNumber;
const int Bios_Characteristics::kFloppy35720KbFieldNumber;
const int Bios_Characteristics::kFloppy35288MbFieldNumber;
const int Bios_Characteristics::kPrintScreenFieldNumber;
const int Bios_Characteristics::kKeyboard8042FieldNumber;
const int Bios_Characteristics::kSerialFieldNumber;
const int Bios_Characteristics::kPrinterFieldNumber;
const int Bios_Characteristics::kCgaVideoFieldNumber;
const int Bios_Characteristics::kNecPc98FieldNumber;
const int Bios_Characteristics::kAcpiFieldNumber;
const int Bios_Characteristics::kUsbLegacyFieldNumber;
const int Bios_Characteristics::kAgpFieldNumber;
const int Bios_Characteristics::kI2OBootFieldNumber;
const int Bios_Characteristics::kLs120BootFieldNumber;
const int Bios_Characteristics::kAtapiZipDriveBootFieldNumber;
const int Bios_Characteristics::kIeee1394BootFieldNumber;
const int Bios_Characteristics::kSmartBatteryFieldNumber;
const int Bios_Characteristics::kBiosBootSpecificationFieldNumber;
const int Bios_Characteristics::kKeyInitNetworkBootFieldNumber;
const int Bios_Characteristics::kTargetedContentDistribFieldNumber;
const int Bios_Characteristics::kUefiFieldNumber;
const int Bios_Characteristics::kVirtualMachineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bios_Characteristics::Bios_Characteristics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Bios_Characteristics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Bios.Characteristics)
}
Bios_Characteristics::Bios_Characteristics(const Bios_Characteristics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isa_, &from.isa_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_machine_) -
    reinterpret_cast<char*>(&isa_)) + sizeof(virtual_machine_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Bios.Characteristics)
}

void Bios_Characteristics::SharedCtor() {
  ::memset(&isa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_machine_) -
      reinterpret_cast<char*>(&isa_)) + sizeof(virtual_machine_));
}

Bios_Characteristics::~Bios_Characteristics() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Bios.Characteristics)
  SharedDtor();
}

void Bios_Characteristics::SharedDtor() {
}

void Bios_Characteristics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bios_Characteristics& Bios_Characteristics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Bios_Characteristics.base);
  return *internal_default_instance();
}


void Bios_Characteristics::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Bios.Characteristics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_machine_) -
      reinterpret_cast<char*>(&isa_)) + sizeof(virtual_machine_));
  _internal_metadata_.Clear();
}

bool Bios_Characteristics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Bios.Characteristics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isa = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mca = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mca_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool eisa = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eisa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pci = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pci_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pc_card = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pc_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pnp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pnp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool apm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bios_upgradeable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bios_upgradeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bios_shadowing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bios_shadowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vlb = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vlb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool escd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &escd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boot_from_cd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_from_cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool selectable_boot = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectable_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool socketed_boot_rom = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &socketed_boot_rom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boot_from_pc_card = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_from_pc_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool edd = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool japanese_floppy_for_nec9800 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &japanese_floppy_for_nec9800_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool japanese_floppy_for_toshiba = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &japanese_floppy_for_toshiba_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool floppy_525_360kb = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &floppy_525_360kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool floppy_525_12mb = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &floppy_525_12mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool floppy_35_720kb = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &floppy_35_720kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool floppy_35_288mb = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &floppy_35_288mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool print_screen = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keyboard_8042 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyboard_8042_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool serial = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool printer = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &printer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cga_video = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cga_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nec_pc98 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nec_pc98_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool acpi = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool usb_legacy = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usb_legacy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool agp = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool i2o_boot = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &i2o_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ls120_boot = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls120_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool atapi_zip_drive_boot = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &atapi_zip_drive_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ieee1394_boot = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ieee1394_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool smart_battery = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smart_battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bios_boot_specification = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bios_boot_specification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool key_init_network_boot = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_init_network_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool targeted_content_distrib = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targeted_content_distrib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool uefi = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uefi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool virtual_machine = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual_machine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Bios.Characteristics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Bios.Characteristics)
  return false;
#undef DO_
}

void Bios_Characteristics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Bios.Characteristics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isa = 1;
  if (this->isa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isa(), output);
  }

  // bool mca = 2;
  if (this->mca() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mca(), output);
  }

  // bool eisa = 3;
  if (this->eisa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eisa(), output);
  }

  // bool pci = 4;
  if (this->pci() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pci(), output);
  }

  // bool pc_card = 5;
  if (this->pc_card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pc_card(), output);
  }

  // bool pnp = 6;
  if (this->pnp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pnp(), output);
  }

  // bool apm = 7;
  if (this->apm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->apm(), output);
  }

  // bool bios_upgradeable = 8;
  if (this->bios_upgradeable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bios_upgradeable(), output);
  }

  // bool bios_shadowing = 9;
  if (this->bios_shadowing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bios_shadowing(), output);
  }

  // bool vlb = 10;
  if (this->vlb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vlb(), output);
  }

  // bool escd = 11;
  if (this->escd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->escd(), output);
  }

  // bool boot_from_cd = 12;
  if (this->boot_from_cd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->boot_from_cd(), output);
  }

  // bool selectable_boot = 13;
  if (this->selectable_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->selectable_boot(), output);
  }

  // bool socketed_boot_rom = 14;
  if (this->socketed_boot_rom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->socketed_boot_rom(), output);
  }

  // bool boot_from_pc_card = 15;
  if (this->boot_from_pc_card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->boot_from_pc_card(), output);
  }

  // bool edd = 16;
  if (this->edd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->edd(), output);
  }

  // bool japanese_floppy_for_nec9800 = 17;
  if (this->japanese_floppy_for_nec9800() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->japanese_floppy_for_nec9800(), output);
  }

  // bool japanese_floppy_for_toshiba = 18;
  if (this->japanese_floppy_for_toshiba() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->japanese_floppy_for_toshiba(), output);
  }

  // bool floppy_525_360kb = 19;
  if (this->floppy_525_360kb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->floppy_525_360kb(), output);
  }

  // bool floppy_525_12mb = 20;
  if (this->floppy_525_12mb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->floppy_525_12mb(), output);
  }

  // bool floppy_35_720kb = 21;
  if (this->floppy_35_720kb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->floppy_35_720kb(), output);
  }

  // bool floppy_35_288mb = 22;
  if (this->floppy_35_288mb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->floppy_35_288mb(), output);
  }

  // bool print_screen = 23;
  if (this->print_screen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->print_screen(), output);
  }

  // bool keyboard_8042 = 24;
  if (this->keyboard_8042() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->keyboard_8042(), output);
  }

  // bool serial = 25;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->serial(), output);
  }

  // bool printer = 26;
  if (this->printer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->printer(), output);
  }

  // bool cga_video = 27;
  if (this->cga_video() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->cga_video(), output);
  }

  // bool nec_pc98 = 28;
  if (this->nec_pc98() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->nec_pc98(), output);
  }

  // bool acpi = 29;
  if (this->acpi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->acpi(), output);
  }

  // bool usb_legacy = 30;
  if (this->usb_legacy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->usb_legacy(), output);
  }

  // bool agp = 31;
  if (this->agp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->agp(), output);
  }

  // bool i2o_boot = 32;
  if (this->i2o_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->i2o_boot(), output);
  }

  // bool ls120_boot = 33;
  if (this->ls120_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->ls120_boot(), output);
  }

  // bool atapi_zip_drive_boot = 34;
  if (this->atapi_zip_drive_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->atapi_zip_drive_boot(), output);
  }

  // bool ieee1394_boot = 35;
  if (this->ieee1394_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->ieee1394_boot(), output);
  }

  // bool smart_battery = 36;
  if (this->smart_battery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->smart_battery(), output);
  }

  // bool bios_boot_specification = 37;
  if (this->bios_boot_specification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->bios_boot_specification(), output);
  }

  // bool key_init_network_boot = 38;
  if (this->key_init_network_boot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->key_init_network_boot(), output);
  }

  // bool targeted_content_distrib = 39;
  if (this->targeted_content_distrib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->targeted_content_distrib(), output);
  }

  // bool uefi = 40;
  if (this->uefi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->uefi(), output);
  }

  // bool virtual_machine = 41;
  if (this->virtual_machine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->virtual_machine(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Bios.Characteristics)
}

size_t Bios_Characteristics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Bios.Characteristics)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bool isa = 1;
  if (this->isa() != 0) {
    total_size += 1 + 1;
  }

  // bool mca = 2;
  if (this->mca() != 0) {
    total_size += 1 + 1;
  }

  // bool eisa = 3;
  if (this->eisa() != 0) {
    total_size += 1 + 1;
  }

  // bool pci = 4;
  if (this->pci() != 0) {
    total_size += 1 + 1;
  }

  // bool pc_card = 5;
  if (this->pc_card() != 0) {
    total_size += 1 + 1;
  }

  // bool pnp = 6;
  if (this->pnp() != 0) {
    total_size += 1 + 1;
  }

  // bool apm = 7;
  if (this->apm() != 0) {
    total_size += 1 + 1;
  }

  // bool bios_upgradeable = 8;
  if (this->bios_upgradeable() != 0) {
    total_size += 1 + 1;
  }

  // bool bios_shadowing = 9;
  if (this->bios_shadowing() != 0) {
    total_size += 1 + 1;
  }

  // bool vlb = 10;
  if (this->vlb() != 0) {
    total_size += 1 + 1;
  }

  // bool escd = 11;
  if (this->escd() != 0) {
    total_size += 1 + 1;
  }

  // bool boot_from_cd = 12;
  if (this->boot_from_cd() != 0) {
    total_size += 1 + 1;
  }

  // bool selectable_boot = 13;
  if (this->selectable_boot() != 0) {
    total_size += 1 + 1;
  }

  // bool socketed_boot_rom = 14;
  if (this->socketed_boot_rom() != 0) {
    total_size += 1 + 1;
  }

  // bool boot_from_pc_card = 15;
  if (this->boot_from_pc_card() != 0) {
    total_size += 1 + 1;
  }

  // bool edd = 16;
  if (this->edd() != 0) {
    total_size += 2 + 1;
  }

  // bool japanese_floppy_for_nec9800 = 17;
  if (this->japanese_floppy_for_nec9800() != 0) {
    total_size += 2 + 1;
  }

  // bool japanese_floppy_for_toshiba = 18;
  if (this->japanese_floppy_for_toshiba() != 0) {
    total_size += 2 + 1;
  }

  // bool floppy_525_360kb = 19;
  if (this->floppy_525_360kb() != 0) {
    total_size += 2 + 1;
  }

  // bool floppy_525_12mb = 20;
  if (this->floppy_525_12mb() != 0) {
    total_size += 2 + 1;
  }

  // bool floppy_35_720kb = 21;
  if (this->floppy_35_720kb() != 0) {
    total_size += 2 + 1;
  }

  // bool floppy_35_288mb = 22;
  if (this->floppy_35_288mb() != 0) {
    total_size += 2 + 1;
  }

  // bool print_screen = 23;
  if (this->print_screen() != 0) {
    total_size += 2 + 1;
  }

  // bool keyboard_8042 = 24;
  if (this->keyboard_8042() != 0) {
    total_size += 2 + 1;
  }

  // bool serial = 25;
  if (this->serial() != 0) {
    total_size += 2 + 1;
  }

  // bool printer = 26;
  if (this->printer() != 0) {
    total_size += 2 + 1;
  }

  // bool cga_video = 27;
  if (this->cga_video() != 0) {
    total_size += 2 + 1;
  }

  // bool nec_pc98 = 28;
  if (this->nec_pc98() != 0) {
    total_size += 2 + 1;
  }

  // bool acpi = 29;
  if (this->acpi() != 0) {
    total_size += 2 + 1;
  }

  // bool usb_legacy = 30;
  if (this->usb_legacy() != 0) {
    total_size += 2 + 1;
  }

  // bool agp = 31;
  if (this->agp() != 0) {
    total_size += 2 + 1;
  }

  // bool i2o_boot = 32;
  if (this->i2o_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool ls120_boot = 33;
  if (this->ls120_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool atapi_zip_drive_boot = 34;
  if (this->atapi_zip_drive_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool ieee1394_boot = 35;
  if (this->ieee1394_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool smart_battery = 36;
  if (this->smart_battery() != 0) {
    total_size += 2 + 1;
  }

  // bool bios_boot_specification = 37;
  if (this->bios_boot_specification() != 0) {
    total_size += 2 + 1;
  }

  // bool key_init_network_boot = 38;
  if (this->key_init_network_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool targeted_content_distrib = 39;
  if (this->targeted_content_distrib() != 0) {
    total_size += 2 + 1;
  }

  // bool uefi = 40;
  if (this->uefi() != 0) {
    total_size += 2 + 1;
  }

  // bool virtual_machine = 41;
  if (this->virtual_machine() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bios_Characteristics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bios_Characteristics*>(&from));
}

void Bios_Characteristics::MergeFrom(const Bios_Characteristics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Bios.Characteristics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isa() != 0) {
    set_isa(from.isa());
  }
  if (from.mca() != 0) {
    set_mca(from.mca());
  }
  if (from.eisa() != 0) {
    set_eisa(from.eisa());
  }
  if (from.pci() != 0) {
    set_pci(from.pci());
  }
  if (from.pc_card() != 0) {
    set_pc_card(from.pc_card());
  }
  if (from.pnp() != 0) {
    set_pnp(from.pnp());
  }
  if (from.apm() != 0) {
    set_apm(from.apm());
  }
  if (from.bios_upgradeable() != 0) {
    set_bios_upgradeable(from.bios_upgradeable());
  }
  if (from.bios_shadowing() != 0) {
    set_bios_shadowing(from.bios_shadowing());
  }
  if (from.vlb() != 0) {
    set_vlb(from.vlb());
  }
  if (from.escd() != 0) {
    set_escd(from.escd());
  }
  if (from.boot_from_cd() != 0) {
    set_boot_from_cd(from.boot_from_cd());
  }
  if (from.selectable_boot() != 0) {
    set_selectable_boot(from.selectable_boot());
  }
  if (from.socketed_boot_rom() != 0) {
    set_socketed_boot_rom(from.socketed_boot_rom());
  }
  if (from.boot_from_pc_card() != 0) {
    set_boot_from_pc_card(from.boot_from_pc_card());
  }
  if (from.edd() != 0) {
    set_edd(from.edd());
  }
  if (from.japanese_floppy_for_nec9800() != 0) {
    set_japanese_floppy_for_nec9800(from.japanese_floppy_for_nec9800());
  }
  if (from.japanese_floppy_for_toshiba() != 0) {
    set_japanese_floppy_for_toshiba(from.japanese_floppy_for_toshiba());
  }
  if (from.floppy_525_360kb() != 0) {
    set_floppy_525_360kb(from.floppy_525_360kb());
  }
  if (from.floppy_525_12mb() != 0) {
    set_floppy_525_12mb(from.floppy_525_12mb());
  }
  if (from.floppy_35_720kb() != 0) {
    set_floppy_35_720kb(from.floppy_35_720kb());
  }
  if (from.floppy_35_288mb() != 0) {
    set_floppy_35_288mb(from.floppy_35_288mb());
  }
  if (from.print_screen() != 0) {
    set_print_screen(from.print_screen());
  }
  if (from.keyboard_8042() != 0) {
    set_keyboard_8042(from.keyboard_8042());
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.printer() != 0) {
    set_printer(from.printer());
  }
  if (from.cga_video() != 0) {
    set_cga_video(from.cga_video());
  }
  if (from.nec_pc98() != 0) {
    set_nec_pc98(from.nec_pc98());
  }
  if (from.acpi() != 0) {
    set_acpi(from.acpi());
  }
  if (from.usb_legacy() != 0) {
    set_usb_legacy(from.usb_legacy());
  }
  if (from.agp() != 0) {
    set_agp(from.agp());
  }
  if (from.i2o_boot() != 0) {
    set_i2o_boot(from.i2o_boot());
  }
  if (from.ls120_boot() != 0) {
    set_ls120_boot(from.ls120_boot());
  }
  if (from.atapi_zip_drive_boot() != 0) {
    set_atapi_zip_drive_boot(from.atapi_zip_drive_boot());
  }
  if (from.ieee1394_boot() != 0) {
    set_ieee1394_boot(from.ieee1394_boot());
  }
  if (from.smart_battery() != 0) {
    set_smart_battery(from.smart_battery());
  }
  if (from.bios_boot_specification() != 0) {
    set_bios_boot_specification(from.bios_boot_specification());
  }
  if (from.key_init_network_boot() != 0) {
    set_key_init_network_boot(from.key_init_network_boot());
  }
  if (from.targeted_content_distrib() != 0) {
    set_targeted_content_distrib(from.targeted_content_distrib());
  }
  if (from.uefi() != 0) {
    set_uefi(from.uefi());
  }
  if (from.virtual_machine() != 0) {
    set_virtual_machine(from.virtual_machine());
  }
}

void Bios_Characteristics::CopyFrom(const Bios_Characteristics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Bios.Characteristics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bios_Characteristics::IsInitialized() const {
  return true;
}

void Bios_Characteristics::Swap(Bios_Characteristics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bios_Characteristics::InternalSwap(Bios_Characteristics* other) {
  using std::swap;
  swap(isa_, other->isa_);
  swap(mca_, other->mca_);
  swap(eisa_, other->eisa_);
  swap(pci_, other->pci_);
  swap(pc_card_, other->pc_card_);
  swap(pnp_, other->pnp_);
  swap(apm_, other->apm_);
  swap(bios_upgradeable_, other->bios_upgradeable_);
  swap(bios_shadowing_, other->bios_shadowing_);
  swap(vlb_, other->vlb_);
  swap(escd_, other->escd_);
  swap(boot_from_cd_, other->boot_from_cd_);
  swap(selectable_boot_, other->selectable_boot_);
  swap(socketed_boot_rom_, other->socketed_boot_rom_);
  swap(boot_from_pc_card_, other->boot_from_pc_card_);
  swap(edd_, other->edd_);
  swap(japanese_floppy_for_nec9800_, other->japanese_floppy_for_nec9800_);
  swap(japanese_floppy_for_toshiba_, other->japanese_floppy_for_toshiba_);
  swap(floppy_525_360kb_, other->floppy_525_360kb_);
  swap(floppy_525_12mb_, other->floppy_525_12mb_);
  swap(floppy_35_720kb_, other->floppy_35_720kb_);
  swap(floppy_35_288mb_, other->floppy_35_288mb_);
  swap(print_screen_, other->print_screen_);
  swap(keyboard_8042_, other->keyboard_8042_);
  swap(serial_, other->serial_);
  swap(printer_, other->printer_);
  swap(cga_video_, other->cga_video_);
  swap(nec_pc98_, other->nec_pc98_);
  swap(acpi_, other->acpi_);
  swap(usb_legacy_, other->usb_legacy_);
  swap(agp_, other->agp_);
  swap(i2o_boot_, other->i2o_boot_);
  swap(ls120_boot_, other->ls120_boot_);
  swap(atapi_zip_drive_boot_, other->atapi_zip_drive_boot_);
  swap(ieee1394_boot_, other->ieee1394_boot_);
  swap(smart_battery_, other->smart_battery_);
  swap(bios_boot_specification_, other->bios_boot_specification_);
  swap(key_init_network_boot_, other->key_init_network_boot_);
  swap(targeted_content_distrib_, other->targeted_content_distrib_);
  swap(uefi_, other->uefi_);
  swap(virtual_machine_, other->virtual_machine_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Bios_Characteristics::GetTypeName() const {
  return "aspia.system_info.dmi.Bios.Characteristics";
}


// ===================================================================

void Bios::InitAsDefaultInstance() {
  ::aspia::system_info::dmi::_Bios_default_instance_._instance.get_mutable()->characteristics_ = const_cast< ::aspia::system_info::dmi::Bios_Characteristics*>(
      ::aspia::system_info::dmi::Bios_Characteristics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bios::kManufacturerFieldNumber;
const int Bios::kVersionFieldNumber;
const int Bios::kDateFieldNumber;
const int Bios::kSizeFieldNumber;
const int Bios::kBiosRevisionFieldNumber;
const int Bios::kFirmwareRevisionFieldNumber;
const int Bios::kAddressFieldNumber;
const int Bios::kRuntimeSizeFieldNumber;
const int Bios::kCharacteristicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bios::Bios()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Bios.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Bios)
}
Bios::Bios(const Bios& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  bios_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bios_revision().size() > 0) {
    bios_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bios_revision_);
  }
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_revision().size() > 0) {
    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_characteristics()) {
    characteristics_ = new ::aspia::system_info::dmi::Bios_Characteristics(*from.characteristics_);
  } else {
    characteristics_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&runtime_size_) -
    reinterpret_cast<char*>(&size_)) + sizeof(runtime_size_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Bios)
}

void Bios::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&characteristics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_size_) -
      reinterpret_cast<char*>(&characteristics_)) + sizeof(runtime_size_));
}

Bios::~Bios() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Bios)
  SharedDtor();
}

void Bios::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete characteristics_;
}

void Bios::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bios& Bios::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Bios.base);
  return *internal_default_instance();
}


void Bios::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Bios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bios_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && characteristics_ != NULL) {
    delete characteristics_;
  }
  characteristics_ = NULL;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_size_) -
      reinterpret_cast<char*>(&size_)) + sizeof(runtime_size_));
  _internal_metadata_.Clear();
}

bool Bios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Bios)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bios_revision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bios_revision().data(), static_cast<int>(this->bios_revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.bios_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_revision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.firmware_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Bios.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 runtime_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &runtime_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Bios.Characteristics characteristics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_characteristics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Bios)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Bios)
  return false;
#undef DO_
}

void Bios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Bios)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // string bios_revision = 5;
  if (this->bios_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bios_revision().data(), static_cast<int>(this->bios_revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.bios_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bios_revision(), output);
  }

  // string firmware_revision = 6;
  if (this->firmware_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_revision().data(), static_cast<int>(this->firmware_revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.firmware_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->firmware_revision(), output);
  }

  // string address = 7;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Bios.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address(), output);
  }

  // uint64 runtime_size = 8;
  if (this->runtime_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->runtime_size(), output);
  }

  // .aspia.system_info.dmi.Bios.Characteristics characteristics = 9;
  if (this->has_characteristics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_characteristics(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Bios)
}

size_t Bios::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Bios)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string bios_revision = 5;
  if (this->bios_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bios_revision());
  }

  // string firmware_revision = 6;
  if (this->firmware_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_revision());
  }

  // string address = 7;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .aspia.system_info.dmi.Bios.Characteristics characteristics = 9;
  if (this->has_characteristics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *characteristics_);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // uint64 runtime_size = 8;
  if (this->runtime_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->runtime_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bios::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bios*>(&from));
}

void Bios::MergeFrom(const Bios& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Bios)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.bios_revision().size() > 0) {

    bios_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bios_revision_);
  }
  if (from.firmware_revision().size() > 0) {

    firmware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_revision_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_characteristics()) {
    mutable_characteristics()->::aspia::system_info::dmi::Bios_Characteristics::MergeFrom(from.characteristics());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.runtime_size() != 0) {
    set_runtime_size(from.runtime_size());
  }
}

void Bios::CopyFrom(const Bios& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Bios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bios::IsInitialized() const {
  return true;
}

void Bios::Swap(Bios* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bios::InternalSwap(Bios* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bios_revision_.Swap(&other->bios_revision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_revision_.Swap(&other->firmware_revision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(characteristics_, other->characteristics_);
  swap(size_, other->size_);
  swap(runtime_size_, other->runtime_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Bios::GetTypeName() const {
  return "aspia.system_info.dmi.Bios";
}


// ===================================================================

void Cache::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cache::kNameFieldNumber;
const int Cache::kLocationFieldNumber;
const int Cache::kStatusFieldNumber;
const int Cache::kModeFieldNumber;
const int Cache::kLevelFieldNumber;
const int Cache::kMaximumSizeFieldNumber;
const int Cache::kCurrentSizeFieldNumber;
const int Cache::kSupportedSramTypesFieldNumber;
const int Cache::kCurrentSramTypeFieldNumber;
const int Cache::kSpeedFieldNumber;
const int Cache::kErrorCorrectionTypeFieldNumber;
const int Cache::kTypeFieldNumber;
const int Cache::kAssociativityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cache::Cache()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Cache.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Cache)
}
Cache::Cache(const Cache& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&associativity_) -
    reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Cache)
}

void Cache::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
}

Cache::~Cache() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Cache)
  SharedDtor();
}

void Cache::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Cache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cache& Cache::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Cache.base);
  return *internal_default_instance();
}


void Cache::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associativity_) -
      reinterpret_cast<char*>(&location_)) + sizeof(associativity_));
  _internal_metadata_.Clear();
}

bool Cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Cache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Cache.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location(static_cast< ::aspia::system_info::dmi::Cache_Location >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::dmi::Cache_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.Mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::aspia::system_info::dmi::Cache_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 supported_sram_types = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supported_sram_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.SRAMType current_sram_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_sram_type(static_cast< ::aspia::system_info::dmi::Cache_SRAMType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.ErrorCorrectionType error_correction_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_correction_type(static_cast< ::aspia::system_info::dmi::Cache_ErrorCorrectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.Type type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::dmi::Cache_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Cache.Associativity associativity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_associativity(static_cast< ::aspia::system_info::dmi::Cache_Associativity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Cache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Cache)
  return false;
#undef DO_
}

void Cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Cache.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aspia.system_info.dmi.Cache.Location location = 2;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->location(), output);
  }

  // .aspia.system_info.dmi.Cache.Status status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // .aspia.system_info.dmi.Cache.Mode mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maximum_size(), output);
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_size(), output);
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->supported_sram_types(), output);
  }

  // .aspia.system_info.dmi.Cache.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->current_sram_type(), output);
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->speed(), output);
  }

  // .aspia.system_info.dmi.Cache.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_correction_type(), output);
  }

  // .aspia.system_info.dmi.Cache.Type type = 12;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // .aspia.system_info.dmi.Cache.Associativity associativity = 13;
  if (this->associativity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->associativity(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Cache)
}

size_t Cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Cache)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aspia.system_info.dmi.Cache.Location location = 2;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
  }

  // .aspia.system_info.dmi.Cache.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .aspia.system_info.dmi.Cache.Mode mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 maximum_size = 6;
  if (this->maximum_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_size());
  }

  // int32 current_size = 7;
  if (this->current_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_size());
  }

  // uint32 supported_sram_types = 8;
  if (this->supported_sram_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->supported_sram_types());
  }

  // .aspia.system_info.dmi.Cache.SRAMType current_sram_type = 9;
  if (this->current_sram_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_sram_type());
  }

  // int32 speed = 10;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // .aspia.system_info.dmi.Cache.ErrorCorrectionType error_correction_type = 11;
  if (this->error_correction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_correction_type());
  }

  // .aspia.system_info.dmi.Cache.Type type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.dmi.Cache.Associativity associativity = 13;
  if (this->associativity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->associativity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Cache*>(&from));
}

void Cache::MergeFrom(const Cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.location() != 0) {
    set_location(from.location());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.maximum_size() != 0) {
    set_maximum_size(from.maximum_size());
  }
  if (from.current_size() != 0) {
    set_current_size(from.current_size());
  }
  if (from.supported_sram_types() != 0) {
    set_supported_sram_types(from.supported_sram_types());
  }
  if (from.current_sram_type() != 0) {
    set_current_sram_type(from.current_sram_type());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.error_correction_type() != 0) {
    set_error_correction_type(from.error_correction_type());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.associativity() != 0) {
    set_associativity(from.associativity());
  }
}

void Cache::CopyFrom(const Cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cache::IsInitialized() const {
  return true;
}

void Cache::Swap(Cache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cache::InternalSwap(Cache* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(status_, other->status_);
  swap(mode_, other->mode_);
  swap(level_, other->level_);
  swap(maximum_size_, other->maximum_size_);
  swap(current_size_, other->current_size_);
  swap(supported_sram_types_, other->supported_sram_types_);
  swap(current_sram_type_, other->current_sram_type_);
  swap(speed_, other->speed_);
  swap(error_correction_type_, other->error_correction_type_);
  swap(type_, other->type_);
  swap(associativity_, other->associativity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Cache::GetTypeName() const {
  return "aspia.system_info.dmi.Cache";
}


// ===================================================================

void Chassis::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kManufacturerFieldNumber;
const int Chassis::kVersionFieldNumber;
const int Chassis::kSerialNumberFieldNumber;
const int Chassis::kAssetTagFieldNumber;
const int Chassis::kTypeFieldNumber;
const int Chassis::kOsLoadStatusFieldNumber;
const int Chassis::kPowerSourceStatusFieldNumber;
const int Chassis::kTemparatureStatusFieldNumber;
const int Chassis::kSecurityStatusFieldNumber;
const int Chassis::kHeightFieldNumber;
const int Chassis::kNumberOfPowerCordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Chassis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_power_cords_) -
    reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Chassis)
}

void Chassis::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Chassis.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_power_cords_) -
      reinterpret_cast<char*>(&type_)) + sizeof(number_of_power_cords_));
  _internal_metadata_.Clear();
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Chassis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Chassis.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Chassis.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Chassis.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Chassis.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Chassis.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::dmi::Chassis_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Chassis.Status os_load_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_load_status(static_cast< ::aspia::system_info::dmi::Chassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Chassis.Status power_source_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_source_status(static_cast< ::aspia::system_info::dmi::Chassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Chassis.Status temparature_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_temparature_status(static_cast< ::aspia::system_info::dmi::Chassis_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Chassis.SecurityStatus security_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_security_status(static_cast< ::aspia::system_info::dmi::Chassis_SecurityStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_of_power_cords = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_power_cords_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Chassis.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Chassis.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Chassis.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serial_number(), output);
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Chassis.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset_tag(), output);
  }

  // .aspia.system_info.dmi.Chassis.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .aspia.system_info.dmi.Chassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->os_load_status(), output);
  }

  // .aspia.system_info.dmi.Chassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->power_source_status(), output);
  }

  // .aspia.system_info.dmi.Chassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->temparature_status(), output);
  }

  // .aspia.system_info.dmi.Chassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->security_status(), output);
  }

  // int32 height = 10;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->number_of_power_cords(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Chassis)
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Chassis)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 3;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 4;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // .aspia.system_info.dmi.Chassis.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.dmi.Chassis.Status os_load_status = 6;
  if (this->os_load_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_load_status());
  }

  // .aspia.system_info.dmi.Chassis.Status power_source_status = 7;
  if (this->power_source_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_source_status());
  }

  // .aspia.system_info.dmi.Chassis.Status temparature_status = 8;
  if (this->temparature_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->temparature_status());
  }

  // .aspia.system_info.dmi.Chassis.SecurityStatus security_status = 9;
  if (this->security_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_status());
  }

  // int32 height = 10;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 number_of_power_cords = 11;
  if (this->number_of_power_cords() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_power_cords());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Chassis*>(&from));
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.os_load_status() != 0) {
    set_os_load_status(from.os_load_status());
  }
  if (from.power_source_status() != 0) {
    set_power_source_status(from.power_source_status());
  }
  if (from.temparature_status() != 0) {
    set_temparature_status(from.temparature_status());
  }
  if (from.security_status() != 0) {
    set_security_status(from.security_status());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.number_of_power_cords() != 0) {
    set_number_of_power_cords(from.number_of_power_cords());
  }
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_tag_.Swap(&other->asset_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(os_load_status_, other->os_load_status_);
  swap(power_source_status_, other->power_source_status_);
  swap(temparature_status_, other->temparature_status_);
  swap(security_status_, other->security_status_);
  swap(height_, other->height_);
  swap(number_of_power_cords_, other->number_of_power_cords_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Chassis::GetTypeName() const {
  return "aspia.system_info.dmi.Chassis";
}


// ===================================================================

void MemoryDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDevice::kDeviceLocatorFieldNumber;
const int MemoryDevice::kSizeFieldNumber;
const int MemoryDevice::kTypeFieldNumber;
const int MemoryDevice::kSpeedFieldNumber;
const int MemoryDevice::kFormFactorFieldNumber;
const int MemoryDevice::kSerialNumberFieldNumber;
const int MemoryDevice::kPartNumberFieldNumber;
const int MemoryDevice::kManufactorerFieldNumber;
const int MemoryDevice::kBankFieldNumber;
const int MemoryDevice::kTotalWidthFieldNumber;
const int MemoryDevice::kDataWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDevice::MemoryDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_MemoryDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.MemoryDevice)
}
MemoryDevice::MemoryDevice(const MemoryDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_locator().size() > 0) {
    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.form_factor().size() > 0) {
    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufactorer().size() > 0) {
    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank().size() > 0) {
    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_width_) -
    reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.MemoryDevice)
}

void MemoryDevice::SharedCtor() {
  device_locator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
}

MemoryDevice::~MemoryDevice() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.MemoryDevice)
  SharedDtor();
}

void MemoryDevice::SharedDtor() {
  device_locator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MemoryDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryDevice& MemoryDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_MemoryDevice.base);
  return *internal_default_instance();
}


void MemoryDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.MemoryDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_locator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufactorer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_width_) -
      reinterpret_cast<char*>(&size_)) + sizeof(data_width_));
  _internal_metadata_.Clear();
}

bool MemoryDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.MemoryDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_locator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_locator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_locator().data(), static_cast<int>(this->device_locator().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.device_locator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string form_factor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_form_factor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->form_factor().data(), static_cast<int>(this->form_factor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.form_factor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufactorer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactorer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.manufactorer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank().data(), static_cast<int>(this->bank().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.MemoryDevice.bank"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 data_width = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.MemoryDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.MemoryDevice)
  return false;
#undef DO_
}

void MemoryDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.MemoryDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_locator().data(), static_cast<int>(this->device_locator().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.device_locator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_locator(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // string form_factor = 5;
  if (this->form_factor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->form_factor().data(), static_cast<int>(this->form_factor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.form_factor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->form_factor(), output);
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serial_number(), output);
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->part_number(), output);
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufactorer().data(), static_cast<int>(this->manufactorer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.manufactorer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->manufactorer(), output);
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank().data(), static_cast<int>(this->bank().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.MemoryDevice.bank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bank(), output);
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_width(), output);
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->data_width(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.MemoryDevice)
}

size_t MemoryDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.MemoryDevice)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_locator = 1;
  if (this->device_locator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_locator());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string form_factor = 5;
  if (this->form_factor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->form_factor());
  }

  // string serial_number = 6;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // string manufactorer = 8;
  if (this->manufactorer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufactorer());
  }

  // string bank = 9;
  if (this->bank().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int32 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // int32 total_width = 10;
  if (this->total_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_width());
  }

  // int32 data_width = 11;
  if (this->data_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryDevice*>(&from));
}

void MemoryDevice::MergeFrom(const MemoryDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.MemoryDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_locator().size() > 0) {

    device_locator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_locator_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.form_factor().size() > 0) {

    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.manufactorer().size() > 0) {

    manufactorer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufactorer_);
  }
  if (from.bank().size() > 0) {

    bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.total_width() != 0) {
    set_total_width(from.total_width());
  }
  if (from.data_width() != 0) {
    set_data_width(from.data_width());
  }
}

void MemoryDevice::CopyFrom(const MemoryDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.MemoryDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDevice::IsInitialized() const {
  return true;
}

void MemoryDevice::Swap(MemoryDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDevice::InternalSwap(MemoryDevice* other) {
  using std::swap;
  device_locator_.Swap(&other->device_locator_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  form_factor_.Swap(&other->form_factor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  part_number_.Swap(&other->part_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufactorer_.Swap(&other->manufactorer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_.Swap(&other->bank_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(speed_, other->speed_);
  swap(total_width_, other->total_width_);
  swap(data_width_, other->data_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MemoryDevice::GetTypeName() const {
  return "aspia.system_info.dmi.MemoryDevice";
}


// ===================================================================

void OnBoardDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnBoardDevice::kDescriptionFieldNumber;
const int OnBoardDevice::kTypeFieldNumber;
const int OnBoardDevice::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnBoardDevice::OnBoardDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_OnBoardDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.OnBoardDevice)
}
OnBoardDevice::OnBoardDevice(const OnBoardDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.OnBoardDevice)
}

void OnBoardDevice::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
}

OnBoardDevice::~OnBoardDevice() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.OnBoardDevice)
  SharedDtor();
}

void OnBoardDevice::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnBoardDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnBoardDevice& OnBoardDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_OnBoardDevice.base);
  return *internal_default_instance();
}


void OnBoardDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.OnBoardDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

bool OnBoardDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.OnBoardDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.OnBoardDevice.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.OnBoardDevice.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::dmi::OnBoardDevice_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.OnBoardDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.OnBoardDevice)
  return false;
#undef DO_
}

void OnBoardDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.OnBoardDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.OnBoardDevice.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // .aspia.system_info.dmi.OnBoardDevice.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.OnBoardDevice)
}

size_t OnBoardDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.OnBoardDevice)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .aspia.system_info.dmi.OnBoardDevice.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool enabled = 3;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnBoardDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnBoardDevice*>(&from));
}

void OnBoardDevice::MergeFrom(const OnBoardDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.OnBoardDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void OnBoardDevice::CopyFrom(const OnBoardDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.OnBoardDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnBoardDevice::IsInitialized() const {
  return true;
}

void OnBoardDevice::Swap(OnBoardDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnBoardDevice::InternalSwap(OnBoardDevice* other) {
  using std::swap;
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string OnBoardDevice::GetTypeName() const {
  return "aspia.system_info.dmi.OnBoardDevice";
}


// ===================================================================

void PointingDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointingDevice::kDeviceTypeFieldNumber;
const int PointingDevice::kDeviceInterfaceFieldNumber;
const int PointingDevice::kButtonCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointingDevice::PointingDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_PointingDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.PointingDevice)
}
PointingDevice::PointingDevice(const PointingDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_count_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.PointingDevice)
}

void PointingDevice::SharedCtor() {
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
}

PointingDevice::~PointingDevice() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.PointingDevice)
  SharedDtor();
}

void PointingDevice::SharedDtor() {
}

void PointingDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointingDevice& PointingDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_PointingDevice.base);
  return *internal_default_instance();
}


void PointingDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.PointingDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_count_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(button_count_));
  _internal_metadata_.Clear();
}

bool PointingDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.PointingDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aspia.system_info.dmi.PointingDevice.Type device_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::aspia::system_info::dmi::PointingDevice_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.PointingDevice.Interface device_interface = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_interface(static_cast< ::aspia::system_info::dmi::PointingDevice_Interface >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 button_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &button_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.PointingDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.PointingDevice)
  return false;
#undef DO_
}

void PointingDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.PointingDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aspia.system_info.dmi.PointingDevice.Type device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // .aspia.system_info.dmi.PointingDevice.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_interface(), output);
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->button_count(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.PointingDevice)
}

size_t PointingDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.PointingDevice)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .aspia.system_info.dmi.PointingDevice.Type device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // .aspia.system_info.dmi.PointingDevice.Interface device_interface = 2;
  if (this->device_interface() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_interface());
  }

  // int32 button_count = 3;
  if (this->button_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->button_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointingDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointingDevice*>(&from));
}

void PointingDevice::MergeFrom(const PointingDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.PointingDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_interface() != 0) {
    set_device_interface(from.device_interface());
  }
  if (from.button_count() != 0) {
    set_button_count(from.button_count());
  }
}

void PointingDevice::CopyFrom(const PointingDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.PointingDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingDevice::IsInitialized() const {
  return true;
}

void PointingDevice::Swap(PointingDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointingDevice::InternalSwap(PointingDevice* other) {
  using std::swap;
  swap(device_type_, other->device_type_);
  swap(device_interface_, other->device_interface_);
  swap(button_count_, other->button_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PointingDevice::GetTypeName() const {
  return "aspia.system_info.dmi.PointingDevice";
}


// ===================================================================

void PortConnector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortConnector::kInternalDesignationFieldNumber;
const int PortConnector::kExternalDesignationFieldNumber;
const int PortConnector::kTypeFieldNumber;
const int PortConnector::kInternalConnectorTypeFieldNumber;
const int PortConnector::kExternalConnectorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortConnector::PortConnector()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_PortConnector.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.PortConnector)
}
PortConnector::PortConnector(const PortConnector& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_designation().size() > 0) {
    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_designation().size() > 0) {
    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  internal_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.internal_connector_type().size() > 0) {
    internal_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_connector_type_);
  }
  external_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.external_connector_type().size() > 0) {
    external_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_connector_type_);
  }
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.PortConnector)
}

void PortConnector::SharedCtor() {
  internal_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PortConnector::~PortConnector() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.PortConnector)
  SharedDtor();
}

void PortConnector::SharedDtor() {
  internal_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PortConnector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortConnector& PortConnector::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_PortConnector.base);
  return *internal_default_instance();
}


void PortConnector::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.PortConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_connector_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PortConnector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.PortConnector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string internal_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortConnector.internal_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_designation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_designation().data(), static_cast<int>(this->external_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortConnector.external_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortConnector.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string internal_connector_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_connector_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_connector_type().data(), static_cast<int>(this->internal_connector_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortConnector.internal_connector_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string external_connector_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_connector_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->external_connector_type().data(), static_cast<int>(this->external_connector_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortConnector.external_connector_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.PortConnector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.PortConnector)
  return false;
#undef DO_
}

void PortConnector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.PortConnector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_designation().data(), static_cast<int>(this->internal_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortConnector.internal_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->internal_designation(), output);
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_designation().data(), static_cast<int>(this->external_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortConnector.external_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->external_designation(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortConnector.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // string internal_connector_type = 4;
  if (this->internal_connector_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_connector_type().data(), static_cast<int>(this->internal_connector_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortConnector.internal_connector_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->internal_connector_type(), output);
  }

  // string external_connector_type = 5;
  if (this->external_connector_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->external_connector_type().data(), static_cast<int>(this->external_connector_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortConnector.external_connector_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->external_connector_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.PortConnector)
}

size_t PortConnector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.PortConnector)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string internal_designation = 1;
  if (this->internal_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_designation());
  }

  // string external_designation = 2;
  if (this->external_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_designation());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string internal_connector_type = 4;
  if (this->internal_connector_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_connector_type());
  }

  // string external_connector_type = 5;
  if (this->external_connector_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->external_connector_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortConnector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PortConnector*>(&from));
}

void PortConnector::MergeFrom(const PortConnector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.PortConnector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_designation().size() > 0) {

    internal_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_designation_);
  }
  if (from.external_designation().size() > 0) {

    external_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_designation_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.internal_connector_type().size() > 0) {

    internal_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_connector_type_);
  }
  if (from.external_connector_type().size() > 0) {

    external_connector_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_connector_type_);
  }
}

void PortConnector::CopyFrom(const PortConnector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.PortConnector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortConnector::IsInitialized() const {
  return true;
}

void PortConnector::Swap(PortConnector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortConnector::InternalSwap(PortConnector* other) {
  using std::swap;
  internal_designation_.Swap(&other->internal_designation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_designation_.Swap(&other->external_designation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  internal_connector_type_.Swap(&other->internal_connector_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  external_connector_type_.Swap(&other->external_connector_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PortConnector::GetTypeName() const {
  return "aspia.system_info.dmi.PortConnector";
}


// ===================================================================

void PortableBattery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortableBattery::kLocationFieldNumber;
const int PortableBattery::kManufacturerFieldNumber;
const int PortableBattery::kManufactureDateFieldNumber;
const int PortableBattery::kSerialNumberFieldNumber;
const int PortableBattery::kDeviceNameFieldNumber;
const int PortableBattery::kChemistryFieldNumber;
const int PortableBattery::kDesignCapacityFieldNumber;
const int PortableBattery::kDesignVoltageFieldNumber;
const int PortableBattery::kSbdsVersionNumberFieldNumber;
const int PortableBattery::kMaxErrorInBatteryDataFieldNumber;
const int PortableBattery::kSbdsSerialNumberFieldNumber;
const int PortableBattery::kSbdsManufactureDateFieldNumber;
const int PortableBattery::kSbdsDeviceChemistryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortableBattery::PortableBattery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_PortableBattery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.PortableBattery)
}
PortableBattery::PortableBattery(const PortableBattery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacture_date().size() > 0) {
    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_version_number().size() > 0) {
    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_serial_number().size() > 0) {
    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_manufacture_date().size() > 0) {
    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbds_device_chemistry().size() > 0) {
    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  ::memcpy(&chemistry_, &from.chemistry_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_error_in_battery_data_) -
    reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.PortableBattery)
}

void PortableBattery::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chemistry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
}

PortableBattery::~PortableBattery() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.PortableBattery)
  SharedDtor();
}

void PortableBattery::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PortableBattery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortableBattery& PortableBattery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_PortableBattery.base);
  return *internal_default_instance();
}


void PortableBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.PortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_version_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_manufacture_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbds_device_chemistry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chemistry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_error_in_battery_data_) -
      reinterpret_cast<char*>(&chemistry_)) + sizeof(max_error_in_battery_data_));
  _internal_metadata_.Clear();
}

bool PortableBattery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.PortableBattery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacture_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.PortableBattery.Chemistry chemistry = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chemistry(static_cast< ::aspia::system_info::dmi::PortableBattery_Chemistry >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 design_voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &design_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_version_number = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_version_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.sbds_version_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_error_in_battery_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_error_in_battery_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_serial_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.sbds_serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_manufacture_date = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_manufacture_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.sbds_manufacture_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sbds_device_chemistry = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbds_device_chemistry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.PortableBattery.sbds_device_chemistry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.PortableBattery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.PortableBattery)
  return false;
#undef DO_
}

void PortableBattery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.PortableBattery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacture_date().data(), static_cast<int>(this->manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacture_date(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_name(), output);
  }

  // .aspia.system_info.dmi.PortableBattery.Chemistry chemistry = 6;
  if (this->chemistry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->chemistry(), output);
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->design_capacity(), output);
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->design_voltage(), output);
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_version_number().data(), static_cast<int>(this->sbds_version_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.sbds_version_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sbds_version_number(), output);
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_error_in_battery_data(), output);
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_serial_number().data(), static_cast<int>(this->sbds_serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.sbds_serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sbds_serial_number(), output);
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_manufacture_date().data(), static_cast<int>(this->sbds_manufacture_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.sbds_manufacture_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sbds_manufacture_date(), output);
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbds_device_chemistry().data(), static_cast<int>(this->sbds_device_chemistry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.PortableBattery.sbds_device_chemistry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sbds_device_chemistry(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.PortableBattery)
}

size_t PortableBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.PortableBattery)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string manufacture_date = 3;
  if (this->manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacture_date());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string sbds_version_number = 9;
  if (this->sbds_version_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_version_number());
  }

  // string sbds_serial_number = 11;
  if (this->sbds_serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_serial_number());
  }

  // string sbds_manufacture_date = 12;
  if (this->sbds_manufacture_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_manufacture_date());
  }

  // string sbds_device_chemistry = 13;
  if (this->sbds_device_chemistry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbds_device_chemistry());
  }

  // .aspia.system_info.dmi.PortableBattery.Chemistry chemistry = 6;
  if (this->chemistry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chemistry());
  }

  // int32 design_capacity = 7;
  if (this->design_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_capacity());
  }

  // int32 design_voltage = 8;
  if (this->design_voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->design_voltage());
  }

  // int32 max_error_in_battery_data = 10;
  if (this->max_error_in_battery_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_error_in_battery_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortableBattery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PortableBattery*>(&from));
}

void PortableBattery::MergeFrom(const PortableBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.PortableBattery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.manufacture_date().size() > 0) {

    manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacture_date_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.sbds_version_number().size() > 0) {

    sbds_version_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_version_number_);
  }
  if (from.sbds_serial_number().size() > 0) {

    sbds_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_serial_number_);
  }
  if (from.sbds_manufacture_date().size() > 0) {

    sbds_manufacture_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_manufacture_date_);
  }
  if (from.sbds_device_chemistry().size() > 0) {

    sbds_device_chemistry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbds_device_chemistry_);
  }
  if (from.chemistry() != 0) {
    set_chemistry(from.chemistry());
  }
  if (from.design_capacity() != 0) {
    set_design_capacity(from.design_capacity());
  }
  if (from.design_voltage() != 0) {
    set_design_voltage(from.design_voltage());
  }
  if (from.max_error_in_battery_data() != 0) {
    set_max_error_in_battery_data(from.max_error_in_battery_data());
  }
}

void PortableBattery::CopyFrom(const PortableBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.PortableBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortableBattery::IsInitialized() const {
  return true;
}

void PortableBattery::Swap(PortableBattery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortableBattery::InternalSwap(PortableBattery* other) {
  using std::swap;
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacture_date_.Swap(&other->manufacture_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sbds_version_number_.Swap(&other->sbds_version_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sbds_serial_number_.Swap(&other->sbds_serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sbds_manufacture_date_.Swap(&other->sbds_manufacture_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sbds_device_chemistry_.Swap(&other->sbds_device_chemistry_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chemistry_, other->chemistry_);
  swap(design_capacity_, other->design_capacity_);
  swap(design_voltage_, other->design_voltage_);
  swap(max_error_in_battery_data_, other->max_error_in_battery_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PortableBattery::GetTypeName() const {
  return "aspia.system_info.dmi.PortableBattery";
}


// ===================================================================

void Processor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Processor::kManufacturerFieldNumber;
const int Processor::kVersionFieldNumber;
const int Processor::kFamilyFieldNumber;
const int Processor::kTypeFieldNumber;
const int Processor::kStatusFieldNumber;
const int Processor::kSocketFieldNumber;
const int Processor::kUpgradeFieldNumber;
const int Processor::kExternalClockFieldNumber;
const int Processor::kCurrentSpeedFieldNumber;
const int Processor::kMaximumSpeedFieldNumber;
const int Processor::kVoltageFieldNumber;
const int Processor::kSerialNumberFieldNumber;
const int Processor::kAssetTagFieldNumber;
const int Processor::kPartNumberFieldNumber;
const int Processor::kCoreCountFieldNumber;
const int Processor::kCoreEnabledFieldNumber;
const int Processor::kThreadCountFieldNumber;
const int Processor::kCharacteristicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Processor::Processor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Processor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Processor)
}
Processor::Processor(const Processor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.family().size() > 0) {
    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket().size() > 0) {
    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  upgrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upgrade().size() > 0) {
    upgrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset_tag().size() > 0) {
    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&characteristics_) -
    reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Processor)
}

void Processor::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
}

Processor::~Processor() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Processor)
  SharedDtor();
}

void Processor::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Processor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Processor& Processor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Processor.base);
  return *internal_default_instance();
}


void Processor::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Processor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&characteristics_) -
      reinterpret_cast<char*>(&type_)) + sizeof(characteristics_));
  _internal_metadata_.Clear();
}

bool Processor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Processor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family().data(), static_cast<int>(this->family().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.family"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Processor.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aspia::system_info::dmi::Processor_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.Processor.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::aspia::system_info::dmi::Processor_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string socket = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket().data(), static_cast<int>(this->socket().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.socket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upgrade = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgrade()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upgrade().data(), static_cast<int>(this->upgrade().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.upgrade"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 external_clock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_clock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maximum_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.asset_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), static_cast<int>(this->part_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.Processor.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 core_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &core_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thread_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 characteristics = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &characteristics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Processor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Processor)
  return false;
#undef DO_
}

void Processor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Processor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string family = 3;
  if (this->family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family().data(), static_cast<int>(this->family().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->family(), output);
  }

  // .aspia.system_info.dmi.Processor.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .aspia.system_info.dmi.Processor.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket().data(), static_cast<int>(this->socket().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.socket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket(), output);
  }

  // string upgrade = 7;
  if (this->upgrade().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upgrade().data(), static_cast<int>(this->upgrade().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.upgrade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->upgrade(), output);
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->external_clock(), output);
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->current_speed(), output);
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maximum_speed(), output);
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voltage(), output);
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->serial_number(), output);
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_tag().data(), static_cast<int>(this->asset_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.asset_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->asset_tag(), output);
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), static_cast<int>(this->part_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.Processor.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->part_number(), output);
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->core_count(), output);
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->core_enabled(), output);
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->thread_count(), output);
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->characteristics(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Processor)
}

size_t Processor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Processor)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string family = 3;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family());
  }

  // string socket = 6;
  if (this->socket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket());
  }

  // string upgrade = 7;
  if (this->upgrade().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upgrade());
  }

  // string serial_number = 12;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string asset_tag = 13;
  if (this->asset_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_tag());
  }

  // string part_number = 14;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // .aspia.system_info.dmi.Processor.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .aspia.system_info.dmi.Processor.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 external_clock = 8;
  if (this->external_clock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->external_clock());
  }

  // int32 current_speed = 9;
  if (this->current_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_speed());
  }

  // double voltage = 11;
  if (this->voltage() != 0) {
    total_size += 1 + 8;
  }

  // int32 maximum_speed = 10;
  if (this->maximum_speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maximum_speed());
  }

  // int32 core_count = 15;
  if (this->core_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_count());
  }

  // int32 core_enabled = 16;
  if (this->core_enabled() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->core_enabled());
  }

  // int32 thread_count = 17;
  if (this->thread_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_count());
  }

  // uint32 characteristics = 18;
  if (this->characteristics() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->characteristics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Processor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Processor*>(&from));
}

void Processor::MergeFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Processor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.socket().size() > 0) {

    socket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_);
  }
  if (from.upgrade().size() > 0) {

    upgrade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.asset_tag().size() > 0) {

    asset_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_tag_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.external_clock() != 0) {
    set_external_clock(from.external_clock());
  }
  if (from.current_speed() != 0) {
    set_current_speed(from.current_speed());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.maximum_speed() != 0) {
    set_maximum_speed(from.maximum_speed());
  }
  if (from.core_count() != 0) {
    set_core_count(from.core_count());
  }
  if (from.core_enabled() != 0) {
    set_core_enabled(from.core_enabled());
  }
  if (from.thread_count() != 0) {
    set_thread_count(from.thread_count());
  }
  if (from.characteristics() != 0) {
    set_characteristics(from.characteristics());
  }
}

void Processor::CopyFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Processor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor::IsInitialized() const {
  return true;
}

void Processor::Swap(Processor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Processor::InternalSwap(Processor* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  family_.Swap(&other->family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  socket_.Swap(&other->socket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  upgrade_.Swap(&other->upgrade_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_tag_.Swap(&other->asset_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  part_number_.Swap(&other->part_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(external_clock_, other->external_clock_);
  swap(current_speed_, other->current_speed_);
  swap(voltage_, other->voltage_);
  swap(maximum_speed_, other->maximum_speed_);
  swap(core_count_, other->core_count_);
  swap(core_enabled_, other->core_enabled_);
  swap(thread_count_, other->thread_count_);
  swap(characteristics_, other->characteristics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Processor::GetTypeName() const {
  return "aspia.system_info.dmi.Processor";
}


// ===================================================================

void System::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int System::kManufacturerFieldNumber;
const int System::kProductNameFieldNumber;
const int System::kVersionFieldNumber;
const int System::kSerialNumberFieldNumber;
const int System::kUuidFieldNumber;
const int System::kWakeupTypeFieldNumber;
const int System::kSkuNumberFieldNumber;
const int System::kFamilyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

System::System()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_System.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.System)
}
System::System(const System& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  sku_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sku_number().size() > 0) {
    sku_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sku_number_);
  }
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.family().size() > 0) {
    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  wakeup_type_ = from.wakeup_type_;
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.System)
}

void System::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakeup_type_ = 0;
}

System::~System() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.System)
  SharedDtor();
}

void System::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void System::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const System& System::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_System.base);
  return *internal_default_instance();
}


void System::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sku_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wakeup_type_ = 0;
  _internal_metadata_.Clear();
}

bool System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.System)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.System.WakeupType wakeup_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wakeup_type(static_cast< ::aspia::system_info::dmi::System_WakeupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sku_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sku_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sku_number().data(), static_cast<int>(this->sku_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.sku_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string family = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family().data(), static_cast<int>(this->family().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.System.family"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.System)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.System)
  return false;
#undef DO_
}

void System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serial_number(), output);
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uuid(), output);
  }

  // .aspia.system_info.dmi.System.WakeupType wakeup_type = 6;
  if (this->wakeup_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->wakeup_type(), output);
  }

  // string sku_number = 7;
  if (this->sku_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sku_number().data(), static_cast<int>(this->sku_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.sku_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sku_number(), output);
  }

  // string family = 8;
  if (this->family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family().data(), static_cast<int>(this->family().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.System.family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->family(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.System)
}

size_t System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.System)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string product_name = 2;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string serial_number = 4;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string sku_number = 7;
  if (this->sku_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sku_number());
  }

  // string family = 8;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family());
  }

  // .aspia.system_info.dmi.System.WakeupType wakeup_type = 6;
  if (this->wakeup_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wakeup_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void System::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System*>(&from));
}

void System::MergeFrom(const System& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.System)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.sku_number().size() > 0) {

    sku_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sku_number_);
  }
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.wakeup_type() != 0) {
    set_wakeup_type(from.wakeup_type());
  }
}

void System::CopyFrom(const System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System::IsInitialized() const {
  return true;
}

void System::Swap(System* other) {
  if (other == this) return;
  InternalSwap(other);
}
void System::InternalSwap(System* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_name_.Swap(&other->product_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sku_number_.Swap(&other->sku_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  family_.Swap(&other->family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wakeup_type_, other->wakeup_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string System::GetTypeName() const {
  return "aspia.system_info.dmi.System";
}


// ===================================================================

void SystemSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemSlot::kSlotDesignationFieldNumber;
const int SystemSlot::kTypeFieldNumber;
const int SystemSlot::kUsageFieldNumber;
const int SystemSlot::kBusWidthFieldNumber;
const int SystemSlot::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemSlot::SystemSlot()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_SystemSlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.SystemSlot)
}
SystemSlot::SystemSlot(const SystemSlot& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slot_designation().size() > 0) {
    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.SystemSlot)
}

void SystemSlot::SharedCtor() {
  slot_designation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(length_));
}

SystemSlot::~SystemSlot() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.SystemSlot)
  SharedDtor();
}

void SystemSlot::SharedDtor() {
  slot_designation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSlot& SystemSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_SystemSlot.base);
  return *internal_default_instance();
}


void SystemSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.SystemSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_designation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool SystemSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.SystemSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string slot_designation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_designation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.SystemSlot.slot_designation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aspia.system_info.dmi.SystemSlot.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.SystemSlot.Usage usage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_usage(static_cast< ::aspia::system_info::dmi::SystemSlot_Usage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.SystemSlot.BusWidth bus_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bus_width(static_cast< ::aspia::system_info::dmi::SystemSlot_BusWidth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aspia.system_info.dmi.SystemSlot.Length length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_length(static_cast< ::aspia::system_info::dmi::SystemSlot_Length >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.SystemSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.SystemSlot)
  return false;
#undef DO_
}

void SystemSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.SystemSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_designation().data(), static_cast<int>(this->slot_designation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.SystemSlot.slot_designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slot_designation(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aspia.system_info.dmi.SystemSlot.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // .aspia.system_info.dmi.SystemSlot.Usage usage = 3;
  if (this->usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usage(), output);
  }

  // .aspia.system_info.dmi.SystemSlot.BusWidth bus_width = 4;
  if (this->bus_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bus_width(), output);
  }

  // .aspia.system_info.dmi.SystemSlot.Length length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->length(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.SystemSlot)
}

size_t SystemSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.SystemSlot)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string slot_designation = 1;
  if (this->slot_designation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slot_designation());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .aspia.system_info.dmi.SystemSlot.Usage usage = 3;
  if (this->usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
  }

  // .aspia.system_info.dmi.SystemSlot.BusWidth bus_width = 4;
  if (this->bus_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bus_width());
  }

  // .aspia.system_info.dmi.SystemSlot.Length length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSlot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemSlot*>(&from));
}

void SystemSlot::MergeFrom(const SystemSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.SystemSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_designation().size() > 0) {

    slot_designation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_designation_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.usage() != 0) {
    set_usage(from.usage());
  }
  if (from.bus_width() != 0) {
    set_bus_width(from.bus_width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void SystemSlot::CopyFrom(const SystemSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.SystemSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSlot::IsInitialized() const {
  return true;
}

void SystemSlot::Swap(SystemSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemSlot::InternalSwap(SystemSlot* other) {
  using std::swap;
  slot_designation_.Swap(&other->slot_designation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usage_, other->usage_);
  swap(bus_width_, other->bus_width_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemSlot::GetTypeName() const {
  return "aspia.system_info.dmi.SystemSlot";
}


// ===================================================================

void Dmi::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dmi::kBiosFieldNumber;
const int Dmi::kCacheFieldNumber;
const int Dmi::kChassisFieldNumber;
const int Dmi::kMemoryDeviceFieldNumber;
const int Dmi::kOnboardDeviceFieldNumber;
const int Dmi::kPointingDeviceFieldNumber;
const int Dmi::kPortConnectorFieldNumber;
const int Dmi::kPortableBatteryFieldNumber;
const int Dmi::kProcessorFieldNumber;
const int Dmi::kSystemFieldNumber;
const int Dmi::kSystemSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dmi::Dmi()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dmi_2eproto::scc_info_Dmi.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aspia.system_info.dmi.Dmi)
}
Dmi::Dmi(const Dmi& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      bios_(from.bios_),
      cache_(from.cache_),
      chassis_(from.chassis_),
      memory_device_(from.memory_device_),
      onboard_device_(from.onboard_device_),
      pointing_device_(from.pointing_device_),
      port_connector_(from.port_connector_),
      portable_battery_(from.portable_battery_),
      processor_(from.processor_),
      system_(from.system_),
      system_slot_(from.system_slot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aspia.system_info.dmi.Dmi)
}

void Dmi::SharedCtor() {
}

Dmi::~Dmi() {
  // @@protoc_insertion_point(destructor:aspia.system_info.dmi.Dmi)
  SharedDtor();
}

void Dmi::SharedDtor() {
}

void Dmi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dmi& Dmi::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dmi_2eproto::scc_info_Dmi.base);
  return *internal_default_instance();
}


void Dmi::Clear() {
// @@protoc_insertion_point(message_clear_start:aspia.system_info.dmi.Dmi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bios_.Clear();
  cache_.Clear();
  chassis_.Clear();
  memory_device_.Clear();
  onboard_device_.Clear();
  pointing_device_.Clear();
  port_connector_.Clear();
  portable_battery_.Clear();
  processor_.Clear();
  system_.Clear();
  system_slot_.Clear();
  _internal_metadata_.Clear();
}

bool Dmi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:aspia.system_info.dmi.Dmi)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aspia.system_info.dmi.Bios bios = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.Cache cache = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.Chassis chassis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.MemoryDevice memory_device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_memory_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.OnBoardDevice onboard_device = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_onboard_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.PointingDevice pointing_device = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pointing_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.PortConnector port_connector = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_port_connector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.PortableBattery portable_battery = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_portable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.Processor processor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_processor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.System system = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aspia.system_info.dmi.SystemSlot system_slot = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_system_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aspia.system_info.dmi.Dmi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aspia.system_info.dmi.Dmi)
  return false;
#undef DO_
}

void Dmi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aspia.system_info.dmi.Dmi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aspia.system_info.dmi.Bios bios = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bios_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->bios(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.Cache cache = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cache_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->cache(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.Chassis chassis = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chassis_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->chassis(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.MemoryDevice memory_device = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_device_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->memory_device(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.OnBoardDevice onboard_device = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->onboard_device_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->onboard_device(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.PointingDevice pointing_device = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pointing_device_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->pointing_device(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.PortConnector port_connector = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->port_connector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->port_connector(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.PortableBattery portable_battery = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->portable_battery_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->portable_battery(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.Processor processor = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->processor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->processor(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.System system = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10,
      this->system(static_cast<int>(i)),
      output);
  }

  // repeated .aspia.system_info.dmi.SystemSlot system_slot = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_slot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11,
      this->system_slot(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:aspia.system_info.dmi.Dmi)
}

size_t Dmi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aspia.system_info.dmi.Dmi)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .aspia.system_info.dmi.Bios bios = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bios_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bios(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.Cache cache = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cache_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cache(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.Chassis chassis = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chassis_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chassis(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.MemoryDevice memory_device = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->memory_device_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->memory_device(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.OnBoardDevice onboard_device = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->onboard_device_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->onboard_device(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.PointingDevice pointing_device = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->pointing_device_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pointing_device(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.PortConnector port_connector = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->port_connector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->port_connector(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.PortableBattery portable_battery = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->portable_battery_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->portable_battery(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.Processor processor = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->processor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->processor(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.System system = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->system_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->system(static_cast<int>(i)));
    }
  }

  // repeated .aspia.system_info.dmi.SystemSlot system_slot = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->system_slot_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->system_slot(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dmi::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dmi*>(&from));
}

void Dmi::MergeFrom(const Dmi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aspia.system_info.dmi.Dmi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bios_.MergeFrom(from.bios_);
  cache_.MergeFrom(from.cache_);
  chassis_.MergeFrom(from.chassis_);
  memory_device_.MergeFrom(from.memory_device_);
  onboard_device_.MergeFrom(from.onboard_device_);
  pointing_device_.MergeFrom(from.pointing_device_);
  port_connector_.MergeFrom(from.port_connector_);
  portable_battery_.MergeFrom(from.portable_battery_);
  processor_.MergeFrom(from.processor_);
  system_.MergeFrom(from.system_);
  system_slot_.MergeFrom(from.system_slot_);
}

void Dmi::CopyFrom(const Dmi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aspia.system_info.dmi.Dmi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dmi::IsInitialized() const {
  return true;
}

void Dmi::Swap(Dmi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dmi::InternalSwap(Dmi* other) {
  using std::swap;
  CastToBase(&bios_)->InternalSwap(CastToBase(&other->bios_));
  CastToBase(&cache_)->InternalSwap(CastToBase(&other->cache_));
  CastToBase(&chassis_)->InternalSwap(CastToBase(&other->chassis_));
  CastToBase(&memory_device_)->InternalSwap(CastToBase(&other->memory_device_));
  CastToBase(&onboard_device_)->InternalSwap(CastToBase(&other->onboard_device_));
  CastToBase(&pointing_device_)->InternalSwap(CastToBase(&other->pointing_device_));
  CastToBase(&port_connector_)->InternalSwap(CastToBase(&other->port_connector_));
  CastToBase(&portable_battery_)->InternalSwap(CastToBase(&other->portable_battery_));
  CastToBase(&processor_)->InternalSwap(CastToBase(&other->processor_));
  CastToBase(&system_)->InternalSwap(CastToBase(&other->system_));
  CastToBase(&system_slot_)->InternalSwap(CastToBase(&other->system_slot_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Dmi::GetTypeName() const {
  return "aspia.system_info.dmi.Dmi";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dmi
}  // namespace system_info
}  // namespace aspia
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Bios_Characteristics* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Bios_Characteristics >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Bios_Characteristics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Bios* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Bios >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Bios >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Cache* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Cache >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Cache >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Chassis* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Chassis >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Chassis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::MemoryDevice* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::MemoryDevice >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::MemoryDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::OnBoardDevice* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::OnBoardDevice >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::OnBoardDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::PointingDevice* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::PointingDevice >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::PointingDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::PortConnector* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::PortConnector >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::PortConnector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::PortableBattery* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::PortableBattery >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::PortableBattery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Processor* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Processor >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Processor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::System* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::System >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::System >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::SystemSlot* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::SystemSlot >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::SystemSlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aspia::system_info::dmi::Dmi* Arena::CreateMaybeMessage< ::aspia::system_info::dmi::Dmi >(Arena* arena) {
  return Arena::CreateInternal< ::aspia::system_info::dmi::Dmi >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
